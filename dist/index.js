(()=>{"use strict";var e={477:e=>{e.exports=function(e,t,i,n){var r=self||window;try{try{var o;try{o=new r.Blob([e])}catch(t){(o=new(r.BlobBuilder||r.WebKitBlobBuilder||r.MozBlobBuilder||r.MSBlobBuilder)).append(e),o=o.getBlob()}var s=r.URL||r.webkitURL,a=s.createObjectURL(o),l=new r[t](a,i);return s.revokeObjectURL(a),l}catch(n){return new r[t]("data:application/javascript,".concat(encodeURIComponent(e)),i)}}catch(e){if(!n)throw Error("Inline worker is not supported");return new r[t](n,i)}}},184:(e,t,i)=>{i.r(t),i.d(t,{AttributeLocations:()=>ae,BasicGroup:()=>Ee,BinaryHeap:()=>se,BinaryLoader:()=>C,Classification:()=>le,ClipMethod:()=>he,ClipTask:()=>ue,DEM:()=>x,DEMNode:()=>y,EptBinaryLoader:()=>G,EptLaszipLoader:()=>H,EptLoader:()=>q,Global:()=>h,Gradients:()=>Z,GreyhoundBinaryLoader:()=>E,GreyhoundLoader:()=>N,GreyhoundUtils:()=>B,Group:()=>Be,HelperUtils:()=>K,LASLAZLoader:()=>O,LASLoader:()=>R,LRU:()=>r,POCLoader:()=>V,PointAttribute:()=>g,PointAttributeNames:()=>p,PointAttributeTypes:()=>c,PointAttributes:()=>v,PointCloudArena4D:()=>ne,PointCloudArena4DGeometry:()=>oe,PointCloudEptGeometry:()=>j,PointCloudEptGeometryNode:()=>X,PointCloudGreyhoundGeometry:()=>w,PointCloudMaterial:()=>Q,PointCloudOctree:()=>te,PointCloudOctreeGeometry:()=>U,PointCloudOctreeGeometryNode:()=>F,PointCloudTree:()=>S,PointColorType:()=>ce,PointShape:()=>pe,PointSizeType:()=>de,Points:()=>Se,Shader:()=>_e,Shaders:()=>J,TreeType:()=>fe,VERSION:()=>be,VersionUtils:()=>_,WebGLBuffer:()=>Ae,WebGLTexture:()=>Te,WorkerManager:()=>u,XHRFactory:()=>A,loadPointCloud:()=>ge,updatePointClouds:()=>ye,updateVisibility:()=>ve,updateVisibilityStructures:()=>xe});class n{constructor(e){this.previous=null,this.next=null,this.node=e}}class r{constructor(){this.first=null,this.last=null,this.items={},this.elements=0,this.numPoints=0}size(){return this.elements}contains(e){return null==this.items[e.id]}touch(e){var t;e.loaded&&(null==this.items[e.id]?((t=new n(e)).previous=this.last,this.last=t,null!==t.previous&&(t.previous.next=t),this.items[e.id]=t,this.elements++,null===this.first&&(this.first=t),this.numPoints+=e.numPoints):null===(t=this.items[e.id]).previous?null!==t.next&&(this.first=t.next,this.first.previous=null,t.previous=this.last,t.next=null,this.last=t,t.previous.next=t):null!==t.next&&(t.previous.next=t.next,t.next.previous=t.previous,t.previous=this.last,t.next=null,this.last=t,t.previous.next=t))}remove(e){var t=this.items[e.id];t&&(1===this.elements?(this.first=null,this.last=null):(t.previous||(this.first=t.next,this.first.previous=null),t.next||(this.last=t.previous,this.last.next=null),t.previous&&t.next&&(t.previous.next=t.next,t.next.previous=t.previous)),delete this.items[e.id],this.elements--,this.numPoints-=e.numPoints)}getLRUItem(){return null===this.first?null:this.first.node}toString(){for(var e="{ ",t=this.first;null!==t;)e+=t.node.id,null!==t.next&&(e+=", "),t=t.next;return(e+="}")+"("+this.size()+")"}freeMemory(){if(!(this.elements<=1))for(;this.numPoints>h.pointLoadLimit;){var e=this.first.node;this.disposeDescendants(e)}}disposeDescendants(e){var t=[];for(t.push(e);t.length>0;){var i=t.pop();for(var n in i.dispose(),this.remove(i),i.children)i.children.hasOwnProperty(n)&&i.children[n].loaded&&t.push(i.children[n])}}}var o=i(477),s=i.n(o);function a(){return s()('(()=>{"use strict";function e(e){this.buffer=e,this.u8=new Uint8Array(e);var t=new ArrayBuffer(4),r=new Float32Array(t),i=new Uint8Array(t);this.getUint32=function(e){return this.u8[e+3]<<24|this.u8[e+2]<<16|this.u8[e+1]<<8|this.u8[e]},this.getUint16=function(e){return this.u8[e+1]<<8|this.u8[e]},this.getFloat32=function(e){return i[0]=this.u8[e+0],i[1]=this.u8[e+1],i[2]=this.u8[e+2],i[3]=this.u8[e+3],r[0]},this.getUint8=function(e){return this.u8[e]}}function t(e){this.version=e;var t=-1===e.indexOf(".")?e.length:e.indexOf(".");this.versionMajor=parseInt(e.substr(0,t)),this.versionMinor=parseInt(e.substr(t+1)),0===this.versionMinor.length&&(this.versionMinor=0)}onmessage=function(r){if(r.data&&r.data.buffer)try{var i=r.data.buffer,n=r.data.pointAttributes,s=i.byteLength/n.byteSize,A=new e(i),T=new t(r.data.version),u=r.data.offset,o=r.data.scale,f=(r.data.spacing,r.data.hasChildren,r.data.name,[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY]),h=[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY],_=[0,0,0],I={},b=0;for(var N of n.attributes){if(N.name===a.POSITION_CARTESIAN.name){for(var E=new ArrayBuffer(4*s*3),y=new Float32Array(E),S=0;S<s;S++)T.newerThan("1.3")?(L=A.getUint32(b+S*n.byteSize+0,!0)*o,C=A.getUint32(b+S*n.byteSize+4,!0)*o,d=A.getUint32(b+S*n.byteSize+8,!0)*o):(L=A.getFloat32(S*n.byteSize+0,!0)+u[0],C=A.getFloat32(S*n.byteSize+4,!0)+u[1],d=A.getFloat32(S*n.byteSize+8,!0)+u[2]),y[3*S+0]=L,y[3*S+1]=C,y[3*S+2]=d,_[0]+=L/s,_[1]+=C/s,_[2]+=d/s,f[0]=Math.min(f[0],L),f[1]=Math.min(f[1],C),f[2]=Math.min(f[2],d),h[0]=Math.max(h[0],L),h[1]=Math.max(h[1],C),h[2]=Math.max(h[2],d);I[N.name]={buffer:E,attribute:N}}else if(N.name===a.COLOR_PACKED.name){E=new ArrayBuffer(4*s);var m=new Uint8Array(E);for(S=0;S<s;S++)m[4*S+0]=A.getUint8(b+S*n.byteSize+0),m[4*S+1]=A.getUint8(b+S*n.byteSize+1),m[4*S+2]=A.getUint8(b+S*n.byteSize+2);I[N.name]={buffer:E,attribute:N}}else if(N.name===a.INTENSITY.name){E=new ArrayBuffer(4*s);var P=new Float32Array(E);for(S=0;S<s;S++){var M=A.getUint16(b+S*n.byteSize,!0);P[S]=M}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.CLASSIFICATION.name){E=new ArrayBuffer(s);var w=new Uint8Array(E);for(S=0;S<s;S++){var l=A.getUint8(b+S*n.byteSize);w[S]=l}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.NORMAL_SPHEREMAPPED.name){E=new ArrayBuffer(4*s*3);var z=new Float32Array(E);for(S=0;S<s;S++){var O=A.getUint8(b+S*n.byteSize+0),U=A.getUint8(b+S*n.byteSize+1),D=O/255*2-1,g=U/255*2-1,v=1,Y=D*-D+g*-g+1*v;v=Y,D*=Math.sqrt(Y),g*=Math.sqrt(Y),D*=2,g*=2,v=2*v-1,z[3*S+0]=D,z[3*S+1]=g,z[3*S+2]=v}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.NORMAL_OCT16.name){for(E=new ArrayBuffer(4*s*3),z=new Float32Array(E),S=0;S<s;S++){O=A.getUint8(b+S*n.byteSize+0),U=A.getUint8(b+S*n.byteSize+1);var F=O/255*2-1,R=U/255*2-1,d=1-Math.abs(F)-Math.abs(R),L=0,C=0;d>=0?(L=F,C=R):(L=-(R/Math.sign(R)-1)/Math.sign(F),C=-(F/Math.sign(F)-1)/Math.sign(R));var p=Math.sqrt(L*L+C*C+d*d);L/=p,C/=p,d/=p,z[3*S+0]=L,z[3*S+1]=C,z[3*S+2]=d}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.NORMAL.name){for(E=new ArrayBuffer(4*s*3),z=new Float32Array(E),S=0;S<s;S++)L=A.getFloat32(b+S*n.byteSize+0,!0),C=A.getFloat32(b+S*n.byteSize+4,!0),d=A.getFloat32(b+S*n.byteSize+8,!0),z[3*S+0]=L,z[3*S+1]=C,z[3*S+2]=d;I[N.name]={buffer:E,attribute:N}}b+=N.byteSize}E=new ArrayBuffer(4*s);for(var B=new Uint32Array(E),c=0;c<s;c++)B[c]=c;I[a.INDICES.name]={buffer:E,attribute:a.INDICES};var x={buffer:i,mean:_,attributeBuffers:I,tightBoundingBox:{min:f,max:h}},G=[];for(var V in x.attributeBuffers)G.push(x.attributeBuffers[V].buffer);G.push(i),postMessage(x,G)}catch(e){postMessage({error:"Exeption thrown during execution."})}},t.prototype.newerThan=function(e){var r=new t(e);return this.versionMajor>r.versionMajor||this.versionMajor===r.versionMajor&&this.versionMinor>r.versionMinor};var r={DATA_TYPE_DOUBLE:{ordinal:0,size:8},DATA_TYPE_FLOAT:{ordinal:1,size:4},DATA_TYPE_INT8:{ordinal:2,size:1},DATA_TYPE_UINT8:{ordinal:3,size:1},DATA_TYPE_INT16:{ordinal:4,size:2},DATA_TYPE_UINT16:{ordinal:5,size:2},DATA_TYPE_INT32:{ordinal:6,size:4},DATA_TYPE_UINT32:{ordinal:7,size:4},DATA_TYPE_INT64:{ordinal:8,size:8},DATA_TYPE_UINT64:{ordinal:9,size:8}},i=0;for(var n in r)r[i]=r[n],i++;function a(e,t,r){this.name=e,this.type=t,this.numElements=r,this.byteSize=this.numElements*this.type.size}function s(e){if(this.attributes=[],this.byteSize=0,this.size=0,null!=e)for(var t=0;t<e.length;t++){var r=a[e[t]];this.attributes.push(r),this.byteSize+=r.byteSize,this.size++}}a.POSITION_CARTESIAN=new a(0,r.DATA_TYPE_FLOAT,3),a.RGBA_PACKED=new a(1,r.DATA_TYPE_INT8,4),a.COLOR_PACKED=a.RGBA_PACKED,a.RGB_PACKED=new a(1,r.DATA_TYPE_INT8,3),a.NORMAL_FLOATS=new a(4,r.DATA_TYPE_FLOAT,3),a.FILLER_1B=new a(5,r.DATA_TYPE_UINT8,1),a.INTENSITY=new a(6,r.DATA_TYPE_UINT16,1),a.CLASSIFICATION=new a(7,r.DATA_TYPE_UINT8,1),a.NORMAL_SPHEREMAPPED=new a(8,r.DATA_TYPE_UINT8,2),a.NORMAL_OCT16=new a(9,r.DATA_TYPE_UINT8,2),a.NORMAL=new a(10,r.DATA_TYPE_FLOAT,3),a.RETURN_NUMBER=new a(11,r.DATA_TYPE_UINT8,1),a.NUMBER_OF_RETURNS=new a(12,r.DATA_TYPE_UINT8,1),a.SOURCE_ID=new a(13,r.DATA_TYPE_UINT8,1),a.INDICES=new a(14,r.DATA_TYPE_UINT32,1),a.SPACING=new a(15,r.DATA_TYPE_FLOAT,1),s.prototype.add=function(e){this.attributes.push(e),this.byteSize+=e.byteSize,this.size++},s.prototype.hasColors=function(){for(var e in this.attributes)if(1===this.attributes[e].name)return!0;return!1},s.prototype.hasNormals=function(){for(var e in this.attributes){var t=this.attributes[e];if(t===a.NORMAL_SPHEREMAPPED||t===a.NORMAL_FLOATS||t===a.NORMAL||t===a.NORMAL_OCT16)return!0}return!1}})();\n',"Worker",void 0,void 0)}function l(){return s()('(()=>{"use strict";onmessage=function(a){if(a.data&&a.data.buffer){for(var r=a.data.buffer,n=a.data.numPoints,t=a.data.pointSize,e=a.data.pointFormatID,i=a.data.scale,m=a.data.offset,f=(new Uint8Array(r),new DataView(r)),I=new ArrayBuffer(40*n),u=(new DataView(I),{min:[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY],max:[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY]}),o=[0,0,0],s=new ArrayBuffer(3*n*4),N=new ArrayBuffer(4*n),w=new ArrayBuffer(4*n),A=new ArrayBuffer(n),y=new ArrayBuffer(n),d=new ArrayBuffer(n),g=new ArrayBuffer(2*n),U=new Float32Array(s),c=new Uint8Array(N),b=new Float32Array(w),T=new Uint8Array(A),x=new Uint8Array(y),B=new Uint8Array(d),v=new Uint16Array(g),E=0;E<n;E++){var F=f.getInt32(E*t+0,!0),V=f.getInt32(E*t+4,!0),h=f.getInt32(E*t+8,!0),l=F*i[0]+m[0]-a.data.mins[0],p=V*i[1]+m[1]-a.data.mins[1],M=h*i[2]+m[2]-a.data.mins[2];U[3*E+0]=l,U[3*E+1]=p,U[3*E+2]=M,o[0]+=l/n,o[1]+=p/n,o[2]+=M/n,u.min[0]=Math.min(u.min[0],l),u.min[1]=Math.min(u.min[1],p),u.min[2]=Math.min(u.min[2],M),u.max[0]=Math.max(u.max[0],l),u.max[1]=Math.max(u.max[1],p),u.max[2]=Math.max(u.max[2],M);var S=f.getUint16(E*t+12,!0);b[E]=S;var Y=f.getUint8(E*t+14,!0),_=7&Y,D=(56&Y)>>3;x[E]=_,B[E]=D;var O=f.getUint8(E*t+15,!0);T[E]=O;var P=f.getUint16(E*t+18,!0);if(v[E]=P,2===e){var G=f.getUint16(E*t+20,!0)/256,R=f.getUint16(E*t+22,!0)/256,z=f.getUint16(E*t+24,!0)/256;c[4*E+0]=G,c[4*E+1]=R,c[4*E+2]=z,c[4*E+3]=255}}var j=new ArrayBuffer(4*n),k=new Uint32Array(j);for(E=0;E<n;E++)k[E]=E;var q={mean:o,position:s,color:N,intensity:w,classification:A,returnNumber:y,numberOfReturns:d,pointSourceID:g,tightBoundingBox:u,indices:j};postMessage(q,[q.position,q.color,q.intensity,q.classification,q.returnNumber,q.numberOfReturns,q.pointSourceID,q.indices])}}})();\n',"Worker",void 0,void 0)}class u{constructor(){this.workers=[];for(var e=0;e<7;e++)this.workers.push([])}getWorker(e){if(this.workers[e].length>0)return this.workers[e].pop();switch(e){case 0:return new a;case 1:throw new Error("LASLAZWorker not implemented");case 2:return new l;case 3:throw new Error("GreyhoundBinaryDecoderWorker not implemented");case 4:throw new Error("DEMWorker not implemented");case 5:throw new Error("EptLaszipDecoderWorker not implemented");case 6:throw new Error("EptBinaryDecoderWorker not implemented");default:throw"Unknown worker requested"}}returnWorker(e,t){this.workers[e].push(t)}runTask(e,t,i,n){var r=this,o=this.getWorker(e);o.onmessage=function(i){t(i),r.returnWorker(e,o)},void 0!==n?o.postMessage(i,n):o.postMessage(i)}}u.BINARY_DECODER=0,u.LAS_LAZ=1,u.LAS_DECODER=2,u.GREYHOUND=3,u.DEM=4,u.EPT_LAS_ZIP_DECODER=5,u.EPT_BINARY_DECODER=6;var h={debug:{},workerPath:function(){var e=function(){if(document&&document.currentScript)return document.currentScript;const e=document.getElementsByTagName("script");return e&&e.length?e[e.length-1].getAttribute("src"):null}();if(e&&e.src){var t=new URL(e.src+"/..").href;return"/"===t.slice(-1)&&(t=t.slice(0,-1)),t}return console.error("Potree: Was unable to find its script path using document.currentScript."),""}(),maxNodesLoadGPUFrame:20,maxDEMLevel:0,maxNodesLoading:void 0!==navigator.hardwareConcurrency?navigator.hardwareConcurrency:4,pointLoadLimit:1e10,numNodesLoading:0,measureTimings:!1,workerPool:new u,lru:new r,pointcloudTransformVersion:void 0};const d=require("three");var p={POSITION_CARTESIAN:0,COLOR_PACKED:1,COLOR_FLOATS_1:2,COLOR_FLOATS_255:3,NORMAL_FLOATS:4,FILLER:5,INTENSITY:6,CLASSIFICATION:7,NORMAL_SPHEREMAPPED:8,NORMAL_OCT16:9,NORMAL:10,RETURN_NUMBER:11,NUMBER_OF_RETURNS:12,SOURCE_ID:13,INDICES:14,SPACING:15},c={DATA_TYPE_DOUBLE:{ordinal:0,size:8},DATA_TYPE_FLOAT:{ordinal:1,size:4},DATA_TYPE_INT8:{ordinal:2,size:1},DATA_TYPE_UINT8:{ordinal:3,size:1},DATA_TYPE_INT16:{ordinal:4,size:2},DATA_TYPE_UINT16:{ordinal:5,size:2},DATA_TYPE_INT32:{ordinal:6,size:4},DATA_TYPE_UINT32:{ordinal:7,size:4},DATA_TYPE_INT64:{ordinal:8,size:8},DATA_TYPE_UINT64:{ordinal:9,size:8}},f=0;for(var m in c)c[f]=c[m],f++;function g(e,t,i){this.name=e,this.type=t,this.numElements=i,this.byteSize=this.numElements*this.type.size}function v(e){if(this.attributes=[],this.byteSize=0,this.size=0,null!=e)for(var t=0;t<e.length;t++){var i=g[e[t]];this.attributes.push(i),this.byteSize+=i.byteSize,this.size++}}g.POSITION_CARTESIAN=new g(p.POSITION_CARTESIAN,c.DATA_TYPE_FLOAT,3),g.RGBA_PACKED=new g(p.COLOR_PACKED,c.DATA_TYPE_INT8,4),g.COLOR_PACKED=g.RGBA_PACKED,g.RGB_PACKED=new g(p.COLOR_PACKED,c.DATA_TYPE_INT8,3),g.NORMAL_FLOATS=new g(p.NORMAL_FLOATS,c.DATA_TYPE_FLOAT,3),g.FILLER_1B=new g(p.FILLER,c.DATA_TYPE_UINT8,1),g.INTENSITY=new g(p.INTENSITY,c.DATA_TYPE_UINT16,1),g.CLASSIFICATION=new g(p.CLASSIFICATION,c.DATA_TYPE_UINT8,1),g.NORMAL_SPHEREMAPPED=new g(p.NORMAL_SPHEREMAPPED,c.DATA_TYPE_UINT8,2),g.NORMAL_OCT16=new g(p.NORMAL_OCT16,c.DATA_TYPE_UINT8,2),g.NORMAL=new g(p.NORMAL,c.DATA_TYPE_FLOAT,3),g.RETURN_NUMBER=new g(p.RETURN_NUMBER,c.DATA_TYPE_UINT8,1),g.NUMBER_OF_RETURNS=new g(p.NUMBER_OF_RETURNS,c.DATA_TYPE_UINT8,1),g.SOURCE_ID=new g(p.SOURCE_ID,c.DATA_TYPE_UINT8,1),g.INDICES=new g(p.INDICES,c.DATA_TYPE_UINT32,1),g.SPACING=new g(p.SPACING,c.DATA_TYPE_FLOAT,1),v.prototype.add=function(e){this.attributes.push(e),this.byteSize+=e.byteSize,this.size++},v.prototype.hasColors=function(){for(var e in this.attributes)if(this.attributes[e].name===p.COLOR_PACKED)return!0;return!1},v.prototype.hasNormals=function(){for(var e in this.attributes){var t=this.attributes[e];if(t===g.NORMAL_SPHEREMAPPED||t===g.NORMAL_FLOATS||t===g.NORMAL||t===g.NORMAL_OCT16)return!0}return!1};class y{constructor(e,t,i){this.name=e,this.box=t,this.tileSize=i,this.level=this.name.length-1,this.data=new Float32Array(i*i),this.data.fill(-1/0),this.children=[],this.mipMap=[this.data],this.mipMapNeedsUpdate=!0}createMipMap(){this.mipMap=[this.data];for(var e=this.tileSize,t=parseInt(e/2),i=this.data;t>1;){for(var n=new Float32Array(t*t),r=0;r<t;r++)for(var o=0;o<t;o++){var s=i[2*r+0+2*o*e],a=i[2*r+0+2*o*e+e],l=i[2*r+1+2*o*e],u=i[2*r+1+2*o*e+e],[h,d]=[0,0];isFinite(s)&&(h+=s,d+=1),isFinite(a)&&(h+=a,d+=1),isFinite(l)&&(h+=l,d+=1),isFinite(u)&&(h+=u,d+=1),h/=d,n[r+o*t]=h}this.mipMap.push(n),i=n,e=t,t=parseInt(t/2)}this.mipMapNeedsUpdate=!1}uv(e){var t=this.box.getSize(new d.Vector3);return[(e.x-this.box.min.x)/t.x,(e.y-this.box.min.y)/t.y]}heightAtMipMapLevel(e,t){var i=this.uv(e),n=parseInt(this.tileSize/parseInt(2**t)),r=this.mipMap[t],o=Math.min(i[0]*n,n-1),s=Math.min(i[1]*n,n-1),a=o%1,l=s%1,[u,h]=[Math.floor(o),Math.ceil(o)],[d,p]=[Math.floor(s),Math.ceil(s)],c=r[u+n*d],f=r[u+n*p],m=r[h+n*d],g=r[h+n*p],v=isFinite(c)?(1-a)*(1-l):0,y=isFinite(f)?(1-a)*l:0,x=isFinite(m)?a*(1-l):0,b=isFinite(g)?a*l:0,S=v+y+x+b;if(v/=S,y/=S,x/=S,b/=S,0===S)return null;var w=0;return isFinite(c)&&(w+=c*v),isFinite(f)&&(w+=f*y),isFinite(m)&&(w+=m*x),isFinite(g)&&(w+=g*b),w}height(e){for(var t=null,i=0;i<this.mipMap.length;i++)if(null!==(t=this.heightAtMipMapLevel(e,i)))return t;return t}traverse(e,t=0){for(var i of(e(this,t),this.children.filter((e=>void 0!==e))))i.traverse(e,t+1)}}class x{constructor(e){this.pointcloud=e,this.matrix=null,this.boundingBox=null,this.tileSize=64,this.root=null,this.version=0}expandAndFindByBox(e,t){if(0===t)return[this.root];for(var i=[],n=[this.root];n.length>0;){var r=n.pop(),o=r.box.getSize(new d.Vector3),s={x:(e.min.x-r.box.min.x)/o.x,y:(e.min.y-r.box.min.y)/o.y},a={x:(e.max.x-r.box.max.x)/o.x,y:(e.max.y-r.box.max.y)/o.y};for(var l of(s.x=s.x<.5?0:1,s.y=s.y<.5?0:1,a.x=a.x<.5?0:1,a.y=a.y<.5?0:1,0===s.x&&0===s.y&&1===a.x&&1===a.y?[0,1,2,3]:s.x===a.x&&s.y===a.y?[s.x<<1|s.y]:[s.x<<1|s.y,a.x<<1|a.y])){if(void 0===r.children[l]){var u=r.box.clone();(2&l)>0?u.min.x+=o.x/2:u.max.x-=o.x/2,(1&l)>0?u.min.y+=o.y/2:u.max.y-=o.y/2;var h=new y(r.name+l,u,this.tileSize);r.children[l]=h}(h=r.children[l]).level<t?n.push(h):i.push(h)}}return i}childIndex(e){var[t,i]=e.map((e=>e<.5?0:1));return t<<1|i}height(e){if(!this.root)return 0;for(var t=null,i=[this.root];;){var n=i[i.length-1],r=n.height(e);null!==r&&(t=r);var o=n.uv(e),s=this.childIndex(o);if(!n.children[s])break;i.push(n.children[s])}return t+this.pointcloud.position.z}update(e){null!==this.matrix&&this.matrix.equals(this.pointcloud.matrixWorld)||(this.matrix=this.pointcloud.matrixWorld.clone(),this.boundingBox=this.pointcloud.boundingBox.clone().applyMatrix4(this.matrix),this.root=new y("r",this.boundingBox,this.tileSize),this.version++);var t=null;for(var i of e)if(void 0===i.demVersion||i.demVersion<this.version){t=i;break}if(null!==t){var n=t.getBoundingBox().clone().applyMatrix4(this.matrix),r=n.getSize(new d.Vector3),o=this.expandAndFindByBox(n,t.getLevel());t.demVersion=this.version;var s=t.geometryNode.geometry.attributes.position.array,a={boundingBox:{min:t.getBoundingBox().min.toArray(),max:t.getBoundingBox().max.toArray()},position:new Float32Array(s).buffer},l=[a.position],p=this;h.workerPool.runTask(u.DEM,(function(e){var t=new Float32Array(e.data.dem.data);for(var i of o){for(var s=i.box.getSize(new d.Vector3),a=0;a<p.tileSize;a++)for(var l=0;l<p.tileSize;l++){var u=a/(p.tileSize-1),h=l/(p.tileSize-1),c=i.box.min.x+u*s.x,f=i.box.min.y+h*s.y,m=p.tileSize*(c-n.min.x)/r.x,g=p.tileSize*(f-n.min.y)/r.y;m<0||m>p.tileSize||g<0||g>p.tileSize||(m=Math.min(Math.floor(m),p.tileSize-1),g=Math.min(Math.floor(g),p.tileSize-1),i.data[a+p.tileSize*l]=t[m+p.tileSize*g])}i.createMipMap(),i.mipMapNeedsUpdate=!0}}),a,l)}}}class b{constructor(){this.needsTransformUpdate=!0}getChildren(){}getBoundingBox(){}isLoaded(){}isGeometryNode(){}isTreeNode(){}getLevel(){}getBoundingSphere(){}}class S extends d.Object3D{constructor(){super(),this.dem=new x(this)}initialized(){return null!==this.root}}class w{constructor(){this.spacing=0,this.boundingBox=null,this.root=null,this.nodes=null,this.pointAttributes={},this.hierarchyStepSize=-1,this.loader=null,this.schema=null,this.baseDepth=null,this.offset=null,this.projection=null,this.boundingSphere=null,this.serverURL=null,this.normalize={color:!1,intensity:!1}}}function T(e,t,i,n,r){this.id=T.IDCount++,this.name=e,this.index=parseInt(e.charAt(e.length-1)),this.pcoGeometry=t,this.geometry=null,this.boundingBox=i,this.boundingSphere=i.getBoundingSphere(new d.Sphere),this.scale=n,this.offset=r,this.children={},this.numPoints=0,this.level=null,this.loaded=!1,this.oneTimeDisposeHandlers=[],this.baseLoaded=!1;var o=new d.Vector3,s=this.boundingBox.clone();s.min.sub(this.pcoGeometry.boundingBox.getCenter(o)),s.max.sub(this.pcoGeometry.boundingBox.getCenter(o)),this.scale&&(s.min.multiplyScalar(1/this.scale),s.max.multiplyScalar(1/this.scale)),this.greyhoundBounds=s,this.greyhoundOffset=this.pcoGeometry.offset.clone().add(this.pcoGeometry.boundingBox.getSize(new d.Vector3).multiplyScalar(.5))}function _(e){this.version=e;var t=-1===e.indexOf(".")?e.length:e.indexOf(".");this.versionMajor=parseInt(e.substr(0,t)),this.versionMinor=parseInt(e.substr(t+1)),0===this.versionMinor.length&&(this.versionMinor=0)}T.IDCount=0,T.prototype=Object.create(b.prototype),T.prototype.isGeometryNode=function(){return!0},T.prototype.isTreeNode=function(){return!1},T.prototype.isLoaded=function(){return this.loaded},T.prototype.getBoundingSphere=function(){return this.boundingSphere},T.prototype.getBoundingBox=function(){return this.boundingBox},T.prototype.getLevel=function(){return this.level},T.prototype.getChildren=function(){for(var e=[],t=0;t<8;++t)this.children[t]&&e.push(this.children[t]);return e},T.prototype.getURL=function(){var e=this.pcoGeometry.schema,t=this.greyhoundBounds,i=t.min.x+","+t.min.y+","+t.min.z+","+t.max.x+","+t.max.y+","+t.max.z,n=this.pcoGeometry.serverURL+"read?depthBegin="+(this.baseLoaded?this.level+this.pcoGeometry.baseDepth:0)+"&depthEnd="+(this.level+this.pcoGeometry.baseDepth+1)+"&bounds=["+i+"]&schema="+JSON.stringify(e)+"&compress=true";if(this.scale&&(n+="&scale="+this.scale),this.greyhoundOffset){var r=this.greyhoundOffset;n+="&offset=["+r.x+","+r.y+","+r.z+"]"}return this.baseLoaded||(this.baseLoaded=!0),n},T.prototype.addChild=function(e){this.children[e.index]=e,e.parent=this},T.prototype.load=function(){!0===this.loading||!0===this.loaded||h.numNodesLoading>=h.maxNodesLoading||(this.loading=!0,h.numNodesLoading++,this.level%this.pcoGeometry.hierarchyStepSize==0&&this.hasChildren?this.loadHierarchyThenPoints():this.loadPoints())},T.prototype.loadPoints=function(){this.pcoGeometry.loader.load(this)},T.prototype.loadHierarchyThenPoints=function(){var e=[0,2,1,3,4,6,5,7],t=function(i,n,r){var o,s;Object.keys(i).forEach((function(a){if("n"!==a){switch(a){case"swd":o=i.swd,s=n+e[0];break;case"nwd":o=i.nwd,s=n+e[1];break;case"swu":o=i.swu,s=n+e[2];break;case"nwu":o=i.nwu,s=n+e[3];break;case"sed":o=i.sed,s=n+e[4];break;case"ned":o=i.ned,s=n+e[5];break;case"seu":o=i.seu,s=n+e[6];break;case"neu":o=i.neu,s=n+e[7]}var l,u;r.push({children:(l=o,u=0,Object.keys(l).forEach((function(t){"swd"===t?u+=1<<e[0]:"nwd"===t?u+=1<<e[1]:"swu"===t?u+=1<<e[2]:"nwu"===t?u+=1<<e[3]:"sed"===t?u+=1<<e[4]:"ned"===t?u+=1<<e[5]:"seu"===t?u+=1<<e[6]:"neu"===t&&(u+=1<<e[7])})),u),numPoints:o.n,name:s}),t(o,s,r)}}))};if(this.level%this.pcoGeometry.hierarchyStepSize==0){var i=this.level+this.pcoGeometry.baseDepth,n=i+this.pcoGeometry.hierarchyStepSize+2,r=this.greyhoundBounds,o=r.min.x+","+r.min.y+","+r.min.z+","+r.max.x+","+r.max.y+","+r.max.z,s=this.pcoGeometry.serverURL+"hierarchy?bounds=["+o+"]&depthBegin="+i+"&depthEnd="+n;if(this.scale&&(s+="&scale="+this.scale),this.greyhoundOffset){var a=this.greyhoundOffset;s+="&offset=["+a.x+","+a.y+","+a.z+"]"}var l=this,u=XHRFactory.createXMLHttpRequest();u.overrideMimeType("text/plain"),u.open("GET",s,!0),u.onload=function(e){try{!function(e,i){var n=[];e.numPoints=i.n,t(i,e.name,n);var r={};r[e.name]=e;for(var o=e.pcoGeometry,s=0;s<n.length;s++){var a=n[s].name,l=n[s].numPoints,u=parseInt(a.charAt(a.length-1)),h=r[a.substring(0,a.length-1)],d=a.length-1,p=new T(a,o,N.createChildAABB(h.boundingBox,u),e.scale,e.offset);p.level=d,p.numPoints=l,p.hasChildren=n[s].children>0,p.spacing=o.spacing/Math.pow(2,d),h.addChild(p),r[a]=p}e.loadPoints()}(l,JSON.parse(u.responseText)||{})}catch(e){h.numNodesLoading--,console.error("Potree: Exception thrown parsing points.",e)}},u.onerror=function(e){console.log("Potree: Failed to load file! HTTP status "+u.status+", file:"+s,e)},u.send(null)}},T.prototype.getNumPoints=function(){return this.numPoints},T.prototype.dispose=function(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(var e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}},Object.assign(T.prototype,d.EventDispatcher.prototype),_.prototype.newerThan=function(e){var t=new _(e);return this.versionMajor>t.versionMajor||this.versionMajor===t.versionMajor&&this.versionMinor>t.versionMinor},_.prototype.equalOrHigher=function(e){var t=new _(e);return this.versionMajor>t.versionMajor||this.versionMajor===t.versionMajor&&this.versionMinor>=t.versionMinor},_.prototype.upTo=function(e){return!this.newerThan(e)};const A={config:{withCredentials:!1,customHeaders:[{header:null,value:null}]},createXMLHttpRequest:function(){let e=new XMLHttpRequest;if(this.config.customHeaders&&Array.isArray(this.config.customHeaders)&&this.config.customHeaders.length>0){let t=e.open,i=this.config.customHeaders;e.open=function(){t.apply(this,[].slice.call(arguments)),i.forEach((function(t){t.header&&t.value&&e.setRequestHeader(t.header,t.value)}))}}return e},fetch:async function(e){const t=new Headers;this.config.customHeaders&&this.config.customHeaders.forEach((function(e){e.header&&e.value&&t.append(e.header,e.value)}));const i={headers:t,credentials:A.config.withCredentials?"include":"same-origin"};return fetch(e,i)}};class E{constructor(e,t,i){this.version="string"==typeof e?new _(e):e,this.boundingBox=t,this.scale=i}load(e){if(!e.loaded){var t=this,i=e.getURL(),n=A.createXMLHttpRequest();n.overrideMimeType("text/plain"),n.open("GET",i,!0),n.responseType="arraybuffer",n.overrideMimeType("text/plain; charset=x-user-defined"),n.onload=function(){try{t.parse(e,n.response)}catch(e){console.error("Potree: Exception thrown parsing points.",e),h.numNodesLoading--}},n.onerror=function(e){h.numNodesLoading--,console.error("Potree: Failed to load file.",n,i)},n.send(null)}}parse(e,t){var i=new DataView(t,t.byteLength-4,4).getUint32(0,!0),n=e.pcoGeometry.pointAttributes;e.numPoints=i;var r=e.boundingBox,o=new THREE.Vector3,s=e.pcoGeometry.boundingBox.getCenter(o).sub(e.boundingBox.min),a={buffer:t,pointAttributes:n,version:this.version.version,schema:e.pcoGeometry.schema,min:[r.min.x,r.min.y,r.min.z],max:[r.max.x,r.max.y,r.max.z],offset:s.toArray(),scale:this.scale,normalize:e.pcoGeometry.normalize};h.workerPool.runTask(u.GREYHOUND,(function(t){var i=t.data,n=i.attributeBuffers,r=new THREE.Box3((new THREE.Vector3).fromArray(i.tightBoundingBox.min),(new THREE.Vector3).fromArray(i.tightBoundingBox.max)),o=new THREE.BufferGeometry;for(var s in n){var a=n[s].buffer;if(parseInt(s)===p.POSITION_CARTESIAN)o.setAttribute("position",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===p.COLOR_PACKED)o.setAttribute("color",new THREE.BufferAttribute(new Uint8Array(a),4,!0));else if(parseInt(s)===p.INTENSITY)o.setAttribute("intensity",new THREE.BufferAttribute(new Float32Array(a),1));else if(parseInt(s)===p.CLASSIFICATION)o.setAttribute("classification",new THREE.BufferAttribute(new Uint8Array(a),1));else if(parseInt(s)===p.NORMAL_SPHEREMAPPED)o.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===p.NORMAL_OCT16)o.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===p.NORMAL)o.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===p.INDICES)(l=new THREE.BufferAttribute(new Uint8Array(a),4)).normalized=!0,o.setAttribute("indices",l);else if(parseInt(s)===p.SPACING){var l=new THREE.BufferAttribute(new Float32Array(a),1);o.setAttribute("spacing",l)}}r.max.sub(r.min),r.min.set(0,0,0),e.numPoints=i.numPoints,e.geometry=o,e.mean=new THREE.Vector3(...i.mean),e.tightBoundingBox=r,e.loaded=!0,e.loading=!1,h.numNodesLoading--}),a,[a.buffer])}}class B{static getQueryParam(e){e=e.replace(/[[\]]/g,"\\$&");var t=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(window.location.href);return t?t[2]?decodeURIComponent(t[2].replace(/\+/g," ")):"":null}static createSchema(e){var t=[{name:"X",size:4,type:"signed"},{name:"Y",size:4,type:"signed"},{name:"Z",size:4,type:"signed"}];return e.forEach((function(e){"COLOR_PACKED"===e?(t.push({name:"Red",size:2,type:"unsigned"}),t.push({name:"Green",size:2,type:"unsigned"}),t.push({name:"Blue",size:2,type:"unsigned"})):"INTENSITY"===e?t.push({name:"Intensity",size:2,type:"unsigned"}):"CLASSIFICATION"===e&&t.push({name:"Classification",size:1,type:"unsigned"})})),t}static fetch(e,t){var i=A.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",e,!0),i.onreadystatechange=function(){4===i.readyState&&(200===i.status||0===i.status?t(null,i.responseText):t(i.responseText))},i.send(null)}static fetchBinary(e,t){var i=A.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",e,!0),i.responseType="arraybuffer",i.onreadystatechange=function(){4===i.readyState&&(200===i.status||0===i.status?t(null,i.response):t(i.responseText))},i.send(null)}static pointSizeFrom(e){return e.reduce(((e,t)=>e+t.size),0)}static getNormalization(e,t,i){var n=[{name:"X",size:4,type:"floating"},{name:"Y",size:4,type:"floating"},{name:"Z",size:4,type:"floating"},{name:"Red",size:2,type:"unsigned"},{name:"Green",size:2,type:"unsigned"},{name:"Blue",size:2,type:"unsigned"},{name:"Intensity",size:2,type:"unsigned"}],r=e+"read?depth="+t+"&schema="+JSON.stringify(n);B.fetchBinary(r,(function(e,t){if(e)throw new Error(e);for(var r=new DataView(t),o=t.byteLength-4,s=B.pointSizeFrom(n),a=!1,l=!1,u=0;u<o&&((r.getUint16(u+12,!0)>255||r.getUint16(u+14,!0)>255||r.getUint16(u+16,!0)>255)&&(a=!0),r.getUint16(u+18,!0)>255&&(l=!0),!a||!l);u+=s);i(null,{color:a,intensity:l})}))}}function N(){}N.loadInfoJSON=function(e,t){},N.load=function(e,t){try{var i=e.split("greyhound://")[1];1===i.split("http://").length&&1===i.split("https://").length&&(i="http://"+i),B.fetch(i+"info",(function(e,n){if(e)throw new Error(e);var r=JSON.parse(n),o=new _("1.4"),s=r.bounds,a=r.scale||.01;Array.isArray(a)&&(a=Math.min(a[0],a[1],a[2])),B.getQueryParam("scale")&&(a=parseFloat(B.getQueryParam("scale")));var l=Math.max(8,r.baseDepth),u=["POSITION_CARTESIAN"],h=!1,d=!1,p=!1;r.schema.forEach((function(e){"Intensity"===e.name&&u.push("INTENSITY"),"Classification"===e.name&&u.push("CLASSIFICATION"),"Red"===e.name?h=!0:"Green"===e.name?d=!0:"Blue"===e.name&&(p=!0)})),h&&d&&p&&u.push("COLOR_PACKED");var c=new w;c.serverURL=i,c.spacing=(s[3]-s[0])/Math.pow(2,l),c.baseDepth=l,c.hierarchyStepSize=5,c.schema=B.createSchema(u);var f=B.pointSizeFrom(c.schema);c.pointAttributes=new v(u),c.pointAttributes.byteSize=f;var m=new THREE.Box3((new THREE.Vector3).fromArray(s,0),(new THREE.Vector3).fromArray(s,3)),g=m.min.clone();m.max.sub(m.min),m.min.set(0,0,0),c.projection=r.srs,c.boundingBox=m,c.boundingSphere=m.getBoundingSphere(new THREE.Sphere),c.scale=a,c.offset=g,c.loader=new E(o,m,c.scale);var y={},x=new T("r",c,m,a,g);x.level=0,x.hasChildren=!0,x.numPoints=r.numPoints,x.spacing=c.spacing,c.root=x,c.root.load(),y.r=x,c.nodes=y,B.getNormalization(i,r.baseDepth,(function(e,i){i.color&&(c.normalize.color=!0),i.intensity&&(c.normalize.intensity=!0),t(c)}))}))}catch(i){console.log("Potree: Loading failed.",e,i),t()}},N.loadPointAttributes=function(e){for(var t=e.pointAttributes,i=new v,n=0;n<t.length;n++){var r=g[t[n]];i.add(r)}return i},N.createChildAABB=function(e,t){var i=e.min,n=e.max,r=(new THREE.Vector3).copy(n).sub(i).multiplyScalar(.5),o=new THREE.Vector3(r.x,0,0),s=new THREE.Vector3(0,r.y,0),a=new THREE.Vector3(0,0,r.z),l=i,u=(new THREE.Vector3).add(i).add(r);return 1===t?(i=(new THREE.Vector3).copy(l).add(a),n=(new THREE.Vector3).copy(u).add(a)):3===t?(i=(new THREE.Vector3).copy(l).add(a).add(s),n=(new THREE.Vector3).copy(u).add(a).add(s)):0===t?(i=l,n=u):2===t?(i=(new THREE.Vector3).copy(l).add(s),n=(new THREE.Vector3).copy(u).add(s)):5===t?(i=(new THREE.Vector3).copy(l).add(a).add(o),n=(new THREE.Vector3).copy(u).add(a).add(o)):7===t?(i=(new THREE.Vector3).copy(l).add(r),n=(new THREE.Vector3).copy(u).add(r)):4===t?(i=(new THREE.Vector3).copy(l).add(o),n=(new THREE.Vector3).copy(u).add(o)):6===t&&(i=(new THREE.Vector3).copy(l).add(o).add(s),n=(new THREE.Vector3).copy(u).add(o).add(s)),new THREE.Box3(i,n)};class C{constructor(e,t,i){this.version="string"==typeof e?new _(e):e,this.boundingBox=t,this.scale=i}load(e){if(!e.loaded){var t=e.getURL();this.version.equalOrHigher("1.4")&&(t+=".bin");var i=this,n=A.createXMLHttpRequest();n.open("GET",t,!0),n.responseType="arraybuffer",n.overrideMimeType("text/plain; charset=x-user-defined"),n.onload=function(){try{i.parse(e,n.response)}catch(e){h.numNodesLoading--,console.error("Potree: Exception thrown parsing points.",e)}},n.onerror=function(e){h.numNodesLoading--,console.error("Potree: Failed to load file.",n,t)},n.send(null)}}parse(e,t){var i=e.pcoGeometry.pointAttributes,n=t.byteLength/e.pcoGeometry.pointAttributes.byteSize;this.version.upTo("1.5")&&(e.numPoints=n);var r={buffer:t,pointAttributes:i,version:this.version.version,min:[e.boundingBox.min.x,e.boundingBox.min.y,e.boundingBox.min.z],offset:[e.pcoGeometry.offset.x,e.pcoGeometry.offset.y,e.pcoGeometry.offset.z],scale:this.scale,spacing:e.spacing,hasChildren:e.hasChildren,name:e.name};h.workerPool.runTask(u.BINARY_DECODER,(function(t){var n=t.data;if(void 0!==n.error)return h.numNodesLoading--,void console.error("Potree: Binary worker error.",n);var r=n.attributeBuffers,o=new d.Box3((new d.Vector3).fromArray(n.tightBoundingBox.min),(new d.Vector3).fromArray(n.tightBoundingBox.max)),s=new d.BufferGeometry;for(var a in r){var l=r[a].buffer;if(parseInt(a)===p.POSITION_CARTESIAN)s.setAttribute("position",new d.BufferAttribute(new Float32Array(l),3));else if(parseInt(a)===p.COLOR_PACKED)s.setAttribute("color",new d.BufferAttribute(new Uint8Array(l),4,!0));else if(parseInt(a)===p.INTENSITY)s.setAttribute("intensity",new d.BufferAttribute(new Float32Array(l),1));else if(parseInt(a)===p.CLASSIFICATION)s.setAttribute("classification",new d.BufferAttribute(new Uint8Array(l),1));else if(parseInt(a)===p.NORMAL_SPHEREMAPPED)s.setAttribute("normal",new d.BufferAttribute(new Float32Array(l),3));else if(parseInt(a)===p.NORMAL_OCT16)s.setAttribute("normal",new d.BufferAttribute(new Float32Array(l),3));else if(parseInt(a)===p.NORMAL)s.setAttribute("normal",new d.BufferAttribute(new Float32Array(l),3));else if(parseInt(a)===p.INDICES)(u=new d.BufferAttribute(new Uint8Array(l),4)).normalized=!0,s.setAttribute("indices",u);else if(parseInt(a)===p.SPACING){var u=new d.BufferAttribute(new Float32Array(l),1);s.setAttribute("spacing",u)}}o.max.sub(o.min),o.min.set(0,0,0);var c=t.data.buffer.byteLength/i.byteSize;e.numPoints=c,e.geometry=s,e.mean=new d.Vector3(...n.mean),e.tightBoundingBox=o,e.loaded=!0,e.loading=!1,e.estimatedSpacing=n.estimatedSpacing,h.numNodesLoading--}),r,[r.buffer])}}var I=[function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0)}},function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0)}},function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0),color:[e.getUint16(20,!0),e.getUint16(22,!0),e.getUint16(24,!0)]}},function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0),color:[e.getUint16(28,!0),e.getUint16(30,!0),e.getUint16(32,!0)]}}];function P(e,t,i,n){n=void 0===n||0===n?1:n;var r=new t(e.slice(i,i+t.BYTES_PER_ELEMENT*n));if(void 0===n||1===n)return r[0];for(var o=[],s=0;s<n;s++)o.push(r[s]);return o}function R(e){this.arraybuffer=e}function D(e){var t=this;this.arraybuffer=e,this.nextCB=null,this.dorr=function(e,i){t.nextCB=i,h.workerPool.runTask(u.LAS_LAZ,(function(e){null!==t.nextCB&&(t.nextCB(e.data),t.nextCB=null)}),e)}}function L(e){if(this.arraybuffer=e,this.determineVersion(),this.version>12)throw new Error("Only file versions <= 1.2 are supported at this time");if(this.determineFormat(),void 0===I[this.formatId])throw new Error("The point format ID is not supported");this.loader=this.isCompressed?new D(this.arraybuffer):new R(this.arraybuffer)}function M(e,t,i,n,r,o,s,a){this.arrayb=e,this.decoder=I[t],this.pointsCount=n,this.pointSize=i,this.scale=r,this.offset=o,this.mins=s,this.maxs=a}R.prototype.open=function(){return this.readOffset=0,new Promise((function(e,t){setTimeout(e,0)}))},R.prototype.getHeader=function(){var e=this;return new Promise((function(t,i){setTimeout((function(){e.header=function(e){var t={};t.pointsOffset=P(e,Uint32Array,96),t.pointsFormatId=P(e,Uint8Array,104),t.pointsStructSize=P(e,Uint16Array,105),t.pointsCount=P(e,Uint32Array,107);var i=131;t.scale=P(e,Float64Array,i,3),i+=24,t.offset=P(e,Float64Array,i,3),i+=24;var n=P(e,Float64Array,i,6);return i+=48,t.maxs=[n[0],n[2],n[4]],t.mins=[n[1],n[3],n[5]],t}(e.arraybuffer),t(e.header)}),0)}))},R.prototype.readData=function(e,t,i){var n=this;return new Promise((function(t,r){setTimeout((function(){if(!n.header)return r(new Error("Cannot start reading data till a header request is issued"));var o;if(i<=1){e=Math.min(e,n.header.pointsCount-n.readOffset);var s=(o=n.header.pointsOffset+n.readOffset*n.header.pointsStructSize)+e*n.header.pointsStructSize;t({buffer:n.arraybuffer.slice(o,s),count:e,hasMoreData:n.readOffset+e<n.header.pointsCount}),n.readOffset+=e}else{for(var a=Math.min(e*i,n.header.pointsCount-n.readOffset),l=Math.ceil(a/i),u=0,h=new Uint8Array(l*n.header.pointsStructSize),d=0;d<a;d++){if(d%i==0){o=n.header.pointsOffset+n.readOffset*n.header.pointsStructSize;var p=new Uint8Array(n.arraybuffer,o,n.header.pointsStructSize);h.set(p,u*n.header.pointsStructSize),u++}n.readOffset++}t({buffer:h.buffer,count:u,hasMoreData:n.readOffset<n.header.pointsCount})}}),0)}))},R.prototype.close=function(){var e=this;return new Promise((function(t,i){e.arraybuffer=null,setTimeout(t,0)}))},D.prototype.open=function(){var e=this;return new Promise((function(t,i){e.dorr({type:"open",arraybuffer:e.arraybuffer},(function(e){if(1!==e.status)return i(new Error("Failed to open file"));t(!0)}))}))},D.prototype.getHeader=function(){var e=this;return new Promise((function(t,i){e.dorr({type:"header"},(function(e){if(1!==e.status)return i(new Error("Failed to get header"));t(e.header)}))}))},D.prototype.readData=function(e,t,i){var n=this;return new Promise((function(r,o){n.dorr({type:"read",count:e,offset:t,skip:i},(function(e){if(1!==e.status)return o(new Error("Failed to read data"));r({buffer:e.buffer,count:e.count,hasMoreData:e.hasMoreData})}))}))},D.prototype.close=function(){var e=this;return new Promise((function(t,i){e.dorr({type:"close"},(function(e){if(1!==e.status)return i(new Error("Failed to close file"));t(!0)}))}))},L.prototype.determineFormat=function(){var e=P(this.arraybuffer,Uint8Array,104),t=(128&e)>>7,i=(64&e)>>6;if(1===t&&1===i)throw new Error("Old style compression not supported");this.formatId=63&e,this.isCompressed=1===t||1===i},L.prototype.determineVersion=function(){var e=new Int8Array(this.arraybuffer,24,2);this.version=10*e[0]+e[1],this.versionAsString=e[0]+"."+e[1]},L.prototype.open=function(){return this.loader.open()},L.prototype.getHeader=function(){return this.loader.getHeader()},L.prototype.readData=function(e,t,i){return this.loader.readData(e,t,i)},L.prototype.close=function(){return this.loader.close()},M.prototype.getPoint=function(e){if(e<0||e>=this.pointsCount)throw new Error("Point index out of range");return this.decoder(new DataView(this.arrayb,e*this.pointSize,this.pointSize))};class O{constructor(e){this.version="string"==typeof e?new _(e):e}load(e){if(!e.loaded){var t=e.pcoGeometry.pointAttributes,i=e.getURL();this.version.equalOrHigher("1.4")&&(i+="."+t.toLowerCase());var n=this,r=A.createXMLHttpRequest();r.open("GET",i,!0),r.responseType="arraybuffer",r.overrideMimeType("text/plain; charset=x-user-defined"),r.onload=function(){if(r.response instanceof ArrayBuffer)try{n.parse(e,r.response)}catch(e){console.error("Potree: Exception thrown parsing points.",e),h.numNodesLoading--}else h.numNodesLoading--,console.log("Potree: LASLAZLoader xhr response is not a ArrayBuffer.")},r.onerror=function(){h.numNodesLoading--,console.log("Potree: LASLAZLoader failed to load file, "+r.status+", file: "+i)},r.send(null)}}parse(e,t){var i=new L(t),n=new z(e);i.open().then((e=>(i.isOpen=!0,i))).then((e=>e.getHeader().then((function(t){return[e,t]})))).then((e=>{let t=e[0],i=e[1],r=0;i.pointsCount;var o=function(){return t.readData(1e6,0,1).then((function(e){return n.push(new M(e.buffer,i.pointsFormatId,i.pointsStructSize,e.count,i.scale,i.offset,i.mins,i.maxs)),r+=e.count,e.hasMoreData?o():(i.totalRead=r,i.versionAsString=t.versionAsString,i.isCompressed=t.isCompressed,[t,i,n])}))};return o()})).then((e=>{let t=e[0];return t.close().then((function(){return t.isOpen=!1,e.slice(1)})).catch((e=>{if(t.isOpen)return t.close().then((function(){throw t.isOpen=!1,e}));throw e}))})).catch((e=>{console.error("Potree: Failed to open file:",e)}))}handle(e,t){}}class z{constructor(e){this.node=e}push(e){var t=this,i={buffer:e.arrayb,numPoints:e.pointsCount,pointSize:e.pointSize,pointFormatID:2,scale:e.scale,offset:e.offset,mins:e.mins,maxs:e.maxs},n=h.workerPool.getWorker(u.LAS_DECODER);n.onmessage=function(i){var r=new d.BufferGeometry,o=e.pointsCount,s=new Float32Array(i.data.position),a=new Uint8Array(i.data.color),l=new Float32Array(i.data.intensity),p=new Uint8Array(i.data.classification),c=new Uint8Array(i.data.returnNumber),f=new Uint8Array(i.data.numberOfReturns),m=new Uint16Array(i.data.pointSourceID),g=new Uint8Array(i.data.indices);r.setAttribute("position",new d.BufferAttribute(s,3)),r.setAttribute("color",new d.BufferAttribute(a,4,!0)),r.setAttribute("intensity",new d.BufferAttribute(l,1)),r.setAttribute("classification",new d.BufferAttribute(p,1)),r.setAttribute("returnNumber",new d.BufferAttribute(c,1)),r.setAttribute("numberOfReturns",new d.BufferAttribute(f,1)),r.setAttribute("pointSourceID",new d.BufferAttribute(m,1)),r.setAttribute("indices",new d.BufferAttribute(g,4)),r.attributes.indices.normalized=!0;var v=new d.Box3((new d.Vector3).fromArray(i.data.tightBoundingBox.min),(new d.Vector3).fromArray(i.data.tightBoundingBox.max));r.boundingBox=t.node.boundingBox,t.node.tightBoundingBox=v,t.node.geometry=r,t.node.numPoints=o,t.node.loaded=!0,t.node.loading=!1,h.numNodesLoading--,t.node.mean=new d.Vector3(...i.data.mean),h.workerPool.returnWorker(u.LAS_DECODER,n)},n.postMessage(i,[i.buffer])}}class U{constructor(){this.url=null,this.octreeDir=null,this.spacing=0,this.boundingBox=null,this.root=null,this.nodes=null,this.pointAttributes=null,this.hierarchyStepSize=-1,this.loader=null}}class F extends b{constructor(e,t,i){super(),this.id=F.IDCount++,this.name=e,this.index=parseInt(e.charAt(e.length-1)),this.pcoGeometry=t,this.geometry=null,this.boundingBox=i,this.boundingSphere=i.getBoundingSphere(new d.Sphere),this.children={},this.numPoints=0,this.level=null,this.loaded=!1,this.oneTimeDisposeHandlers=[]}isGeometryNode(){return!0}getLevel(){return this.level}isTreeNode(){return!1}isLoaded(){return this.loaded}getBoundingSphere(){return this.boundingSphere}getBoundingBox(){return this.boundingBox}getChildren(){for(var e=[],t=0;t<8;t++)this.children[t]&&e.push(this.children[t]);return e}getURL(){var e="",t=this.pcoGeometry.loader.version;return t.equalOrHigher("1.5")?e=this.pcoGeometry.octreeDir+"/"+this.getHierarchyPath()+"/"+this.name:(t.equalOrHigher("1.4")||t.upTo("1.3"))&&(e=this.pcoGeometry.octreeDir+"/"+this.name),e}getHierarchyPath(){for(var e="r/",t=this.pcoGeometry.hierarchyStepSize,i=this.name.substr(1),n=Math.floor(i.length/t),r=0;r<n;r++)e+=i.substr(r*t,t)+"/";return e.slice(0,-1)}addChild(e){this.children[e.index]=e,e.parent=this}load(){if(!(!0===this.loading||!0===this.loaded||h.numNodesLoading>=h.maxNodesLoading)){this.loading=!0,h.numNodesLoading++;try{this.pcoGeometry.loader.version.equalOrHigher("1.5")&&this.level%this.pcoGeometry.hierarchyStepSize==0&&this.hasChildren?this.loadHierachyThenPoints():this.loadPoints()}catch(e){h.numNodesLoading--,console.error("Potree: Exception thrown loading points file.",e)}}}loadPoints(){this.pcoGeometry.loader.load(this)}loadHierachyThenPoints(){var e=this;if(e.level%e.pcoGeometry.hierarchyStepSize==0){var t=e.pcoGeometry.octreeDir+"/"+e.getHierarchyPath()+"/"+e.name+".hrc",i=A.createXMLHttpRequest();i.open("GET",t,!0),i.responseType="arraybuffer",i.overrideMimeType("text/plain; charset=x-user-defined"),i.onload=function(t){try{!function(e,t){var i=new DataView(t),n=[],r=i.getUint8(0),o=i.getUint32(1,!0);e.numPoints=o,n.push({children:r,numPoints:o,name:e.name});for(var s=[],a=5;n.length>0;){for(var l=n.shift(),u=1,h=0;h<8;h++){if(0!=(l.children&u)){var d=l.name+h,p=i.getUint8(a),c=i.getUint32(a+1,!0);n.push({children:p,numPoints:c,name:d}),s.push({children:p,numPoints:c,name:d}),a+=5}u*=2}if(a===t.byteLength)break}var f={};f[e.name]=e;var m=e.pcoGeometry;for(h=0;h<s.length;h++){var g=s[h].name,v=s[h].numPoints,y=parseInt(g.charAt(g.length-1)),x=f[g.substring(0,g.length-1)],b=g.length-1,S=V.createChildAABB(x.boundingBox,y),w=new F(g,m,S);w.level=b,w.numPoints=v,w.hasChildren=s[h].children>0,w.spacing=m.spacing/Math.pow(2,b),x.addChild(w),f[g]=w}e.loadPoints()}(e,i.response)}catch(e){h.numNodesLoading--,console.error("Potree: Exception thrown parsing points.",e)}},i.onerror=function(e){h.numNodesLoading--,console.error("Potree: Failed to load file.",i.status,t,e)},i.send(null)}}getNumPoints(){return this.numPoints}dispose(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(var e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}}}F.IDCount=0,Object.assign(F.prototype,d.EventDispatcher.prototype);class V{static load(e,t){var i=new U;i.url=e;var n=A.createXMLHttpRequest();n.overrideMimeType("text/plain"),n.open("GET",e,!0),n.onload=function(){var r=JSON.parse(n.responseText),o=new _(r.version);0===r.octreeDir.indexOf("http")?i.octreeDir=r.octreeDir:i.octreeDir=e+"/../"+r.octreeDir,i.spacing=r.spacing,i.hierarchyStepSize=r.hierarchyStepSize,i.pointAttributes=r.pointAttributes;var s=new d.Vector3(r.boundingBox.lx,r.boundingBox.ly,r.boundingBox.lz),a=new d.Vector3(r.boundingBox.ux,r.boundingBox.uy,r.boundingBox.uz),l=(b=new d.Box3(s,a)).clone();r.tightBoundingBox&&(l.min.copy(new d.Vector3(r.tightBoundingBox.lx,r.tightBoundingBox.ly,r.tightBoundingBox.lz)),l.max.copy(new d.Vector3(r.tightBoundingBox.ux,r.tightBoundingBox.uy,r.tightBoundingBox.uz)));var u=s.clone();b.min.sub(u),b.max.sub(u),l.min.sub(u),l.max.sub(u),i.projection=r.projection,i.boundingBox=b,i.tightBoundingBox=l,i.boundingSphere=b.getBoundingSphere(new d.Sphere),i.tightBoundingSphere=l.getBoundingSphere(new d.Sphere),i.offset=u,"LAS"===r.pointAttributes||"LAZ"===r.pointAttributes?i.loader=new O(r.version):(i.loader=new C(r.version,b,r.scale),i.pointAttributes=new v(i.pointAttributes));var h={},p=new F(f="r",i,b);if(p.level=0,p.hasChildren=!0,p.spacing=i.spacing,p.numPoints=o.upTo("1.5")?r.hierarchy[0][1]:0,i.root=p,i.root.load(),h[f]=p,o.upTo("1.4"))for(var c=1;c<r.hierarchy.length;c++){var f=r.hierarchy[c][0],m=r.hierarchy[c][1],g=parseInt(f.charAt(f.length-1)),y=h[f.substring(0,f.length-1)],x=f.length-1,b=V.createChildAABB(y.boundingBox,g),S=new F(f,i,b);S.level=x,S.numPoints=m,S.spacing=i.spacing/Math.pow(2,x),y.addChild(S),h[f]=S}i.nodes=h,t(i)},n.onerror=function(i){h.numNodesLoading--,console.log("Potree: loading file failed.",e,i),t()},n.send(null)}static loadPointAttributes(e){for(var t=e.pointAttributes,i=new v,n=0;n<t.length;n++)i.add(g[t[n]]);return i}static createChildAABB(e,t){var i=e.min.clone(),n=e.max.clone(),r=(new d.Vector3).subVectors(n,i);return(1&t)>0?i.z+=r.z/2:n.z-=r.z/2,(2&t)>0?i.y+=r.y/2:n.y-=r.y/2,(4&t)>0?i.x+=r.x/2:n.x-=r.x/2,new d.Box3(i,n)}}class G{load(e){if(!e.loaded){var t=e.url()+".bin",i=A.createXMLHttpRequest();i.open("GET",t,!0),i.responseType="arraybuffer",i.overrideMimeType("text/plain; charset=x-user-defined"),i.onreadystatechange=()=>{if(4===i.readyState)if(200===i.status){var n=i.response;this.parse(e,n)}else console.log("Failed "+t+": "+i.status)};try{i.send(null)}catch(e){console.log("Failed request: "+e)}}}parse(e,t){var i=h.workerPool.getWorker(u.EPT_BINARY_DECODER);i.onmessage=function(t){var n=new d.BufferGeometry,r=t.data.numPoints,o=new Float32Array(t.data.position);n.setAttribute("position",new d.BufferAttribute(o,3));var s=new Uint8Array(t.data.indices);if(n.setAttribute("indices",new d.BufferAttribute(s,4)),t.data.color){var a=new Uint8Array(t.data.color);n.setAttribute("color",new d.BufferAttribute(a,4,!0))}if(t.data.intensity){var l=new Float32Array(t.data.intensity);n.setAttribute("intensity",new d.BufferAttribute(l,1))}if(t.data.classification){var p=new Uint8Array(t.data.classification);n.setAttribute("classification",new d.BufferAttribute(p,1))}if(t.data.returnNumber){var c=new Uint8Array(t.data.returnNumber);n.setAttribute("returnNumber",new d.BufferAttribute(c,1))}if(t.data.numberOfReturns){var f=new Uint8Array(t.data.numberOfReturns);n.setAttribute("numberOfReturns",new d.BufferAttribute(f,1))}if(t.data.pointSourceId){var m=new Uint16Array(t.data.pointSourceId);n.setAttribute("pointSourceID",new d.BufferAttribute(m,1))}n.attributes.indices.normalized=!0;var g=new d.Box3((new d.Vector3).fromArray(t.data.tightBoundingBox.min),(new d.Vector3).fromArray(t.data.tightBoundingBox.max));e.doneLoading(n,g,r,new d.Vector3(...t.data.mean)),h.workerPool.returnWorker(u.EPT_BINARY_DECODER,i)};var n,r={buffer:t,schema:e.ept.schema,scale:e.ept.eptScale,offset:e.ept.eptOffset,mins:(n=e.key.b.min,[n.x,n.y,n.z])};i.postMessage(r,[r.buffer])}}class H{load(e){if(!e.loaded){var t=e.url()+".laz",i=A.createXMLHttpRequest();i.open("GET",t,!0),i.responseType="arraybuffer",i.overrideMimeType("text/plain; charset=x-user-defined"),i.onreadystatechange=()=>{if(4===i.readyState)if(200===i.status){var n=i.response;this.parse(e,n)}else console.log("Failed "+t+": "+i.status)},i.send(null)}}parse(e,t){var i=new L(t),n=new k(e);i.open().then((()=>(i.isOpen=!0,i.getHeader()))).then((t=>{var r=0,o=(t.pointsCount,e=>[e.x,e.y,e.z]),s=o(e.key.b.min),a=o(e.key.b.max),l=()=>i.readData(1e6,0,1).then((function(e){var o=new M(e.buffer,t.pointsFormatId,t.pointsStructSize,e.count,t.scale,t.offset,s,a);return o.extraBytes=t.extraBytes,o.pointsFormatId=t.pointsFormatId,n.push(o),r+=e.count,e.hasMoreData?l():(t.totalRead=r,t.versionAsString=i.versionAsString,t.isCompressed=i.isCompressed,null)}));return l()})).then((()=>i.close())).then((()=>i.isOpen=!1)).catch((e=>{if(console.log("Error reading LAZ:",e),!i.isOpen)throw e;i.close().then((()=>{throw i.isOpen=!1,e}))}))}}class k{constructor(e){this.node=e}push(e){var t=h.workerPool.getWorker(u.EPT_LAS_ZIP_DECODER);t.onmessage=i=>{var n=new d.BufferGeometry,r=e.pointsCount,o=new Float32Array(i.data.position),s=new Uint8Array(i.data.color),a=new Float32Array(i.data.intensity),l=new Uint8Array(i.data.classification),p=new Uint8Array(i.data.returnNumber),c=new Uint8Array(i.data.numberOfReturns),f=new Uint16Array(i.data.pointSourceID),m=new Uint8Array(i.data.indices);n.setAttribute("position",new d.BufferAttribute(o,3)),n.setAttribute("color",new d.BufferAttribute(s,4,!0)),n.setAttribute("intensity",new d.BufferAttribute(a,1)),n.setAttribute("classification",new d.BufferAttribute(l,1)),n.setAttribute("returnNumber",new d.BufferAttribute(p,1)),n.setAttribute("numberOfReturns",new d.BufferAttribute(c,1)),n.setAttribute("pointSourceID",new d.BufferAttribute(f,1)),n.setAttribute("indices",new d.BufferAttribute(m,4)),n.attributes.indices.normalized=!0;var g=new d.Box3((new d.Vector3).fromArray(i.data.tightBoundingBox.min),(new d.Vector3).fromArray(i.data.tightBoundingBox.max));this.node.doneLoading(n,g,r,new d.Vector3(...i.data.mean)),h.workerPool.returnWorker(u.EPT_LAS_ZIP_DECODER,t)};var i={buffer:e.arrayb,numPoints:e.pointsCount,pointSize:e.pointSize,pointFormatID:e.pointsFormatId,scale:e.scale,offset:e.offset,mins:e.mins,maxs:e.maxs};t.postMessage(i,[i.buffer])}}class W{static toVector3(e,t){return(new d.Vector3).fromArray(e,t||0)}static toBox3(e){return new d.Box3(W.toVector3(e),W.toVector3(e,3))}static findDim(e,t){var i=e.find((e=>e.name==t));if(!i)throw new Error("Failed to find "+t+" in schema");return i}static sphereFrom(e){return e.getBoundingSphere(new d.Sphere)}}class j{constructor(e,t){t.version;let i=t.schema,n=t.bounds,r=t.boundsConforming,o=[W.findDim(i,"X"),W.findDim(i,"Y"),W.findDim(i,"Z")],s=o.map((e=>e.scale||1)),a=o.map((e=>e.offset||0));this.eptScale=W.toVector3(s),this.eptOffset=W.toVector3(a),this.url=e,this.info=t,this.type="ept",this.schema=i,this.span=t.span||t.ticks,this.boundingBox=W.toBox3(n),this.tightBoundingBox=W.toBox3(r),this.offset=W.toVector3([0,0,0]),this.boundingSphere=W.sphereFrom(this.boundingBox),this.tightBoundingSphere=W.sphereFrom(this.tightBoundingBox),this.version=new _("1.6"),this.projection=null,this.fallbackProjection=null,t.srs&&t.srs.horizontal&&(this.projection=t.srs.authority+":"+t.srs.horizontal),t.srs.wkt&&(this.projection?this.fallbackProjection=t.srs.wkt:this.projection=t.srs.wkt),this.pointAttributes="LAZ",this.spacing=(this.boundingBox.max.x-this.boundingBox.min.x)/this.span,t.hierarchyType;let l=t.dataType||"laszip";this.loader="binary"==l?new G:new H}}class Y{constructor(e,t,i,n,r,o){this.ept=e,this.b=t,this.d=i,this.x=n||0,this.y=r||0,this.z=o||0}name(){return this.d+"-"+this.x+"-"+this.y+"-"+this.z}step(e,t,i){let n=this.b.min.clone(),r=this.b.max.clone(),o=(new d.Vector3).subVectors(r,n);return e?n.x+=o.x/2:r.x-=o.x/2,t?n.y+=o.y/2:r.y-=o.y/2,i?n.z+=o.z/2:r.z-=o.z/2,new Y(this.ept,new d.Box3(n,r),this.d+1,2*this.x+e,2*this.y+t,2*this.z+i)}children(){for(var e=[],t=0;t<2;++t)for(var i=0;i<2;++i)for(var n=0;n<2;++n){var r=this.step(t,i,n).name();e.includes(r)||(e=e.concat(r))}return e}}class X extends b{constructor(e,t,i,n,r,o){super(),this.ept=e,this.key=new Y(this.ept,t||this.ept.boundingBox,i||0,n,r,o),this.id=X.IDCount++,this.geometry=null,this.boundingBox=this.key.b,this.tightBoundingBox=this.boundingBox,this.spacing=this.ept.spacing/Math.pow(2,this.key.d),this.boundingSphere=W.sphereFrom(this.boundingBox),this.hasChildren=!1,this.children={},this.numPoints=-1,this.level=this.key.d,this.loaded=!1,this.loading=!1,this.oneTimeDisposeHandlers=[];let s=this.key;this.name=this.toPotreeName(s.d,s.x,s.y,s.z),this.index=parseInt(this.name.charAt(this.name.length-1))}isGeometryNode(){return!0}getLevel(){return this.level}isTreeNode(){return!1}isLoaded(){return this.loaded}getBoundingSphere(){return this.boundingSphere}getBoundingBox(){return this.boundingBox}url(){return this.ept.url+"ept-data/"+this.filename()}getNumPoints(){return this.numPoints}filename(){return this.key.name()}getChildren(){let e=[];for(let t=0;t<8;t++)this.children[t]&&e.push(this.children[t]);return e}addChild(e){this.children[e.index]=e,e.parent=this}load(){this.loaded||this.loading||h.numNodesLoading>=h.maxNodesLoading||(this.loading=!0,h.numNodesLoading++,-1===this.numPoints&&this.loadHierarchy(),this.loadPoints())}loadPoints(){this.ept.loader.load(this)}async loadHierarchy(){let e={};e[this.filename()]=this,this.hasChildren=!1;let t=`${this.ept.url}ept-hierarchy/${this.filename()}.json`,i=await A.fetch(t),n=await i.json();Object.keys(n).sort(((e,t)=>{let[i,n,r,o]=e.split("-").map((e=>parseInt(e,10))),[s,a,l,u]=t.split("-").map((e=>parseInt(e,10)));return i<s?-1:i>s?1:n<a?-1:n>a?1:r<l?-1:r>l?1:o<u?-1:o>u?1:0})).forEach((t=>{let[i,r,o,s]=t.split("-").map((e=>parseInt(e,10))),a=1&r,l=1&o,u=1&s,h=e[i-1+"-"+(r>>1)+"-"+(o>>1)+"-"+(s>>1)];if(!h)return;h.hasChildren=!0;let d=h.key.step(a,l,u),p=new X(this.ept,d.b,d.d,d.x,d.y,d.z);p.level=i,p.numPoints=n[t],h.addChild(p),e[d.name()]=p}))}doneLoading(e,t,i,n){e.boundingBox=this.boundingBox,this.geometry=e,this.tightBoundingBox=t,this.numPoints=i,this.mean=n,this.loaded=!0,this.loading=!1,h.numNodesLoading--}toPotreeName(e,t,i,n){for(var r="r",o=0;o<e;++o){var s=1<<e-o-1,a=0;t&s&&(a+=4),i&s&&(a+=2),n&s&&(a+=1),r+=a}return r}dispose(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(let e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}}}X.IDCount=0;class q{static async load(e,t){var i=await A.fetch(e),n=await i.json(),r=e.substr(0,e.lastIndexOf("ept.json")),o=new j(r,n),s=new X(o);o.root=s,o.root.load(),t(o)}}class K{static generateDataTexture(e,t,i){for(var n=e*t,r=new Uint8Array(4*e*t),o=Math.floor(255*i.r),s=Math.floor(255*i.g),a=Math.floor(255*i.b),l=0;l<n;l++)r[3*l]=o,r[3*l+1]=s,r[3*l+2]=a;var u=new d.DataTexture(r,e,t,d.RGBAFormat);return u.needsUpdate=!0,u.magFilter=d.NearestFilter,u}static computeTransformedBoundingBox(e,t){var i=[new d.Vector3(e.min.x,e.min.y,e.min.z).applyMatrix4(t),new d.Vector3(e.min.x,e.min.y,e.min.z).applyMatrix4(t),new d.Vector3(e.max.x,e.min.y,e.min.z).applyMatrix4(t),new d.Vector3(e.min.x,e.max.y,e.min.z).applyMatrix4(t),new d.Vector3(e.min.x,e.min.y,e.max.z).applyMatrix4(t),new d.Vector3(e.min.x,e.max.y,e.max.z).applyMatrix4(t),new d.Vector3(e.max.x,e.max.y,e.min.z).applyMatrix4(t),new d.Vector3(e.max.x,e.min.y,e.max.z).applyMatrix4(t),new d.Vector3(e.max.x,e.max.y,e.max.z).applyMatrix4(t)],n=new d.Box3;return n.setFromPoints(i),n}static pixelsArrayToImage(e,t,i){let n=document.createElement("canvas");n.width=t,n.height=i;let r=n.getContext("2d");e=new e.constructor(e);for(let t=0;t<e.length;t++)e[4*t+3]=255;let o=r.createImageData(t,i);o.data.set(e),r.putImageData(o,0,0);let s=new Image;return s.src=n.toDataURL(),s}}var Z={RAINBOW:[[0,new d.Color(.278,0,.714)],[1/6,new d.Color(0,0,1)],[2/6,new d.Color(0,1,1)],[.5,new d.Color(0,1,0)],[4/6,new d.Color(1,1,0)],[5/6,new d.Color(1,.64,0)],[1,new d.Color(1,0,0)]],SPECTRAL:[[0,new d.Color(.3686,.3098,.6353)],[.1,new d.Color(.1961,.5333,.7412)],[.2,new d.Color(.4,.7608,.6471)],[.3,new d.Color(.6706,.8667,.6431)],[.4,new d.Color(.902,.9608,.5961)],[.5,new d.Color(1,1,.749)],[.6,new d.Color(.9961,.8784,.5451)],[.7,new d.Color(.9922,.6824,.3804)],[.8,new d.Color(.9569,.4275,.2627)],[.9,new d.Color(.8353,.2431,.3098)],[1,new d.Color(.6196,.0039,.2588)]],PLASMA:[[0,new d.Color(.241,.015,.61)],[.1,new d.Color(.387,.001,.654)],[.2,new d.Color(.524,.025,.653)],[.3,new d.Color(.651,.125,.596)],[.4,new d.Color(.752,.227,.513)],[.5,new d.Color(.837,.329,.431)],[.6,new d.Color(.907,.435,.353)],[.7,new d.Color(.963,.554,.272)],[.8,new d.Color(.992,.681,.195)],[.9,new d.Color(.987,.822,.144)],[1,new d.Color(.94,.975,.131)]],YELLOW_GREEN:[[0,new d.Color(.1647,.2824,.3451)],[.1,new d.Color(.1338,.3555,.4227)],[.2,new d.Color(.061,.4319,.4864)],[.3,new d.Color(0,.5099,.5319)],[.4,new d.Color(0,.5881,.5569)],[.5,new d.Color(.137,.665,.5614)],[.6,new d.Color(.2906,.7395,.5477)],[.7,new d.Color(.4453,.8099,.5201)],[.8,new d.Color(.6102,.8748,.485)],[.9,new d.Color(.7883,.9323,.4514)],[1,new d.Color(.9804,.9804,.4314)]],VIRIDIS:[[0,new d.Color(.267,.005,.329)],[.1,new d.Color(.283,.141,.458)],[.2,new d.Color(.254,.265,.53)],[.3,new d.Color(.207,.372,.553)],[.4,new d.Color(.164,.471,.558)],[.5,new d.Color(.128,.567,.551)],[.6,new d.Color(.135,.659,.518)],[.7,new d.Color(.267,.749,.441)],[.8,new d.Color(.478,.821,.318)],[.9,new d.Color(.741,.873,.15)],[1,new d.Color(.993,.906,.144)]],INFERNO:[[0,new d.Color(.077,.042,.206)],[.1,new d.Color(.225,.036,.388)],[.2,new d.Color(.373,.074,.432)],[.3,new d.Color(.522,.128,.42)],[.4,new d.Color(.665,.182,.37)],[.5,new d.Color(.797,.255,.287)],[.6,new d.Color(.902,.364,.184)],[.7,new d.Color(.969,.516,.063)],[.8,new d.Color(.988,.683,.072)],[.9,new d.Color(.961,.859,.298)],[1,new d.Color(.988,.998,.645)]],GRAYSCALE:[[0,new d.Color(0,0,0)],[1,new d.Color(1,1,1)]]};const $=e=>e.raw[0];var J={};J.vertex=$`
precision highp float;
precision highp int;

#define MAX_CLIP_POLYGONS 8

`+d.ShaderChunk.common+"\n"+d.ShaderChunk.logdepthbuf_pars_vertex+$`

attribute vec3 position;
attribute vec3 color;
attribute float intensity;
attribute float classification;
attribute float returnNumber;
attribute float numberOfReturns;
attribute float pointSourceID;
attribute vec4 indices;
attribute float spacing;

uniform mat4 modelMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 uViewInv;

uniform float uScreenWidth;
uniform float uScreenHeight;

uniform float fov;
uniform float near;
uniform float far;

uniform bool uDebug;

uniform bool uUseOrthographicCamera;
uniform float uOrthoWidth;
uniform float uOrthoHeight;

#define CLIPTASK_NONE 0
#define CLIPTASK_HIGHLIGHT 1
#define CLIPTASK_SHOW_INSIDE 2
#define CLIPTASK_SHOW_OUTSIDE 3

#define CLIPMETHOD_INSIDE_ANY 0
#define CLIPMETHOD_INSIDE_ALL 1

uniform int clipTask;
uniform int clipMethod;

#if defined(num_clipboxes) && num_clipboxes > 0
	uniform mat4 clipBoxes[num_clipboxes];
#endif

#if defined(num_clipspheres) && num_clipspheres > 0
	uniform mat4 uClipSpheres[num_clipspheres];
#endif

#if defined(num_clippolygons) && num_clippolygons > 0
	uniform int uClipPolygonVCount[num_clippolygons];
	uniform vec3 uClipPolygonVertices[num_clippolygons * 8];
	uniform mat4 uClipPolygonWVP[num_clippolygons];
#endif

uniform float size;
uniform float minSize;
uniform float maxSize;

uniform float uPCIndex;
uniform float uOctreeSpacing;
uniform float uNodeSpacing;
uniform float uOctreeSize;
uniform vec3 uBBSize;
uniform float uLevel;
uniform float uVNStart;
uniform bool uIsLeafNode;

uniform vec3 uColor;
uniform float uOpacity;

uniform vec2 elevationRange;
uniform vec2 intensityRange;
uniform float intensityGamma;
uniform float intensityContrast;
uniform float intensityBrightness;
uniform float rgbGamma;
uniform float rgbContrast;
uniform float rgbBrightness;
uniform float uTransition;
uniform float wRGB;
uniform float wIntensity;
uniform float wElevation;
uniform float wClassification;
uniform float wReturnNumber;
uniform float wSourceID;

uniform vec3 uShadowColor;

uniform sampler2D visibleNodes;
uniform sampler2D gradient;
uniform sampler2D classificationLUT;

#if defined(num_clipplanes) && num_clipplanes > 0

uniform vec4 clipPlanes[num_clipplanes];

bool isClipped(vec3 point) {
	bool clipped = false;
	for (int i = 0; i < num_clipplanes; ++i) {
		vec4 p = clipPlanes[i];
		clipped = clipped || dot(-point, p.xyz) > p.w;
	}
	return clipped;
}

#else

bool isClipped(vec3 point) {
	return false;
}

#endif

#if defined(num_shadowmaps) && num_shadowmaps > 0
	uniform sampler2D uShadowMap[num_shadowmaps];
	uniform mat4 uShadowWorldView[num_shadowmaps];
	uniform mat4 uShadowProj[num_shadowmaps];
#endif

#if defined num_hiddenclassifications && num_hiddenclassifications > 0
	uniform float hiddenClassifications[num_hiddenclassifications];
#endif

#if defined num_hiddenpointsourceids && num_hiddenpointsourceids > 0
  uniform sampler2D hiddenPointSourceIDs;
#endif

uniform float selectedPointSourceID;
uniform vec3 selectedPointSourceIDColor;

varying vec3 vColor;
varying float vLogDepth;
varying vec3 vViewPosition;
varying float vRadius;
varying float vPointSize;

float round(float number)
{
	return floor(number + 0.5);
}

//---------------------
//OCTREE
//---------------------

#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_octree)

	/**
	 * number of 1-bits up to inclusive index position
	 * number is treated as if it were an integer in the range 0-255
	 */
	int numberOfOnes(int number, int index)
	{
		int numOnes = 0;
		int tmp = 128;

		for(int i = 7; i >= 0; i--)
		{
			if(number >= tmp)
			{
				number = number - tmp;

				if(i <= index)
				{
					numOnes++;
				}
			}

			tmp = tmp / 2;
		}

		return numOnes;
	}

	/**
	 * checks whether the bit at index is 1
	 * number is treated as if it were an integer in the range 0-255
	 */
	bool isBitSet(int number, int index)
	{
		//weird multi else if due to lack of proper array, int and bitwise support in WebGL 1.0
		int powi = 1;

		if(index == 0)
		{
			powi = 1;
		}
		else if(index == 1)
		{
			powi = 2;
		}
		else if(index == 2)
		{
			powi = 4;
		}
		else if(index == 3)
		{
			powi = 8;
		}
		else if(index == 4)
		{
			powi = 16;
		}
		else if(index == 5)
		{
			powi = 32;
		}
		else if(index == 6)
		{
			powi = 64;
		}
		else if(index == 7)
		{
			powi = 128;
		}
		else
		{
			return false;
		}

		int ndp = number / powi;

		return mod(float(ndp), 2.0) != 0.0;
	}

	/**
	 * find the LOD at the point position
	 */
	float getLOD()
	{
		vec3 offset = vec3(0.0, 0.0, 0.0);
		int iOffset = int(uVNStart);
		float depth = uLevel;

		for(float i = 0.0; i <= 30.0; i++)
		{
			float nodeSizeAtLevel = uOctreeSize / pow(2.0, i + uLevel + 0.0);

			vec3 index3d = (position-offset) / nodeSizeAtLevel;
			index3d = floor(index3d + 0.5);
			int index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));

			vec4 value = texture2D(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));
			int mask = int(round(value.r * 255.0));

			if(isBitSet(mask, index))
			{
				//there are more visible child nodes at this position
				int advanceG = int(round(value.g * 255.0)) * 256;
				int advanceB = int(round(value.b * 255.0));
				int advanceChild = numberOfOnes(mask, index - 1);
				int advance = advanceG + advanceB + advanceChild;

				iOffset = iOffset + advance;

				depth++;
			}
			else
			{
				//no more visible child nodes at this position
				return value.a * 255.0;
				//return depth;
			}

			offset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;
		}

		return depth;
	}

	float getSpacing()
	{
		vec3 offset = vec3(0.0, 0.0, 0.0);
		int iOffset = int(uVNStart);
		float depth = uLevel;
		float spacing = uNodeSpacing;

		for(float i = 0.0; i <= 30.0; i++)
		{
			float nodeSizeAtLevel = uOctreeSize / pow(2.0, i + uLevel + 0.0);

			vec3 index3d = (position-offset) / nodeSizeAtLevel;
			index3d = floor(index3d + 0.5);
			int index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));

			vec4 value = texture2D(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));
			int mask = int(round(value.r * 255.0));
			float spacingFactor = value.a;

			if(i > 0.0)
			{
				spacing = spacing / (255.0 * spacingFactor);
			}

			if(isBitSet(mask, index))
			{
				//there are more visible child nodes at this position
				int advanceG = int(round(value.g * 255.0)) * 256;
				int advanceB = int(round(value.b * 255.0));
				int advanceChild = numberOfOnes(mask, index - 1);
				int advance = advanceG + advanceB + advanceChild;

				iOffset = iOffset + advance;

				depth++;
			}
			else
			{
				//no more visible child nodes at this position
				return spacing;
			}

			offset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;
		}

		return spacing;
	}

	float getPointSizeAttenuation()
	{
		return pow(2.0, getLOD());
	}
#endif

//---------------------
//KD-TREE
//---------------------
#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_kdtree)
	float getLOD()
	{
		vec3 offset = vec3(0.0, 0.0, 0.0);
		float iOffset = 0.0;
		float depth = 0.0;

		vec3 size = uBBSize;
		vec3 pos = position;

		for(float i = 0.0; i <= 1000.0; i++)
		{
			vec4 value = texture2D(visibleNodes, vec2(iOffset / 2048.0, 0.0));

			int children = int(value.r * 255.0);
			float next = value.g * 255.0;
			int split = int(value.b * 255.0);

			if(next == 0.0)
			{
			 	return depth;
			}

			vec3 splitv = vec3(0.0, 0.0, 0.0);
			if(split == 1)
			{
				splitv.x = 1.0;
			}
			else if(split == 2)
			{
			 	splitv.y = 1.0;
			}
			else if(split == 4)
			{
			 	splitv.z = 1.0;
			}

			iOffset = iOffset + next;

			float factor = length(pos * splitv / size);

			//Left
			if(factor < 0.5)
			{
				if(children == 0 || children == 2)
				{
					return depth;
				}
			}
			//Right
			else
			{
				pos = pos - size * splitv * 0.5;
				if(children == 0 || children == 1)
				{
					return depth;
				}
				if(children == 3)
				{
					iOffset = iOffset + 1.0;
				}
			}

			size = size * ((1.0 - (splitv + 1.0) / 2.0) + 0.5);
			depth++;
		}

		return depth;
	}

	float getPointSizeAttenuation()
	{
		return 0.5 * pow(1.3, getLOD());
	}
#endif

//formula adapted from: http://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-5-contrast-adjustment/
float getContrastFactor(float contrast)
{
	return (1.0158730158730156 * (contrast + 1.0)) / (1.0158730158730156 - contrast);
}

vec3 getRGB()
{
	vec3 rgb = color;

	rgb = pow(rgb, vec3(rgbGamma));
	rgb = rgb + rgbBrightness;
	rgb = clamp(rgb, 0.0, 1.0);

	return rgb;
}

float getIntensity()
{
	float w = (intensity - intensityRange.x) / (intensityRange.y - intensityRange.x);
	w = pow(w, intensityGamma);
	w = w + intensityBrightness;
	w = (w - 0.5) * getContrastFactor(intensityContrast) + 0.5;
	w = clamp(w, 0.0, 1.0);

	return w;
}

vec3 getElevation()
{
	vec4 world = modelMatrix * vec4( position, 1.0 );
	float w = (world.z - elevationRange.x) / (elevationRange.y - elevationRange.x);
	return texture2D(gradient, vec2(w,1.0-w)).rgb;
}

vec4 getClassification()
{
	vec2 uv = vec2(classification / 255.0, 0.5);
	return texture2D(classificationLUT, uv);
}

vec3 getReturnNumber()
{
	if(numberOfReturns == 1.0)
	{
		return vec3(1.0, 1.0, 0.0);
	}
	else
	{
		if(returnNumber == 1.0)
		{
			return vec3(1.0, 0.0, 0.0);
		}
		else if(returnNumber == numberOfReturns)
		{
			return vec3(0.0, 0.0, 1.0);
		}
		else
		{
			return vec3(0.0, 1.0, 0.0);
		}
	}
}

vec3 getSourceID()
{
	float w = mod(pointSourceID, 10.0) / 10.0;
	return texture2D(gradient, vec2(w,1.0 - w)).rgb;
}

vec3 getCompositeColor()
{
	vec3 c;
	float w;

	c += wRGB * getRGB();
	w += wRGB;

	c += wIntensity * getIntensity() * vec3(1.0, 1.0, 1.0);
	w += wIntensity;

	c += wElevation * getElevation();
	w += wElevation;

	c += wReturnNumber * getReturnNumber();
	w += wReturnNumber;

	c += wSourceID * getSourceID();
	w += wSourceID;

	vec4 cl = wClassification * getClassification();
  c += cl.a * cl.rgb;
	w += wClassification * cl.a;

	c = c / w;

	if(w == 0.0)
	{
		gl_Position = vec4(100.0, 100.0, 100.0, 0.0);
	}

	return c;
}

vec3 getColor()
{
	vec3 color;

	#ifdef selection_type_color
	if (pointSourceID == selectedPointSourceID)
	{
		return selectedPointSourceIDColor;
	}
	#endif

	#ifdef color_type_rgb
		color = getRGB();
	#elif defined color_type_height
		color = getElevation();
	#elif defined color_type_rgb_height
		vec3 cHeight = getElevation();
		color = (1.0 - uTransition) * getRGB() + uTransition * cHeight;
	#elif defined color_type_depth
		float linearDepth = gl_Position.w;
		float expDepth = (gl_Position.z / gl_Position.w) * 0.5 + 0.5;
		color = vec3(linearDepth, expDepth, 0.0);
	#elif defined color_type_intensity
		float w = getIntensity();
		color = vec3(w, w, w);
	#elif defined color_type_intensity_gradient
		float w = getIntensity();
		color = texture2D(gradient, vec2(w,1.0-w)).rgb;
	#elif defined color_type_color
		color = uColor;
	#elif defined color_type_lod
		float depth = getLOD();
		float w = depth / 10.0;
		color = texture2D(gradient, vec2(w,1.0-w)).rgb;
	#elif defined color_type_point_index
		color = indices.rgb;
	#elif defined color_type_classification
		vec4 cl = getClassification();
		color = cl.rgb;
	#elif defined color_type_return_number
		color = getReturnNumber();
	#elif defined color_type_source
		color = getSourceID();
	#elif defined color_type_normal
		color = (modelMatrix * vec4(normal, 0.0)).xyz;
	#elif defined color_type_phong
		color = color;
	#elif defined color_type_composite
		color = getCompositeColor();
	#endif

	#ifndef color_type_point_index
		if (pointSourceID == selectedPointSourceID)
		{
			color[0] = min(color[0] + 0.2, 1.0);
			color[1] = min(color[1] + 0.2, 1.0);
			color[2] = min(color[2] + 0.2, 1.0);
		}
	#endif

	return color;
}

float getPointSize()
{
	float pointSize = 1.0;

	float slope = tan(fov / 2.0);
	float projFactor = -0.5 * uScreenHeight / (slope * vViewPosition.z);

	float r = uOctreeSpacing * 1.7;
	vRadius = r;

	#if defined fixed_point_size
		pointSize = size;
	#elif defined attenuated_point_size
		if(uUseOrthographicCamera)
		{
			pointSize = size;
		}
		else
		{
			pointSize = size * spacing * projFactor;
		}
	#elif defined adaptive_point_size
		if(uUseOrthographicCamera)
		{
			float worldSpaceSize = 1.0 * size * r / getPointSizeAttenuation();
			pointSize = (worldSpaceSize / uOrthoWidth) * uScreenWidth;
		}
		else
		{
			if(uIsLeafNode && false)
			{
				pointSize = size * spacing * projFactor;
			}
			else
			{
				float worldSpaceSize = 1.0 * size * r / getPointSizeAttenuation();
				pointSize = worldSpaceSize * projFactor;
			}
		}
	#endif

	pointSize = max(minSize, pointSize);
	pointSize = min(maxSize, pointSize);

	vRadius = pointSize / projFactor;

	return pointSize;
}

#if defined num_clippolygons && num_clippolygons > 0
	bool pointInClipPolygon(vec3 point, int polyIdx)
	{
		mat4 wvp = uClipPolygonWVP[polyIdx];

		vec4 pointNDC = wvp * vec4(point, 1.0);
		pointNDC.xy = pointNDC.xy / pointNDC.w;

		int j = uClipPolygonVCount[polyIdx] - 1;
		bool c = false;
		for(int i = 0; i < 8; i++)
		{
			if(i == uClipPolygonVCount[polyIdx])
			{
				break;
			}

			vec3 verti = uClipPolygonVertices[polyIdx * 8 + i];
			vec3 vertj = uClipPolygonVertices[polyIdx * 8 + j];

			if(((verti.y > pointNDC.y) != (vertj.y > pointNDC.y)) && (pointNDC.x < (vertj.x-verti.x) * (pointNDC.y-verti.y) / (vertj.y-verti.y) + verti.x))
			{
				c = !c;
			}

			j = i;
		}

		return c;
	}
#endif

void doClipping()
{
	#if !defined color_type_composite
		vec4 cl = getClassification();
		if(cl.a == 0.0)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 0.0);

			return;
		}
	#endif

	int clipVolumesCount = 0;
	int insideCount = 0;

	#if defined(num_clipboxes) && num_clipboxes > 0
		for(int i = 0; i < num_clipboxes; i++)
		{
			vec4 clipPosition = clipBoxes[i] * modelMatrix * vec4( position, 1.0 );
			bool inside = -0.5 <= clipPosition.x && clipPosition.x <= 0.5;
			inside = inside && -0.5 <= clipPosition.y && clipPosition.y <= 0.5;
			inside = inside && -0.5 <= clipPosition.z && clipPosition.z <= 0.5;

			insideCount = insideCount + (inside ? 1 : 0);
			clipVolumesCount++;
		}
	#endif

	#if defined(num_clippolygons) && num_clippolygons > 0
		for(int i = 0; i < num_clippolygons; i++)
		{
			bool inside = pointInClipPolygon(position, i);

			insideCount = insideCount + (inside ? 1 : 0);
			clipVolumesCount++;
		}
	#endif

	bool insideAny = insideCount > 0;
	bool insideAll = (clipVolumesCount > 0) && (clipVolumesCount == insideCount);

	if(clipMethod == CLIPMETHOD_INSIDE_ANY)
	{
		if(insideAny && clipTask == CLIPTASK_HIGHLIGHT)
		{
			vColor.r += 0.5;
		}
		else if(!insideAny && clipTask == CLIPTASK_SHOW_INSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
		else if(insideAny && clipTask == CLIPTASK_SHOW_OUTSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
	}
	else if(clipMethod == CLIPMETHOD_INSIDE_ALL)
	{
		if(insideAll && clipTask == CLIPTASK_HIGHLIGHT)
		{
			vColor.r += 0.5;
		}
		else if(!insideAll && clipTask == CLIPTASK_SHOW_INSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
		else if(insideAll && clipTask == CLIPTASK_SHOW_OUTSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
	}
}

bool isHiddenClassification()
{
	#if defined num_hiddenclassifications && num_hiddenclassifications > 0
	for (int i = 0; i < num_hiddenclassifications; i++)
	{
		if (classification == hiddenClassifications[i])
		{
			return true;
		}
	}
	#endif

	return false;
}

bool isHiddenPointSourceID()
{
	#if defined num_hiddenpointsourceids && num_hiddenpointsourceids > 0
	float x = mod(pointSourceID, 256.0);
	float y = floor(pointSourceID / 256.0);
	vec2 xy = vec2(x / 255.0, y / 255.0);
	float r = texture2D(hiddenPointSourceIDs, xy).r;

	return r == 1.0;
	#endif

	return false;
}

void main()
{
	if (isHiddenClassification() || isHiddenPointSourceID())
	{
		gl_Position = vec4(100.0, 100.0, 100.0, 1.0); // Outside clip space
		return; // Note: 'discard' only supported in fragment shaders
	}

	vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
	vViewPosition = mvPosition.xyz;
	gl_Position = projectionMatrix * mvPosition;

	vLogDepth = log2(-mvPosition.z);

	//POINT SIZE
	float pointSize = getPointSize();
	gl_PointSize = pointSize;
	vPointSize = pointSize;
	`+d.ShaderChunk.logdepthbuf_vertex+$`

	//COLOR
	vColor = getColor();

	#if defined hq_depth_pass
		float originalDepth = gl_Position.w;
		float adjustedDepth = originalDepth + 2.0 * vRadius;
		float adjust = adjustedDepth / originalDepth;

		mvPosition.xyz = mvPosition.xyz * adjust;
		gl_Position = projectionMatrix * mvPosition;
	#endif

	//CLIPPING
	vec4 clipPosition = modelMatrix * vec4( position, 1.0 );
	if (isClipped(clipPosition.xyz)) {
		gl_Position = vec4(100.0, 100.0, 100.0, 1.0); // Outside clip space
	}
	doClipping();

	#if defined num_clipspheres && num_clipspheres > 0
		for(int i = 0; i < num_clipspheres; i++)
		{
			vec4 sphereLocal = uClipSpheres[i] * mvPosition;

			float distance = length(sphereLocal.xyz);

			if(distance < 1.0)
			{
				float w = distance;
				vec3 cGradient = texture2D(gradient, vec2(w, 1.0 - w)).rgb;

				vColor = cGradient;
			}
		}
	#endif

	#if defined num_shadowmaps && num_shadowmaps > 0

		const float sm_near = 0.1;
		const float sm_far = 10000.0;

		for(int i = 0; i < num_shadowmaps; i++)
		{
			vec3 viewPos = (uShadowWorldView[i] * vec4(position, 1.0)).xyz;
			float distanceToLight = abs(viewPos.z);

			vec4 projPos = uShadowProj[i] * uShadowWorldView[i] * vec4(position, 1);
			vec3 nc = projPos.xyz / projPos.w;

			float u = nc.x * 0.5 + 0.5;
			float v = nc.y * 0.5 + 0.5;

			vec2 sampleStep = vec2(1.0 / (2.0*1024.0), 1.0 / (2.0*1024.0)) * 1.5;
			vec2 sampleLocations[9];

			sampleLocations[0] = vec2(0.0, 0.0);
			sampleLocations[1] = sampleStep;
			sampleLocations[2] = -sampleStep;
			sampleLocations[3] = vec2(sampleStep.x, -sampleStep.y);
			sampleLocations[4] = vec2(-sampleStep.x, sampleStep.y);
			sampleLocations[5] = vec2(0.0, sampleStep.y);
			sampleLocations[6] = vec2(0.0, -sampleStep.y);
			sampleLocations[7] = vec2(sampleStep.x, 0.0);
			sampleLocations[8] = vec2(-sampleStep.x, 0.0);

			float visibleSamples = 0.0;
			float numSamples = 0.0;

			float bias = vRadius * 2.0;

			for(int j = 0; j < 9; j++)
			{
				vec4 depthMapValue = texture2D(uShadowMap[i], vec2(u, v) + sampleLocations[j]);

				float linearDepthFromSM = depthMapValue.x + bias;
				float linearDepthFromViewer = distanceToLight;

				if(linearDepthFromSM > linearDepthFromViewer)
				{
					visibleSamples += 1.0;
				}

				numSamples += 1.0;
			}

			float visibility = visibleSamples / numSamples;

			if(u < 0.0 || u > 1.0 || v < 0.0 || v > 1.0 || nc.x < -1.0 || nc.x > 1.0 || nc.y < -1.0 || nc.y > 1.0 || nc.z < -1.0 || nc.z > 1.0)
			{
				//vColor = vec3(0.0, 0.0, 0.2);
			}
			else
			{
				vColor = vColor * visibility + vColor * uShadowColor * (1.0 - visibility);
			}
		}

	#endif
}`,J.fragment=$`

#if defined USE_LOGDEPTHBUF_EXT || defined paraboloid_point_shape
	#extension GL_EXT_frag_depth : enable
#endif

precision highp float;
precision highp int;

`+d.ShaderChunk.common+"\n"+d.ShaderChunk.logdepthbuf_pars_fragment+$`

uniform mat4 viewMatrix;
uniform mat4 uViewInv;
uniform mat4 uProjInv;
uniform vec3 cameraPosition;

uniform mat4 projectionMatrix;
uniform float uOpacity;

uniform float blendHardness;
uniform float blendDepthSupplement;
uniform float fov;
uniform float uSpacing;
uniform float near;
uniform float far;
uniform float uPCIndex;
uniform float uScreenWidth;
uniform float uScreenHeight;

varying vec3 vColor;
varying float vLogDepth;
varying vec3 vViewPosition;
varying float vRadius;
varying float vPointSize;
varying vec3 vPosition;

void main()
{
	vec3 color = vColor;
	float depth = gl_FragCoord.z;

	#if defined circle_point_shape || defined paraboloid_point_shape
		float u = (2.0 * gl_PointCoord.x) - 1.0;
		float v = (2.0 * gl_PointCoord.y) - 1.0;
	#endif

	#if defined circle_point_shape
		float cc = (u*u) + (v*v);
		if(cc > 1.0)
		{
			discard;
		}
	#endif

	#if defined color_type_point_index
		gl_FragColor = vec4(color, uPCIndex / 255.0);
	#else
		gl_FragColor = vec4(color, uOpacity);
	#endif

	#if defined paraboloid_point_shape
		float wi = -( u*u + v*v);
		vec4 pos = vec4(vViewPosition, 1.0);
		pos.z += wi * vRadius;
		float linearDepth = -pos.z;
		pos = projectionMatrix * pos;
		pos = pos / pos.w;
		float expDepth = pos.z;
		depth = (pos.z + 1.0) / 2.0;

		gl_FragDepthEXT = depth;

		#if defined color_type_depth
			color.r = linearDepth;
			color.g = expDepth;
		#endif
	#endif

	`+d.ShaderChunk.logdepthbuf_fragment+$`

	#if defined weighted_splats
		float distance = 2.0 * length(gl_PointCoord.xy - 0.5);
		float weight = max(0.0, 1.0 - distance);
		weight = pow(weight, 1.5);

		gl_FragColor.a = weight;
		gl_FragColor.xyz = gl_FragColor.xyz * weight;
	#endif
}`;class Q extends d.RawShaderMaterial{static makeOnBeforeRender(e,t,i){return(n,r,o,s,a)=>{const l=a,u=l.uniforms;u.level.value=t.level;const h=l.visibleNodeTextureOffsets.get(t.name);void 0!==h&&(u.vnStart.value=h),u.pcIndex.value=void 0!==i?i:e.visibleNodes.indexOf(t),a.uniformsNeedUpdate=!0}}constructor(e={}){super(),this.visibleNodesTexture=K.generateDataTexture(2048,1,new d.Color(16777215)),this.visibleNodesTexture.minFilter=d.NearestFilter,this.visibleNodesTexture.magFilter=d.NearestFilter;var t=function(e,t){return void 0!==e?e:t},i=t(e.size,1),n=t(e.minSize,2),r=t(e.maxSize,50),o=t(e.treeType,fe.OCTREE);this._pointSizeType=de.FIXED,this._shape=pe.SQUARE,this._pointColorType=ce.RGB,this._useClipBox=!1,this._weighted=!1,this._gradient=Z.SPECTRAL,this._treeType=o,this._useEDL=!1,this._snapEnabled=!1,this._numSnapshots=0,this._defaultIntensityRangeChanged=!1,this._defaultElevationRangeChanged=!1,this._pointSelectionType=me.BRIGHTNESS,this.clipBoxes=[],this.clipPolygons=[],this.gradientTexture=Q.generateGradientTexture(this._gradient),this.lights=!1,this.fog=!1,this.defines=new Map,this.attributes={position:{type:"fv",value:[]},color:{type:"fv",value:[]},normal:{type:"fv",value:[]},intensity:{type:"f",value:[]},classification:{type:"f",value:[]},returnNumber:{type:"f",value:[]},numberOfReturns:{type:"f",value:[]},pointSourceID:{type:"f",value:[]},indices:{type:"fv",value:[]}},this.uniforms={level:{type:"f",value:0},vnStart:{type:"f",value:0},spacing:{type:"f",value:1},blendHardness:{type:"f",value:2},blendDepthSupplement:{type:"f",value:0},fov:{type:"f",value:1},screenWidth:{type:"f",value:1},screenHeight:{type:"f",value:1},near:{type:"f",value:.1},far:{type:"f",value:1},uColor:{type:"c",value:new d.Color(16777215)},uOpacity:{type:"f",value:1},size:{type:"f",value:i},minSize:{type:"f",value:n},maxSize:{type:"f",value:r},octreeSize:{type:"f",value:0},bbSize:{type:"fv",value:[0,0,0]},elevationRange:{type:"2fv",value:[0,0]},clipBoxCount:{type:"f",value:0},clipPolygonCount:{type:"i",value:0},clipBoxes:{type:"Matrix4fv",value:[]},clipPolygons:{type:"3fv",value:[]},clipPolygonVCount:{type:"iv",value:[]},clipPolygonVP:{type:"Matrix4fv",value:[]},visibleNodes:{type:"t",value:this.visibleNodesTexture},pcIndex:{type:"f",value:0},gradient:{type:"t",value:this.gradientTexture},classificationLUT:{type:"t",value:this.classificationTexture},uHQDepthMap:{type:"t",value:null},toModel:{type:"Matrix4f",value:[]},diffuse:{type:"fv",value:[1,1,1]},transition:{type:"f",value:.5},intensityRange:{type:"fv",value:[0,65e3]},intensityGamma:{type:"f",value:1},intensityContrast:{type:"f",value:0},intensityBrightness:{type:"f",value:0},rgbGamma:{type:"f",value:1},rgbContrast:{type:"f",value:0},rgbBrightness:{type:"f",value:0},wRGB:{type:"f",value:.5},wIntensity:{type:"f",value:0},wElevation:{type:"f",value:0},wClassification:{type:"f",value:0},wReturnNumber:{type:"f",value:0},wSourceID:{type:"f",value:0},useOrthographicCamera:{type:"b",value:!1},clipTask:{type:"i",value:1},clipMethod:{type:"i",value:1},uSnapshot:{type:"tv",value:[]},uSnapshotDepth:{type:"tv",value:[]},uSnapView:{type:"Matrix4fv",value:[]},uSnapProj:{type:"Matrix4fv",value:[]},uSnapProjInv:{type:"Matrix4fv",value:[]},uSnapViewInv:{type:"Matrix4fv",value:[]},uShadowColor:{type:"3fv",value:[0,0,0]},uFilterReturnNumberRange:{type:"fv",value:[0,7]},uFilterNumberOfReturnsRange:{type:"fv",value:[0,7]},uFilterGPSTimeClipRange:{type:"fv",value:[0,7]},hiddenClassifications:{type:"fv",value:[]},hiddenPointSourceIDs:{type:"t",value:null},selectedPointSourceID:{type:"f",value:-1},selectedPointSourceIDColor:{type:"3fv",value:new d.Color(.1,.61,.78)}},this.hiddenPointSourceIDs=[],this.classification=le.DEFAULT,this.defaultAttributeValues.normal=[0,0,0],this.defaultAttributeValues.classification=[0,0,0],this.defaultAttributeValues.indices=[0,0,0,0];var s=this.getDefines();this.vertexShader=s+J.vertex,this.fragmentShader=s+J.fragment,this.vertexColors=d.VertexColors}setDefine(e,t){null!=t?this.defines.get(e)!==t&&(this.defines.set(e,t),this.updateShaderSource()):this.removeDefine(e)}removeDefine(e){this.defines.delete(e)}updateShaderSource(){var e=this.getDefines();this.vertexShader=e+J.vertex,this.fragmentShader=e+J.fragment,1===this.opacity?(this.blending=d.NoBlending,this.transparent=!1,this.depthTest=!0,this.depthWrite=!0,this.depthFunc=d.LessEqualDepth):this.opacity<1&&!this.useEDL&&(this.blending=d.AdditiveBlending,this.transparent=!0,this.depthTest=!1,this.depthWrite=!0,this.depthFunc=d.AlwaysDepth),this.weighted&&(this.blending=d.AdditiveBlending,this.transparent=!0,this.depthTest=!0,this.depthWrite=!1),this.needsUpdate=!0}onBeforeCompile(e,t){if(t.capabilities.logarithmicDepthBuffer){var i="#define USE_LOGDEPTHBUF\n#define USE_LOGDEPTHBUF_EXT\n#define EPSILON 1e-6\n";e.fragmentShader=i+e.fragmentShader,e.vertexShader=i+e.vertexShader}}getDefines(){var e=[];for(var[t,i]of(this.pointSizeType===de.FIXED?e.push("#define fixed_point_size"):this.pointSizeType===de.ATTENUATED?e.push("#define attenuated_point_size"):this.pointSizeType===de.ADAPTIVE&&e.push("#define adaptive_point_size"),this.shape===pe.SQUARE?e.push("#define square_point_shape"):this.shape===pe.CIRCLE?e.push("#define circle_point_shape"):this.shape===pe.PARABOLOID&&e.push("#define paraboloid_point_shape"),this._useEDL&&e.push("#define use_edl"),this._snapEnabled&&e.push("#define snap_enabled"),this._pointColorType===ce.RGB?e.push("#define color_type_rgb"):this._pointColorType===ce.COLOR?e.push("#define color_type_color"):this._pointColorType===ce.DEPTH?e.push("#define color_type_depth"):this._pointColorType===ce.HEIGHT?e.push("#define color_type_height"):this._pointColorType===ce.INTENSITY?e.push("#define color_type_intensity"):this._pointColorType===ce.INTENSITY_GRADIENT?e.push("#define color_type_intensity_gradient"):this._pointColorType===ce.LOD?e.push("#define color_type_lod"):this._pointColorType===ce.POINT_INDEX?e.push("#define color_type_point_index"):this._pointColorType===ce.CLASSIFICATION?e.push("#define color_type_classification"):this._pointColorType===ce.RETURN_NUMBER?e.push("#define color_type_return_number"):this._pointColorType===ce.SOURCE?e.push("#define color_type_source"):this._pointColorType===ce.NORMAL?e.push("#define color_type_normal"):this._pointColorType===ce.PHONG?e.push("#define color_type_phong"):this._pointColorType===ce.RGB_HEIGHT?e.push("#define color_type_rgb_height"):this._pointColorType===ce.COMPOSITE&&e.push("#define color_type_composite"),this._treeType===fe.OCTREE?e.push("#define tree_type_octree"):this._treeType===fe.KDTREE&&e.push("#define tree_type_kdtree"),this.weighted&&e.push("#define weighted_splats"),this.hiddenClassifications.length&&e.push(`#define num_hiddenclassifications ${this.hiddenClassifications.length}`),this.hiddenPointSourceIDs.length&&e.push(`#define num_hiddenpointsourceids ${this.hiddenPointSourceIDs.length}`),this.pointSelectionType===me.COLOR&&e.push("#define selection_type_color"),this.defines))e.push(i);return e.join("\n")}setClipBoxes(e){if(e){var t=this.clipBoxes.length!==e.length&&(0===e.length||0===this.clipBoxes.length);this.uniforms.clipBoxCount.value=this.clipBoxes.length,this.clipBoxes=e,t&&this.updateShaderSource(),this.uniforms.clipBoxes.value=new Float32Array(16*this.clipBoxes.length);for(var i=0;i<this.clipBoxes.length;i++){var n=e[i];this.uniforms.clipBoxes.value.set(n.inverse.elements,16*i)}for(i=0;i<this.uniforms.clipBoxes.value.length;i++)Number.isNaN(this.uniforms.clipBoxes.value[i])&&(this.uniforms.clipBoxes.value[i]=1/0)}}setClipPolygons(e,t){e&&(this.clipPolygons=e,this.clipPolygons.length!==e.length&&this.updateShaderSource())}get gradient(){return this._gradient}set gradient(e){this._gradient!==e&&(this._gradient=e,this.gradientTexture=Q.generateGradientTexture(this._gradient),this.uniforms.gradient.value=this.gradientTexture)}get useOrthographicCamera(){return this.uniforms.useOrthographicCamera.value}set useOrthographicCamera(e){this.uniforms.useOrthographicCamera.value!==e&&(this.uniforms.useOrthographicCamera.value=e)}get classification(){return this._classification}set classification(e){var t={};for(var i of Object.keys(e))t[i]=e[i].clone();var n=!1;if(void 0===this._classification)n=!1;else for(var i of(n=Object.keys(t).length===Object.keys(this._classification).length,Object.keys(t)))n=(n=n&&void 0!==this._classification[i])&&t[i].equals(this._classification[i]);n||(this._classification=t,this.recomputeClassification())}recomputeClassification(){this.classificationTexture=Q.generateClassificationTexture(this._classification),this.uniforms.classificationLUT.value=this.classificationTexture,this.dispatchEvent({type:"material_property_changed",target:this})}get hiddenClassifications(){return this.uniforms.hiddenClassifications.value}set hiddenClassifications(e){e=this.getDistinctFV(e),JSON.stringify(e)!==JSON.stringify(this.uniforms.hiddenClassifications.value)&&(this.uniforms.hiddenClassifications.value=e,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this}))}get hiddenPointSourceIDsTexture(){return this.uniforms.hiddenPointSourceIDs.value}get hiddenPointSourceIDs(){return this._hiddenPointSourceIDs}set hiddenPointSourceIDs(e){e=this.getDistinctFV(e),JSON.stringify(e)!==JSON.stringify(this._hiddenPointSourceIDs)&&(this._hiddenPointSourceIDs=e,this.recomputeHiddenPointSourceIDs())}getDistinctFV(e){return[...new Set(e)].sort()}recomputeHiddenPointSourceIDs(){const e=this.hiddenPointSourceIDs,t=new Uint8Array(196608);e.forEach((e=>{t[3*e]=255}));const i=new d.DataTexture(t,256,256,d.RGBFormat);i.magFilter=d.NearestFilter,i.needsUpdate=!0,this.uniforms.hiddenPointSourceIDs.value=i,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this})}get selectedPointSourceID(){return this.uniforms.selectedPointSourceID.value}set selectedPointSourceID(e){e!==this.uniforms.selectedPointSourceID.value&&(this.uniforms.selectedPointSourceID.value=e||-1,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this}))}get selectedPointSourceIDColor(){return this.uniforms.selectedPointSourceIDColor.value}set selectedPointSourceIDColor(e){e!==this.uniforms.selectedPointSourceIDColor.value&&(this.uniforms.selectedPointSourceIDColor.value=e,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this}))}get numSnapshots(){return this._numSnapshots}set numSnapshots(e){this._numSnapshots=e}get snapEnabled(){return this._snapEnabled}set snapEnabled(e){this._snapEnabled!==e&&(this._snapEnabled=e,this.updateShaderSource())}get spacing(){return this.uniforms.spacing.value}set spacing(e){this.uniforms.spacing.value!==e&&(this.uniforms.spacing.value=e)}get useClipBox(){return this._useClipBox}set useClipBox(e){this._useClipBox!==e&&(this._useClipBox=e,this.updateShaderSource())}get clipTask(){return this.uniforms.clipTask.value}set clipTask(e){this.uniforms.clipTask.value=e}get clipMethod(){return this.uniforms.clipMethod.value}set clipMethod(e){this.uniforms.clipMethod.value=e}get weighted(){return this._weighted}set weighted(e){this._weighted!==e&&(this._weighted=e,this.updateShaderSource())}get fov(){return this.uniforms.fov.value}set fov(e){this.uniforms.fov.value!==e&&(this.uniforms.fov.value=e,this.updateShaderSource())}get screenWidth(){return this.uniforms.screenWidth.value}set screenWidth(e){this.uniforms.screenWidth.value!==e&&(this.uniforms.screenWidth.value=e,this.updateShaderSource())}get screenHeight(){return this.uniforms.screenHeight.value}set screenHeight(e){this.uniforms.screenHeight.value!==e&&(this.uniforms.screenHeight.value=e,this.updateShaderSource())}get near(){return this.uniforms.near.value}set near(e){this.uniforms.near.value!==e&&(this.uniforms.near.value=e)}get far(){return this.uniforms.far.value}set far(e){this.uniforms.far.value!==e&&(this.uniforms.far.value=e)}get opacity(){return this.uniforms.uOpacity.value}set opacity(e){this.uniforms&&this.uniforms.uOpacity&&this.uniforms.uOpacity.value!==e&&(this.uniforms.uOpacity.value=e,this.updateShaderSource(),this.dispatchEvent({type:"opacity_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get pointColorType(){return this._pointColorType}set pointColorType(e){this._pointColorType!==e&&(this._pointColorType=e,this.updateShaderSource(),this.dispatchEvent({type:"point_color_type_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get pointSizeType(){return this._pointSizeType}set pointSizeType(e){this._pointSizeType!==e&&(this._pointSizeType=e,this.updateShaderSource(),this.dispatchEvent({type:"point_size_type_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get useEDL(){return this._useEDL}set useEDL(e){this._useEDL!==e&&(this._useEDL=e,this.updateShaderSource())}get color(){return this.uniforms.uColor.value}set color(e){this.uniforms.uColor.value.equals(e)||(this.uniforms.uColor.value.copy(e),this.dispatchEvent({type:"color_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get shape(){return this._shape}set shape(e){this._shape!==e&&(this._shape=e,this.updateShaderSource(),this.dispatchEvent({type:"point_shape_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get treeType(){return this._treeType}set treeType(e){this._treeType!==e&&(this._treeType=e,this.updateShaderSource())}get bbSize(){return this.uniforms.bbSize.value}set bbSize(e){this.uniforms.bbSize.value=e}get size(){return this.uniforms.size.value}set size(e){this.uniforms.size.value!==e&&(this.uniforms.size.value=e,this.dispatchEvent({type:"point_size_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get elevationRange(){return this.uniforms.elevationRange.value}set elevationRange(e){(this.uniforms.elevationRange.value[0]!==e[0]||this.uniforms.elevationRange.value[1]!==e[1])&&(this.uniforms.elevationRange.value=e,this._defaultElevationRangeChanged=!0,this.dispatchEvent({type:"material_property_changed",target:this}))}get heightMin(){return this.uniforms.elevationRange.value[0]}set heightMin(e){this.elevationRange=[e,this.elevationRange[1]]}get heightMax(){return this.uniforms.elevationRange.value[1]}set heightMax(e){this.elevationRange=[this.elevationRange[0],e]}get transition(){return this.uniforms.transition.value}set transition(e){this.uniforms.transition.value=e}get intensityRange(){return this.uniforms.intensityRange.value}set intensityRange(e){e instanceof Array&&2===e.length&&(e[0]===this.uniforms.intensityRange.value[0]&&e[1]===this.uniforms.intensityRange.value[1]||(this.uniforms.intensityRange.value=e,this._defaultIntensityRangeChanged=!0,this.dispatchEvent({type:"material_property_changed",target:this})))}get intensityGamma(){return this.uniforms.intensityGamma.value}set intensityGamma(e){this.uniforms.intensityGamma.value!==e&&(this.uniforms.intensityGamma.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get intensityContrast(){return this.uniforms.intensityContrast.value}set intensityContrast(e){this.uniforms.intensityContrast.value!==e&&(this.uniforms.intensityContrast.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get intensityBrightness(){return this.uniforms.intensityBrightness.value}set intensityBrightness(e){this.uniforms.intensityBrightness.value!==e&&(this.uniforms.intensityBrightness.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get rgbGamma(){return this.uniforms.rgbGamma.value}set rgbGamma(e){this.uniforms.rgbGamma.value!==e&&(this.uniforms.rgbGamma.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get rgbContrast(){return this.uniforms.rgbContrast.value}set rgbContrast(e){this.uniforms.rgbContrast.value!==e&&(this.uniforms.rgbContrast.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get rgbBrightness(){return this.uniforms.rgbBrightness.value}set rgbBrightness(e){this.uniforms.rgbBrightness.value!==e&&(this.uniforms.rgbBrightness.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightRGB(){return this.uniforms.wRGB.value}set weightRGB(e){this.uniforms.wRGB.value!==e&&(this.uniforms.wRGB.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightIntensity(){return this.uniforms.wIntensity.value}set weightIntensity(e){this.uniforms.wIntensity.value!==e&&(this.uniforms.wIntensity.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightElevation(){return this.uniforms.wElevation.value}set weightElevation(e){this.uniforms.wElevation.value!==e&&(this.uniforms.wElevation.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightClassification(){return this.uniforms.wClassification.value}set weightClassification(e){this.uniforms.wClassification.value!==e&&(this.uniforms.wClassification.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightReturnNumber(){return this.uniforms.wReturnNumber.value}set weightReturnNumber(e){this.uniforms.wReturnNumber.value!==e&&(this.uniforms.wReturnNumber.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightSourceID(){return this.uniforms.wSourceID.value}set weightSourceID(e){this.uniforms.wSourceID.value!==e&&(this.uniforms.wSourceID.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}static generateGradientTexture(e){var t=64,i=document.createElement("canvas");i.width=t,i.height=t;var n=i.getContext("2d");n.rect(0,0,t,t);for(var r=n.createLinearGradient(0,0,t,t),o=0;o<e.length;o++){var s=e[o];r.addColorStop(s[0],"#"+s[1].getHexString())}n.fillStyle=r,n.fill();var a=new d.CanvasTexture(i);return a.needsUpdate=!0,a.minFilter=d.LinearFilter,a}static generateClassificationTexture(e){for(var t=new Uint8Array(262144),i=0;i<256;i++)for(var n=0;n<256;n++){var r,o=i+256*n;r=e[i]?e[i]:e[i%32]?e[i%32]:e.DEFAULT,t[4*o+0]=255*r.x,t[4*o+1]=255*r.y,t[4*o+2]=255*r.z,t[4*o+3]=255*r.w}var s=new d.DataTexture(t,256,256,d.RGBAFormat);return s.magFilter=d.NearestFilter,s.needsUpdate=!0,s}disableEvents(){void 0===this._hiddenListeners&&(this._hiddenListeners=this._listeners,this._listeners={})}enableEvents(){this._listeners=this._hiddenListeners,this._hiddenListeners=void 0}copyFrom(e){for(var t of this.uniforms)this.uniforms[t].value=e.uniforms[t].value}}class ee extends b{constructor(){super(),this.children={},this.sceneNode=null,this.octree=null}getNumPoints(){return this.geometryNode.numPoints}isLoaded(){return!0}isTreeNode(){return!0}isGeometryNode(){return!1}getLevel(){return this.geometryNode.level}getBoundingSphere(){return this.geometryNode.boundingSphere}getBoundingBox(){return this.geometryNode.boundingBox}getChildren(){let e=[];for(let t=0;t<8;t++)this.children[t]&&e.push(this.children[t]);return e}getPointsInBox(e){if(!this.sceneNode)return null;let t=this.geometryNode.buffer,i=t.offset("position"),n=t.stride,r=new DataView(t.data),o=(new d.Matrix4).getInverse(e.matrixWorld),s=(new d.Matrix4).multiplyMatrices(o,this.sceneNode.matrixWorld),a=[],l=new d.Vector4;for(let e=0;e<t.numElements;e++){let t=r.getFloat32(e*n+i+0,!0),o=r.getFloat32(e*n+i+4,!0),u=r.getFloat32(e*n+i+8,!0);l.set(t,o,u,1),l.applyMatrix4(s),-.5<l.x&&l.x<.5&&-.5<l.y&&l.y<.5&&-.5<l.z&&l.z<.5&&(l.set(t,o,u,1).applyMatrix4(this.sceneNode.matrixWorld),a.push(new d.Vector3(l.x,l.y,l.z)))}return a}get name(){return this.geometryNode.name}}class te extends S{constructor(e,t){super(),this.pointBudget=1/0,this.pcoGeometry=e,this.boundingBox=this.pcoGeometry.boundingBox,this.boundingSphere=this.boundingBox.getBoundingSphere(new d.Sphere),this.material=t||new Q,this.visiblePointsTarget=2e6,this.minimumNodePixelSize=150,this.level=0,this.position.copy(e.offset),this.updateMatrix(),this.showBoundingBox=!1,this.boundingBoxNodes=[],this.loadQueue=[],this.visibleBounds=new d.Box3,this.visibleNodes=[],this.visibleGeometry=[],this.generateDEM=!1,this.profileRequests=[],this.name="",this.tempVector3=new d.Vector3;let i=[this.pcoGeometry.tightBoundingBox,this.getBoundingBoxWorld()].find((e=>void 0!==e));this.updateMatrixWorld(!0),i=K.computeTransformedBoundingBox(i,this.matrixWorld);let n=i.min.z,r=i.max.z;this.material.heightMin=n,this.material.heightMax=r,this.projection=e.projection,this.root=this.pcoGeometry.root}setName(e){this.name!==e&&(this.name=e,this.dispatchEvent({type:"name_changed",name:e,pointcloud:this}))}getName(){return this.name}toTreeNode(e,t){let i=new ee,n=new d.Points(e.geometry,this.material);n.name=e.name,n.position.copy(e.boundingBox.min),n.frustumCulled=!0,n.onBeforeRender=(t,n,r,o,s,a)=>{if(s.program){if(t.getContext().useProgram(s.program.program),s.program.getUniforms().map.level){let i=e.getLevel();s.uniforms.level.value=i,s.program.getUniforms().map.level.setValue(t.getContext(),i)}if(this.visibleNodeTextureOffsets&&s.program.getUniforms().map.vnStart){let e=this.visibleNodeTextureOffsets.get(i);s.uniforms.vnStart.value=e,s.program.getUniforms().map.vnStart.setValue(t.getContext(),e)}if(s.program.getUniforms().map.pcIndex){let e=i.pcIndex?i.pcIndex:this.visibleNodes.indexOf(i);s.uniforms.pcIndex.value=e,s.program.getUniforms().map.pcIndex.setValue(t.getContext(),e)}}},i.geometryNode=e,i.sceneNode=n,i.pointcloud=this,i.children={};for(let t in e.children)i.children[t]=e.children[t];if(t){let r=parseInt(e.name[e.name.length-1]);t.sceneNode.add(n),t.children[r]=i}else this.root=i,this.add(n);return e.oneTimeDisposeHandlers.push((function(){let n=parseInt(e.name[e.name.length-1]);t.sceneNode.remove(i.sceneNode),t.children[n]=e})),i}updateVisibleBounds(){let e=[];for(let t=0;t<this.visibleNodes.length;t++){let i=this.visibleNodes[t],n=!0;for(let e=0;e<i.children.length;e++){let t=i.children[e];t instanceof ee?n=n&&!t.sceneNode.visible:t instanceof F&&(n=!0)}n&&e.push(i)}this.visibleBounds.min=new d.Vector3(1/0,1/0,1/0),this.visibleBounds.max=new d.Vector3(-1/0,-1/0,-1/0);for(let t=0;t<e.length;t++){let i=e[t];this.visibleBounds.expandByPoint(i.getBoundingBox().min),this.visibleBounds.expandByPoint(i.getBoundingBox().max)}}updateMaterial(e,t,i,n){e.fov=i.fov*(Math.PI/180),e.screenWidth=n.domElement.clientWidth,e.screenHeight=n.domElement.clientHeight,e.spacing=this.pcoGeometry.spacing*Math.max(this.scale.x,this.scale.y,this.scale.z),e.near=i.near,e.far=i.far,e.uniforms.octreeSize.value=this.pcoGeometry.boundingBox.getSize(new d.Vector3).x}computeVisibilityTextureData(e,t){h.measureTimings&&performance.mark("computeVisibilityTextureData-start");let i=new Uint8Array(4*e.length),n=new Map;(e=e.slice()).sort((function(e,t){let i=e.geometryNode.name,n=t.geometryNode.name;return i.length!==n.length?i.length-n.length:i<n?-1:i>n?1:0}));let r=new d.Vector3,o=(e,t)=>{r.subVectors(t.center,e.origin);let i=r.dot(e.direction),n=r.dot(r)-i*i,o=t.radius*t.radius;if(n>o)return null;let s=i+Math.sqrt(o-n);return s<0?null:s},s=new Map,a=new Map;for(let r=0;r<e.length;r++){let l=e[r];n.set(l,r);let u=[];for(let t=0;t<8;t++){let i=l.children[t];i&&i.constructor===ee&&e.includes(i,r)&&u.push(i)}l.geometryNode.estimatedSpacing,i[4*r+0]=0,i[4*r+1]=0,i[4*r+2]=0,i[4*r+3]=l.getLevel();for(let t=0;t<u.length;t++){let n=u[t],o=parseInt(n.geometryNode.name.substr(-1));if(i[4*r+0]+=Math.pow(2,o),0===t){let t=e.indexOf(n,r);i[4*r+1]=t-r>>8,i[4*r+2]=(t-r)%256}}let h=l.getBoundingBox().clone().getBoundingSphere(new d.Sphere);h.applyMatrix4(l.sceneNode.matrixWorld),h.applyMatrix4(t.matrixWorldInverse);let p=o(new d.Ray(t.position,t.getWorldDirection(this.tempVector3)),h),c=h.center.distanceTo(t.position)+h.radius;if(null===p&&(p=c),p=Math.max(p,c),s.has(l.getLevel())){let e=s.get(l.getLevel()),t=Math.max(e,p);s.set(l.getLevel(),t)}else s.set(l.getLevel(),p);if(!l.geometryNode.hasChildren){let e={distance:p,i:r};a.set(l,e)}}for(let[e,t]of a){let n=e.getLevel(),r=t.distance,o=t.i;if(!(n<4))for(let[e,t]of s)r<1.2*t&&(i[4*o+3]=e)}return h.measureTimings&&(performance.mark("computeVisibilityTextureData-end"),performance.measure("render.computeVisibilityTextureData","computeVisibilityTextureData-start","computeVisibilityTextureData-end")),{data:i,offsets:n}}nodeIntersectsProfile(e,t){let i=e.boundingBox.clone().applyMatrix4(this.matrixWorld).getBoundingSphere(new d.Sphere),n=!1;for(let e=0;e<t.points.length-1;e++){let r=new d.Vector3(t.points[e+0].x,t.points[e+0].y,i.center.z),o=new d.Vector3(t.points[e+1].x,t.points[e+1].y,i.center.z),s=new d.Line3(r,o).closestPointToPoint(i.center,!0).distanceTo(i.center);n=n||s<i.radius+t.width}return n}nodesOnRay(e,t){let i=[],n=t.clone();for(let t=0;t<e.length;t++){let r=e[t],o=r.getBoundingSphere().clone().applyMatrix4(this.matrixWorld);n.intersectsSphere(o)&&i.push(r)}return i}updateMatrixWorld(e){!0===this.matrixAutoUpdate&&this.updateMatrix(),!0!==this.matrixWorldNeedsUpdate&&!0!==e||(this.parent?this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0)}hideDescendants(e){let t=[];for(let i=0;i<e.children.length;i++){let n=e.children[i];n.visible&&t.push(n)}for(;t.length>0;){let e=t.shift();e.visible=!1;for(let i=0;i<e.children.length;i++){let n=e.children[i];n.visible&&t.push(n)}}}moveToOrigin(){this.position.set(0,0,0),this.updateMatrixWorld(!0);let e=this.boundingBox,t=this.matrixWorld,i=K.computeTransformedBoundingBox(e,t);this.position.set(0,0,0).sub(i.getCenter(new d.Vector3))}moveToGroundPlane(){this.updateMatrixWorld(!0);let e=this.boundingBox,t=this.matrixWorld,i=K.computeTransformedBoundingBox(e,t);this.position.y+=-i.min.y}getBoundingBoxWorld(){this.updateMatrixWorld(!0);let e=this.boundingBox,t=this.matrixWorld;return K.computeTransformedBoundingBox(e,t)}getPointsInProfile(e,t,i){let n={segments:[],boundingBox:new d.Box3,projectedBoundingBox:new d.Box2};for(let i=0;i<e.points.length-1;i++){let r=e.points[i],o=e.points[i+1],s=this.getProfile(r,o,e.width,t),a={start:r,end:o,points:s,project:null};n.segments.push(a),n.boundingBox.expandByPoint(s.boundingBox.min),n.boundingBox.expandByPoint(s.boundingBox.max)}let r=new d.Vector3;for(let e=0;e<n.segments.length;e++){let t=n.segments[e],i=t.start,o=t.end,s=function(e,t,i,n){let r=e,o=t,s=i,a=n,l=new d.Vector3(1,0,0),u=(new d.Vector3).subVectors(o,r);u.y=0,u.normalize();let h=Math.acos(l.dot(u));return u.z>0&&(h=-h),function(e){let t=(new d.Matrix4).makeTranslation(-r.x,-a.min.y,-r.z),i=(new d.Matrix4).makeRotationY(-h),n=(new d.Matrix4).makeTranslation(s.x,0,0),o=e.clone();return o.applyMatrix4(t),o.applyMatrix4(i),o.applyMatrix4(n),o}}(i,o,r.clone(),n.boundingBox.clone());t.project=s,r.x+=new d.Vector3(i.x,0,i.z).distanceTo(new d.Vector3(o.x,0,o.z)),r.y+=o.y-i.y}return n.projectedBoundingBox.min.x=0,n.projectedBoundingBox.min.y=n.boundingBox.min.y,n.projectedBoundingBox.max.x=r.x,n.projectedBoundingBox.max.y=n.boundingBox.max.y,n}getProfile(e,t,i,n,r){}getVisibleExtent(){return this.visibleBounds.applyMatrix4(this.matrixWorld)}pick(e,t,i,n,r={}){performance.mark("pick-start");let o=(e,t)=>void 0!==e?e:t,s=1+~~((r.pickWindowSize||17)/2),a=e.getSize(new d.Vector2),l=Math.ceil(o(r.width,a.width)),u=Math.ceil(o(r.height,a.height)),h=o(r.pointSizeType,this.material.pointSizeType),p=o(r.pointSize,this.material.size),c=this.nodesOnRay(this.visibleNodes,n);if(0===c.length)return null;if(!this.pickState){let e=new d.Scene,t=new Q;t.pointColorType=ce.POINT_INDEX;let i=new d.WebGLRenderTarget(1,1,{minFilter:d.LinearFilter,magFilter:d.NearestFilter,format:d.RGBAFormat});this.pickState={renderTarget:i,material:t,scene:e}}let f=this.pickState,m=f.material;m.pointSizeType=h,m.shape=this.material.shape,m.hiddenClassifications=this.material.hiddenClassifications,m.hiddenPointSourceIDs=this.material.hiddenPointSourceIDs,m.size=p,m.uniforms.minSize.value=this.material.uniforms.minSize.value,m.uniforms.maxSize.value=this.material.uniforms.maxSize.value,m.classification=this.material.classification,r.pickClipped?(m.clipBoxes=this.material.clipBoxes,this.material.clipTask===ue.HIGHLIGHT?m.clipTask=ue.NONE:m.clipTask=this.material.clipTask):m.clipBoxes=[],this.updateMaterial(m,c,i,e),f.renderTarget.setSize(l,u);let g=new d.Vector2(r.x,r.y),v=e.getContext();v.enable(v.SCISSOR_TEST),v.scissor(~~(g.x-(s-1)/2),~~(g.y-(s-1)/2),~~s,~~s),e.state.buffers.depth.setTest(m.depthTest),e.state.buffers.depth.setMask(m.depthWrite),e.state.setBlending(d.NoBlending);{e.setRenderTarget(f.renderTarget),v.clearColor(0,0,0,0),e.clear(!0,!0,!0);let n=this.material;this.material=m,t.renderOctree(e,this,c,i,f.renderTarget),this.material=n}let y=(e,t,i)=>Math.min(Math.max(t,e),i),x=~~y(g.x-(s-1)/2,0,l),b=~~y(g.y-(s-1)/2,0,u),S=~~(Math.min(x+s,l)-x),w=~~(Math.min(b+s,u)-b),T=new Uint8Array(S*w*4);v.readPixels(x,b,s,s,v.RGBA,v.UNSIGNED_BYTE,T),e.setRenderTarget(null),e.state.reset(),e.setScissorTest(!1),v.disable(v.SCISSOR_TEST);let _=T,A=new Uint32Array(T.buffer),E=[];for(let e=0;e<s;e++)for(let t=0;t<s;t++){let i=e+t*s,n=Math.pow(e-(s-1)/2,2)+Math.pow(t-(s-1)/2,2),o=_[4*i+3];_[4*i+3]=0;let a=A[i];if((0!==o||0!==a)&&void 0!==o&&void 0!==a){let e={pIndex:a,pcIndex:o,distanceToCenter:n};r.all?E.push(e):E.length>0?n<E[0].distanceToCenter&&(E[0]=e):E.push(e)}}if(r.debug){let e=document.querySelector("#pickIframe");e||(e=document.createElement("IFRAME"),e.id="pickIframe",e.style.width=S+"px",e.style.height=w+"px",e.style.position="fixed",e.style.zIndex="99999",e.style.top="1px",e.style.left="1px",e.style.transform="scaleY(-1)",e.frameBorder="0",document.body.append(e));let t=K.pixelsArrayToImage(T,S,w);e.src=t.src}for(let e of E){let t={};if(!c[e.pcIndex])return null;let i=c[e.pcIndex],n=i.sceneNode,r=i.geometryNode.geometry;for(let i in r.attributes){let o=r.attributes[i];if("position"===i){let r=o.array[3*e.pIndex+0],s=o.array[3*e.pIndex+1],a=o.array[3*e.pIndex+2],l=new d.Vector3(r,s,a);l.applyMatrix4(n.matrixWorld),t[i]=l}else if("indices"===i);else{let n,r=o.array.slice(o.itemSize*e.pIndex,o.itemSize*(e.pIndex+1));if(o.potree){const{scale:e,offset:t}=o.potree;r=r.map((i=>i/e+t))}switch(i){case"color":const e=[...r].map((e=>e/255));n=new d.Color(...e);break;default:n=1===r.length?r[0]:r}t[i]=n}}e.point=t}return performance.mark("pick-end"),performance.measure("pick","pick-start","pick-end"),r.all?E.map((e=>e.point)):0===E.length?null:E[0].point}*getFittedBoxGen(e){let t=new d.Box3,i=(new d.Matrix4).getInverse(e.matrixWorld);for(let e of this.visibleNodes){if(!e.sceneNode)continue;let n=e.geometryNode.buffer,r=n.offset("position"),o=n.stride,s=new DataView(n.data),a=(new d.Matrix4).multiplyMatrices(i,e.sceneNode.matrixWorld),l=new d.Vector4;for(let e=0;e<n.numElements;e++){let i=s.getFloat32(e*o+r+0,!0),n=s.getFloat32(e*o+r+4,!0),u=s.getFloat32(e*o+r+8,!0);l.set(i,n,u,1),l.applyMatrix4(a),-.5<l.x&&l.x<.5&&-.5<l.y&&l.y<.5&&-.5<l.z&&l.z<.5&&t.expandByPoint(l)}yield}let n=t.getCenter(new d.Vector3).applyMatrix4(e.matrixWorld),r=new d.Object3D;r.position.copy(n),r.scale.copy(e.scale),r.rotation.copy(e.rotation);let o=(new d.Vector3).subVectors(t.max,t.min);r.scale.multiply(o),yield r}getFittedBox(e,t=1/0){let i=new d.Box3,n=(new d.Matrix4).getInverse(e.matrixWorld);for(let e of this.visibleNodes){if(!e.sceneNode||e.getLevel()>t)continue;let r=e.geometryNode.buffer,o=r.offset("position"),s=r.stride,a=new DataView(r.data),l=(new d.Matrix4).multiplyMatrices(n,e.sceneNode.matrixWorld),u=new d.Vector4;for(let e=0;e<r.numElements;e++){let t=a.getFloat32(e*s+o+0,!0),n=a.getFloat32(e*s+o+4,!0),r=a.getFloat32(e*s+o+8,!0);u.set(t,n,r,1),u.applyMatrix4(l),-.5<u.x&&u.x<.5&&-.5<u.y&&u.y<.5&&-.5<u.z&&u.z<.5&&i.expandByPoint(u)}}let r=i.getCenter(new d.Vector3).applyMatrix4(e.matrixWorld),o=new d.Object3D;o.position.copy(r),o.scale.copy(e.scale),o.rotation.copy(e.rotation);let s=(new d.Vector3).subVectors(i.max,i.min);return o.scale.multiply(s),o}get progress(){return this.visibleNodes.length/this.visibleGeometry.length}find(e){let t=null;for(let i of e)t="r"===i?this.root:t.children[i];return t}}class ie extends b{constructor(){super(),this.left=null,this.right=null,this.sceneNode=null,this.kdtree=null}getNumPoints(){return this.geometryNode.numPoints}isLoaded(){return!0}isTreeNode(){return!0}isGeometryNode(){return!1}getLevel(){return this.geometryNode.level}getBoundingSphere(){return this.geometryNode.boundingSphere}getBoundingBox(){return this.geometryNode.boundingBox}toTreeNode(e){var t=null;if(this.left===e?t=this.left:this.right===e&&(t=this.right),t.loaded){var i=new ie,n=d.PointCloud(t.geometry,this.kdtree.material);n.visible=!1,i.kdtree=this.kdtree,i.geometryNode=t,i.sceneNode=n,i.parent=this,i.left=this.geometryNode.left,i.right=this.geometryNode.right}}getChildren(){var e=[];return this.left&&e.push(this.left),this.right&&e.push(this.right),e}}class ne extends S{constructor(e){super(),this.root=null,e.root?this.root=e.root:e.addEventListener("hierarchy_loaded",(()=>{this.root=e.root})),this.visiblePointsTarget=2e6,this.minimumNodePixelSize=150,this.position.sub(e.offset),this.updateMatrix(),this.numVisibleNodes=0,this.numVisiblePoints=0,this.boundingBoxNodes=[],this.loadQueue=[],this.visibleNodes=[],this.pcoGeometry=e,this.boundingBox=this.pcoGeometry.boundingBox,this.boundingSphere=this.pcoGeometry.boundingSphere,this.material=new Q({vertexColors:d.VertexColors,size:.05,treeType:fe.KDTREE}),this.material.sizeType=de.ATTENUATED,this.material.size=.05,this.profileRequests=[],this.name=""}getBoundingBoxWorld(){this.updateMatrixWorld(!0);var e=this.boundingBox,t=this.matrixWorld;return K.computeTransformedBoundingBox(e,t)}setName(e){this.name!==e&&(this.name=e,this.dispatchEvent({type:"name_changed",name:e,pointcloud:this}))}getName(){return this.name}getLevel(){return this.level}toTreeNode(e,t){var i=new ie,n=new d.Points(e.geometry,this.material);return n.frustumCulled=!0,n.onBeforeRender=(t,n,r,o,s,a)=>{if(s.program){if(t.getContext().useProgram(s.program.program),s.program.getUniforms().map.level){var l=e.getLevel();s.uniforms.level.value=l,s.program.getUniforms().map.level.setValue(t.getContext(),l)}if(this.visibleNodeTextureOffsets&&s.program.getUniforms().map.vnStart){var u=this.visibleNodeTextureOffsets.get(i);s.uniforms.vnStart.value=u,s.program.getUniforms().map.vnStart.setValue(t.getContext(),u)}if(s.program.getUniforms().map.pcIndex){var h=i.pcIndex?i.pcIndex:this.visibleNodes.indexOf(i);s.uniforms.pcIndex.value=h,s.program.getUniforms().map.pcIndex.setValue(t.getContext(),h)}}},i.geometryNode=e,i.sceneNode=n,i.pointcloud=this,i.left=e.left,i.right=e.right,t?(t.sceneNode.add(n),t.left===e?t.left=i:t.right===e&&(t.right=i)):(this.root=i,this.add(n)),e.oneTimeDisposeHandlers.push((function(){t.sceneNode.remove(i.sceneNode),t.left===i?t.left=e:t.right===i&&(t.right=e)})),i}updateMaterial(e,t,i,n){e.fov=i.fov*(Math.PI/180),e.screenWidth=n.domElement.clientWidth,e.screenHeight=n.domElement.clientHeight,e.spacing=this.pcoGeometry.spacing,e.near=i.near,e.far=i.far,this.maxLevel>e.levels&&(e.levels=this.maxLevel+2);var r=this.boundingBox.getSize(new d.Vector3);e.bbSize=[r.x,r.y,r.z]}updateVisibleBounds(){}hideDescendants(e){for(var t=[],i=0;i<e.children.length;i++)(n=e.children[i]).visible&&t.push(n);for(;t.length>0;){var n;for((n=t.shift()).visible=!1,n.boundingBoxNode&&(n.boundingBoxNode.visible=!1),i=0;i<n.children.length;i++){var r=n.children[i];r.visible&&t.push(r)}}}updateMatrixWorld(e){!0===this.matrixAutoUpdate&&this.updateMatrix(),!0!==this.matrixWorldNeedsUpdate&&!0!==e||(void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0)}nodesOnRay(e,t){for(var i=[],n=t.clone(),r=0;r<e.length;r++){var o=e[r],s=o.getBoundingSphere(new d.Sphere).clone().applyMatrix4(o.sceneNode.matrixWorld);n.intersectsSphere(s)&&i.push(o)}return i}pick(e,t,i,n={}){var r=e.renderer,o=e.pRenderer;performance.mark("pick-start");var s=(e,t)=>void 0!==e?e:t,a=s(n.pickWindowSize,17),l=(s(n.pickOutsideClipRegion,!1),r.getSize(new d.Vector3)),u=Math.ceil(s(n.width,l.width)),h=Math.ceil(s(n.height,l.height)),p=s(n.pointSizeType,this.material.pointSizeType),c=s(n.pointSize,this.material.size),f=this.nodesOnRay(this.visibleNodes,i);if(0===f.length)return null;if(!this.pickState){var m=new d.Scene,g=new Q;g.pointColorType=ce.POINT_INDEX;var v=new d.WebGLRenderTarget(1,1,{minFilter:d.LinearFilter,magFilter:d.NearestFilter,format:d.RGBAFormat});this.pickState={renderTarget:v,material:g,scene:m}}var y=this.pickState,x=y.material;x.pointSizeType=p,x.shape=this.material.shape,x.size=c,x.uniforms.minSize.value=this.material.uniforms.minSize.value,x.uniforms.maxSize.value=this.material.uniforms.maxSize.value,x.classification=this.material.classification,n.pickClipped?(x.clipBoxes=this.material.clipBoxes,this.material.clipTask===ue.HIGHLIGHT?x.clipTask=ue.NONE:x.clipTask=this.material.clipTask):x.clipBoxes=[],this.updateMaterial(x,f,t,r),y.renderTarget.setSize(u,h);var b=new d.Vector2(n.x,n.y),S=r.getContext();S.enable(S.SCISSOR_TEST),S.scissor(parseInt(b.x-(a-1)/2),parseInt(b.y-(a-1)/2),parseInt(a),parseInt(a)),r.state.buffers.depth.setTest(x.depthTest),r.state.buffers.depth.setMask(x.depthWrite),r.state.setBlending(d.NoBlending),r.clearTarget(y.renderTarget,!0,!0,!0),r.setRenderTarget(y.renderTarget),S.clearColor(0,0,0,0),r.clearTarget(y.renderTarget,!0,!0,!0);var w=this.material;this.material=x,o.renderOctree(this,f,t,y.renderTarget),this.material=w;var T=(e,t,i)=>Math.min(Math.max(t,e),i),_=parseInt(T(b.x-(a-1)/2,0,u)),A=parseInt(T(b.y-(a-1)/2,0,h)),E=parseInt(Math.min(_+a,u)-_),B=parseInt(Math.min(A+a,h)-A),N=new Uint8Array(E*B*4);S.readPixels(_,A,a,a,S.RGBA,S.UNSIGNED_BYTE,N),r.setRenderTarget(null),r.resetGLState(),r.setScissorTest(!1),S.disable(S.SCISSOR_TEST);for(var C=N,I=new Uint32Array(N.buffer),P=(Number.MAX_VALUE,[]),R=0;R<a;R++)for(var D=0;D<a;D++){var L=R+D*a,M=Math.pow(R-(a-1)/2,2)+Math.pow(D-(a-1)/2,2),O=C[4*L+3];C[4*L+3]=0;var z=I[L];if((0!==O||0!==z)&&void 0!==O&&void 0!==z){var U={pIndex:z,pcIndex:O,distanceToCenter:M};n.all?P.push(U):P.length>0?M<P[0].distanceToCenter&&(P[0]=U):P.push(U)}}for(var U of P){var F={};if(!f[U.pcIndex])return null;var V=f[U.pcIndex],G=V.sceneNode,H=V.geometryNode.geometry;for(var k in H.attributes){var W=H.attributes[k];if("position"===k){_=W.array[3*U.pIndex+0],A=W.array[3*U.pIndex+1];var j=W.array[3*U.pIndex+2],Y=new d.Vector3(_,A,j);Y.applyMatrix4(G.matrixWorld),F[k]=Y}}U.point=F}return performance.mark("pick-end"),performance.measure("pick","pick-start","pick-end"),n.all?P.map((e=>e.point)):0===P.length?null:P[0].point}computeVisibilityTextureData(e){h.measureTimings&&performance.mark("computeVisibilityTextureData-start");var t=new Uint8Array(3*e.length),i=new Map;(e=e.slice()).sort((function(e,t){var i=e.geometryNode.level,n=t.geometryNode.level,r=e.geometryNode.number,o=t.geometryNode.number;return i!==n?i-n:r<o?-1:r>o?1:0}));for(var n=[],r=0;r<e.length;r++)n.push(e[r].geometryNode.number);for(r=0;r<e.length;r++){var o=e[r];i.set(o,r);var s=0,a=0,l=0;o.geometryNode.left&&n.indexOf(o.geometryNode.left.number)>0&&(s+=1,a=n.indexOf(o.geometryNode.left.number)-r),o.geometryNode.right&&n.indexOf(o.geometryNode.right.number)>0&&(s+=2,a=0===a?n.indexOf(o.geometryNode.right.number)-r:a),"X"===o.geometryNode.split?l=1:"Y"===o.geometryNode.split?l=2:"Z"===o.geometryNode.split&&(l=4),t[3*r+0]=s,t[3*r+1]=a,t[3*r+2]=l}return h.measureTimings&&(performance.mark("computeVisibilityTextureData-end"),performance.measure("render.computeVisibilityTextureData","computeVisibilityTextureData-start","computeVisibilityTextureData-end")),{data:t,offsets:i}}get progress(){return this.pcoGeometry.root?h.numNodesLoading>0?0:1:0}}class re{constructor(){this.left=null,this.right=null,this.boundingBox=null,this.number=null,this.pcoGeometry=null,this.loaded=!1,this.numPoints=0,this.level=0,this.children=[],this.oneTimeDisposeHandlers=[]}isGeometryNode(){return!0}isTreeNode(){return!1}isLoaded(){return this.loaded}getBoundingSphere(){return this.boundingSphere}getBoundingBox(){return this.boundingBox}getChildren(){var e=[];return this.left&&e.push(this.left),this.right&&e.push(this.right),e}getLevel(){return this.level}load(){if(!(this.loaded||this.loading||h.numNodesLoading>=h.maxNodesLoading)){this.loading=!0,h.numNodesLoading++;var e=this,t=this.pcoGeometry.url+"?node="+this.number,i=A.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",t,!0),i.responseType="arraybuffer",i.onload=function(){try{for(var t=i.response,n=new DataView(t),r=t.byteLength/17,o=new ArrayBuffer(28*r),s=(new DataView(o),g.POSITION_CARTESIAN,g.RGBA_PACKED,g.INTENSITY,g.CLASSIFICATION,new Float32Array(3*r)),a=new Uint8Array(4*r),l=new Float32Array(r),u=new Uint8Array(r),p=new ArrayBuffer(4*r),c=new Uint32Array(p),f=new d.Box3,m=0;m<r;m++){var v=n.getFloat32(17*m+0,!0)+e.boundingBox.min.x,y=n.getFloat32(17*m+4,!0)+e.boundingBox.min.y,x=n.getFloat32(17*m+8,!0)+e.boundingBox.min.z,b=n.getUint8(17*m+12,!0),S=n.getUint8(17*m+13,!0),w=n.getUint8(17*m+14,!0),T=n.getUint8(17*m+15,!0),_=n.getUint8(17*m+16,!0);f.expandByPoint(new d.Vector3(v,y,x)),s[3*m+0]=v,s[3*m+1]=y,s[3*m+2]=x,a[4*m+0]=b,a[4*m+1]=S,a[4*m+2]=w,a[4*m+3]=255,l[m]=T,u[m]=_,c[m]=m}var A=new d.BufferGeometry;A.setAttribute("position",new d.BufferAttribute(s,3)),A.setAttribute("color",new d.BufferAttribute(a,4,!0)),A.setAttribute("intensity",new d.BufferAttribute(l,1)),A.setAttribute("classification",new d.BufferAttribute(u,1));var E=new d.BufferAttribute(new Uint8Array(p),4,!0);A.setAttribute("indices",E),e.geometry=A,e.numPoints=r,e.loaded=!0,e.loading=!1,h.numNodesLoading--}catch(e){console.error("Potree: Exception thrown parsing points.",e),h.numNodesLoading--}},i.onerror=function(){h.numNodesLoading--,console.log("Potree: Failed to load file, "+i.status+", file: "+t)},i.send(null)}}dispose(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(var e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}}getNumPoints(){return this.numPoints}}class oe extends d.EventDispatcher{constructor(){super(),this.numPoints=0,this.version=0,this.boundingBox=null,this.numNodes=0,this.name=null,this.provider=null,this.url=null,this.root=null,this.levels=0,this._spacing=null,this.pointAttributes=new v(["POSITION_CARTESIAN","COLOR_PACKED"])}static load(e,t){var i=A.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",e+"?info",!0),i.onreadystatechange=function(){try{if(4===i.readyState&&200===i.status){var n=JSON.parse(i.responseText),r=new oe;r.url=e,r.name=n.Name,r.provider=n.Provider,r.numNodes=n.Nodes,r.numPoints=n.Points,r.version=n.Version,r.boundingBox=new d.Box3((new d.Vector3).fromArray(n.BoundingBox.slice(0,3)),(new d.Vector3).fromArray(n.BoundingBox.slice(3,6))),n.Spacing&&(r.spacing=n.Spacing);var o=r.boundingBox.min.clone().multiplyScalar(-1);r.boundingBox.min.add(o),r.boundingBox.max.add(o),r.offset=o;var s=new d.Vector3;r.boundingBox.getCenter(s);var a=r.boundingBox.getSize(new d.Vector3).length()/2;r.boundingSphere=new d.Sphere(s,a),r.loadHierarchy(),t(r)}else 4===i.readyState&&t(null)}catch(e){console.error(e.message),t(null)}},i.send(null)}loadHierarchy(){var e=this.url+"?tree",t=A.createXMLHttpRequest();t.overrideMimeType("text/plain"),t.open("GET",e,!0),t.responseType="arraybuffer",t.onreadystatechange=()=>{if(4===t.readyState&&200===t.status){for(var e=t.response,i=e.byteLength/3,n=new DataView(e),r=[],o=null,s=0,a=0;a<i;a++){var l=n.getUint8(3*a+0,!0),u=(1&l)>0,h=(2&l)>0,p=null;(4&l)>0?p="X":(8&l)>0&&(p="Y"),(16&l)>0&&(p="Z");var c=new re;if(c.hasLeft=u,c.hasRight=h,c.split=p,c.isLeaf=!u&&!h,c.number=a,c.left=null,c.right=null,c.pcoGeometry=this,c.level=r.length,s=Math.max(s,c.level),r.length>0){var f=r[r.length-1];c.boundingBox=f.boundingBox.clone();var m=f.boundingBox.getSize(new d.Vector3);if(f.hasLeft&&!f.left){f.left=c,f.children.push(c),"X"===f.split?c.boundingBox.max.x=c.boundingBox.min.x+m.x/2:"Y"===f.split?c.boundingBox.max.y=c.boundingBox.min.y+m.y/2:"Z"===f.split&&(c.boundingBox.max.z=c.boundingBox.min.z+m.z/2);var g=new d.Vector3;c.boundingBox.getCenter(g);var v=c.boundingBox.getSize(new d.Vector3).length()/2;c.boundingSphere=new d.Sphere(g,v)}else f.right=c,f.children.push(c),"X"===f.split?c.boundingBox.min.x=c.boundingBox.min.x+m.x/2:"Y"===f.split?c.boundingBox.min.y=c.boundingBox.min.y+m.y/2:"Z"===f.split&&(c.boundingBox.min.z=c.boundingBox.min.z+m.z/2),g=new d.Vector3,c.boundingBox.getCenter(g),v=c.boundingBox.getSize(new d.Vector3).length()/2,c.boundingSphere=new d.Sphere(g,v)}else(o=c).boundingBox=this.boundingBox.clone(),g=new d.Vector3,o.boundingBox.getCenter(g),v=o.boundingBox.getSize(new d.Vector3).length()/2,o.boundingSphere=new d.Sphere(g,v);var y=c.boundingBox.getSize(new d.Vector3);if(c.spacing=(y.x+y.y+y.z)/3/75,c.estimatedSpacing=c.spacing,r.push(c),c.isLeaf)for(var x=!1;!x&&r.length>0;){r.pop();var b=r[r.length-1];x=r.length>0&&b.hasRight&&null==b.right}}this.root=o,this.levels=s,this.dispatchEvent({type:"hierarchy_loaded"})}},t.send(null)}get spacing(){return this._spacing?this._spacing:this.root?this.root.spacing:void 0}set spacing(e){this._spacing=e}}function se(e){this.content=[],this.scoreFunction=e}se.prototype={push:function(e){this.content.push(e),this.bubbleUp(this.content.length-1)},pop:function(){var e=this.content[0],t=this.content.pop();return this.content.length>0&&(this.content[0]=t,this.sinkDown(0)),e},remove:function(e){for(var t=this.content.length,i=0;i<t;i++)if(this.content[i]==e){var n=this.content.pop();if(i==t-1)break;this.content[i]=n,this.bubbleUp(i),this.sinkDown(i);break}},size:function(){return this.content.length},bubbleUp:function(e){for(var t=this.content[e],i=this.scoreFunction(t);e>0;){var n=Math.floor((e+1)/2)-1,r=this.content[n];if(i>=this.scoreFunction(r))break;this.content[n]=t,this.content[e]=r,e=n}},sinkDown:function(e){for(var t=this.content.length,i=this.content[e],n=this.scoreFunction(i);;){var r=2*(e+1),o=r-1,s=null;if(o<t){var a=this.content[o],l=this.scoreFunction(a);l<n&&(s=o)}if(r<t){var u=this.content[r];this.scoreFunction(u)<(null==s?n:l)&&(s=r)}if(null==s)break;this.content[e]=this.content[s],this.content[s]=i,e=s}}};var ae={position:0,color:1,intensity:2,classification:3,returnNumber:4,numberOfReturns:5,pointSourceID:6,indices:7,normal:8,spacing:9},le={DEFAULT:{0:new d.Vector4(.5,.5,.5,1),1:new d.Vector4(.5,.5,.5,1),2:new d.Vector4(.63,.32,.18,1),3:new d.Vector4(0,1,0,1),4:new d.Vector4(0,.8,0,1),5:new d.Vector4(0,.6,0,1),6:new d.Vector4(1,.66,0,1),7:new d.Vector4(1,0,1,1),8:new d.Vector4(1,0,0,1),9:new d.Vector4(0,0,1,1),12:new d.Vector4(1,1,0,1),DEFAULT:new d.Vector4(.3,.6,.6,.5)}},ue={NONE:0,HIGHLIGHT:1,SHOW_INSIDE:2,SHOW_OUTSIDE:3},he={INSIDE_ANY:0,INSIDE_ALL:1},de={FIXED:0,ATTENUATED:1,ADAPTIVE:2},pe={SQUARE:0,CIRCLE:1,PARABOLOID:2},ce={RGB:0,COLOR:1,DEPTH:2,HEIGHT:3,ELEVATION:3,INTENSITY:4,INTENSITY_GRADIENT:5,LOD:6,LEVEL_OF_DETAIL:6,POINT_INDEX:7,CLASSIFICATION:8,RETURN_NUMBER:9,SOURCE:10,NORMAL:11,PHONG:12,RGB_HEIGHT:13,COMPOSITE:50},fe={OCTREE:0,KDTREE:1},me={BRIGHTNESS:0,COLOR:1};function ge(e,t,i){var n=function(e){void 0!==t&&(e.name=t),i({type:"pointcloud_loaded",pointcloud:e})};if(0===e.indexOf("greyhound://"))N.load(e,(function(e){void 0!==e&&n(new te(e))}));else if(e.indexOf("cloud.js")>0)V.load(e,(function(e){void 0!==e&&n(new te(e))}));else if(e.indexOf("ept.json")>0)q.load(e,(function(e){void 0!==e&&n(new te(e))}));else{if(!(e.indexOf(".vpc")>0))throw new Error("Potree: Failed to load point cloud from URL "+e);oe.load(e,(function(e){void 0!==e&&n(new ne(e))}))}}function ve(e,t,i){var n=0,r=new Map(e.map((e=>[e,0]))),o=[],s=[],a=[],l=1/0,u=xe(e,t),p=u.frustums,c=u.camObjPositions,f=u.priorityQueue,m=0,g=(i.domElement.clientWidth,i.domElement.clientHeight);h.pointcloudTransformVersion||(h.pointcloudTransformVersion=new Map);for(var v=h.pointcloudTransformVersion,y=0;y<e.length;y++)if((T=e[y]).visible)if(T.updateMatrixWorld(),v.has(T)){var x=v.get(T);x.transform.equals(T.matrixWorld)||(x.number++,x.transform.copy(T.matrixWorld),T.dispatchEvent({type:"transformation_changed",target:T}))}else v.set(T,{number:0,transform:T.matrixWorld.clone()});for(;f.size()>0;){var b=f.pop(),S=b.node,w=b.parent,T=e[b.pointcloud],_=S.getBoundingBox(),A=p[b.pointcloud],E=c[b.pointcloud],B=A.intersectsBox(_),N=T.maxLevel||1/0,C=S.getLevel(),I=B;if(I=(I=I&&!(r.get(T)+S.getNumPoints()>T.pointBudget))&&C<N,S.spacing?l=Math.min(l,S.spacing):S.geometryNode&&S.geometryNode.spacing&&(l=Math.min(l,S.geometryNode.spacing)),I){n+=S.getNumPoints();var P=r.get(T);if(r.set(T,P+S.getNumPoints()),T.numVisibleNodes++,T.numVisiblePoints+=S.getNumPoints(),!S.isGeometryNode()||w&&!w.isTreeNode()||(S.isLoaded()&&m<h.maxNodesLoadGPUFrame?(S=T.toTreeNode(S,w),m++):(a.push(S),s.push(S))),S.isTreeNode()){h.lru.touch(S.geometryNode),S.sceneNode.visible=!0,S.sceneNode.material=T.material,o.push(S),T.visibleNodes.push(S),void 0===S._transformVersion&&(S._transformVersion=-1);var R=v.get(T);if(S._transformVersion!==R.number&&(S.sceneNode.updateMatrix(),S.sceneNode.matrixWorld.multiplyMatrices(T.matrixWorld,S.sceneNode.matrix),S._transformVersion=R.number),T.showBoundingBox&&!S.boundingBoxNode&&S.getBoundingBox){var D=new d.Box3Helper(S.getBoundingBox());D.matrixAutoUpdate=!1,T.boundingBoxNodes.push(D),S.boundingBoxNode=D,S.boundingBoxNode.matrix.copy(T.matrixWorld)}else T.showBoundingBox?(S.boundingBoxNode.visible=!0,S.boundingBoxNode.matrix.copy(T.matrixWorld)):!T.showBoundingBox&&S.boundingBoxNode&&(S.boundingBoxNode.visible=!1)}var L=S.getChildren();for(y=0;y<L.length;y++){var M=L[y],O=0;if(t.isPerspectiveCamera){var z=M.getBoundingSphere(new d.Sphere),U=(z.center,z.center.distanceTo(E)),F=z.radius,V=t.fov*Math.PI/180,G=F*(.5*g/(Math.tan(V/2)*U));if(G<T.minimumNodePixelSize)continue;O=G,U-F<0&&(O=Number.MAX_VALUE)}else{var H=M.getBoundingBox();U=M.getBoundingSphere(new d.Sphere).center.distanceTo(E),O=H.max.clone().sub(H.min).length()/U}f.push({pointcloud:b.pointcloud,node:M,parent:S,weight:O})}}}var k=e.filter((e=>e.generateDEM&&e.dem instanceof DEM));for(var T of k){var W=T.visibleNodes.filter((e=>e.getLevel()<=h.maxDEMLevel));T.dem.update(W)}for(y=0;y<Math.min(h.maxNodesLoading,a.length);y++)a[y].load();return{visibleNodes:o,numVisiblePoints:n,lowestSpacing:l}}function ye(e,t,i){for(var n=ve(e,t,i),r=0;r<e.length;r++)e[r].updateMaterial(e[r].material,e[r].visibleNodes,t,i),e[r].updateVisibleBounds();return h.lru.freeMemory(),n}function xe(e,t,i){for(var n=[],r=[],o=new se((function(e){return 1/e.weight})),s=0;s<e.length;s++){var a=e[s];if(a.initialized()){a.numVisibleNodes=0,a.numVisiblePoints=0,a.deepestVisibleLevel=0,a.visibleNodes=[],a.visibleGeometry=[],t.updateMatrixWorld();var l=new d.Frustum,u=t.matrixWorldInverse,h=a.matrixWorld,p=t.clone();p.near=t.near,p.updateProjectionMatrix();var c=t.projectionMatrix,f=(new d.Matrix4).multiply(c).multiply(u).multiply(h);l.setFromProjectionMatrix(f),n.push(l);var m=t.matrixWorld,g=h.clone().invert(),v=(new d.Matrix4).multiply(g).multiply(m),y=(new d.Vector3).setFromMatrixPosition(v);r.push(y),a.visible&&null!==a.root&&o.push({pointcloud:s,node:a.root,weight:Number.MAX_VALUE}),a.root.isTreeNode()&&a.hideDescendants(a.root.sceneNode);for(var x=0;x<a.boundingBoxNodes.length;x++)a.boundingBoxNodes[x].visible=!1}}return{frustums:n,camObjPositions:r,priorityQueue:o}}const be="1.4.4";class Se{constructor(){this.boundingBox=new d.Box3,this.numPoints=0,this.data={}}add(e){var t=this.numPoints,i=t+e.numPoints,n=Object.keys(this.data),r=Object.keys(e.data),o=new Set([...n,...r]);for(var s of o)if(n.includes(s)&&r.includes(s)){var a=new(0,this.data[s].constructor)(this.data[s].length+e.data[s].length);a.set(this.data[s],0),a.set(e.data[s],this.data[s].length),this.data[s]=a}else if(n.includes(s)&&!r.includes(s)){var l=this.data[s].length/this.numPoints;(u=new(0,this.data[s].constructor)(l*i)).set(this.data[s],0),this.data[s]=u}else if(!n.includes(s)&&r.includes(s)){var u;l=e.data[s].length/e.numPoints,(u=new(0,e.data[s].constructor)(l*i)).set(e.data[s],l*t),this.data[s]=u}this.numPoints=i,this.boundingBox.union(e.boundingBox)}}function we(e,t){var i;if(t===d.RepeatWrapping)return e.REPEAT;if(t===d.ClampToEdgeWrapping)return e.CLAMP_TO_EDGE;if(t===d.MirroredRepeatWrapping)return e.MIRRORED_REPEAT;if(t===d.NearestFilter)return e.NEAREST;if(t===d.NearestMipMapNearestFilter)return e.NEAREST_MIPMAP_NEAREST;if(t===d.NearestMipMapLinearFilter)return e.NEAREST_MIPMAP_LINEAR;if(t===d.LinearFilter)return e.LINEAR;if(t===d.LinearMipMapNearestFilter)return e.LINEAR_MIPMAP_NEAREST;if(t===d.LinearMipMapLinearFilter)return e.LINEAR_MIPMAP_LINEAR;if(t===d.UnsignedByteType)return e.UNSIGNED_BYTE;if(t===d.UnsignedShort4444Type)return e.UNSIGNED_SHORT_4_4_4_4;if(t===d.UnsignedShort5551Type)return e.UNSIGNED_SHORT_5_5_5_1;if(t===d.UnsignedShort565Type)return e.UNSIGNED_SHORT_5_6_5;if(t===d.ByteType)return e.BYTE;if(t===d.ShortType)return e.SHORT;if(t===d.UnsignedShortType)return e.UNSIGNED_SHORT;if(t===d.IntType)return e.INT;if(t===d.UnsignedIntType)return e.UNSIGNED_INT;if(t===d.FloatType)return e.FLOAT;if(t===d.HalfFloatType&&null!==(i=extensions.get("OES_texture_half_float")))return i.HALF_FLOAT_OES;if(t===d.AlphaFormat)return e.ALPHA;if(t===d.RGBFormat)return e.RGB;if(t===d.RGBAFormat)return e.RGBA;if(t===d.LuminanceFormat)return e.LUMINANCE;if(t===d.LuminanceAlphaFormat)return e.LUMINANCE_ALPHA;if(t===d.DepthFormat)return e.DEPTH_COMPONENT;if(t===d.DepthStencilFormat)return e.DEPTH_STENCIL;if(t===d.AddEquation)return e.FUNC_ADD;if(t===d.SubtractEquation)return e.FUNC_SUBTRACT;if(t===d.ReverseSubtractEquation)return e.FUNC_REVERSE_SUBTRACT;if(t===d.ZeroFactor)return e.ZERO;if(t===d.OneFactor)return e.ONE;if(t===d.SrcColorFactor)return e.SRC_COLOR;if(t===d.OneMinusSrcColorFactor)return e.ONE_MINUS_SRC_COLOR;if(t===d.SrcAlphaFactor)return e.SRC_ALPHA;if(t===d.OneMinusSrcAlphaFactor)return e.ONE_MINUS_SRC_ALPHA;if(t===d.DstAlphaFactor)return e.DST_ALPHA;if(t===d.OneMinusDstAlphaFactor)return e.ONE_MINUS_DST_ALPHA;if(t===d.DstColorFactor)return e.DST_COLOR;if(t===d.OneMinusDstColorFactor)return e.ONE_MINUS_DST_COLOR;if(t===d.SrcAlphaSaturateFactor)return e.SRC_ALPHA_SATURATE;if((t===d.RGB_S3TC_DXT1_Format||t===RGBA_S3TC_DXT1_Format||t===d.RGBA_S3TC_DXT3_Format||t===RGBA_S3TC_DXT5_Format)&&null!==(i=extensions.get("WEBGL_compressed_texture_s3tc"))){if(t===d.RGB_S3TC_DXT1_Format)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===d.RGBA_S3TC_DXT1_Format)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===d.RGBA_S3TC_DXT3_Format)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===d.RGBA_S3TC_DXT5_Format)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((t===d.RGB_PVRTC_4BPPV1_Format||t===d.RGB_PVRTC_2BPPV1_Format||t===d.RGBA_PVRTC_4BPPV1_Format||t===d.RGBA_PVRTC_2BPPV1_Format)&&null!==(i=extensions.get("WEBGL_compressed_texture_pvrtc"))){if(t===d.RGB_PVRTC_4BPPV1_Format)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===d.RGB_PVRTC_2BPPV1_Format)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===d.RGBA_PVRTC_4BPPV1_Format)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===d.RGBA_PVRTC_2BPPV1_Format)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(t===d.RGB_ETC1_Format&&null!==(i=extensions.get("WEBGL_compressed_texture_etc1")))return i.COMPRESSED_RGB_ETC1_WEBGL;if((t===d.MinEquation||t===d.MaxEquation)&&null!==(i=extensions.get("EXT_blend_minmax"))){if(t===d.MinEquation)return i.MIN_EXT;if(t===d.MaxEquation)return i.MAX_EXT}return t===UnsignedInt248Type&&null!==(i=extensions.get("WEBGL_depth_texture"))?i.UNSIGNED_INT_24_8_WEBGL:0}class Te{constructor(e,t){this.gl=e,this.texture=t,this.id=e.createTexture(),this.target=e.TEXTURE_2D,this.version=-1,this.update(t)}update(){if(this.texture.image){var e=this.gl,t=this.texture;if(this.version!==t.version){this.target=e.TEXTURE_2D,e.bindTexture(this.target,this.id);var i,n=we(e,t.format),r=t.image.width,o=t.image.height,s=n,a=we(e,t.type);e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,t.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,t.unpackAlignment),t instanceof d.DataTexture?(i=t.image.data,e.texParameteri(this.target,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(this.target,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(this.target,e.TEXTURE_MAG_FILTER,we(e,t.magFilter)),e.texParameteri(this.target,e.TEXTURE_MIN_FILTER,we(e,t.minFilter)),e.texImage2D(this.target,0,n,r,o,0,s,a,i)):t instanceof d.CanvasTexture&&(i=t.image,e.texParameteri(this.target,e.TEXTURE_WRAP_S,we(e,t.wrapS)),e.texParameteri(this.target,e.TEXTURE_WRAP_T,we(e,t.wrapT)),e.texParameteri(this.target,e.TEXTURE_MAG_FILTER,we(e,t.magFilter)),e.texParameteri(this.target,e.TEXTURE_MIN_FILTER,we(e,t.minFilter)),e.texImage2D(this.target,0,n,n,a,i)),e.bindTexture(this.target,null),this.version=t.version}}else this.version=this.texture.version}}class _e{constructor(e,t,i,n){this.gl=e,this.name=t,this.vsSource=i,this.fsSource=n,this.cache=new Map,this.vs=null,this.fs=null,this.program=null,this.uniformLocations={},this.attributeLocations={},this.update(i,n)}update(e,t){this.vsSource=e,this.fsSource=t,this.linkProgram()}compileShader(e,t){var i=this.gl;if(i.shaderSource(e,t),i.compileShader(e),!i.getShaderParameter(e,i.COMPILE_STATUS)){var n=i.getShaderInfoLog(e);throw new Error("Potree: Could not compile shader "+this.name+", "+n)}}linkProgram(){var e=this.gl;if(this.uniformLocations={},this.attributeLocations={},e.useProgram(null),h=this.cache.get(`${this.vsSource}, ${this.fsSource}`))return this.program=h.program,this.vs=h.vs,this.fs=h.fs,this.attributeLocations=h.attributeLocations,void(this.uniformLocations=h.uniformLocations);for(var t of(this.vs=e.createShader(e.VERTEX_SHADER),this.fs=e.createShader(e.FRAGMENT_SHADER),this.program=e.createProgram(),Object.keys(ae))){var i=ae[t];e.bindAttribLocation(this.program,i,t)}this.compileShader(this.vs,this.vsSource),this.compileShader(this.fs,this.fsSource);var n=this.program;if(e.attachShader(n,this.vs),e.attachShader(n,this.fs),e.linkProgram(n),e.detachShader(n,this.vs),e.detachShader(n,this.fs),!e.getProgramParameter(n,e.LINK_STATUS)){var r=e.getProgramInfoLog(n);throw new Error("Potree: Could not link program "+this.name+", "+r)}for(var o=e.getProgramParameter(n,e.ACTIVE_ATTRIBUTES),s=0;s<o;s++){var a=e.getActiveAttrib(n,s);i=e.getAttribLocation(n,a.name),this.attributeLocations[a.name]=i}var l=e.getProgramParameter(n,e.ACTIVE_UNIFORMS);for(s=0;s<l;s++){var u=e.getActiveUniform(n,s);i=e.getUniformLocation(n,u.name),this.uniformLocations[u.name]=i}var h={program:this.program,vs:this.vs,fs:this.fs,attributeLocations:this.attributeLocations,uniformLocations:this.uniformLocations};this.cache.set(`${this.vsSource}, ${this.fsSource}`,h)}setUniformMatrix4(e,t){const i=this.gl,n=this.uniformLocations[e];if(null==n)return;let r=new Float32Array(t.elements);i.uniformMatrix4fv(n,!1,r)}setUniformMatrix4v(e,t){const i=this.gl,n=this.uniformLocations[`${e}[0]`];if(null==n)return;const r=t.forEach((e=>r.push(...e.elements))),o=new Float32Array(r);i.uniformMatrix4fv(n,!1,o)}setUniform1f(e,t){const i=this.gl,n=this.uniformLocations[e];null!=n&&i.uniform1f(n,t)}setUniform1fv(e,t){const i=this.gl,n=this.uniformLocations[`${e}[0]`];null!=n&&i.uniform1fv(n,t)}setUniformBoolean(e,t){const i=this.gl,n=this.uniformLocations[e];null!=n&&i.uniform1i(n,t)}setUniformTexture(e,t){const i=this.gl,n=this.uniformLocations[e];null!=n&&i.uniform1i(n,t)}setUniform2f(e,t){const i=this.gl,n=this.uniformLocations[e];null!=n&&i.uniform2f(n,t[0],t[1])}setUniform3f(e,t){const i=this.gl,n=this.uniformLocations[e];t instanceof d.Color&&(t=t.toArray()),null!=n&&i.uniform3f(n,t[0],t[1],t[2])}setUniform(e,t){t.constructor===d.Matrix4?this.setUniformMatrix4(e,t):t.constructor===d.Color?this.setUniform3f(e,t):"number"==typeof t?this.setUniform1f(e,t):"boolean"==typeof t?this.setUniformBoolean(e,t):t instanceof Te?this.setUniformTexture(e,t):t instanceof Array?2===t.length?this.setUniform2f(e,t):3===t.length&&this.setUniform3f(e,t):console.error("Potree: Unhandled uniform type: ",e,t)}setUniform1i(e,t){var i=this.gl,n=this.uniformLocations[e];null!=n&&i.uniform1i(n,t)}}class Ae{constructor(){this.numElements=0,this.vao=null,this.vbos=new Map}}class Ee extends d.Mesh{constructor(){super(new d.BufferGeometry,new d.MeshBasicMaterial({opacity:0,wireframe:!1,transparent:!0})),this.rotation.set(-Math.PI/2,0,0),this.frustumCulled=!0,this.pointclouds=[],this.nodeSize=30,this.pointBudget=1e10,this.nodeLoadRate=2}raycast(e,t){}setPointBudget(e){this.pointBudget=e}onBeforeRender(e,t,i,n,r,o){for(var s=0;s<this.pointclouds.length;s++)this.pointclouds[s].minimumNodePixelSize=this.nodeSize;ye(this.pointclouds,i,e)}recalculateBoxGeometry(){var e=this.getBoundingBox(),t=e.getSize(new d.Vector3),i=e.getCenter(new d.Vector3),n=new d.Matrix4;n.makeTranslation(i.x,-i.z,i.y);var r=new d.BoxBufferGeometry(t.x,t.z,t.y);r.applyMatrix4(n),this.geometry=r}add(e){d.Object3D.prototype.add.call(this,e),e instanceof S&&(e.showBoundingBox=!1,e.generateDEM=!1,this.pointclouds.push(e),this.recalculateBoxGeometry())}remove(e){if(d.Object3D.prototype.remove.call(this,e),e instanceof S){var t=this.pointclouds.indexOf(e);-1!==t&&(this.pointclouds.splice(t,1),this.recalculateBoxGeometry())}}getBoundingBox(){var e=new d.Box3;this.updateMatrixWorld(!0);for(var t=0;t<this.pointclouds.length;t++){var i=this.pointclouds[t];i.updateMatrixWorld(!0);var n=i.pcoGeometry.tightBoundingBox?i.pcoGeometry.tightBoundingBox:i.boundingBox,r=K.computeTransformedBoundingBox(n,i.matrixWorld);e.union(r)}return e}estimateHeightAt(e){var t=null,i=1/0;for(var n of this.pointclouds)if(void 0!==n.root.geometryNode){var r=null,o=1/0,s=e.clone().sub(n.position);s.z=0;for(var a=new d.Ray(s,new d.Vector3(0,0,1)),l=[n.root];l.length>0;){var u=l.pop(),h=u.getBoundingBox();if(a.intersectBox(h)){var p=u.geometryNode.mean.z+n.position.z+u.geometryNode.boundingBox.min.z;for(var c of(u.geometryNode.spacing<=o&&(r=p,o=u.geometryNode.spacing),Object.keys(u.children)))u.children[c].geometryNode&&l.push(u.children[c])}}(null===t||o<i)&&(t=r,i=o)}return t}getPointAt(e,t,i,n={}){let r=this.pointclouds,o=this,s={x:e.x/i.domElement.offsetWidth*2-1,y:-e.y/i.domElement.offsetHeight*2+1},a={};n.pickClipped&&(a.pickClipped=n.pickClipped),a.debug=n.debug,a.x=e.x,a.y=i.domElement.offsetHeight-e.y;let l=new d.Raycaster;l.setFromCamera(s,t);let u=l.ray,h=null,p=1/0,c=null,f=null;for(let e of r){let n;try{n=e.pick(i,o,t,u,a)}catch(e){}if(!n)continue;let r=t.position.distanceTo(n.position);r<p&&(p=r,h=e,c=n.position,f=n)}return h?{location:c,distance:p,pointcloud:h,point:f,ray:u}:null}}class Be extends Ee{constructor(){super(),this.buffers=new Map,this.shaders=new Map,this.textures=new Map,this.types=new Map}getExtensions(e){this.types.set(Float32Array,e.FLOAT),this.types.set(Uint8Array,e.UNSIGNED_BYTE),this.types.set(Uint16Array,e.UNSIGNED_SHORT);let t=e.getExtension("OES_vertex_array_object");e.createVertexArray=t.createVertexArrayOES.bind(t),e.bindVertexArray=t.bindVertexArrayOES.bind(t)}onBeforeRender(e,t,i,n,r,o){super.onBeforeRender(e,t,i,n,r,o);let s=e.getContext();void 0===s.bindVertexArray&&this.getExtensions(s);let a=this.fetchOctrees();for(let t of a.octrees){let n=t.visibleNodes;this.renderOctree(e,t,n,i)}s.activeTexture(s.TEXTURE1),s.bindTexture(s.TEXTURE_2D,null),e.state.reset()}createBuffer(e,t){let i=new Ae;i.vao=e.createVertexArray(),i.numElements=t.attributes.position.count,e.bindVertexArray(i.vao);for(let n in t.attributes){let r=t.attributes[n],o=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,o),e.bufferData(e.ARRAY_BUFFER,r.array,e.STATIC_DRAW);let s=ae[n],a=r.normalized,l=this.types.get(r.array.constructor);void 0!==l&&(e.vertexAttribPointer(s,r.itemSize,l,a,0,0),e.enableVertexAttribArray(s)),i.vbos.set(n,{handle:o,name:n,count:r.count,itemSize:r.itemSize,type:t.attributes.position.array.constructor,version:0})}return e.bindBuffer(e.ARRAY_BUFFER,null),e.bindVertexArray(null),i}updateBuffer(e,t){let i=this.buffers.get(t);e.bindVertexArray(i.vao);for(let n in t.attributes){let r=t.attributes[n],o=ae[n],s=r.normalized,a=this.types.get(r.array.constructor),l=null;i.vbos.has(n)?(l=i.vbos.get(n).handle,i.vbos.get(n).version=r.version):(l=e.createBuffer(),i.vbos.set(n,{handle:l,name:n,count:r.count,itemSize:r.itemSize,type:t.attributes.position.array.constructor,version:r.version})),e.bindBuffer(e.ARRAY_BUFFER,l),e.bufferData(e.ARRAY_BUFFER,r.array,e.STATIC_DRAW),e.vertexAttribPointer(o,r.itemSize,a,s,0,0),e.enableVertexAttribArray(o)}e.bindBuffer(e.ARRAY_BUFFER,null),e.bindVertexArray(null)}fetchOctrees(){let e=[],t=[this];for(;t.length>0;){let i=t.pop();if(i instanceof S){e.push(i);continue}let n=i.children.filter((e=>e.visible));t.push(...n)}return{octrees:e}}renderNodes(e,t,i,n,r,o){let s=e.getContext(),a=t.material,l=r.matrixWorldInverse,u=new d.Matrix4,p=new Float32Array(16),c=0;for(let e of i){if(void 0!==h.debug.allowedNodes&&!h.debug.allowedNodes.includes(e.name))continue;let t=e.sceneNode.matrixWorld;if(u.multiplyMatrices(l,t),n){let t=n.offsets.get(e);o.setUniform1f("uVNStart",t)}let i,r=e.getLevel();o.setUniform("uDebug",!0===e.debug),e instanceof ee?i=0===Object.keys(e.children).length:e instanceof ie&&(i=e.geometryNode.isLeaf),o.setUniform("uIsLeafNode",i);let d=o.uniformLocations.modelMatrix;d&&(p.set(t.elements),s.uniformMatrix4fv(d,!1,p));let y=o.uniformLocations.modelViewMatrix;if(p.set(u.elements),s.uniformMatrix4fv(y,!1,p),a.clipping&&a.clippingPlanes&&a.clippingPlanes.length>0){for(var f=a.clippingPlanes,m=new Array(4*a.clippingPlanes.length),g=0;g<f.length;g++)m[4*g+0]=f[g].normal.x,m[4*g+1]=f[g].normal.y,m[4*g+2]=f[g].normal.z,m[4*g+3]=f[g].constant;var v=o.uniformLocations["clipPlanes[0]"];if(void 0===v)throw new Error("Could not find uniform clipPlanes");s.uniform4fv(v,m)}if(a.clipPolygons&&a.clipPolygons.length>0){let e=[],i=[];for(let n of a.clipPolygons){let r=n.viewMatrix,o=n.projMatrix.clone().multiply(r).multiply(t);e.push(n.markers.length),i.push(o)}let n=[].concat(...i.map((e=>e.elements))),r=new Array(24*a.clipPolygons.length);for(let e=0;e<a.clipPolygons.length;e++){let t=a.clipPolygons[e];for(let i=0;i<t.markers.length;i++)r[24*e+(3*i+0)]=t.markers[i].position.x,r[24*e+(3*i+1)]=t.markers[i].position.y,r[24*e+(3*i+2)]=t.markers[i].position.z}let l=o.uniformLocations["uClipPolygonVCount[0]"];s.uniform1iv(l,e);let u=o.uniformLocations["uClipPolygonWVP[0]"];s.uniformMatrix4fv(u,!1,n);let h=o.uniformLocations["uClipPolygonVertices[0]"];s.uniform3fv(h,r)}o.setUniform1f("uLevel",r),o.setUniform1f("uNodeSpacing",e.geometryNode.estimatedSpacing),o.setUniform1f("uPCIndex",c);let x=e.geometryNode.geometry,b=null;if(this.buffers.has(x)){b=this.buffers.get(x);for(let e in x.attributes)x.attributes[e].version>b.vbos.get(e).version&&this.updateBuffer(s,x)}else b=this.createBuffer(s,x),this.buffers.set(x,b);s.bindVertexArray(b.vao),s.drawArrays(s.POINTS,0,b.numElements),c++}s.bindVertexArray(null)}renderOctree(e,t,i,n,r=null,o={}){let s=e.getContext(),a=o.material||t.material,l=o.shadowMaps||[],u=n.matrixWorldInverse,h=n.matrixWorld,p=n.projectionMatrix,c=n.projectionMatrixInverse,f=(new d.Matrix4,null),m=0;if(a.pointSizeType===de.ADAPTIVE||a.pointColorType===ce.LOD){f=t.computeVisibilityTextureData(i,n);let e=a.visibleNodesTexture;e.image.data.set(f.data),e.needsUpdate=!0}let g=null;this.shaders.has(a)?g=this.shaders.get(a):(g=new _e(s,"pointcloud",a.vertexShader,a.fragmentShader),this.shaders.set(a,g));let v=a.snapEnabled?a.numSnapshots:0,y=a.clipBoxes&&a.clipBoxes.length?a.clipBoxes.length:0,x=a.clipPolygons&&a.clipPolygons.length?a.clipPolygons.length:0;var b=a.clipping&&a.clippingPlanes&&a.clippingPlanes.length?a.clippingPlanes.length:0;let S=["#define num_shadowmaps "+l.length,"#define num_snapshots "+v,"#define num_clipboxes "+y,"#define num_clipspheres 0","#define num_clippolygons "+x,"#define num_clipplanes "+b].join("\n"),w=S+"\n"+a.vertexShader,T=S+"\n"+a.fragmentShader;g.update(w,T),a.needsUpdate=!1;for(let e of Object.keys(a.uniforms)){let t=a.uniforms[e];if("t"==t.type){let e=t.value;if(!e)continue;if(!this.textures.has(e)){let t=new Te(s,e);this.textures.set(e,t)}this.textures.get(e).update()}}s.useProgram(g.program),a.opacity<1?(s.enable(s.BLEND),s.blendFunc(s.SRC_ALPHA,s.ONE),s.depthMask(!1),s.disable(s.DEPTH_TEST)):(s.disable(s.BLEND),s.depthMask(!0),s.enable(s.DEPTH_TEST)),g.setUniformMatrix4("projectionMatrix",p),g.setUniformMatrix4("viewMatrix",u),g.setUniformMatrix4("uViewInv",h),g.setUniformMatrix4("uProjInv",c);let _=r?r.width:a.screenWidth,A=r?r.height:a.screenHeight;if(g.setUniform1f("uScreenWidth",_),g.setUniform1f("uScreenHeight",A),g.setUniform1f("fov",Math.PI*n.fov/180),g.setUniform1f("near",n.near),g.setUniform1f("far",n.far),e.capabilities.logarithmicDepthBuffer&&g.setUniform("logDepthBufFC",2/(Math.log(n.far+1)/Math.LN2)),n instanceof d.OrthographicCamera?(g.setUniform("uUseOrthographicCamera",!0),g.setUniform("uOrthoWidth",n.right-n.left),g.setUniform("uOrthoHeight",n.top-n.bottom)):g.setUniform("uUseOrthographicCamera",!1),a.clipBoxes.length+a.clipPolygons.length===0?g.setUniform1i("clipTask",ue.NONE):g.setUniform1i("clipTask",a.clipTask),g.setUniform1i("clipMethod",a.clipMethod),a.clipBoxes&&a.clipBoxes.length>0){let e=g.uniformLocations["clipBoxes[0]"];s.uniformMatrix4fv(e,!1,a.uniforms.clipBoxes.value)}g.setUniform1f("size",a.size),g.setUniform1f("maxSize",a.uniforms.maxSize.value),g.setUniform1f("minSize",a.uniforms.minSize.value),g.setUniform1f("uOctreeSpacing",a.spacing),g.setUniform("uOctreeSize",a.uniforms.octreeSize.value),g.setUniform3f("uColor",a.color.toArray()),g.setUniform1f("uOpacity",a.opacity),g.setUniform2f("elevationRange",a.elevationRange),g.setUniform2f("intensityRange",a.intensityRange),g.setUniform1f("intensityGamma",a.intensityGamma),g.setUniform1f("intensityContrast",a.intensityContrast),g.setUniform1f("intensityBrightness",a.intensityBrightness),g.setUniform1f("rgbGamma",a.rgbGamma),g.setUniform1f("rgbContrast",a.rgbContrast),g.setUniform1f("rgbBrightness",a.rgbBrightness),g.setUniform1f("uTransition",a.transition),g.setUniform1f("wRGB",a.weightRGB),g.setUniform1f("wIntensity",a.weightIntensity),g.setUniform1f("wElevation",a.weightElevation),g.setUniform1f("wClassification",a.weightClassification),g.setUniform1f("wReturnNumber",a.weightReturnNumber),g.setUniform1f("wSourceID",a.weightSourceID),g.setUniform1fv("hiddenClassifications",a.hiddenClassifications),g.setUniform1f("selectedPointSourceID",a.selectedPointSourceID),g.setUniform3f("selectedPointSourceIDColor",a.selectedPointSourceIDColor);let E=this.textures.get(a.visibleNodesTexture);g.setUniform1i("visibleNodesTexture",m),s.activeTexture(s.TEXTURE0+m),s.bindTexture(E.target,E.id),m++;let B=this.textures.get(a.gradientTexture);g.setUniform1i("gradient",m),s.activeTexture(s.TEXTURE0+m),s.bindTexture(B.target,B.id),m++;let N=this.textures.get(a.classificationTexture);g.setUniform1i("classificationLUT",m),s.activeTexture(s.TEXTURE0+m),s.bindTexture(N.target,N.id),m++;let C=this.textures.get(a.hiddenPointSourceIDsTexture);if(g.setUniform1i("hiddenPointSourceIDs",m),s.activeTexture(s.TEXTURE0+m),s.bindTexture(C.target,C.id),m++,!0===a.snapEnabled){let t=g.uniformLocations["uSnapshot[0]"],i=g.uniformLocations["uSnapshotDepth[0]"],n=m,r=new Array(5).fill(n).map(((e,t)=>e+t)),o=new Array(5).fill(1+Math.max(...r)).map(((e,t)=>e+t));m=1+Math.max(...o),s.uniform1iv(t,r),s.uniform1iv(i,o);for(let t=0;t<5;t++){let i=a.uniforms.uSnapshot.value[t],n=a.uniforms.uSnapshotDepth.value[t];if(!i)break;let l=e.properties.get(i).__webglTexture,u=e.properties.get(n).__webglTexture,h=r[t],d=o[t];s.activeTexture(s[`TEXTURE${h}`]),s.bindTexture(s.TEXTURE_2D,l),s.activeTexture(s[`TEXTURE${d}`]),s.bindTexture(s.TEXTURE_2D,u)}let l=[].concat(...a.uniforms.uSnapView.value.map((e=>e.elements))),u=g.uniformLocations["uSnapView[0]"];s.uniformMatrix4fv(u,!1,l),l=[].concat(...a.uniforms.uSnapProj.value.map((e=>e.elements)));let h=g.uniformLocations["uSnapProj[0]"];s.uniformMatrix4fv(h,!1,l),l=[].concat(...a.uniforms.uSnapProjInv.value.map((e=>e.elements)));let d=g.uniformLocations["uSnapProjInv[0]"];s.uniformMatrix4fv(d,!1,l),l=[].concat(...a.uniforms.uSnapViewInv.value.map((e=>e.elements)));let p=g.uniformLocations["uSnapViewInv[0]"];s.uniformMatrix4fv(p,!1,l)}this.renderNodes(e,t,i,f,n,g),s.activeTexture(s.TEXTURE2),s.bindTexture(s.TEXTURE_2D,null),s.activeTexture(s.TEXTURE0)}}}},t={};function i(n){var r=t[n];if(void 0!==r)return r.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,i),o.exports}i.m=e,i.c=t,i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{i.S={};var e={},t={};i.I=(n,r)=>{r||(r=[]);var o=t[n];if(o||(o=t[n]={}),!(r.indexOf(o)>=0)){if(r.push(o),e[n])return e[n];i.o(i.S,n)||(i.S[n]={}),i.S[n];var s=[];return e[n]=s.length?Promise.all(s).then((()=>e[n]=1)):1}}})();var n=i(184);module.exports=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,