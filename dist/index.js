(()=>{"use strict";var e={477:e=>{e.exports=function(e,t,i,r){var n=self||window;try{try{var o;try{o=new n.Blob([e])}catch(t){(o=new(n.BlobBuilder||n.WebKitBlobBuilder||n.MozBlobBuilder||n.MSBlobBuilder)).append(e),o=o.getBlob()}var s=n.URL||n.webkitURL,a=s.createObjectURL(o),u=new n[t](a,i);return s.revokeObjectURL(a),u}catch(r){return new n[t]("data:application/javascript,".concat(encodeURIComponent(e)),i)}}catch(e){if(!r)throw Error("Inline worker is not supported");return new n[t](r,i)}}}},t={};function i(r){var n=t[r];if(void 0!==n)return n.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,i),o.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{i.r(r),i.d(r,{AttributeLocations:()=>le,BasicGroup:()=>Ne,BinaryHeap:()=>ue,BinaryLoader:()=>P,Classification:()=>he,ClipMethod:()=>pe,ClipTask:()=>de,DEM:()=>w,DEMNode:()=>b,EptBinaryLoader:()=>k,EptLaszipLoader:()=>W,EptLoader:()=>Z,Global:()=>p,Gradients:()=>J,GreyhoundBinaryLoader:()=>N,GreyhoundLoader:()=>C,GreyhoundUtils:()=>I,Group:()=>Ie,HelperUtils:()=>$,LASLAZLoader:()=>U,LASLoader:()=>M,LRU:()=>t,POCLoader:()=>H,PointAttribute:()=>y,PointAttributeNames:()=>f,PointAttributeTypes:()=>m,PointAttributes:()=>x,PointCloudArena4D:()=>oe,PointCloudArena4DGeometry:()=>ae,PointCloudEptGeometry:()=>X,PointCloudEptGeometryNode:()=>K,PointCloudGreyhoundGeometry:()=>_,PointCloudMaterial:()=>te,PointCloudOctree:()=>re,PointCloudOctreeGeometry:()=>V,PointCloudOctreeGeometryNode:()=>G,PointCloudTree:()=>T,PointColorType:()=>me,PointShape:()=>fe,PointSizeType:()=>ce,Points:()=>Te,Shader:()=>Ee,Shaders:()=>ee,TreeType:()=>ge,VERSION:()=>Se,VersionUtils:()=>E,WebGLBuffer:()=>Be,WebGLTexture:()=>Ae,WorkerManager:()=>d,XHRFactory:()=>B,loadPointCloud:()=>ye,updatePointClouds:()=>be,updateVisibility:()=>xe,updateVisibilityStructures:()=>we});class e{constructor(e){this.previous=null,this.next=null,this.node=e}}class t{constructor(){this.first=null,this.last=null,this.items={},this.elements=0,this.numPoints=0}size(){return this.elements}contains(e){return null==this.items[e.id]}touch(t){var i;t.loaded&&(null==this.items[t.id]?((i=new e(t)).previous=this.last,this.last=i,null!==i.previous&&(i.previous.next=i),this.items[t.id]=i,this.elements++,null===this.first&&(this.first=i),this.numPoints+=t.numPoints):null===(i=this.items[t.id]).previous?null!==i.next&&(this.first=i.next,this.first.previous=null,i.previous=this.last,i.next=null,this.last=i,i.previous.next=i):null!==i.next&&(i.previous.next=i.next,i.next.previous=i.previous,i.previous=this.last,i.next=null,this.last=i,i.previous.next=i))}remove(e){var t=this.items[e.id];t&&(1===this.elements?(this.first=null,this.last=null):(t.previous||(this.first=t.next,this.first.previous=null),t.next||(this.last=t.previous,this.last.next=null),t.previous&&t.next&&(t.previous.next=t.next,t.next.previous=t.previous)),delete this.items[e.id],this.elements--,this.numPoints-=e.numPoints)}getLRUItem(){return null===this.first?null:this.first.node}toString(){for(var e="{ ",t=this.first;null!==t;)e+=t.node.id,null!==t.next&&(e+=", "),t=t.next;return(e+="}")+"("+this.size()+")"}freeMemory(){if(!(this.elements<=1))for(;this.numPoints>p.pointLoadLimit;){var e=this.first.node;this.disposeDescendants(e)}}disposeDescendants(e){var t=[];for(t.push(e);t.length>0;){var i=t.pop();for(var r in i.dispose(),this.remove(i),i.children)i.children.hasOwnProperty(r)&&i.children[r].loaded&&t.push(i.children[r])}}}var n=i(477),o=i.n(n);function s(){return o()('(()=>{"use strict";function e(e){this.buffer=e,this.u8=new Uint8Array(e);var t=new ArrayBuffer(4),r=new Float32Array(t),i=new Uint8Array(t);this.getUint32=function(e){return this.u8[e+3]<<24|this.u8[e+2]<<16|this.u8[e+1]<<8|this.u8[e]},this.getUint16=function(e){return this.u8[e+1]<<8|this.u8[e]},this.getFloat32=function(e){return i[0]=this.u8[e+0],i[1]=this.u8[e+1],i[2]=this.u8[e+2],i[3]=this.u8[e+3],r[0]},this.getUint8=function(e){return this.u8[e]}}function t(e){this.version=e;var t=-1===e.indexOf(".")?e.length:e.indexOf(".");this.versionMajor=parseInt(e.substr(0,t)),this.versionMinor=parseInt(e.substr(t+1)),0===this.versionMinor.length&&(this.versionMinor=0)}onmessage=function(r){if(r.data&&r.data.buffer)try{var i=r.data.buffer,n=r.data.pointAttributes,s=i.byteLength/n.byteSize,A=new e(i),T=new t(r.data.version),u=r.data.offset,o=r.data.scale,f=(r.data.spacing,r.data.hasChildren,r.data.name,[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY]),h=[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY],_=[0,0,0],I={},b=0;for(var N of n.attributes){if(N.name===a.POSITION_CARTESIAN.name){for(var E=new ArrayBuffer(4*s*3),y=new Float32Array(E),S=0;S<s;S++)T.newerThan("1.3")?(L=A.getUint32(b+S*n.byteSize+0,!0)*o,C=A.getUint32(b+S*n.byteSize+4,!0)*o,d=A.getUint32(b+S*n.byteSize+8,!0)*o):(L=A.getFloat32(S*n.byteSize+0,!0)+u[0],C=A.getFloat32(S*n.byteSize+4,!0)+u[1],d=A.getFloat32(S*n.byteSize+8,!0)+u[2]),y[3*S+0]=L,y[3*S+1]=C,y[3*S+2]=d,_[0]+=L/s,_[1]+=C/s,_[2]+=d/s,f[0]=Math.min(f[0],L),f[1]=Math.min(f[1],C),f[2]=Math.min(f[2],d),h[0]=Math.max(h[0],L),h[1]=Math.max(h[1],C),h[2]=Math.max(h[2],d);I[N.name]={buffer:E,attribute:N}}else if(N.name===a.COLOR_PACKED.name){E=new ArrayBuffer(4*s);var m=new Uint8Array(E);for(S=0;S<s;S++)m[4*S+0]=A.getUint8(b+S*n.byteSize+0),m[4*S+1]=A.getUint8(b+S*n.byteSize+1),m[4*S+2]=A.getUint8(b+S*n.byteSize+2);I[N.name]={buffer:E,attribute:N}}else if(N.name===a.INTENSITY.name){E=new ArrayBuffer(4*s);var P=new Float32Array(E);for(S=0;S<s;S++){var M=A.getUint16(b+S*n.byteSize,!0);P[S]=M}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.CLASSIFICATION.name){E=new ArrayBuffer(s);var w=new Uint8Array(E);for(S=0;S<s;S++){var l=A.getUint8(b+S*n.byteSize);w[S]=l}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.NORMAL_SPHEREMAPPED.name){E=new ArrayBuffer(4*s*3);var z=new Float32Array(E);for(S=0;S<s;S++){var O=A.getUint8(b+S*n.byteSize+0),U=A.getUint8(b+S*n.byteSize+1),D=O/255*2-1,g=U/255*2-1,v=1,Y=D*-D+g*-g+1*v;v=Y,D*=Math.sqrt(Y),g*=Math.sqrt(Y),D*=2,g*=2,v=2*v-1,z[3*S+0]=D,z[3*S+1]=g,z[3*S+2]=v}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.NORMAL_OCT16.name){for(E=new ArrayBuffer(4*s*3),z=new Float32Array(E),S=0;S<s;S++){O=A.getUint8(b+S*n.byteSize+0),U=A.getUint8(b+S*n.byteSize+1);var F=O/255*2-1,R=U/255*2-1,d=1-Math.abs(F)-Math.abs(R),L=0,C=0;d>=0?(L=F,C=R):(L=-(R/Math.sign(R)-1)/Math.sign(F),C=-(F/Math.sign(F)-1)/Math.sign(R));var p=Math.sqrt(L*L+C*C+d*d);L/=p,C/=p,d/=p,z[3*S+0]=L,z[3*S+1]=C,z[3*S+2]=d}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.NORMAL.name){for(E=new ArrayBuffer(4*s*3),z=new Float32Array(E),S=0;S<s;S++)L=A.getFloat32(b+S*n.byteSize+0,!0),C=A.getFloat32(b+S*n.byteSize+4,!0),d=A.getFloat32(b+S*n.byteSize+8,!0),z[3*S+0]=L,z[3*S+1]=C,z[3*S+2]=d;I[N.name]={buffer:E,attribute:N}}b+=N.byteSize}E=new ArrayBuffer(4*s);for(var B=new Uint32Array(E),c=0;c<s;c++)B[c]=c;I[a.INDICES.name]={buffer:E,attribute:a.INDICES};var x={buffer:i,mean:_,attributeBuffers:I,tightBoundingBox:{min:f,max:h}},G=[];for(var V in x.attributeBuffers)G.push(x.attributeBuffers[V].buffer);G.push(i),postMessage(x,G)}catch(e){postMessage({error:"Exeption thrown during execution."})}},t.prototype.newerThan=function(e){var r=new t(e);return this.versionMajor>r.versionMajor||this.versionMajor===r.versionMajor&&this.versionMinor>r.versionMinor};var r={DATA_TYPE_DOUBLE:{ordinal:0,size:8},DATA_TYPE_FLOAT:{ordinal:1,size:4},DATA_TYPE_INT8:{ordinal:2,size:1},DATA_TYPE_UINT8:{ordinal:3,size:1},DATA_TYPE_INT16:{ordinal:4,size:2},DATA_TYPE_UINT16:{ordinal:5,size:2},DATA_TYPE_INT32:{ordinal:6,size:4},DATA_TYPE_UINT32:{ordinal:7,size:4},DATA_TYPE_INT64:{ordinal:8,size:8},DATA_TYPE_UINT64:{ordinal:9,size:8}},i=0;for(var n in r)r[i]=r[n],i++;function a(e,t,r){this.name=e,this.type=t,this.numElements=r,this.byteSize=this.numElements*this.type.size}function s(e){if(this.attributes=[],this.byteSize=0,this.size=0,null!=e)for(var t=0;t<e.length;t++){var r=a[e[t]];this.attributes.push(r),this.byteSize+=r.byteSize,this.size++}}a.POSITION_CARTESIAN=new a(0,r.DATA_TYPE_FLOAT,3),a.RGBA_PACKED=new a(1,r.DATA_TYPE_INT8,4),a.COLOR_PACKED=a.RGBA_PACKED,a.RGB_PACKED=new a(1,r.DATA_TYPE_INT8,3),a.NORMAL_FLOATS=new a(4,r.DATA_TYPE_FLOAT,3),a.FILLER_1B=new a(5,r.DATA_TYPE_UINT8,1),a.INTENSITY=new a(6,r.DATA_TYPE_UINT16,1),a.CLASSIFICATION=new a(7,r.DATA_TYPE_UINT8,1),a.NORMAL_SPHEREMAPPED=new a(8,r.DATA_TYPE_UINT8,2),a.NORMAL_OCT16=new a(9,r.DATA_TYPE_UINT8,2),a.NORMAL=new a(10,r.DATA_TYPE_FLOAT,3),a.RETURN_NUMBER=new a(11,r.DATA_TYPE_UINT8,1),a.NUMBER_OF_RETURNS=new a(12,r.DATA_TYPE_UINT8,1),a.SOURCE_ID=new a(13,r.DATA_TYPE_UINT8,1),a.INDICES=new a(14,r.DATA_TYPE_UINT32,1),a.SPACING=new a(15,r.DATA_TYPE_FLOAT,1),s.prototype.add=function(e){this.attributes.push(e),this.byteSize+=e.byteSize,this.size++},s.prototype.hasColors=function(){for(var e in this.attributes)if(1===this.attributes[e].name)return!0;return!1},s.prototype.hasNormals=function(){for(var e in this.attributes){var t=this.attributes[e];if(t===a.NORMAL_SPHEREMAPPED||t===a.NORMAL_FLOATS||t===a.NORMAL||t===a.NORMAL_OCT16)return!0}return!1}})();\n',"Worker",void 0,void 0)}function a(){return o()('(()=>{"use strict";onmessage=function(a){if(a.data&&a.data.buffer){for(var r=a.data.buffer,n=a.data.numPoints,t=a.data.pointSize,e=a.data.pointFormatID,i=a.data.scale,m=a.data.offset,f=(new Uint8Array(r),new DataView(r)),I=new ArrayBuffer(40*n),u=(new DataView(I),{min:[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY],max:[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY]}),o=[0,0,0],s=new ArrayBuffer(3*n*4),N=new ArrayBuffer(4*n),w=new ArrayBuffer(4*n),A=new ArrayBuffer(n),y=new ArrayBuffer(n),d=new ArrayBuffer(n),g=new ArrayBuffer(2*n),U=new Float32Array(s),c=new Uint8Array(N),b=new Float32Array(w),T=new Uint8Array(A),x=new Uint8Array(y),B=new Uint8Array(d),v=new Uint16Array(g),E=0;E<n;E++){var F=f.getInt32(E*t+0,!0),V=f.getInt32(E*t+4,!0),h=f.getInt32(E*t+8,!0),l=F*i[0]+m[0]-a.data.mins[0],p=V*i[1]+m[1]-a.data.mins[1],M=h*i[2]+m[2]-a.data.mins[2];U[3*E+0]=l,U[3*E+1]=p,U[3*E+2]=M,o[0]+=l/n,o[1]+=p/n,o[2]+=M/n,u.min[0]=Math.min(u.min[0],l),u.min[1]=Math.min(u.min[1],p),u.min[2]=Math.min(u.min[2],M),u.max[0]=Math.max(u.max[0],l),u.max[1]=Math.max(u.max[1],p),u.max[2]=Math.max(u.max[2],M);var S=f.getUint16(E*t+12,!0);b[E]=S;var Y=f.getUint8(E*t+14,!0),_=7&Y,D=(56&Y)>>3;x[E]=_,B[E]=D;var O=f.getUint8(E*t+15,!0);T[E]=O;var P=f.getUint16(E*t+18,!0);if(v[E]=P,2===e){var G=f.getUint16(E*t+20,!0)/256,R=f.getUint16(E*t+22,!0)/256,z=f.getUint16(E*t+24,!0)/256;c[4*E+0]=G,c[4*E+1]=R,c[4*E+2]=z,c[4*E+3]=255}}var j=new ArrayBuffer(4*n),k=new Uint32Array(j);for(E=0;E<n;E++)k[E]=E;var q={mean:o,position:s,color:N,intensity:w,classification:A,returnNumber:y,numberOfReturns:d,pointSourceID:g,tightBoundingBox:u,indices:j};postMessage(q,[q.position,q.color,q.intensity,q.classification,q.returnNumber,q.numberOfReturns,q.pointSourceID,q.indices])}}})();\n',"Worker",void 0,void 0)}function u(){return o()('(()=>{"use strict";onmessage=function(a){var t=a.data.boundingBox,n=new Float32Array(a.data.position),e=n.length/3,i=t.max[0]-t.min[0],r=t.max[1]-t.min[1],m=(t.max[2],t.min[2],new Float32Array(4096));m.fill(-1/0);for(var o=0;o<e;o++){var s=n[3*o+0],d=n[3*o+1],h=n[3*o+2],f=s/i,g=d/r;m[parseInt(Math.min(64*f,63))+64*parseInt(Math.min(64*g,63))]=h}var l={dem:{width:64,height:64,data:m.buffer}};postMessage(l,[l.dem.data])}})();\n',"Worker",void 0,void 0)}function l(){return o()('onmessage=function(e){if(performance.mark("laslaz-start"),!e.data||!e.data.buffer)return;let t=e.data.buffer,n=e.data.numPoints,r=e.data.pointSize,a=e.data.pointFormatID,i=e.data.scale,m=e.data.offset,f=(new Uint8Array(t),new DataView(t)),o={min:[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY],max:[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY]},I=[0,0,0],u=new ArrayBuffer(3*n*4),s=new ArrayBuffer(4*n),l=new ArrayBuffer(4*n),N=new ArrayBuffer(n),A=new ArrayBuffer(n),w=new ArrayBuffer(n),c=new ArrayBuffer(2*n),g=new Float32Array(u),U=new Uint8Array(s),d=new Float32Array(l),b=new Uint8Array(N),T=new Uint8Array(A),p=new Uint8Array(w),B=new Uint16Array(c),E=2==a||3==a,F=2==a?20:28,M=!1;if(E){let e,t,a,i;for(let m=0;m<n&&!M;++m)i=m*r,e=f.getUint16(i+F,!0),t=f.getUint16(i+F+2,!0),a=f.getUint16(i+F+4,!0),(e>255||t>255||a>255)&&(M=!0)}for(let t=0;t<n;t++){let a=f.getInt32(t*r+0,!0),u=f.getInt32(t*r+4,!0),s=f.getInt32(t*r+8,!0);x=a*i[0]+m[0]-e.data.mins[0],y=u*i[1]+m[1]-e.data.mins[1],z=s*i[2]+m[2]-e.data.mins[2],g[3*t+0]=x,g[3*t+1]=y,g[3*t+2]=z,I[0]+=x/n,I[1]+=y/n,I[2]+=z/n,o.min[0]=Math.min(o.min[0],x),o.min[1]=Math.min(o.min[1],y),o.min[2]=Math.min(o.min[2],z),o.max[0]=Math.max(o.max[0],x),o.max[1]=Math.max(o.max[1],y),o.max[2]=Math.max(o.max[2],z);let l=f.getUint16(t*r+12,!0);d[t]=l;let N=f.getUint8(t*r+14,!0),A=7&N,w=(56&N)>>3;T[t]=A,p[t]=w;let c=f.getUint8(t*r+15,!0);b[t]=c;let h=f.getUint16(t*r+18,!0);if(B[t]=h,E){let e=f.getUint16(t*r+F,!0),n=f.getUint16(t*r+F+2,!0),a=f.getUint16(t*r+F+4,!0);M&&(e/=256,n/=256,a/=256),U[4*t+0]=e,U[4*t+1]=n,U[4*t+2]=a,U[4*t+3]=255}}let h=new ArrayBuffer(4*n),V=new Uint32Array(h);for(let e=0;e<n;e++)V[e]=e;performance.mark("laslaz-end"),performance.clearMarks(),performance.clearMeasures();let S={mean:I,position:u,color:s,intensity:l,classification:N,returnNumber:A,numberOfReturns:w,pointSourceID:c,tightBoundingBox:o,indices:h};postMessage(S,[S.position,S.color,S.intensity,S.classification,S.returnNumber,S.numberOfReturns,S.pointSourceID,S.indices])};\n',"Worker",void 0,void 0)}function h(){return o()('Potree={},onmessage=function(e){if(!e.data||!e.data.buffer)return;let r,t,n,a,i,u,s,f,m,o,c,l,A,y,w,d,g,b,U,h,x,M=e.data.buffer,N=new DataView(M),B=e.data.schema,I=e.data.scale,R=e.data.offset,X=e.data.mins,p=B.reduce(((e,r)=>(e[r.name]=r,e)),{}),E=e=>{let r=(e=>{let r=0;for(var t=0;t<B.length;++t){if(B[t].name==e)return r;r+=B[t].size}})(e),t=p[e].type,n=p[e].size;if("signed"==t)switch(n){case 1:return e=>N.getInt8(e+r);case 2:return e=>N.getInt16(e+r,!0);case 4:return e=>N.getInt32(e+r,!0);case 8:return e=>N.getInt64(e+r,!0)}if("unsigned"==t)switch(n){case 1:return e=>N.getUint8(e+r);case 2:return e=>N.getUint16(e+r,!0);case 4:return e=>N.getUint32(e+r,!0);case 8:return e=>N.getUint64(e+r,!0)}if("float"==t)switch(n){case 4:return e=>N.getFloat32(e+r,!0);case 8:return e=>N.getFloat64(e+r,!0)}let a=JSON.stringify(p[e]);throw new Error(`Invalid dimension specification for ${e}: ${a}`)},L=B.reduce(((e,r)=>e+r.size),0),V=M.byteLength/L,_=!1;if(p.X&&p.Y&&p.Z&&(r=new ArrayBuffer(4*V*3),f=new Float32Array(r),w=[E("X"),E("Y"),E("Z")]),p.Red&&p.Green&&p.Blue){let e,r,n,a;t=new ArrayBuffer(4*V),m=new Uint8Array(t),d=[E("Red"),E("Green"),E("Blue")];for(let t=0;t<V&&!_;++t)a=t*L,e=d[0](a),r=d[1](a),n=d[2](a),(e>255||r>255||n>255)&&(_=!0)}p.Intensity&&(n=new ArrayBuffer(4*V),o=new Float32Array(n),g=E("Intensity")),p.Classification&&(a=new ArrayBuffer(V),c=new Uint8Array(a),b=E("Classification")),p.ReturnNumber&&(i=new ArrayBuffer(V),l=new Uint8Array(i),U=E("ReturnNumber")),p.NumberOfReturns&&(u=new ArrayBuffer(V),A=new Uint8Array(u),h=E("NumberOfReturns")),p.PointSourceId&&(s=new ArrayBuffer(2*V),y=new Uint16Array(s),x=E("PointSourceId"));let z,O,S,F,P,v,C=[0,0,0],G={min:[Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE],max:[-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE]};for(let e=0;e<V;++e){let r=e*L;f&&(z=w[0](r)*I.x+R.x-X[0],O=w[1](r)*I.y+R.y-X[1],S=w[2](r)*I.z+R.z-X[2],C[0]+=z/V,C[1]+=O/V,C[2]+=S/V,G.min[0]=Math.min(G.min[0],z),G.min[1]=Math.min(G.min[1],O),G.min[2]=Math.min(G.min[2],S),G.max[0]=Math.max(G.max[0],z),G.max[1]=Math.max(G.max[1],O),G.max[2]=Math.max(G.max[2],S),f[3*e+0]=z,f[3*e+1]=O,f[3*e+2]=S),m&&(F=d[0](r),P=d[1](r),v=d[2](r),_&&(F/=256,P/=256,v/=256),m[4*e+0]=F,m[4*e+1]=P,m[4*e+2]=v),o&&(o[e]=g(r)),c&&(c[e]=b(r)),l&&(l[e]=U(r)),A&&(A[e]=h(r)),y&&(y[e]=x(r))}let Y=new ArrayBuffer(4*V),Z=new Uint32Array(Y);for(let e=0;e<V;++e)Z[e]=e;let $={numPoints:V,tightBoundingBox:G,mean:C,position:r,color:t,intensity:n,classification:a,returnNumber:i,numberOfReturns:u,pointSourceId:s,indices:Y},D=[$.position,$.color,$.intensity,$.classification,$.returnNumber,$.numberOfReturns,$.pointSourceId,$.indices].filter((e=>e));postMessage($,D)};\n',"Worker",void 0,void 0)}class d{constructor(){this.workers=[];for(var e=0;e<7;e++)this.workers.push([])}getWorker(e){if(this.workers[e].length>0)return this.workers[e].pop();switch(e){case 0:return new s;case 1:throw new Error("LASLAZWorker not implemented");case 2:return new a;case 3:throw new Error("GreyhoundBinaryDecoderWorker not implemented");case 4:return new u;case 5:return new l;case 6:return new h;default:throw"Unknown worker requested"}}returnWorker(e,t){this.workers[e].push(t)}runTask(e,t,i,r){var n=this,o=this.getWorker(e);o.onmessage=function(i){t(i),n.returnWorker(e,o)},void 0!==r?o.postMessage(i,r):o.postMessage(i)}}d.BINARY_DECODER=0,d.LAS_LAZ=1,d.LAS_DECODER=2,d.GREYHOUND=3,d.DEM=4,d.EPT_LAS_ZIP_DECODER=5,d.EPT_BINARY_DECODER=6;var p={debug:{},workerPath:function(){var e,t=document&&document.currentScript?document.currentScript:(e=document.getElementsByTagName("script"))[e.length-1].getAttribute("src");if(t&&t.src){var i=new URL(t.src+"/..").href;return"/"===i.slice(-1)&&(i=i.slice(0,-1)),i}return console.error("Potree: Was unable to find its script path using document.currentScript."),""}(),maxNodesLoadGPUFrame:20,maxDEMLevel:0,maxNodesLoading:void 0!==navigator.hardwareConcurrency?navigator.hardwareConcurrency:4,pointLoadLimit:1e10,numNodesLoading:0,measureTimings:!1,workerPool:new d,lru:new t,pointcloudTransformVersion:void 0};const c=require("three");var f={POSITION_CARTESIAN:0,COLOR_PACKED:1,COLOR_FLOATS_1:2,COLOR_FLOATS_255:3,NORMAL_FLOATS:4,FILLER:5,INTENSITY:6,CLASSIFICATION:7,NORMAL_SPHEREMAPPED:8,NORMAL_OCT16:9,NORMAL:10,RETURN_NUMBER:11,NUMBER_OF_RETURNS:12,SOURCE_ID:13,INDICES:14,SPACING:15},m={DATA_TYPE_DOUBLE:{ordinal:0,size:8},DATA_TYPE_FLOAT:{ordinal:1,size:4},DATA_TYPE_INT8:{ordinal:2,size:1},DATA_TYPE_UINT8:{ordinal:3,size:1},DATA_TYPE_INT16:{ordinal:4,size:2},DATA_TYPE_UINT16:{ordinal:5,size:2},DATA_TYPE_INT32:{ordinal:6,size:4},DATA_TYPE_UINT32:{ordinal:7,size:4},DATA_TYPE_INT64:{ordinal:8,size:8},DATA_TYPE_UINT64:{ordinal:9,size:8}},g=0;for(var v in m)m[g]=m[v],g++;function y(e,t,i){this.name=e,this.type=t,this.numElements=i,this.byteSize=this.numElements*this.type.size}function x(e){if(this.attributes=[],this.byteSize=0,this.size=0,null!=e)for(var t=0;t<e.length;t++){var i=y[e[t]];this.attributes.push(i),this.byteSize+=i.byteSize,this.size++}}y.POSITION_CARTESIAN=new y(f.POSITION_CARTESIAN,m.DATA_TYPE_FLOAT,3),y.RGBA_PACKED=new y(f.COLOR_PACKED,m.DATA_TYPE_INT8,4),y.COLOR_PACKED=y.RGBA_PACKED,y.RGB_PACKED=new y(f.COLOR_PACKED,m.DATA_TYPE_INT8,3),y.NORMAL_FLOATS=new y(f.NORMAL_FLOATS,m.DATA_TYPE_FLOAT,3),y.FILLER_1B=new y(f.FILLER,m.DATA_TYPE_UINT8,1),y.INTENSITY=new y(f.INTENSITY,m.DATA_TYPE_UINT16,1),y.CLASSIFICATION=new y(f.CLASSIFICATION,m.DATA_TYPE_UINT8,1),y.NORMAL_SPHEREMAPPED=new y(f.NORMAL_SPHEREMAPPED,m.DATA_TYPE_UINT8,2),y.NORMAL_OCT16=new y(f.NORMAL_OCT16,m.DATA_TYPE_UINT8,2),y.NORMAL=new y(f.NORMAL,m.DATA_TYPE_FLOAT,3),y.RETURN_NUMBER=new y(f.RETURN_NUMBER,m.DATA_TYPE_UINT8,1),y.NUMBER_OF_RETURNS=new y(f.NUMBER_OF_RETURNS,m.DATA_TYPE_UINT8,1),y.SOURCE_ID=new y(f.SOURCE_ID,m.DATA_TYPE_UINT8,1),y.INDICES=new y(f.INDICES,m.DATA_TYPE_UINT32,1),y.SPACING=new y(f.SPACING,m.DATA_TYPE_FLOAT,1),x.prototype.add=function(e){this.attributes.push(e),this.byteSize+=e.byteSize,this.size++},x.prototype.hasColors=function(){for(var e in this.attributes)if(this.attributes[e].name===f.COLOR_PACKED)return!0;return!1},x.prototype.hasNormals=function(){for(var e in this.attributes){var t=this.attributes[e];if(t===y.NORMAL_SPHEREMAPPED||t===y.NORMAL_FLOATS||t===y.NORMAL||t===y.NORMAL_OCT16)return!0}return!1};class b{constructor(e,t,i){this.name=e,this.box=t,this.tileSize=i,this.level=this.name.length-1,this.data=new Float32Array(i*i),this.data.fill(-1/0),this.children=[],this.mipMap=[this.data],this.mipMapNeedsUpdate=!0}createMipMap(){this.mipMap=[this.data];for(var e=this.tileSize,t=parseInt(e/2),i=this.data;t>1;){for(var r=new Float32Array(t*t),n=0;n<t;n++)for(var o=0;o<t;o++){var s=i[2*n+0+2*o*e],a=i[2*n+0+2*o*e+e],u=i[2*n+1+2*o*e],l=i[2*n+1+2*o*e+e],[h,d]=[0,0];isFinite(s)&&(h+=s,d+=1),isFinite(a)&&(h+=a,d+=1),isFinite(u)&&(h+=u,d+=1),isFinite(l)&&(h+=l,d+=1),h/=d,r[n+o*t]=h}this.mipMap.push(r),i=r,e=t,t=parseInt(t/2)}this.mipMapNeedsUpdate=!1}uv(e){var t=this.box.getSize(new c.Vector3);return[(e.x-this.box.min.x)/t.x,(e.y-this.box.min.y)/t.y]}heightAtMipMapLevel(e,t){var i=this.uv(e),r=parseInt(this.tileSize/parseInt(2**t)),n=this.mipMap[t],o=Math.min(i[0]*r,r-1),s=Math.min(i[1]*r,r-1),a=o%1,u=s%1,[l,h]=[Math.floor(o),Math.ceil(o)],[d,p]=[Math.floor(s),Math.ceil(s)],c=n[l+r*d],f=n[l+r*p],m=n[h+r*d],g=n[h+r*p],v=isFinite(c)?(1-a)*(1-u):0,y=isFinite(f)?(1-a)*u:0,x=isFinite(m)?a*(1-u):0,b=isFinite(g)?a*u:0,w=v+y+x+b;if(v/=w,y/=w,x/=w,b/=w,0===w)return null;var S=0;return isFinite(c)&&(S+=c*v),isFinite(f)&&(S+=f*y),isFinite(m)&&(S+=m*x),isFinite(g)&&(S+=g*b),S}height(e){for(var t=null,i=0;i<this.mipMap.length;i++)if(null!==(t=this.heightAtMipMapLevel(e,i)))return t;return t}traverse(e,t=0){for(var i of(e(this,t),this.children.filter((e=>void 0!==e))))i.traverse(e,t+1)}}class w{constructor(e){this.pointcloud=e,this.matrix=null,this.boundingBox=null,this.tileSize=64,this.root=null,this.version=0}expandAndFindByBox(e,t){if(0===t)return[this.root];for(var i=[],r=[this.root];r.length>0;){var n=r.pop(),o=n.box.getSize(new c.Vector3),s={x:(e.min.x-n.box.min.x)/o.x,y:(e.min.y-n.box.min.y)/o.y},a={x:(e.max.x-n.box.max.x)/o.x,y:(e.max.y-n.box.max.y)/o.y};for(var u of(s.x=s.x<.5?0:1,s.y=s.y<.5?0:1,a.x=a.x<.5?0:1,a.y=a.y<.5?0:1,0===s.x&&0===s.y&&1===a.x&&1===a.y?[0,1,2,3]:s.x===a.x&&s.y===a.y?[s.x<<1|s.y]:[s.x<<1|s.y,a.x<<1|a.y])){if(void 0===n.children[u]){var l=n.box.clone();(2&u)>0?l.min.x+=o.x/2:l.max.x-=o.x/2,(1&u)>0?l.min.y+=o.y/2:l.max.y-=o.y/2;var h=new b(n.name+u,l,this.tileSize);n.children[u]=h}(h=n.children[u]).level<t?r.push(h):i.push(h)}}return i}childIndex(e){var[t,i]=e.map((e=>e<.5?0:1));return t<<1|i}height(e){if(!this.root)return 0;for(var t=null,i=[this.root];;){var r=i[i.length-1],n=r.height(e);null!==n&&(t=n);var o=r.uv(e),s=this.childIndex(o);if(!r.children[s])break;i.push(r.children[s])}return t+this.pointcloud.position.z}update(e){null!==this.matrix&&this.matrix.equals(this.pointcloud.matrixWorld)||(this.matrix=this.pointcloud.matrixWorld.clone(),this.boundingBox=this.pointcloud.boundingBox.clone().applyMatrix4(this.matrix),this.root=new b("r",this.boundingBox,this.tileSize),this.version++);var t=null;for(var i of e)if(void 0===i.demVersion||i.demVersion<this.version){t=i;break}if(null!==t){var r=t.getBoundingBox().clone().applyMatrix4(this.matrix),n=r.getSize(new c.Vector3),o=this.expandAndFindByBox(r,t.getLevel());t.demVersion=this.version;var s=t.geometryNode.geometry.attributes.position.array,a={boundingBox:{min:t.getBoundingBox().min.toArray(),max:t.getBoundingBox().max.toArray()},position:new Float32Array(s).buffer},u=[a.position],l=this;p.workerPool.runTask(d.DEM,(function(e){var t=new Float32Array(e.data.dem.data);for(var i of o){for(var s=i.box.getSize(new c.Vector3),a=0;a<l.tileSize;a++)for(var u=0;u<l.tileSize;u++){var h=a/(l.tileSize-1),d=u/(l.tileSize-1),p=i.box.min.x+h*s.x,f=i.box.min.y+d*s.y,m=l.tileSize*(p-r.min.x)/n.x,g=l.tileSize*(f-r.min.y)/n.y;m<0||m>l.tileSize||g<0||g>l.tileSize||(m=Math.min(Math.floor(m),l.tileSize-1),g=Math.min(Math.floor(g),l.tileSize-1),i.data[a+l.tileSize*u]=t[m+l.tileSize*g])}i.createMipMap(),i.mipMapNeedsUpdate=!0}}),a,u)}}}class S{constructor(){this.needsTransformUpdate=!0}getChildren(){}getBoundingBox(){}isLoaded(){}isGeometryNode(){}isTreeNode(){}getLevel(){}getBoundingSphere(){}}class T extends c.Object3D{constructor(){super(),this.dem=new w(this)}initialized(){return null!==this.root}}class _{constructor(){this.spacing=0,this.boundingBox=null,this.root=null,this.nodes=null,this.pointAttributes={},this.hierarchyStepSize=-1,this.loader=null,this.schema=null,this.baseDepth=null,this.offset=null,this.projection=null,this.boundingSphere=null,this.serverURL=null,this.normalize={color:!1,intensity:!1}}}function A(e,t,i,r,n){this.id=A.IDCount++,this.name=e,this.index=parseInt(e.charAt(e.length-1)),this.pcoGeometry=t,this.geometry=null,this.boundingBox=i,this.boundingSphere=i.getBoundingSphere(new c.Sphere),this.scale=r,this.offset=n,this.children={},this.numPoints=0,this.level=null,this.loaded=!1,this.oneTimeDisposeHandlers=[],this.baseLoaded=!1;var o=new c.Vector3,s=this.boundingBox.clone();s.min.sub(this.pcoGeometry.boundingBox.getCenter(o)),s.max.sub(this.pcoGeometry.boundingBox.getCenter(o)),this.scale&&(s.min.multiplyScalar(1/this.scale),s.max.multiplyScalar(1/this.scale)),this.greyhoundBounds=s,this.greyhoundOffset=this.pcoGeometry.offset.clone().add(this.pcoGeometry.boundingBox.getSize(new c.Vector3).multiplyScalar(.5))}function E(e){this.version=e;var t=-1===e.indexOf(".")?e.length:e.indexOf(".");this.versionMajor=parseInt(e.substr(0,t)),this.versionMinor=parseInt(e.substr(t+1)),0===this.versionMinor.length&&(this.versionMinor=0)}A.IDCount=0,A.prototype=Object.create(S.prototype),A.prototype.isGeometryNode=function(){return!0},A.prototype.isTreeNode=function(){return!1},A.prototype.isLoaded=function(){return this.loaded},A.prototype.getBoundingSphere=function(){return this.boundingSphere},A.prototype.getBoundingBox=function(){return this.boundingBox},A.prototype.getLevel=function(){return this.level},A.prototype.getChildren=function(){for(var e=[],t=0;t<8;++t)this.children[t]&&e.push(this.children[t]);return e},A.prototype.getURL=function(){var e=this.pcoGeometry.schema,t=this.greyhoundBounds,i=t.min.x+","+t.min.y+","+t.min.z+","+t.max.x+","+t.max.y+","+t.max.z,r=this.pcoGeometry.serverURL+"read?depthBegin="+(this.baseLoaded?this.level+this.pcoGeometry.baseDepth:0)+"&depthEnd="+(this.level+this.pcoGeometry.baseDepth+1)+"&bounds=["+i+"]&schema="+JSON.stringify(e)+"&compress=true";if(this.scale&&(r+="&scale="+this.scale),this.greyhoundOffset){var n=this.greyhoundOffset;r+="&offset=["+n.x+","+n.y+","+n.z+"]"}return this.baseLoaded||(this.baseLoaded=!0),r},A.prototype.addChild=function(e){this.children[e.index]=e,e.parent=this},A.prototype.load=function(){!0===this.loading||!0===this.loaded||p.numNodesLoading>=p.maxNodesLoading||(this.loading=!0,p.numNodesLoading++,this.level%this.pcoGeometry.hierarchyStepSize==0&&this.hasChildren?this.loadHierarchyThenPoints():this.loadPoints())},A.prototype.loadPoints=function(){this.pcoGeometry.loader.load(this)},A.prototype.loadHierarchyThenPoints=function(){var e=[0,2,1,3,4,6,5,7],t=function(i,r,n){var o,s;Object.keys(i).forEach((function(a){if("n"!==a){switch(a){case"swd":o=i.swd,s=r+e[0];break;case"nwd":o=i.nwd,s=r+e[1];break;case"swu":o=i.swu,s=r+e[2];break;case"nwu":o=i.nwu,s=r+e[3];break;case"sed":o=i.sed,s=r+e[4];break;case"ned":o=i.ned,s=r+e[5];break;case"seu":o=i.seu,s=r+e[6];break;case"neu":o=i.neu,s=r+e[7]}var u,l;n.push({children:(u=o,l=0,Object.keys(u).forEach((function(t){"swd"===t?l+=1<<e[0]:"nwd"===t?l+=1<<e[1]:"swu"===t?l+=1<<e[2]:"nwu"===t?l+=1<<e[3]:"sed"===t?l+=1<<e[4]:"ned"===t?l+=1<<e[5]:"seu"===t?l+=1<<e[6]:"neu"===t&&(l+=1<<e[7])})),l),numPoints:o.n,name:s}),t(o,s,n)}}))};if(this.level%this.pcoGeometry.hierarchyStepSize==0){var i=this.level+this.pcoGeometry.baseDepth,r=i+this.pcoGeometry.hierarchyStepSize+2,n=this.greyhoundBounds,o=n.min.x+","+n.min.y+","+n.min.z+","+n.max.x+","+n.max.y+","+n.max.z,s=this.pcoGeometry.serverURL+"hierarchy?bounds=["+o+"]&depthBegin="+i+"&depthEnd="+r;if(this.scale&&(s+="&scale="+this.scale),this.greyhoundOffset){var a=this.greyhoundOffset;s+="&offset=["+a.x+","+a.y+","+a.z+"]"}var u=this,l=XHRFactory.createXMLHttpRequest();l.overrideMimeType("text/plain"),l.open("GET",s,!0),l.onload=function(e){try{!function(e,i){var r=[];e.numPoints=i.n,t(i,e.name,r);var n={};n[e.name]=e;for(var o=e.pcoGeometry,s=0;s<r.length;s++){var a=r[s].name,u=r[s].numPoints,l=parseInt(a.charAt(a.length-1)),h=n[a.substring(0,a.length-1)],d=a.length-1,p=new A(a,o,C.createChildAABB(h.boundingBox,l),e.scale,e.offset);p.level=d,p.numPoints=u,p.hasChildren=r[s].children>0,p.spacing=o.spacing/Math.pow(2,d),h.addChild(p),n[a]=p}e.loadPoints()}(u,JSON.parse(l.responseText)||{})}catch(e){p.numNodesLoading--,console.error("Potree: Exception thrown parsing points.",e)}},l.onerror=function(e){console.log("Potree: Failed to load file! HTTP status "+l.status+", file:"+s,e)},l.send(null)}},A.prototype.getNumPoints=function(){return this.numPoints},A.prototype.dispose=function(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(var e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}},Object.assign(A.prototype,c.EventDispatcher.prototype),E.prototype.newerThan=function(e){var t=new E(e);return this.versionMajor>t.versionMajor||this.versionMajor===t.versionMajor&&this.versionMinor>t.versionMinor},E.prototype.equalOrHigher=function(e){var t=new E(e);return this.versionMajor>t.versionMajor||this.versionMajor===t.versionMajor&&this.versionMinor>=t.versionMinor},E.prototype.upTo=function(e){return!this.newerThan(e)};const B={config:{withCredentials:!1,customHeaders:[{header:null,value:null}]},createXMLHttpRequest:function(){let e=new XMLHttpRequest;if(this.config.customHeaders&&Array.isArray(this.config.customHeaders)&&this.config.customHeaders.length>0){let t=e.open,i=this.config.customHeaders;e.open=function(){t.apply(this,[].slice.call(arguments)),i.forEach((function(t){t.header&&t.value&&e.setRequestHeader(t.header,t.value)}))}}return e},fetch:async function(e){const t=new Headers;this.config.customHeaders&&this.config.customHeaders.forEach((function(e){e.header&&e.value&&t.append(e.header,e.value)}));const i={headers:t,credentials:B.config.withCredentials?"include":"same-origin"};return fetch(e,i)}};class N{constructor(e,t,i){this.version="string"==typeof e?new E(e):e,this.boundingBox=t,this.scale=i}load(e){if(!e.loaded){var t=this,i=e.getURL(),r=B.createXMLHttpRequest();r.overrideMimeType("text/plain"),r.open("GET",i,!0),r.responseType="arraybuffer",r.overrideMimeType("text/plain; charset=x-user-defined"),r.onload=function(){try{t.parse(e,r.response)}catch(e){console.error("Potree: Exception thrown parsing points.",e),p.numNodesLoading--}},r.onerror=function(e){p.numNodesLoading--,console.error("Potree: Failed to load file.",r,i)},r.send(null)}}parse(e,t){var i=new DataView(t,t.byteLength-4,4).getUint32(0,!0),r=e.pcoGeometry.pointAttributes;e.numPoints=i;var n=e.boundingBox,o=new THREE.Vector3,s=e.pcoGeometry.boundingBox.getCenter(o).sub(e.boundingBox.min),a={buffer:t,pointAttributes:r,version:this.version.version,schema:e.pcoGeometry.schema,min:[n.min.x,n.min.y,n.min.z],max:[n.max.x,n.max.y,n.max.z],offset:s.toArray(),scale:this.scale,normalize:e.pcoGeometry.normalize};p.workerPool.runTask(d.GREYHOUND,(function(t){var i=t.data,r=i.attributeBuffers,n=new THREE.Box3((new THREE.Vector3).fromArray(i.tightBoundingBox.min),(new THREE.Vector3).fromArray(i.tightBoundingBox.max)),o=new THREE.BufferGeometry;for(var s in r){var a=r[s].buffer;if(parseInt(s)===f.POSITION_CARTESIAN)o.setAttribute("position",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===f.COLOR_PACKED)o.setAttribute("color",new THREE.BufferAttribute(new Uint8Array(a),4,!0));else if(parseInt(s)===f.INTENSITY)o.setAttribute("intensity",new THREE.BufferAttribute(new Float32Array(a),1));else if(parseInt(s)===f.CLASSIFICATION)o.setAttribute("classification",new THREE.BufferAttribute(new Uint8Array(a),1));else if(parseInt(s)===f.NORMAL_SPHEREMAPPED)o.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===f.NORMAL_OCT16)o.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===f.NORMAL)o.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===f.INDICES)(u=new THREE.BufferAttribute(new Uint8Array(a),4)).normalized=!0,o.setAttribute("indices",u);else if(parseInt(s)===f.SPACING){var u=new THREE.BufferAttribute(new Float32Array(a),1);o.setAttribute("spacing",u)}}n.max.sub(n.min),n.min.set(0,0,0),e.numPoints=i.numPoints,e.geometry=o,e.mean=new THREE.Vector3(...i.mean),e.tightBoundingBox=n,e.loaded=!0,e.loading=!1,p.numNodesLoading--}),a,[a.buffer])}}class I{static getQueryParam(e){e=e.replace(/[[\]]/g,"\\$&");var t=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(window.location.href);return t?t[2]?decodeURIComponent(t[2].replace(/\+/g," ")):"":null}static createSchema(e){var t=[{name:"X",size:4,type:"signed"},{name:"Y",size:4,type:"signed"},{name:"Z",size:4,type:"signed"}];return e.forEach((function(e){"COLOR_PACKED"===e?(t.push({name:"Red",size:2,type:"unsigned"}),t.push({name:"Green",size:2,type:"unsigned"}),t.push({name:"Blue",size:2,type:"unsigned"})):"INTENSITY"===e?t.push({name:"Intensity",size:2,type:"unsigned"}):"CLASSIFICATION"===e&&t.push({name:"Classification",size:1,type:"unsigned"})})),t}static fetch(e,t){var i=B.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",e,!0),i.onreadystatechange=function(){4===i.readyState&&(200===i.status||0===i.status?t(null,i.responseText):t(i.responseText))},i.send(null)}static fetchBinary(e,t){var i=B.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",e,!0),i.responseType="arraybuffer",i.onreadystatechange=function(){4===i.readyState&&(200===i.status||0===i.status?t(null,i.response):t(i.responseText))},i.send(null)}static pointSizeFrom(e){return e.reduce(((e,t)=>e+t.size),0)}static getNormalization(e,t,i){var r=[{name:"X",size:4,type:"floating"},{name:"Y",size:4,type:"floating"},{name:"Z",size:4,type:"floating"},{name:"Red",size:2,type:"unsigned"},{name:"Green",size:2,type:"unsigned"},{name:"Blue",size:2,type:"unsigned"},{name:"Intensity",size:2,type:"unsigned"}],n=e+"read?depth="+t+"&schema="+JSON.stringify(r);I.fetchBinary(n,(function(e,t){if(e)throw new Error(e);for(var n=new DataView(t),o=t.byteLength-4,s=I.pointSizeFrom(r),a=!1,u=!1,l=0;l<o&&((n.getUint16(l+12,!0)>255||n.getUint16(l+14,!0)>255||n.getUint16(l+16,!0)>255)&&(a=!0),n.getUint16(l+18,!0)>255&&(u=!0),!a||!u);l+=s);i(null,{color:a,intensity:u})}))}}function C(){}C.loadInfoJSON=function(e,t){},C.load=function(e,t){try{var i=e.split("greyhound://")[1];1===i.split("http://").length&&1===i.split("https://").length&&(i="http://"+i),I.fetch(i+"info",(function(e,r){if(e)throw new Error(e);var n=JSON.parse(r),o=new E("1.4"),s=n.bounds,a=n.scale||.01;Array.isArray(a)&&(a=Math.min(a[0],a[1],a[2])),I.getQueryParam("scale")&&(a=parseFloat(I.getQueryParam("scale")));var u=Math.max(8,n.baseDepth),l=["POSITION_CARTESIAN"],h=!1,d=!1,p=!1;n.schema.forEach((function(e){"Intensity"===e.name&&l.push("INTENSITY"),"Classification"===e.name&&l.push("CLASSIFICATION"),"Red"===e.name?h=!0:"Green"===e.name?d=!0:"Blue"===e.name&&(p=!0)})),h&&d&&p&&l.push("COLOR_PACKED");var c=new _;c.serverURL=i,c.spacing=(s[3]-s[0])/Math.pow(2,u),c.baseDepth=u,c.hierarchyStepSize=5,c.schema=I.createSchema(l);var f=I.pointSizeFrom(c.schema);c.pointAttributes=new x(l),c.pointAttributes.byteSize=f;var m=new THREE.Box3((new THREE.Vector3).fromArray(s,0),(new THREE.Vector3).fromArray(s,3)),g=m.min.clone();m.max.sub(m.min),m.min.set(0,0,0),c.projection=n.srs,c.boundingBox=m,c.boundingSphere=m.getBoundingSphere(new THREE.Sphere),c.scale=a,c.offset=g,c.loader=new N(o,m,c.scale);var v={},y=new A("r",c,m,a,g);y.level=0,y.hasChildren=!0,y.numPoints=n.numPoints,y.spacing=c.spacing,c.root=y,c.root.load(),v.r=y,c.nodes=v,I.getNormalization(i,n.baseDepth,(function(e,i){i.color&&(c.normalize.color=!0),i.intensity&&(c.normalize.intensity=!0),t(c)}))}))}catch(i){console.log("Potree: Loading failed.",e,i),t()}},C.loadPointAttributes=function(e){for(var t=e.pointAttributes,i=new x,r=0;r<t.length;r++){var n=y[t[r]];i.add(n)}return i},C.createChildAABB=function(e,t){var i=e.min,r=e.max,n=(new THREE.Vector3).copy(r).sub(i).multiplyScalar(.5),o=new THREE.Vector3(n.x,0,0),s=new THREE.Vector3(0,n.y,0),a=new THREE.Vector3(0,0,n.z),u=i,l=(new THREE.Vector3).add(i).add(n);return 1===t?(i=(new THREE.Vector3).copy(u).add(a),r=(new THREE.Vector3).copy(l).add(a)):3===t?(i=(new THREE.Vector3).copy(u).add(a).add(s),r=(new THREE.Vector3).copy(l).add(a).add(s)):0===t?(i=u,r=l):2===t?(i=(new THREE.Vector3).copy(u).add(s),r=(new THREE.Vector3).copy(l).add(s)):5===t?(i=(new THREE.Vector3).copy(u).add(a).add(o),r=(new THREE.Vector3).copy(l).add(a).add(o)):7===t?(i=(new THREE.Vector3).copy(u).add(n),r=(new THREE.Vector3).copy(l).add(n)):4===t?(i=(new THREE.Vector3).copy(u).add(o),r=(new THREE.Vector3).copy(l).add(o)):6===t&&(i=(new THREE.Vector3).copy(u).add(o).add(s),r=(new THREE.Vector3).copy(l).add(o).add(s)),new THREE.Box3(i,r)};class P{constructor(e,t,i){this.version="string"==typeof e?new E(e):e,this.boundingBox=t,this.scale=i}load(e){if(!e.loaded){var t=e.getURL();this.version.equalOrHigher("1.4")&&(t+=".bin");var i=this,r=B.createXMLHttpRequest();r.open("GET",t,!0),r.responseType="arraybuffer",r.overrideMimeType("text/plain; charset=x-user-defined"),r.onload=function(){try{i.parse(e,r.response)}catch(e){p.numNodesLoading--,console.error("Potree: Exception thrown parsing points.",e)}},r.onerror=function(e){p.numNodesLoading--,console.error("Potree: Failed to load file.",r,t)},r.send(null)}}parse(e,t){var i=e.pcoGeometry.pointAttributes,r=t.byteLength/e.pcoGeometry.pointAttributes.byteSize;this.version.upTo("1.5")&&(e.numPoints=r);var n={buffer:t,pointAttributes:i,version:this.version.version,min:[e.boundingBox.min.x,e.boundingBox.min.y,e.boundingBox.min.z],offset:[e.pcoGeometry.offset.x,e.pcoGeometry.offset.y,e.pcoGeometry.offset.z],scale:this.scale,spacing:e.spacing,hasChildren:e.hasChildren,name:e.name};p.workerPool.runTask(d.BINARY_DECODER,(function(t){var r=t.data;if(void 0!==r.error)return p.numNodesLoading--,void console.error("Potree: Binary worker error.",r);var n=r.attributeBuffers,o=new c.Box3((new c.Vector3).fromArray(r.tightBoundingBox.min),(new c.Vector3).fromArray(r.tightBoundingBox.max)),s=new c.BufferGeometry;for(var a in n){var u=n[a].buffer;if(parseInt(a)===f.POSITION_CARTESIAN)s.setAttribute("position",new c.BufferAttribute(new Float32Array(u),3));else if(parseInt(a)===f.COLOR_PACKED)s.setAttribute("color",new c.BufferAttribute(new Uint8Array(u),4,!0));else if(parseInt(a)===f.INTENSITY)s.setAttribute("intensity",new c.BufferAttribute(new Float32Array(u),1));else if(parseInt(a)===f.CLASSIFICATION)s.setAttribute("classification",new c.BufferAttribute(new Uint8Array(u),1));else if(parseInt(a)===f.NORMAL_SPHEREMAPPED)s.setAttribute("normal",new c.BufferAttribute(new Float32Array(u),3));else if(parseInt(a)===f.NORMAL_OCT16)s.setAttribute("normal",new c.BufferAttribute(new Float32Array(u),3));else if(parseInt(a)===f.NORMAL)s.setAttribute("normal",new c.BufferAttribute(new Float32Array(u),3));else if(parseInt(a)===f.INDICES)(l=new c.BufferAttribute(new Uint8Array(u),4)).normalized=!0,s.setAttribute("indices",l);else if(parseInt(a)===f.SPACING){var l=new c.BufferAttribute(new Float32Array(u),1);s.setAttribute("spacing",l)}}o.max.sub(o.min),o.min.set(0,0,0);var h=t.data.buffer.byteLength/i.byteSize;e.numPoints=h,e.geometry=s,e.mean=new c.Vector3(...r.mean),e.tightBoundingBox=o,e.loaded=!0,e.loading=!1,e.estimatedSpacing=r.estimatedSpacing,p.numNodesLoading--}),n,[n.buffer])}}var R=[function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0)}},function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0)}},function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0),color:[e.getUint16(20,!0),e.getUint16(22,!0),e.getUint16(24,!0)]}},function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0),color:[e.getUint16(28,!0),e.getUint16(30,!0),e.getUint16(32,!0)]}}];function D(e,t,i,r){r=void 0===r||0===r?1:r;var n=new t(e.slice(i,i+t.BYTES_PER_ELEMENT*r));if(void 0===r||1===r)return n[0];for(var o=[],s=0;s<r;s++)o.push(n[s]);return o}function M(e){this.arraybuffer=e}function L(e){var t=this;this.arraybuffer=e,this.nextCB=null,this.dorr=function(e,i){t.nextCB=i,p.workerPool.runTask(d.LAS_LAZ,(function(e){null!==t.nextCB&&(t.nextCB(e.data),t.nextCB=null)}),e)}}function O(e){if(this.arraybuffer=e,this.determineVersion(),this.version>12)throw new Error("Only file versions <= 1.2 are supported at this time");if(this.determineFormat(),void 0===R[this.formatId])throw new Error("The point format ID is not supported");this.loader=this.isCompressed?new L(this.arraybuffer):new M(this.arraybuffer)}function z(e,t,i,r,n,o,s,a){this.arrayb=e,this.decoder=R[t],this.pointsCount=r,this.pointSize=i,this.scale=n,this.offset=o,this.mins=s,this.maxs=a}M.prototype.open=function(){return this.readOffset=0,new Promise((function(e,t){setTimeout(e,0)}))},M.prototype.getHeader=function(){var e=this;return new Promise((function(t,i){setTimeout((function(){e.header=function(e){var t={};t.pointsOffset=D(e,Uint32Array,96),t.pointsFormatId=D(e,Uint8Array,104),t.pointsStructSize=D(e,Uint16Array,105),t.pointsCount=D(e,Uint32Array,107);var i=131;t.scale=D(e,Float64Array,i,3),i+=24,t.offset=D(e,Float64Array,i,3),i+=24;var r=D(e,Float64Array,i,6);return i+=48,t.maxs=[r[0],r[2],r[4]],t.mins=[r[1],r[3],r[5]],t}(e.arraybuffer),t(e.header)}),0)}))},M.prototype.readData=function(e,t,i){var r=this;return new Promise((function(t,n){setTimeout((function(){if(!r.header)return n(new Error("Cannot start reading data till a header request is issued"));var o;if(i<=1){e=Math.min(e,r.header.pointsCount-r.readOffset);var s=(o=r.header.pointsOffset+r.readOffset*r.header.pointsStructSize)+e*r.header.pointsStructSize;t({buffer:r.arraybuffer.slice(o,s),count:e,hasMoreData:r.readOffset+e<r.header.pointsCount}),r.readOffset+=e}else{for(var a=Math.min(e*i,r.header.pointsCount-r.readOffset),u=Math.ceil(a/i),l=0,h=new Uint8Array(u*r.header.pointsStructSize),d=0;d<a;d++){if(d%i==0){o=r.header.pointsOffset+r.readOffset*r.header.pointsStructSize;var p=new Uint8Array(r.arraybuffer,o,r.header.pointsStructSize);h.set(p,l*r.header.pointsStructSize),l++}r.readOffset++}t({buffer:h.buffer,count:l,hasMoreData:r.readOffset<r.header.pointsCount})}}),0)}))},M.prototype.close=function(){var e=this;return new Promise((function(t,i){e.arraybuffer=null,setTimeout(t,0)}))},L.prototype.open=function(){var e=this;return new Promise((function(t,i){e.dorr({type:"open",arraybuffer:e.arraybuffer},(function(e){if(1!==e.status)return i(new Error("Failed to open file"));t(!0)}))}))},L.prototype.getHeader=function(){var e=this;return new Promise((function(t,i){e.dorr({type:"header"},(function(e){if(1!==e.status)return i(new Error("Failed to get header"));t(e.header)}))}))},L.prototype.readData=function(e,t,i){var r=this;return new Promise((function(n,o){r.dorr({type:"read",count:e,offset:t,skip:i},(function(e){if(1!==e.status)return o(new Error("Failed to read data"));n({buffer:e.buffer,count:e.count,hasMoreData:e.hasMoreData})}))}))},L.prototype.close=function(){var e=this;return new Promise((function(t,i){e.dorr({type:"close"},(function(e){if(1!==e.status)return i(new Error("Failed to close file"));t(!0)}))}))},O.prototype.determineFormat=function(){var e=D(this.arraybuffer,Uint8Array,104),t=(128&e)>>7,i=(64&e)>>6;if(1===t&&1===i)throw new Error("Old style compression not supported");this.formatId=63&e,this.isCompressed=1===t||1===i},O.prototype.determineVersion=function(){var e=new Int8Array(this.arraybuffer,24,2);this.version=10*e[0]+e[1],this.versionAsString=e[0]+"."+e[1]},O.prototype.open=function(){return this.loader.open()},O.prototype.getHeader=function(){return this.loader.getHeader()},O.prototype.readData=function(e,t,i){return this.loader.readData(e,t,i)},O.prototype.close=function(){return this.loader.close()},z.prototype.getPoint=function(e){if(e<0||e>=this.pointsCount)throw new Error("Point index out of range");return this.decoder(new DataView(this.arrayb,e*this.pointSize,this.pointSize))};class U{constructor(e){this.version="string"==typeof e?new E(e):e}load(e){if(!e.loaded){var t=e.pcoGeometry.pointAttributes,i=e.getURL();this.version.equalOrHigher("1.4")&&(i+="."+t.toLowerCase());var r=this,n=B.createXMLHttpRequest();n.open("GET",i,!0),n.responseType="arraybuffer",n.overrideMimeType("text/plain; charset=x-user-defined"),n.onload=function(){if(n.response instanceof ArrayBuffer)try{r.parse(e,n.response)}catch(e){console.error("Potree: Exception thrown parsing points.",e),p.numNodesLoading--}else p.numNodesLoading--,console.log("Potree: LASLAZLoader xhr response is not a ArrayBuffer.")},n.onerror=function(){p.numNodesLoading--,console.log("Potree: LASLAZLoader failed to load file, "+n.status+", file: "+i)},n.send(null)}}parse(e,t){var i=new O(t),r=new F(e);i.open().then((e=>(i.isOpen=!0,i))).then((e=>e.getHeader().then((function(t){return[e,t]})))).then((e=>{let t=e[0],i=e[1],n=0;i.pointsCount;var o=function(){return t.readData(1e6,0,1).then((function(e){return r.push(new z(e.buffer,i.pointsFormatId,i.pointsStructSize,e.count,i.scale,i.offset,i.mins,i.maxs)),n+=e.count,e.hasMoreData?o():(i.totalRead=n,i.versionAsString=t.versionAsString,i.isCompressed=t.isCompressed,[t,i,r])}))};return o()})).then((e=>{let t=e[0];return t.close().then((function(){return t.isOpen=!1,e.slice(1)})).catch((e=>{if(t.isOpen)return t.close().then((function(){throw t.isOpen=!1,e}));throw e}))})).catch((e=>{console.error("Potree: Failed to open file:",e)}))}handle(e,t){}}class F{constructor(e){this.node=e}push(e){var t=this,i={buffer:e.arrayb,numPoints:e.pointsCount,pointSize:e.pointSize,pointFormatID:2,scale:e.scale,offset:e.offset,mins:e.mins,maxs:e.maxs},r=p.workerPool.getWorker(d.LAS_DECODER);r.onmessage=function(i){var n=new c.BufferGeometry,o=e.pointsCount,s=new Float32Array(i.data.position),a=new Uint8Array(i.data.color),u=new Float32Array(i.data.intensity),l=new Uint8Array(i.data.classification),h=new Uint8Array(i.data.returnNumber),f=new Uint8Array(i.data.numberOfReturns),m=new Uint16Array(i.data.pointSourceID),g=new Uint8Array(i.data.indices);n.setAttribute("position",new c.BufferAttribute(s,3)),n.setAttribute("color",new c.BufferAttribute(a,4,!0)),n.setAttribute("intensity",new c.BufferAttribute(u,1)),n.setAttribute("classification",new c.BufferAttribute(l,1)),n.setAttribute("returnNumber",new c.BufferAttribute(h,1)),n.setAttribute("numberOfReturns",new c.BufferAttribute(f,1)),n.setAttribute("pointSourceID",new c.BufferAttribute(m,1)),n.setAttribute("indices",new c.BufferAttribute(g,4)),n.attributes.indices.normalized=!0;var v=new c.Box3((new c.Vector3).fromArray(i.data.tightBoundingBox.min),(new c.Vector3).fromArray(i.data.tightBoundingBox.max));n.boundingBox=t.node.boundingBox,t.node.tightBoundingBox=v,t.node.geometry=n,t.node.numPoints=o,t.node.loaded=!0,t.node.loading=!1,p.numNodesLoading--,t.node.mean=new c.Vector3(...i.data.mean),p.workerPool.returnWorker(d.LAS_DECODER,r)},r.postMessage(i,[i.buffer])}}class V{constructor(){this.url=null,this.octreeDir=null,this.spacing=0,this.boundingBox=null,this.root=null,this.nodes=null,this.pointAttributes=null,this.hierarchyStepSize=-1,this.loader=null}}class G extends S{constructor(e,t,i){super(),this.id=G.IDCount++,this.name=e,this.index=parseInt(e.charAt(e.length-1)),this.pcoGeometry=t,this.geometry=null,this.boundingBox=i,this.boundingSphere=i.getBoundingSphere(new c.Sphere),this.children={},this.numPoints=0,this.level=null,this.loaded=!1,this.oneTimeDisposeHandlers=[]}isGeometryNode(){return!0}getLevel(){return this.level}isTreeNode(){return!1}isLoaded(){return this.loaded}getBoundingSphere(){return this.boundingSphere}getBoundingBox(){return this.boundingBox}getChildren(){for(var e=[],t=0;t<8;t++)this.children[t]&&e.push(this.children[t]);return e}getURL(){var e="",t=this.pcoGeometry.loader.version;return t.equalOrHigher("1.5")?e=this.pcoGeometry.octreeDir+"/"+this.getHierarchyPath()+"/"+this.name:(t.equalOrHigher("1.4")||t.upTo("1.3"))&&(e=this.pcoGeometry.octreeDir+"/"+this.name),e}getHierarchyPath(){for(var e="r/",t=this.pcoGeometry.hierarchyStepSize,i=this.name.substr(1),r=Math.floor(i.length/t),n=0;n<r;n++)e+=i.substr(n*t,t)+"/";return e.slice(0,-1)}addChild(e){this.children[e.index]=e,e.parent=this}load(){if(!(!0===this.loading||!0===this.loaded||p.numNodesLoading>=p.maxNodesLoading)){this.loading=!0,p.numNodesLoading++;try{this.pcoGeometry.loader.version.equalOrHigher("1.5")&&this.level%this.pcoGeometry.hierarchyStepSize==0&&this.hasChildren?this.loadHierachyThenPoints():this.loadPoints()}catch(e){p.numNodesLoading--,console.error("Potree: Exception thrown loading points file.",e)}}}loadPoints(){this.pcoGeometry.loader.load(this)}loadHierachyThenPoints(){var e=this;if(e.level%e.pcoGeometry.hierarchyStepSize==0){var t=e.pcoGeometry.octreeDir+"/"+e.getHierarchyPath()+"/"+e.name+".hrc",i=B.createXMLHttpRequest();i.open("GET",t,!0),i.responseType="arraybuffer",i.overrideMimeType("text/plain; charset=x-user-defined"),i.onload=function(t){try{!function(e,t){var i=new DataView(t),r=[],n=i.getUint8(0),o=i.getUint32(1,!0);e.numPoints=o,r.push({children:n,numPoints:o,name:e.name});for(var s=[],a=5;r.length>0;){for(var u=r.shift(),l=1,h=0;h<8;h++){if(0!=(u.children&l)){var d=u.name+h,p=i.getUint8(a),c=i.getUint32(a+1,!0);r.push({children:p,numPoints:c,name:d}),s.push({children:p,numPoints:c,name:d}),a+=5}l*=2}if(a===t.byteLength)break}var f={};f[e.name]=e;var m=e.pcoGeometry;for(h=0;h<s.length;h++){var g=s[h].name,v=s[h].numPoints,y=parseInt(g.charAt(g.length-1)),x=f[g.substring(0,g.length-1)],b=g.length-1,w=H.createChildAABB(x.boundingBox,y),S=new G(g,m,w);S.level=b,S.numPoints=v,S.hasChildren=s[h].children>0,S.spacing=m.spacing/Math.pow(2,b),x.addChild(S),f[g]=S}e.loadPoints()}(e,i.response)}catch(e){p.numNodesLoading--,console.error("Potree: Exception thrown parsing points.",e)}},i.onerror=function(e){p.numNodesLoading--,console.error("Potree: Failed to load file.",i.status,t,e)},i.send(null)}}getNumPoints(){return this.numPoints}dispose(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(var e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}}}G.IDCount=0,Object.assign(G.prototype,c.EventDispatcher.prototype);class H{static load(e,t){var i=new V;i.url=e;var r=B.createXMLHttpRequest();r.overrideMimeType("text/plain"),r.open("GET",e,!0),r.onload=function(){var n=JSON.parse(r.responseText),o=new E(n.version);0===n.octreeDir.indexOf("http")?i.octreeDir=n.octreeDir:i.octreeDir=e+"/../"+n.octreeDir,i.spacing=n.spacing,i.hierarchyStepSize=n.hierarchyStepSize,i.pointAttributes=n.pointAttributes;var s=new c.Vector3(n.boundingBox.lx,n.boundingBox.ly,n.boundingBox.lz),a=new c.Vector3(n.boundingBox.ux,n.boundingBox.uy,n.boundingBox.uz),u=(b=new c.Box3(s,a)).clone();n.tightBoundingBox&&(u.min.copy(new c.Vector3(n.tightBoundingBox.lx,n.tightBoundingBox.ly,n.tightBoundingBox.lz)),u.max.copy(new c.Vector3(n.tightBoundingBox.ux,n.tightBoundingBox.uy,n.tightBoundingBox.uz)));var l=s.clone();b.min.sub(l),b.max.sub(l),u.min.sub(l),u.max.sub(l),i.projection=n.projection,i.boundingBox=b,i.tightBoundingBox=u,i.boundingSphere=b.getBoundingSphere(new c.Sphere),i.tightBoundingSphere=u.getBoundingSphere(new c.Sphere),i.offset=l,"LAS"===n.pointAttributes||"LAZ"===n.pointAttributes?i.loader=new U(n.version):(i.loader=new P(n.version,b,n.scale),i.pointAttributes=new x(i.pointAttributes));var h={},d=new G(f="r",i,b);if(d.level=0,d.hasChildren=!0,d.spacing=i.spacing,d.numPoints=o.upTo("1.5")?n.hierarchy[0][1]:0,i.root=d,i.root.load(),h[f]=d,o.upTo("1.4"))for(var p=1;p<n.hierarchy.length;p++){var f=n.hierarchy[p][0],m=n.hierarchy[p][1],g=parseInt(f.charAt(f.length-1)),v=h[f.substring(0,f.length-1)],y=f.length-1,b=H.createChildAABB(v.boundingBox,g),w=new G(f,i,b);w.level=y,w.numPoints=m,w.spacing=i.spacing/Math.pow(2,y),v.addChild(w),h[f]=w}i.nodes=h,t(i)},r.onerror=function(i){p.numNodesLoading--,console.log("Potree: loading file failed.",e,i),t()},r.send(null)}static loadPointAttributes(e){for(var t=e.pointAttributes,i=new x,r=0;r<t.length;r++)i.add(y[t[r]]);return i}static createChildAABB(e,t){var i=e.min.clone(),r=e.max.clone(),n=(new c.Vector3).subVectors(r,i);return(1&t)>0?i.z+=n.z/2:r.z-=n.z/2,(2&t)>0?i.y+=n.y/2:r.y-=n.y/2,(4&t)>0?i.x+=n.x/2:r.x-=n.x/2,new c.Box3(i,r)}}class k{load(e){if(!e.loaded){var t=e.url()+".bin",i=B.createXMLHttpRequest();i.open("GET",t,!0),i.responseType="arraybuffer",i.overrideMimeType("text/plain; charset=x-user-defined"),i.onreadystatechange=()=>{if(4===i.readyState)if(200===i.status){var r=i.response;this.parse(e,r)}else console.log("Failed "+t+": "+i.status)};try{i.send(null)}catch(e){console.log("Failed request: "+e)}}}parse(e,t){var i=p.workerPool.getWorker(d.EPT_BINARY_DECODER);i.onmessage=function(t){var r=new c.BufferGeometry,n=t.data.numPoints,o=new Float32Array(t.data.position);r.setAttribute("position",new c.BufferAttribute(o,3));var s=new Uint8Array(t.data.indices);if(r.setAttribute("indices",new c.BufferAttribute(s,4)),t.data.color){var a=new Uint8Array(t.data.color);r.setAttribute("color",new c.BufferAttribute(a,4,!0))}if(t.data.intensity){var u=new Float32Array(t.data.intensity);r.setAttribute("intensity",new c.BufferAttribute(u,1))}if(t.data.classification){var l=new Uint8Array(t.data.classification);r.setAttribute("classification",new c.BufferAttribute(l,1))}if(t.data.returnNumber){var h=new Uint8Array(t.data.returnNumber);r.setAttribute("returnNumber",new c.BufferAttribute(h,1))}if(t.data.numberOfReturns){var f=new Uint8Array(t.data.numberOfReturns);r.setAttribute("numberOfReturns",new c.BufferAttribute(f,1))}if(t.data.pointSourceId){var m=new Uint16Array(t.data.pointSourceId);r.setAttribute("pointSourceID",new c.BufferAttribute(m,1))}r.attributes.indices.normalized=!0;var g=new c.Box3((new c.Vector3).fromArray(t.data.tightBoundingBox.min),(new c.Vector3).fromArray(t.data.tightBoundingBox.max));e.doneLoading(r,g,n,new c.Vector3(...t.data.mean)),p.workerPool.returnWorker(d.EPT_BINARY_DECODER,i)};var r,n={buffer:t,schema:e.ept.schema,scale:e.ept.eptScale,offset:e.ept.eptOffset,mins:(r=e.key.b.min,[r.x,r.y,r.z])};i.postMessage(n,[n.buffer])}}class W{load(e){if(!e.loaded){var t=e.url()+".laz",i=B.createXMLHttpRequest();i.open("GET",t,!0),i.responseType="arraybuffer",i.overrideMimeType("text/plain; charset=x-user-defined"),i.onreadystatechange=()=>{if(4===i.readyState)if(200===i.status){var r=i.response;this.parse(e,r)}else console.log("Failed "+t+": "+i.status)},i.send(null)}}parse(e,t){var i=new O(t),r=new Y(e);i.open().then((()=>(i.isOpen=!0,i.getHeader()))).then((t=>{var n=0,o=(t.pointsCount,e=>[e.x,e.y,e.z]),s=o(e.key.b.min),a=o(e.key.b.max),u=()=>i.readData(1e6,0,1).then((function(e){var o=new z(e.buffer,t.pointsFormatId,t.pointsStructSize,e.count,t.scale,t.offset,s,a);return o.extraBytes=t.extraBytes,o.pointsFormatId=t.pointsFormatId,r.push(o),n+=e.count,e.hasMoreData?u():(t.totalRead=n,t.versionAsString=i.versionAsString,t.isCompressed=i.isCompressed,null)}));return u()})).then((()=>i.close())).then((()=>i.isOpen=!1)).catch((e=>{if(console.log("Error reading LAZ:",e),!i.isOpen)throw e;i.close().then((()=>{throw i.isOpen=!1,e}))}))}}class Y{constructor(e){this.node=e}push(e){var t=p.workerPool.getWorker(d.EPT_LAS_ZIP_DECODER);t.onmessage=i=>{var r=new c.BufferGeometry,n=e.pointsCount,o=new Float32Array(i.data.position),s=new Uint8Array(i.data.color),a=new Float32Array(i.data.intensity),u=new Uint8Array(i.data.classification),l=new Uint8Array(i.data.returnNumber),h=new Uint8Array(i.data.numberOfReturns),f=new Uint16Array(i.data.pointSourceID),m=new Uint8Array(i.data.indices);r.setAttribute("position",new c.BufferAttribute(o,3)),r.setAttribute("color",new c.BufferAttribute(s,4,!0)),r.setAttribute("intensity",new c.BufferAttribute(a,1)),r.setAttribute("classification",new c.BufferAttribute(u,1)),r.setAttribute("returnNumber",new c.BufferAttribute(l,1)),r.setAttribute("numberOfReturns",new c.BufferAttribute(h,1)),r.setAttribute("pointSourceID",new c.BufferAttribute(f,1)),r.setAttribute("indices",new c.BufferAttribute(m,4)),r.attributes.indices.normalized=!0;var g=new c.Box3((new c.Vector3).fromArray(i.data.tightBoundingBox.min),(new c.Vector3).fromArray(i.data.tightBoundingBox.max));this.node.doneLoading(r,g,n,new c.Vector3(...i.data.mean)),p.workerPool.returnWorker(d.EPT_LAS_ZIP_DECODER,t)};var i={buffer:e.arrayb,numPoints:e.pointsCount,pointSize:e.pointSize,pointFormatID:e.pointsFormatId,scale:e.scale,offset:e.offset,mins:e.mins,maxs:e.maxs};t.postMessage(i,[i.buffer])}}class j{static toVector3(e,t){return(new c.Vector3).fromArray(e,t||0)}static toBox3(e){return new c.Box3(j.toVector3(e),j.toVector3(e,3))}static findDim(e,t){var i=e.find((e=>e.name==t));if(!i)throw new Error("Failed to find "+t+" in schema");return i}static sphereFrom(e){return e.getBoundingSphere(new c.Sphere)}}class X{constructor(e,t){t.version;let i=t.schema,r=t.bounds,n=t.boundsConforming,o=[j.findDim(i,"X"),j.findDim(i,"Y"),j.findDim(i,"Z")],s=o.map((e=>e.scale||1)),a=o.map((e=>e.offset||0));this.eptScale=j.toVector3(s),this.eptOffset=j.toVector3(a),this.url=e,this.info=t,this.type="ept",this.schema=i,this.span=t.span||t.ticks,this.boundingBox=j.toBox3(r),this.tightBoundingBox=j.toBox3(n),this.offset=j.toVector3([0,0,0]),this.boundingSphere=j.sphereFrom(this.boundingBox),this.tightBoundingSphere=j.sphereFrom(this.tightBoundingBox),this.version=new E("1.6"),this.projection=null,this.fallbackProjection=null,t.srs&&t.srs.horizontal&&(this.projection=t.srs.authority+":"+t.srs.horizontal),t.srs.wkt&&(this.projection?this.fallbackProjection=t.srs.wkt:this.projection=t.srs.wkt),this.pointAttributes="LAZ",this.spacing=(this.boundingBox.max.x-this.boundingBox.min.x)/this.span,t.hierarchyType;let u=t.dataType||"laszip";this.loader="binary"==u?new k:new W}}class q{constructor(e,t,i,r,n,o){this.ept=e,this.b=t,this.d=i,this.x=r||0,this.y=n||0,this.z=o||0}name(){return this.d+"-"+this.x+"-"+this.y+"-"+this.z}step(e,t,i){let r=this.b.min.clone(),n=this.b.max.clone(),o=(new c.Vector3).subVectors(n,r);return e?r.x+=o.x/2:n.x-=o.x/2,t?r.y+=o.y/2:n.y-=o.y/2,i?r.z+=o.z/2:n.z-=o.z/2,new q(this.ept,new c.Box3(r,n),this.d+1,2*this.x+e,2*this.y+t,2*this.z+i)}children(){for(var e=[],t=0;t<2;++t)for(var i=0;i<2;++i)for(var r=0;r<2;++r){var n=this.step(t,i,r).name();e.includes(n)||(e=e.concat(n))}return e}}class K extends S{constructor(e,t,i,r,n,o){super(),this.ept=e,this.key=new q(this.ept,t||this.ept.boundingBox,i||0,r,n,o),this.id=K.IDCount++,this.geometry=null,this.boundingBox=this.key.b,this.tightBoundingBox=this.boundingBox,this.spacing=this.ept.spacing/Math.pow(2,this.key.d),this.boundingSphere=j.sphereFrom(this.boundingBox),this.hasChildren=!1,this.children={},this.numPoints=-1,this.level=this.key.d,this.loaded=!1,this.loading=!1,this.oneTimeDisposeHandlers=[];let s=this.key;this.name=this.toPotreeName(s.d,s.x,s.y,s.z),this.index=parseInt(this.name.charAt(this.name.length-1))}isGeometryNode(){return!0}getLevel(){return this.level}isTreeNode(){return!1}isLoaded(){return this.loaded}getBoundingSphere(){return this.boundingSphere}getBoundingBox(){return this.boundingBox}url(){return this.ept.url+"ept-data/"+this.filename()}getNumPoints(){return this.numPoints}filename(){return this.key.name()}getChildren(){let e=[];for(let t=0;t<8;t++)this.children[t]&&e.push(this.children[t]);return e}addChild(e){this.children[e.index]=e,e.parent=this}load(){this.loaded||this.loading||p.numNodesLoading>=p.maxNodesLoading||(this.loading=!0,p.numNodesLoading++,-1===this.numPoints&&this.loadHierarchy(),this.loadPoints())}loadPoints(){this.ept.loader.load(this)}async loadHierarchy(){let e={};e[this.filename()]=this,this.hasChildren=!1;let t=`${this.ept.url}ept-hierarchy/${this.filename()}.json`,i=await B.fetch(t),r=await i.json();Object.keys(r).sort(((e,t)=>{let[i,r,n,o]=e.split("-").map((e=>parseInt(e,10))),[s,a,u,l]=t.split("-").map((e=>parseInt(e,10)));return i<s?-1:i>s?1:r<a?-1:r>a?1:n<u?-1:n>u?1:o<l?-1:o>l?1:0})).forEach((t=>{let[i,n,o,s]=t.split("-").map((e=>parseInt(e,10))),a=1&n,u=1&o,l=1&s,h=e[i-1+"-"+(n>>1)+"-"+(o>>1)+"-"+(s>>1)];if(!h)return;h.hasChildren=!0;let d=h.key.step(a,u,l),p=new K(this.ept,d.b,d.d,d.x,d.y,d.z);p.level=i,p.numPoints=r[t],h.addChild(p),e[d.name()]=p}))}doneLoading(e,t,i,r){e.boundingBox=this.boundingBox,this.geometry=e,this.tightBoundingBox=t,this.numPoints=i,this.mean=r,this.loaded=!0,this.loading=!1,p.numNodesLoading--}toPotreeName(e,t,i,r){for(var n="r",o=0;o<e;++o){var s=1<<e-o-1,a=0;t&s&&(a+=4),i&s&&(a+=2),r&s&&(a+=1),n+=a}return n}dispose(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(let e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}}}K.IDCount=0;class Z{static async load(e,t){var i=await B.fetch(e),r=await i.json(),n=e.substr(0,e.lastIndexOf("ept.json")),o=new X(n,r),s=new K(o);o.root=s,o.root.load(),t(o)}}class ${static generateDataTexture(e,t,i){for(var r=e*t,n=new Uint8Array(4*e*t),o=Math.floor(255*i.r),s=Math.floor(255*i.g),a=Math.floor(255*i.b),u=0;u<r;u++)n[3*u]=o,n[3*u+1]=s,n[3*u+2]=a;var l=new c.DataTexture(n,e,t,c.RGBAFormat);return l.needsUpdate=!0,l.magFilter=c.NearestFilter,l}static computeTransformedBoundingBox(e,t){var i=[new c.Vector3(e.min.x,e.min.y,e.min.z).applyMatrix4(t),new c.Vector3(e.min.x,e.min.y,e.min.z).applyMatrix4(t),new c.Vector3(e.max.x,e.min.y,e.min.z).applyMatrix4(t),new c.Vector3(e.min.x,e.max.y,e.min.z).applyMatrix4(t),new c.Vector3(e.min.x,e.min.y,e.max.z).applyMatrix4(t),new c.Vector3(e.min.x,e.max.y,e.max.z).applyMatrix4(t),new c.Vector3(e.max.x,e.max.y,e.min.z).applyMatrix4(t),new c.Vector3(e.max.x,e.min.y,e.max.z).applyMatrix4(t),new c.Vector3(e.max.x,e.max.y,e.max.z).applyMatrix4(t)],r=new c.Box3;return r.setFromPoints(i),r}}var J={RAINBOW:[[0,new c.Color(.278,0,.714)],[1/6,new c.Color(0,0,1)],[2/6,new c.Color(0,1,1)],[.5,new c.Color(0,1,0)],[4/6,new c.Color(1,1,0)],[5/6,new c.Color(1,.64,0)],[1,new c.Color(1,0,0)]],SPECTRAL:[[0,new c.Color(.3686,.3098,.6353)],[.1,new c.Color(.1961,.5333,.7412)],[.2,new c.Color(.4,.7608,.6471)],[.3,new c.Color(.6706,.8667,.6431)],[.4,new c.Color(.902,.9608,.5961)],[.5,new c.Color(1,1,.749)],[.6,new c.Color(.9961,.8784,.5451)],[.7,new c.Color(.9922,.6824,.3804)],[.8,new c.Color(.9569,.4275,.2627)],[.9,new c.Color(.8353,.2431,.3098)],[1,new c.Color(.6196,.0039,.2588)]],PLASMA:[[0,new c.Color(.241,.015,.61)],[.1,new c.Color(.387,.001,.654)],[.2,new c.Color(.524,.025,.653)],[.3,new c.Color(.651,.125,.596)],[.4,new c.Color(.752,.227,.513)],[.5,new c.Color(.837,.329,.431)],[.6,new c.Color(.907,.435,.353)],[.7,new c.Color(.963,.554,.272)],[.8,new c.Color(.992,.681,.195)],[.9,new c.Color(.987,.822,.144)],[1,new c.Color(.94,.975,.131)]],YELLOW_GREEN:[[0,new c.Color(.1647,.2824,.3451)],[.1,new c.Color(.1338,.3555,.4227)],[.2,new c.Color(.061,.4319,.4864)],[.3,new c.Color(0,.5099,.5319)],[.4,new c.Color(0,.5881,.5569)],[.5,new c.Color(.137,.665,.5614)],[.6,new c.Color(.2906,.7395,.5477)],[.7,new c.Color(.4453,.8099,.5201)],[.8,new c.Color(.6102,.8748,.485)],[.9,new c.Color(.7883,.9323,.4514)],[1,new c.Color(.9804,.9804,.4314)]],VIRIDIS:[[0,new c.Color(.267,.005,.329)],[.1,new c.Color(.283,.141,.458)],[.2,new c.Color(.254,.265,.53)],[.3,new c.Color(.207,.372,.553)],[.4,new c.Color(.164,.471,.558)],[.5,new c.Color(.128,.567,.551)],[.6,new c.Color(.135,.659,.518)],[.7,new c.Color(.267,.749,.441)],[.8,new c.Color(.478,.821,.318)],[.9,new c.Color(.741,.873,.15)],[1,new c.Color(.993,.906,.144)]],INFERNO:[[0,new c.Color(.077,.042,.206)],[.1,new c.Color(.225,.036,.388)],[.2,new c.Color(.373,.074,.432)],[.3,new c.Color(.522,.128,.42)],[.4,new c.Color(.665,.182,.37)],[.5,new c.Color(.797,.255,.287)],[.6,new c.Color(.902,.364,.184)],[.7,new c.Color(.969,.516,.063)],[.8,new c.Color(.988,.683,.072)],[.9,new c.Color(.961,.859,.298)],[1,new c.Color(.988,.998,.645)]],GRAYSCALE:[[0,new c.Color(0,0,0)],[1,new c.Color(1,1,1)]]};const Q=e=>e.raw[0];var ee={};ee.vertex=Q`
precision highp float;
precision highp int;

#define MAX_CLIP_POLYGONS 8

`+c.ShaderChunk.common+"\n"+c.ShaderChunk.logdepthbuf_pars_vertex+Q`

attribute vec3 position;
attribute vec3 color;
attribute float intensity;
attribute float classification;
attribute float returnNumber;
attribute float numberOfReturns;
attribute float pointSourceID;
attribute vec4 indices;
attribute float spacing;

uniform mat4 modelMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 uViewInv;

uniform float uScreenWidth;
uniform float uScreenHeight;
uniform float fov;
uniform float near;
uniform float far;

uniform bool uDebug;

uniform bool uUseOrthographicCamera;
uniform float uOrthoWidth;
uniform float uOrthoHeight;

#define CLIPTASK_NONE 0
#define CLIPTASK_HIGHLIGHT 1
#define CLIPTASK_SHOW_INSIDE 2
#define CLIPTASK_SHOW_OUTSIDE 3

#define CLIPMETHOD_INSIDE_ANY 0
#define CLIPMETHOD_INSIDE_ALL 1

uniform int clipTask;
uniform int clipMethod;

#if defined(num_clipboxes) && num_clipboxes > 0
	uniform mat4 clipBoxes[num_clipboxes];
#endif

#if defined(num_clipspheres) && num_clipspheres > 0
	uniform mat4 uClipSpheres[num_clipspheres];
#endif

#if defined(num_clippolygons) && num_clippolygons > 0
	uniform int uClipPolygonVCount[num_clippolygons];
	uniform vec3 uClipPolygonVertices[num_clippolygons * 8];
	uniform mat4 uClipPolygonWVP[num_clippolygons];
#endif

uniform float size;
uniform float minSize;
uniform float maxSize;

uniform float uPCIndex;
uniform float uOctreeSpacing;
uniform float uNodeSpacing;
uniform float uOctreeSize;
uniform vec3 uBBSize;
uniform float uLevel;
uniform float uVNStart;
uniform bool uIsLeafNode;

uniform vec3 uColor;
uniform float uOpacity;

uniform vec2 elevationRange;
uniform vec2 intensityRange;
uniform float intensityGamma;
uniform float intensityContrast;
uniform float intensityBrightness;
uniform float rgbGamma;
uniform float rgbContrast;
uniform float rgbBrightness;
uniform float uTransition;
uniform float wRGB;
uniform float wIntensity;
uniform float wElevation;
uniform float wClassification;
uniform float wReturnNumber;
uniform float wSourceID;

uniform vec3 uShadowColor;

uniform sampler2D visibleNodes;
uniform sampler2D gradient;
uniform sampler2D classificationLUT;

#if defined(num_shadowmaps) && num_shadowmaps > 0
	uniform sampler2D uShadowMap[num_shadowmaps];
	uniform mat4 uShadowWorldView[num_shadowmaps];
	uniform mat4 uShadowProj[num_shadowmaps];
#endif

#if defined num_hiddenclassifications && num_hiddenclassifications > 0
	uniform float hiddenClassifications[num_hiddenclassifications];
#endif

#if defined num_hiddenpointsourceids && num_hiddenpointsourceids > 0
  uniform sampler2D hiddenPointSourceIDs;
#endif

uniform float selectedPointSourceID;
uniform vec3 selectedPointSourceIDColor;

varying vec3 vColor;
varying float vLogDepth;
varying vec3 vViewPosition;
varying float vRadius;
varying float vPointSize;

float round(float number)
{
	return floor(number + 0.5);
}

//---------------------
//OCTREE
//---------------------

#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_octree)

	/**
	 * number of 1-bits up to inclusive index position
	 * number is treated as if it were an integer in the range 0-255
	 */
	int numberOfOnes(int number, int index)
	{
		int numOnes = 0;
		int tmp = 128;

		for(int i = 7; i >= 0; i--)
		{
			if(number >= tmp)
			{
				number = number - tmp;

				if(i <= index)
				{
					numOnes++;
				}
			}

			tmp = tmp / 2;
		}

		return numOnes;
	}

	/**
	 * checks whether the bit at index is 1
	 * number is treated as if it were an integer in the range 0-255
	 */
	bool isBitSet(int number, int index)
	{
		//weird multi else if due to lack of proper array, int and bitwise support in WebGL 1.0
		int powi = 1;

		if(index == 0)
		{
			powi = 1;
		}
		else if(index == 1)
		{
			powi = 2;
		}
		else if(index == 2)
		{
			powi = 4;
		}
		else if(index == 3)
		{
			powi = 8;
		}
		else if(index == 4)
		{
			powi = 16;
		}
		else if(index == 5)
		{
			powi = 32;
		}
		else if(index == 6)
		{
			powi = 64;
		}
		else if(index == 7)
		{
			powi = 128;
		}
		else
		{
			return false;
		}

		int ndp = number / powi;

		return mod(float(ndp), 2.0) != 0.0;
	}

	/**
	 * find the LOD at the point position
	 */
	float getLOD()
	{
		vec3 offset = vec3(0.0, 0.0, 0.0);
		int iOffset = int(uVNStart);
		float depth = uLevel;

		for(float i = 0.0; i <= 30.0; i++)
		{
			float nodeSizeAtLevel = uOctreeSize / pow(2.0, i + uLevel + 0.0);

			vec3 index3d = (position-offset) / nodeSizeAtLevel;
			index3d = floor(index3d + 0.5);
			int index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));

			vec4 value = texture2D(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));
			int mask = int(round(value.r * 255.0));

			if(isBitSet(mask, index))
			{
				//there are more visible child nodes at this position
				int advanceG = int(round(value.g * 255.0)) * 256;
				int advanceB = int(round(value.b * 255.0));
				int advanceChild = numberOfOnes(mask, index - 1);
				int advance = advanceG + advanceB + advanceChild;

				iOffset = iOffset + advance;

				depth++;
			}
			else
			{
				//no more visible child nodes at this position
				return value.a * 255.0;
				//return depth;
			}

			offset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;
		}

		return depth;
	}

	float getSpacing()
	{
		vec3 offset = vec3(0.0, 0.0, 0.0);
		int iOffset = int(uVNStart);
		float depth = uLevel;
		float spacing = uNodeSpacing;

		for(float i = 0.0; i <= 30.0; i++)
		{
			float nodeSizeAtLevel = uOctreeSize / pow(2.0, i + uLevel + 0.0);

			vec3 index3d = (position-offset) / nodeSizeAtLevel;
			index3d = floor(index3d + 0.5);
			int index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));

			vec4 value = texture2D(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));
			int mask = int(round(value.r * 255.0));
			float spacingFactor = value.a;

			if(i > 0.0)
			{
				spacing = spacing / (255.0 * spacingFactor);
			}

			if(isBitSet(mask, index))
			{
				//there are more visible child nodes at this position
				int advanceG = int(round(value.g * 255.0)) * 256;
				int advanceB = int(round(value.b * 255.0));
				int advanceChild = numberOfOnes(mask, index - 1);
				int advance = advanceG + advanceB + advanceChild;

				iOffset = iOffset + advance;

				depth++;
			}
			else
			{
				//no more visible child nodes at this position
				return spacing;
			}

			offset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;
		}

		return spacing;
	}

	float getPointSizeAttenuation()
	{
		return pow(2.0, getLOD());
	}
#endif

//---------------------
//KD-TREE
//---------------------
#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_kdtree)
	float getLOD()
	{
		vec3 offset = vec3(0.0, 0.0, 0.0);
		float iOffset = 0.0;
		float depth = 0.0;

		vec3 size = uBBSize;
		vec3 pos = position;

		for(float i = 0.0; i <= 1000.0; i++)
		{
			vec4 value = texture2D(visibleNodes, vec2(iOffset / 2048.0, 0.0));

			int children = int(value.r * 255.0);
			float next = value.g * 255.0;
			int split = int(value.b * 255.0);

			if(next == 0.0)
			{
			 	return depth;
			}

			vec3 splitv = vec3(0.0, 0.0, 0.0);
			if(split == 1)
			{
				splitv.x = 1.0;
			}
			else if(split == 2)
			{
			 	splitv.y = 1.0;
			}
			else if(split == 4)
			{
			 	splitv.z = 1.0;
			}

			iOffset = iOffset + next;

			float factor = length(pos * splitv / size);

			//Left
			if(factor < 0.5)
			{
				if(children == 0 || children == 2)
				{
					return depth;
				}
			}
			//Right
			else
			{
				pos = pos - size * splitv * 0.5;
				if(children == 0 || children == 1)
				{
					return depth;
				}
				if(children == 3)
				{
					iOffset = iOffset + 1.0;
				}
			}

			size = size * ((1.0 - (splitv + 1.0) / 2.0) + 0.5);
			depth++;
		}

		return depth;
	}

	float getPointSizeAttenuation()
	{
		return 0.5 * pow(1.3, getLOD());
	}
#endif

//formula adapted from: http://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-5-contrast-adjustment/
float getContrastFactor(float contrast)
{
	return (1.0158730158730156 * (contrast + 1.0)) / (1.0158730158730156 - contrast);
}

vec3 getRGB()
{
	vec3 rgb = color;

	rgb = pow(rgb, vec3(rgbGamma));
	rgb = rgb + rgbBrightness;
	rgb = clamp(rgb, 0.0, 1.0);

	return rgb;
}

float getIntensity()
{
	float w = (intensity - intensityRange.x) / (intensityRange.y - intensityRange.x);
	w = pow(w, intensityGamma);
	w = w + intensityBrightness;
	w = (w - 0.5) * getContrastFactor(intensityContrast) + 0.5;
	w = clamp(w, 0.0, 1.0);

	return w;
}

vec3 getElevation()
{
	vec4 world = modelMatrix * vec4( position, 1.0 );
	float w = (world.z - elevationRange.x) / (elevationRange.y - elevationRange.x);
	return texture2D(gradient, vec2(w,1.0-w)).rgb;
}

vec4 getClassification()
{
	vec2 uv = vec2(classification / 255.0, 0.5);
	return texture2D(classificationLUT, uv);
}

vec3 getReturnNumber()
{
	if(numberOfReturns == 1.0)
	{
		return vec3(1.0, 1.0, 0.0);
	}
	else
	{
		if(returnNumber == 1.0)
		{
			return vec3(1.0, 0.0, 0.0);
		}
		else if(returnNumber == numberOfReturns)
		{
			return vec3(0.0, 0.0, 1.0);
		}
		else
		{
			return vec3(0.0, 1.0, 0.0);
		}
	}
}

vec3 getSourceID()
{
	float w = mod(pointSourceID, 10.0) / 10.0;
	return texture2D(gradient, vec2(w,1.0 - w)).rgb;
}

vec3 getCompositeColor()
{
	vec3 c;
	float w;

	c += wRGB * getRGB();
	w += wRGB;

	c += wIntensity * getIntensity() * vec3(1.0, 1.0, 1.0);
	w += wIntensity;

	c += wElevation * getElevation();
	w += wElevation;

	c += wReturnNumber * getReturnNumber();
	w += wReturnNumber;

	c += wSourceID * getSourceID();
	w += wSourceID;

	vec4 cl = wClassification * getClassification();
  c += cl.a * cl.rgb;
	w += wClassification * cl.a;

	c = c / w;

	if(w == 0.0)
	{
		gl_Position = vec4(100.0, 100.0, 100.0, 0.0);
	}

	return c;
}

vec3 getColor()
{
	vec3 color;

	#ifdef selection_type_color
	if (pointSourceID == selectedPointSourceID)
	{
		return selectedPointSourceIDColor;
	}
	#endif

	#ifdef color_type_rgb
		color = getRGB();
	#elif defined color_type_height
		color = getElevation();
	#elif defined color_type_rgb_height
		vec3 cHeight = getElevation();
		color = (1.0 - uTransition) * getRGB() + uTransition * cHeight;
	#elif defined color_type_depth
		float linearDepth = gl_Position.w;
		float expDepth = (gl_Position.z / gl_Position.w) * 0.5 + 0.5;
		color = vec3(linearDepth, expDepth, 0.0);
	#elif defined color_type_intensity
		float w = getIntensity();
		color = vec3(w, w, w);
	#elif defined color_type_intensity_gradient
		float w = getIntensity();
		color = texture2D(gradient, vec2(w,1.0-w)).rgb;
	#elif defined color_type_color
		color = uColor;
	#elif defined color_type_lod
		float depth = getLOD();
		float w = depth / 10.0;
		color = texture2D(gradient, vec2(w,1.0-w)).rgb;
	#elif defined color_type_point_index
		color = indices.rgb;
	#elif defined color_type_classification
		vec4 cl = getClassification();
		color = cl.rgb;
	#elif defined color_type_return_number
		color = getReturnNumber();
	#elif defined color_type_source
		color = getSourceID();
	#elif defined color_type_normal
		color = (modelMatrix * vec4(normal, 0.0)).xyz;
	#elif defined color_type_phong
		color = color;
	#elif defined color_type_composite
		color = getCompositeColor();
	#endif

	if (pointSourceID == selectedPointSourceID)
	{
		color[0] = min(color[0] + 0.2, 1.0);
		color[1] = min(color[1] + 0.2, 1.0);
		color[2] = min(color[2] + 0.2, 1.0);
	}

	return color;
}

float getPointSize()
{
	float pointSize = 1.0;

	float slope = tan(fov / 2.0);
	float projFactor = -0.5 * uScreenHeight / (slope * vViewPosition.z);

	float r = uOctreeSpacing * 1.7;
	vRadius = r;

	#if defined fixed_point_size
		pointSize = size;
	#elif defined attenuated_point_size
		if(uUseOrthographicCamera)
		{
			pointSize = size;
		}
		else
		{
			pointSize = size * spacing * projFactor;
		}
	#elif defined adaptive_point_size
		if(uUseOrthographicCamera)
		{
			float worldSpaceSize = 1.0 * size * r / getPointSizeAttenuation();
			pointSize = (worldSpaceSize / uOrthoWidth) * uScreenWidth;
		}
		else
		{
			if(uIsLeafNode && false)
			{
				pointSize = size * spacing * projFactor;
			}
			else
			{
				float worldSpaceSize = 1.0 * size * r / getPointSizeAttenuation();
				pointSize = worldSpaceSize * projFactor;
			}
		}
	#endif

	pointSize = max(minSize, pointSize);
	pointSize = min(maxSize, pointSize);

	vRadius = pointSize / projFactor;

	return pointSize;
}

#if defined num_clippolygons && num_clippolygons > 0
	bool pointInClipPolygon(vec3 point, int polyIdx)
	{
		mat4 wvp = uClipPolygonWVP[polyIdx];

		vec4 pointNDC = wvp * vec4(point, 1.0);
		pointNDC.xy = pointNDC.xy / pointNDC.w;

		int j = uClipPolygonVCount[polyIdx] - 1;
		bool c = false;
		for(int i = 0; i < 8; i++)
		{
			if(i == uClipPolygonVCount[polyIdx])
			{
				break;
			}

			vec3 verti = uClipPolygonVertices[polyIdx * 8 + i];
			vec3 vertj = uClipPolygonVertices[polyIdx * 8 + j];

			if(((verti.y > pointNDC.y) != (vertj.y > pointNDC.y)) && (pointNDC.x < (vertj.x-verti.x) * (pointNDC.y-verti.y) / (vertj.y-verti.y) + verti.x))
			{
				c = !c;
			}

			j = i;
		}

		return c;
	}
#endif

void doClipping()
{
	#if !defined color_type_composite
		vec4 cl = getClassification();
		if(cl.a == 0.0)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 0.0);

			return;
		}
	#endif

	int clipVolumesCount = 0;
	int insideCount = 0;

	#if defined(num_clipboxes) && num_clipboxes > 0
		for(int i = 0; i < num_clipboxes; i++)
		{
			vec4 clipPosition = clipBoxes[i] * modelMatrix * vec4( position, 1.0 );
			bool inside = -0.5 <= clipPosition.x && clipPosition.x <= 0.5;
			inside = inside && -0.5 <= clipPosition.y && clipPosition.y <= 0.5;
			inside = inside && -0.5 <= clipPosition.z && clipPosition.z <= 0.5;

			insideCount = insideCount + (inside ? 1 : 0);
			clipVolumesCount++;
		}
	#endif

	#if defined(num_clippolygons) && num_clippolygons > 0
		for(int i = 0; i < num_clippolygons; i++)
		{
			bool inside = pointInClipPolygon(position, i);

			insideCount = insideCount + (inside ? 1 : 0);
			clipVolumesCount++;
		}
	#endif

	bool insideAny = insideCount > 0;
	bool insideAll = (clipVolumesCount > 0) && (clipVolumesCount == insideCount);

	if(clipMethod == CLIPMETHOD_INSIDE_ANY)
	{
		if(insideAny && clipTask == CLIPTASK_HIGHLIGHT)
		{
			vColor.r += 0.5;
		}
		else if(!insideAny && clipTask == CLIPTASK_SHOW_INSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
		else if(insideAny && clipTask == CLIPTASK_SHOW_OUTSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
	}
	else if(clipMethod == CLIPMETHOD_INSIDE_ALL)
	{
		if(insideAll && clipTask == CLIPTASK_HIGHLIGHT)
		{
			vColor.r += 0.5;
		}
		else if(!insideAll && clipTask == CLIPTASK_SHOW_INSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
		else if(insideAll && clipTask == CLIPTASK_SHOW_OUTSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
	}
}

bool isHiddenClassification()
{
	#if defined num_hiddenclassifications && num_hiddenclassifications > 0
	for (int i = 0; i < num_hiddenclassifications; i++)
	{
		if (classification == hiddenClassifications[i])
		{
			return true;
		}
	}
	#endif

	return false;
}

bool isHiddenPointSourceID()
{
	#if defined num_hiddenpointsourceids && num_hiddenpointsourceids > 0
	float x = mod(pointSourceID, 256.0);
	float y = floor(pointSourceID / 256.0);
	vec2 xy = vec2(x / 255.0, y / 255.0);
	float r = texture2D(hiddenPointSourceIDs, xy).r;

	return r == 1.0;
	#endif

	return false;
}

void main()
{
	if (isHiddenClassification() || isHiddenPointSourceID())
	{
		return; // Note: 'discard' only supported in fragment shaders
	}

	vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
	vViewPosition = mvPosition.xyz;
	gl_Position = projectionMatrix * mvPosition;

	vLogDepth = log2(-mvPosition.z);

	//POINT SIZE
	float pointSize = getPointSize();
	gl_PointSize = pointSize;
	vPointSize = pointSize;

	`+c.ShaderChunk.logdepthbuf_vertex+Q`

	//COLOR
	vColor = getColor();

	#if defined hq_depth_pass
		float originalDepth = gl_Position.w;
		float adjustedDepth = originalDepth + 2.0 * vRadius;
		float adjust = adjustedDepth / originalDepth;

		mvPosition.xyz = mvPosition.xyz * adjust;
		gl_Position = projectionMatrix * mvPosition;
	#endif

	//CLIPPING
	doClipping();

	#if defined num_clipspheres && num_clipspheres > 0
		for(int i = 0; i < num_clipspheres; i++)
		{
			vec4 sphereLocal = uClipSpheres[i] * mvPosition;

			float distance = length(sphereLocal.xyz);

			if(distance < 1.0)
			{
				float w = distance;
				vec3 cGradient = texture2D(gradient, vec2(w, 1.0 - w)).rgb;

				vColor = cGradient;
			}
		}
	#endif

	#if defined num_shadowmaps && num_shadowmaps > 0

		const float sm_near = 0.1;
		const float sm_far = 10000.0;

		for(int i = 0; i < num_shadowmaps; i++)
		{
			vec3 viewPos = (uShadowWorldView[i] * vec4(position, 1.0)).xyz;
			float distanceToLight = abs(viewPos.z);

			vec4 projPos = uShadowProj[i] * uShadowWorldView[i] * vec4(position, 1);
			vec3 nc = projPos.xyz / projPos.w;

			float u = nc.x * 0.5 + 0.5;
			float v = nc.y * 0.5 + 0.5;

			vec2 sampleStep = vec2(1.0 / (2.0*1024.0), 1.0 / (2.0*1024.0)) * 1.5;
			vec2 sampleLocations[9];

			sampleLocations[0] = vec2(0.0, 0.0);
			sampleLocations[1] = sampleStep;
			sampleLocations[2] = -sampleStep;
			sampleLocations[3] = vec2(sampleStep.x, -sampleStep.y);
			sampleLocations[4] = vec2(-sampleStep.x, sampleStep.y);
			sampleLocations[5] = vec2(0.0, sampleStep.y);
			sampleLocations[6] = vec2(0.0, -sampleStep.y);
			sampleLocations[7] = vec2(sampleStep.x, 0.0);
			sampleLocations[8] = vec2(-sampleStep.x, 0.0);

			float visibleSamples = 0.0;
			float numSamples = 0.0;

			float bias = vRadius * 2.0;

			for(int j = 0; j < 9; j++)
			{
				vec4 depthMapValue = texture2D(uShadowMap[i], vec2(u, v) + sampleLocations[j]);

				float linearDepthFromSM = depthMapValue.x + bias;
				float linearDepthFromViewer = distanceToLight;

				if(linearDepthFromSM > linearDepthFromViewer)
				{
					visibleSamples += 1.0;
				}

				numSamples += 1.0;
			}

			float visibility = visibleSamples / numSamples;

			if(u < 0.0 || u > 1.0 || v < 0.0 || v > 1.0 || nc.x < -1.0 || nc.x > 1.0 || nc.y < -1.0 || nc.y > 1.0 || nc.z < -1.0 || nc.z > 1.0)
			{
				//vColor = vec3(0.0, 0.0, 0.2);
			}
			else
			{
				vColor = vColor * visibility + vColor * uShadowColor * (1.0 - visibility);
			}
		}

	#endif
}`,ee.fragment=Q`

#if defined USE_LOGDEPTHBUF_EXT || defined paraboloid_point_shape
	#extension GL_EXT_frag_depth : enable
#endif

precision highp float;
precision highp int;

`+c.ShaderChunk.common+"\n"+c.ShaderChunk.logdepthbuf_pars_fragment+Q`

uniform mat4 viewMatrix;
uniform mat4 uViewInv;
uniform mat4 uProjInv;
uniform vec3 cameraPosition;

uniform mat4 projectionMatrix;
uniform float uOpacity;

uniform float blendHardness;
uniform float blendDepthSupplement;
uniform float fov;
uniform float uSpacing;
uniform float near;
uniform float far;
uniform float uPCIndex;
uniform float uScreenWidth;
uniform float uScreenHeight;

varying vec3 vColor;
varying float vLogDepth;
varying vec3 vViewPosition;
varying float vRadius;
varying float vPointSize;
varying vec3 vPosition;

void main()
{
	vec3 color = vColor;
	float depth = gl_FragCoord.z;

	#if defined circle_point_shape || defined paraboloid_point_shape
		float u = (2.0 * gl_PointCoord.x) - 1.0;
		float v = (2.0 * gl_PointCoord.y) - 1.0;
	#endif

	#if defined circle_point_shape
		float cc = (u*u) + (v*v);
		if(cc > 1.0)
		{
			discard;
		}
	#endif

	#if defined color_type_point_index
		gl_FragColor = vec4(color, uPCIndex / 255.0);
	#else
		gl_FragColor = vec4(color, uOpacity);
	#endif

	#if defined paraboloid_point_shape
		float wi = -( u*u + v*v);
		vec4 pos = vec4(vViewPosition, 1.0);
		pos.z += wi * vRadius;
		float linearDepth = -pos.z;
		pos = projectionMatrix * pos;
		pos = pos / pos.w;
		float expDepth = pos.z;
		depth = (pos.z + 1.0) / 2.0;

		gl_FragDepthEXT = depth;

		#if defined color_type_depth
			color.r = linearDepth;
			color.g = expDepth;
		#endif
	#endif

	`+c.ShaderChunk.logdepthbuf_fragment+Q`

	#if defined weighted_splats
		float distance = 2.0 * length(gl_PointCoord.xy - 0.5);
		float weight = max(0.0, 1.0 - distance);
		weight = pow(weight, 1.5);

		gl_FragColor.a = weight;
		gl_FragColor.xyz = gl_FragColor.xyz * weight;
	#endif
}`;class te extends c.RawShaderMaterial{constructor(e={}){super(),this.visibleNodesTexture=$.generateDataTexture(2048,1,new c.Color(16777215)),this.visibleNodesTexture.minFilter=c.NearestFilter,this.visibleNodesTexture.magFilter=c.NearestFilter;var t=function(e,t){return void 0!==e?e:t},i=t(e.size,1),r=t(e.minSize,2),n=t(e.maxSize,50),o=t(e.treeType,ge.OCTREE);this._pointSizeType=ce.FIXED,this._shape=fe.SQUARE,this._pointColorType=me.RGB,this._useClipBox=!1,this._weighted=!1,this._gradient=J.SPECTRAL,this._treeType=o,this._useEDL=!1,this._snapEnabled=!1,this._numSnapshots=0,this._defaultIntensityRangeChanged=!1,this._defaultElevationRangeChanged=!1,this._pointSelectionType=ve.BRIGHTNESS,this.clipBoxes=[],this.clipPolygons=[],this.gradientTexture=te.generateGradientTexture(this._gradient),this.lights=!1,this.fog=!1,this.defines=new Map,this.attributes={position:{type:"fv",value:[]},color:{type:"fv",value:[]},normal:{type:"fv",value:[]},intensity:{type:"f",value:[]},classification:{type:"f",value:[]},returnNumber:{type:"f",value:[]},numberOfReturns:{type:"f",value:[]},pointSourceID:{type:"f",value:[]},indices:{type:"fv",value:[]}},this.uniforms={level:{type:"f",value:0},vnStart:{type:"f",value:0},spacing:{type:"f",value:1},blendHardness:{type:"f",value:2},blendDepthSupplement:{type:"f",value:0},fov:{type:"f",value:1},screenWidth:{type:"f",value:1},screenHeight:{type:"f",value:1},near:{type:"f",value:.1},far:{type:"f",value:1},uColor:{type:"c",value:new c.Color(16777215)},uOpacity:{type:"f",value:1},size:{type:"f",value:i},minSize:{type:"f",value:r},maxSize:{type:"f",value:n},octreeSize:{type:"f",value:0},bbSize:{type:"fv",value:[0,0,0]},elevationRange:{type:"2fv",value:[0,0]},clipBoxCount:{type:"f",value:0},clipPolygonCount:{type:"i",value:0},clipBoxes:{type:"Matrix4fv",value:[]},clipPolygons:{type:"3fv",value:[]},clipPolygonVCount:{type:"iv",value:[]},clipPolygonVP:{type:"Matrix4fv",value:[]},visibleNodes:{type:"t",value:this.visibleNodesTexture},pcIndex:{type:"f",value:0},gradient:{type:"t",value:this.gradientTexture},classificationLUT:{type:"t",value:this.classificationTexture},uHQDepthMap:{type:"t",value:null},toModel:{type:"Matrix4f",value:[]},diffuse:{type:"fv",value:[1,1,1]},transition:{type:"f",value:.5},intensityRange:{type:"fv",value:[0,65e3]},intensityGamma:{type:"f",value:1},intensityContrast:{type:"f",value:0},intensityBrightness:{type:"f",value:0},rgbGamma:{type:"f",value:1},rgbContrast:{type:"f",value:0},rgbBrightness:{type:"f",value:0},wRGB:{type:"f",value:.5},wIntensity:{type:"f",value:0},wElevation:{type:"f",value:0},wClassification:{type:"f",value:0},wReturnNumber:{type:"f",value:0},wSourceID:{type:"f",value:0},useOrthographicCamera:{type:"b",value:!1},clipTask:{type:"i",value:1},clipMethod:{type:"i",value:1},uSnapshot:{type:"tv",value:[]},uSnapshotDepth:{type:"tv",value:[]},uSnapView:{type:"Matrix4fv",value:[]},uSnapProj:{type:"Matrix4fv",value:[]},uSnapProjInv:{type:"Matrix4fv",value:[]},uSnapViewInv:{type:"Matrix4fv",value:[]},uShadowColor:{type:"3fv",value:[0,0,0]},uFilterReturnNumberRange:{type:"fv",value:[0,7]},uFilterNumberOfReturnsRange:{type:"fv",value:[0,7]},uFilterGPSTimeClipRange:{type:"fv",value:[0,7]},hiddenClassifications:{type:"fv",value:[]},hiddenPointSourceIDs:{type:"t",value:null},selectedPointSourceID:{type:"f",value:-1},selectedPointSourceIDColor:{type:"3fv",value:new c.Color(.1,.61,.78)}},this.hiddenPointSourceIDs=[],this.classification=he.DEFAULT,this.defaultAttributeValues.normal=[0,0,0],this.defaultAttributeValues.classification=[0,0,0],this.defaultAttributeValues.indices=[0,0,0,0];var s=this.getDefines();this.vertexShader=s+ee.vertex,this.fragmentShader=s+ee.fragment,this.vertexColors=c.VertexColors}setDefine(e,t){null!=t?this.defines.get(e)!==t&&(this.defines.set(e,t),this.updateShaderSource()):this.removeDefine(e)}removeDefine(e){this.defines.delete(e)}updateShaderSource(){var e=this.getDefines();this.vertexShader=e+ee.vertex,this.fragmentShader=e+ee.fragment,1===this.opacity?(this.blending=c.NoBlending,this.transparent=!1,this.depthTest=!0,this.depthWrite=!0,this.depthFunc=c.LessEqualDepth):this.opacity<1&&!this.useEDL&&(this.blending=c.AdditiveBlending,this.transparent=!0,this.depthTest=!1,this.depthWrite=!0,this.depthFunc=c.AlwaysDepth),this.weighted&&(this.blending=c.AdditiveBlending,this.transparent=!0,this.depthTest=!0,this.depthWrite=!1),this.needsUpdate=!0}onBeforeCompile(e,t){if(t.capabilities.logarithmicDepthBuffer){var i="#define USE_LOGDEPTHBUF\n#define USE_LOGDEPTHBUF_EXT\n#define EPSILON 1e-6\n";e.fragmentShader=i+e.fragmentShader,e.vertexShader=i+e.vertexShader}}getDefines(){var e=[];for(var[t,i]of(this.pointSizeType===ce.FIXED?e.push("#define fixed_point_size"):this.pointSizeType===ce.ATTENUATED?e.push("#define attenuated_point_size"):this.pointSizeType===ce.ADAPTIVE&&e.push("#define adaptive_point_size"),this.shape===fe.SQUARE?e.push("#define square_point_shape"):this.shape===fe.CIRCLE?e.push("#define circle_point_shape"):this.shape===fe.PARABOLOID&&e.push("#define paraboloid_point_shape"),this._useEDL&&e.push("#define use_edl"),this._snapEnabled&&e.push("#define snap_enabled"),this._pointColorType===me.RGB?e.push("#define color_type_rgb"):this._pointColorType===me.COLOR?e.push("#define color_type_color"):this._pointColorType===me.DEPTH?e.push("#define color_type_depth"):this._pointColorType===me.HEIGHT?e.push("#define color_type_height"):this._pointColorType===me.INTENSITY?e.push("#define color_type_intensity"):this._pointColorType===me.INTENSITY_GRADIENT?e.push("#define color_type_intensity_gradient"):this._pointColorType===me.LOD?e.push("#define color_type_lod"):this._pointColorType===me.POINT_INDEX?e.push("#define color_type_point_index"):this._pointColorType===me.CLASSIFICATION?e.push("#define color_type_classification"):this._pointColorType===me.RETURN_NUMBER?e.push("#define color_type_return_number"):this._pointColorType===me.SOURCE?e.push("#define color_type_source"):this._pointColorType===me.NORMAL?e.push("#define color_type_normal"):this._pointColorType===me.PHONG?e.push("#define color_type_phong"):this._pointColorType===me.RGB_HEIGHT?e.push("#define color_type_rgb_height"):this._pointColorType===me.COMPOSITE&&e.push("#define color_type_composite"),this._treeType===ge.OCTREE?e.push("#define tree_type_octree"):this._treeType===ge.KDTREE&&e.push("#define tree_type_kdtree"),this.weighted&&e.push("#define weighted_splats"),this.hiddenClassifications.length&&e.push(`#define num_hiddenclassifications ${this.hiddenClassifications.length}`),this.hiddenPointSourceIDs.length&&e.push(`#define num_hiddenpointsourceids ${this.hiddenPointSourceIDs.length}`),this.pointSelectionType===ve.COLOR&&e.push("#define selection_type_color"),this.defines))e.push(i);return e.join("\n")}setClipBoxes(e){if(e){var t=this.clipBoxes.length!==e.length&&(0===e.length||0===this.clipBoxes.length);this.uniforms.clipBoxCount.value=this.clipBoxes.length,this.clipBoxes=e,t&&this.updateShaderSource(),this.uniforms.clipBoxes.value=new Float32Array(16*this.clipBoxes.length);for(var i=0;i<this.clipBoxes.length;i++){var r=e[i];this.uniforms.clipBoxes.value.set(r.inverse.elements,16*i)}for(i=0;i<this.uniforms.clipBoxes.value.length;i++)Number.isNaN(this.uniforms.clipBoxes.value[i])&&(this.uniforms.clipBoxes.value[i]=1/0)}}setClipPolygons(e,t){e&&(this.clipPolygons=e,this.clipPolygons.length!==e.length&&this.updateShaderSource())}get gradient(){return this._gradient}set gradient(e){this._gradient!==e&&(this._gradient=e,this.gradientTexture=te.generateGradientTexture(this._gradient),this.uniforms.gradient.value=this.gradientTexture)}get useOrthographicCamera(){return this.uniforms.useOrthographicCamera.value}set useOrthographicCamera(e){this.uniforms.useOrthographicCamera.value!==e&&(this.uniforms.useOrthographicCamera.value=e)}get classification(){return this._classification}set classification(e){var t={};for(var i of Object.keys(e))t[i]=e[i].clone();var r=!1;if(void 0===this._classification)r=!1;else for(var i of(r=Object.keys(t).length===Object.keys(this._classification).length,Object.keys(t)))r=(r=r&&void 0!==this._classification[i])&&t[i].equals(this._classification[i]);r||(this._classification=t,this.recomputeClassification())}recomputeClassification(){this.classificationTexture=te.generateClassificationTexture(this._classification),this.uniforms.classificationLUT.value=this.classificationTexture,this.dispatchEvent({type:"material_property_changed",target:this})}get hiddenClassifications(){return this.uniforms.hiddenClassifications.value}set hiddenClassifications(e){e=this.getDistinctFV(e),JSON.stringify(e)!==JSON.stringify(this.uniforms.hiddenClassifications.value)&&(this.uniforms.hiddenClassifications.value=e,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this}))}get hiddenPointSourceIDsTexture(){return this.uniforms.hiddenPointSourceIDs.value}get hiddenPointSourceIDs(){return this._hiddenPointSourceIDs}set hiddenPointSourceIDs(e){e=this.getDistinctFV(e),JSON.stringify(e)!==JSON.stringify(this._hiddenPointSourceIDs)&&(this._hiddenPointSourceIDs=e,this.recomputeHiddenPointSourceIDs())}getDistinctFV(e){return[...new Set(e)].sort()}recomputeHiddenPointSourceIDs(){const e=this.hiddenPointSourceIDs,t=new Uint8Array(196608);e.forEach((e=>{t[3*e]=255}));const i=new c.DataTexture(t,256,256,c.RGBFormat);i.magFilter=c.NearestFilter,i.needsUpdate=!0,this.uniforms.hiddenPointSourceIDs.value=i,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this})}get selectedPointSourceID(){return this.uniforms.selectedPointSourceID.value}set selectedPointSourceID(e){e!==this.uniforms.selectedPointSourceID.value&&(this.uniforms.selectedPointSourceID.value=e||-1,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this}))}get selectedPointSourceIDColor(){return this.uniforms.selectedPointSourceIDColor.value}set selectedPointSourceIDColor(e){e!==this.uniforms.selectedPointSourceIDColor.value&&(this.uniforms.selectedPointSourceIDColor.value=e,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this}))}get numSnapshots(){return this._numSnapshots}set numSnapshots(e){this._numSnapshots=e}get snapEnabled(){return this._snapEnabled}set snapEnabled(e){this._snapEnabled!==e&&(this._snapEnabled=e,this.updateShaderSource())}get spacing(){return this.uniforms.spacing.value}set spacing(e){this.uniforms.spacing.value!==e&&(this.uniforms.spacing.value=e)}get useClipBox(){return this._useClipBox}set useClipBox(e){this._useClipBox!==e&&(this._useClipBox=e,this.updateShaderSource())}get clipTask(){return this.uniforms.clipTask.value}set clipTask(e){this.uniforms.clipTask.value=e}get clipMethod(){return this.uniforms.clipMethod.value}set clipMethod(e){this.uniforms.clipMethod.value=e}get weighted(){return this._weighted}set weighted(e){this._weighted!==e&&(this._weighted=e,this.updateShaderSource())}get fov(){return this.uniforms.fov.value}set fov(e){this.uniforms.fov.value!==e&&(this.uniforms.fov.value=e,this.updateShaderSource())}get screenWidth(){return this.uniforms.screenWidth.value}set screenWidth(e){this.uniforms.screenWidth.value!==e&&(this.uniforms.screenWidth.value=e,this.updateShaderSource())}get screenHeight(){return this.uniforms.screenHeight.value}set screenHeight(e){this.uniforms.screenHeight.value!==e&&(this.uniforms.screenHeight.value=e,this.updateShaderSource())}get near(){return this.uniforms.near.value}set near(e){this.uniforms.near.value!==e&&(this.uniforms.near.value=e)}get far(){return this.uniforms.far.value}set far(e){this.uniforms.far.value!==e&&(this.uniforms.far.value=e)}get opacity(){return this.uniforms.uOpacity.value}set opacity(e){this.uniforms&&this.uniforms.uOpacity&&this.uniforms.uOpacity.value!==e&&(this.uniforms.uOpacity.value=e,this.updateShaderSource(),this.dispatchEvent({type:"opacity_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get pointColorType(){return this._pointColorType}set pointColorType(e){this._pointColorType!==e&&(this._pointColorType=e,this.updateShaderSource(),this.dispatchEvent({type:"point_color_type_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get pointSizeType(){return this._pointSizeType}set pointSizeType(e){this._pointSizeType!==e&&(this._pointSizeType=e,this.updateShaderSource(),this.dispatchEvent({type:"point_size_type_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get useEDL(){return this._useEDL}set useEDL(e){this._useEDL!==e&&(this._useEDL=e,this.updateShaderSource())}get color(){return this.uniforms.uColor.value}set color(e){this.uniforms.uColor.value.equals(e)||(this.uniforms.uColor.value.copy(e),this.dispatchEvent({type:"color_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get shape(){return this._shape}set shape(e){this._shape!==e&&(this._shape=e,this.updateShaderSource(),this.dispatchEvent({type:"point_shape_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get treeType(){return this._treeType}set treeType(e){this._treeType!==e&&(this._treeType=e,this.updateShaderSource())}get bbSize(){return this.uniforms.bbSize.value}set bbSize(e){this.uniforms.bbSize.value=e}get size(){return this.uniforms.size.value}set size(e){this.uniforms.size.value!==e&&(this.uniforms.size.value=e,this.dispatchEvent({type:"point_size_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get elevationRange(){return this.uniforms.elevationRange.value}set elevationRange(e){(this.uniforms.elevationRange.value[0]!==e[0]||this.uniforms.elevationRange.value[1]!==e[1])&&(this.uniforms.elevationRange.value=e,this._defaultElevationRangeChanged=!0,this.dispatchEvent({type:"material_property_changed",target:this}))}get heightMin(){return this.uniforms.elevationRange.value[0]}set heightMin(e){this.elevationRange=[e,this.elevationRange[1]]}get heightMax(){return this.uniforms.elevationRange.value[1]}set heightMax(e){this.elevationRange=[this.elevationRange[0],e]}get transition(){return this.uniforms.transition.value}set transition(e){this.uniforms.transition.value=e}get intensityRange(){return this.uniforms.intensityRange.value}set intensityRange(e){e instanceof Array&&2===e.length&&(e[0]===this.uniforms.intensityRange.value[0]&&e[1]===this.uniforms.intensityRange.value[1]||(this.uniforms.intensityRange.value=e,this._defaultIntensityRangeChanged=!0,this.dispatchEvent({type:"material_property_changed",target:this})))}get intensityGamma(){return this.uniforms.intensityGamma.value}set intensityGamma(e){this.uniforms.intensityGamma.value!==e&&(this.uniforms.intensityGamma.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get intensityContrast(){return this.uniforms.intensityContrast.value}set intensityContrast(e){this.uniforms.intensityContrast.value!==e&&(this.uniforms.intensityContrast.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get intensityBrightness(){return this.uniforms.intensityBrightness.value}set intensityBrightness(e){this.uniforms.intensityBrightness.value!==e&&(this.uniforms.intensityBrightness.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get rgbGamma(){return this.uniforms.rgbGamma.value}set rgbGamma(e){this.uniforms.rgbGamma.value!==e&&(this.uniforms.rgbGamma.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get rgbContrast(){return this.uniforms.rgbContrast.value}set rgbContrast(e){this.uniforms.rgbContrast.value!==e&&(this.uniforms.rgbContrast.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get rgbBrightness(){return this.uniforms.rgbBrightness.value}set rgbBrightness(e){this.uniforms.rgbBrightness.value!==e&&(this.uniforms.rgbBrightness.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightRGB(){return this.uniforms.wRGB.value}set weightRGB(e){this.uniforms.wRGB.value!==e&&(this.uniforms.wRGB.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightIntensity(){return this.uniforms.wIntensity.value}set weightIntensity(e){this.uniforms.wIntensity.value!==e&&(this.uniforms.wIntensity.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightElevation(){return this.uniforms.wElevation.value}set weightElevation(e){this.uniforms.wElevation.value!==e&&(this.uniforms.wElevation.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightClassification(){return this.uniforms.wClassification.value}set weightClassification(e){this.uniforms.wClassification.value!==e&&(this.uniforms.wClassification.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightReturnNumber(){return this.uniforms.wReturnNumber.value}set weightReturnNumber(e){this.uniforms.wReturnNumber.value!==e&&(this.uniforms.wReturnNumber.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightSourceID(){return this.uniforms.wSourceID.value}set weightSourceID(e){this.uniforms.wSourceID.value!==e&&(this.uniforms.wSourceID.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}static generateGradientTexture(e){var t=64,i=document.createElement("canvas");i.width=t,i.height=t;var r=i.getContext("2d");r.rect(0,0,t,t);for(var n=r.createLinearGradient(0,0,t,t),o=0;o<e.length;o++){var s=e[o];n.addColorStop(s[0],"#"+s[1].getHexString())}r.fillStyle=n,r.fill();var a=new c.CanvasTexture(i);return a.needsUpdate=!0,a.minFilter=c.LinearFilter,a}static generateClassificationTexture(e){for(var t=new Uint8Array(262144),i=0;i<256;i++)for(var r=0;r<256;r++){var n,o=i+256*r;n=e[i]?e[i]:e[i%32]?e[i%32]:e.DEFAULT,t[4*o+0]=255*n.x,t[4*o+1]=255*n.y,t[4*o+2]=255*n.z,t[4*o+3]=255*n.w}var s=new c.DataTexture(t,256,256,c.RGBAFormat);return s.magFilter=c.NearestFilter,s.needsUpdate=!0,s}disableEvents(){void 0===this._hiddenListeners&&(this._hiddenListeners=this._listeners,this._listeners={})}enableEvents(){this._listeners=this._hiddenListeners,this._hiddenListeners=void 0}copyFrom(e){for(var t of this.uniforms)this.uniforms[t].value=e.uniforms[t].value}}class ie extends S{constructor(){super(),this.children={},this.sceneNode=null,this.octree=null}getNumPoints(){return this.geometryNode.numPoints}isLoaded(){return!0}isTreeNode(){return!0}isGeometryNode(){return!1}getLevel(){return this.geometryNode.level}getBoundingSphere(){return this.geometryNode.boundingSphere}getBoundingBox(){return this.geometryNode.boundingBox}getChildren(){for(var e=[],t=0;t<8;t++)this.children[t]&&e.push(this.children[t]);return e}getPointsInBox(e){if(!this.sceneNode)return null;for(var t=this.geometryNode.buffer,i=t.offset("position"),r=t.stride,n=new DataView(t.data),o=(new c.Matrix4).getInverse(e.matrixWorld),s=(new c.Matrix4).multiplyMatrices(o,this.sceneNode.matrixWorld),a=[],u=new c.Vector4,l=0;l<t.numElements;l++){var h=n.getFloat32(l*r+i+0,!0),d=n.getFloat32(l*r+i+4,!0),p=n.getFloat32(l*r+i+8,!0);u.set(h,d,p,1),u.applyMatrix4(s),-.5<u.x&&u.x<.5&&-.5<u.y&&u.y<.5&&-.5<u.z&&u.z<.5&&(u.set(h,d,p,1).applyMatrix4(this.sceneNode.matrixWorld),a.push(new c.Vector3(u.x,u.y,u.z)))}return a}get name(){return this.geometryNode.name}}class re extends T{constructor(e,t){super(),this.pointBudget=1/0,this.pcoGeometry=e,this.boundingBox=this.pcoGeometry.boundingBox,this.boundingSphere=this.boundingBox.getBoundingSphere(new c.Sphere),this.material=t||new te,this.visiblePointsTarget=2e6,this.minimumNodePixelSize=150,this.level=0,this.position.copy(e.offset),this.updateMatrix(),this.showBoundingBox=!1,this.boundingBoxNodes=[],this.loadQueue=[],this.visibleBounds=new c.Box3,this.visibleNodes=[],this.visibleGeometry=[],this.generateDEM=!1,this.profileRequests=[],this.name="",this.tempVector3=new c.Vector3;var i=[this.pcoGeometry.tightBoundingBox,this.getBoundingBoxWorld()].find((e=>void 0!==e));this.updateMatrixWorld(!0);var r=(i=$.computeTransformedBoundingBox(i,this.matrixWorld)).min.z,n=i.max.z;this.material.heightMin=r,this.material.heightMax=n,this.projection=e.projection,this.root=this.pcoGeometry.root}setName(e){this.name!==e&&(this.name=e,this.dispatchEvent({type:"name_changed",name:e,pointcloud:this}))}getName(){return this.name}toTreeNode(e,t){var i=new ie,r=new c.Points(e.geometry,this.material);for(var n in r.name=e.name,r.position.copy(e.boundingBox.min),r.frustumCulled=!0,r.onBeforeRender=(t,r,n,o,s,a)=>{if(s.program){if(t.getContext().useProgram(s.program.program),s.program.getUniforms().map.level){var u=e.getLevel();s.uniforms.level.value=u,s.program.getUniforms().map.level.setValue(t.getContext(),u)}if(this.visibleNodeTextureOffsets&&s.program.getUniforms().map.vnStart){var l=this.visibleNodeTextureOffsets.get(i);s.uniforms.vnStart.value=l,s.program.getUniforms().map.vnStart.setValue(t.getContext(),l)}if(s.program.getUniforms().map.pcIndex){var h=i.pcIndex?i.pcIndex:this.visibleNodes.indexOf(i);s.uniforms.pcIndex.value=h,s.program.getUniforms().map.pcIndex.setValue(t.getContext(),h)}}},i.geometryNode=e,i.sceneNode=r,i.pointcloud=this,i.children={},e.children)i.children[n]=e.children[n];if(t){var o=parseInt(e.name[e.name.length-1]);t.sceneNode.add(r),t.children[o]=i}else this.root=i,this.add(r);return e.oneTimeDisposeHandlers.push((function(){var r=parseInt(e.name[e.name.length-1]);t.sceneNode.remove(i.sceneNode),t.children[r]=e})),i}updateVisibleBounds(){for(var e=[],t=0;t<this.visibleNodes.length;t++){for(var i=this.visibleNodes[t],r=!0,n=0;n<i.children.length;n++){var o=i.children[n];o instanceof ie?r=r&&!o.sceneNode.visible:o instanceof G&&(r=!0)}r&&e.push(i)}for(this.visibleBounds.min=new c.Vector3(1/0,1/0,1/0),this.visibleBounds.max=new c.Vector3(-1/0,-1/0,-1/0),t=0;t<e.length;t++)i=e[t],this.visibleBounds.expandByPoint(i.getBoundingBox().min),this.visibleBounds.expandByPoint(i.getBoundingBox().max)}updateMaterial(e,t,i,r){e.fov=i.fov*(Math.PI/180),e.screenWidth=r.domElement.clientWidth,e.screenHeight=r.domElement.clientHeight,e.spacing=this.pcoGeometry.spacing*Math.max(this.scale.x,this.scale.y,this.scale.z),e.near=i.near,e.far=i.far,e.uniforms.octreeSize.value=this.pcoGeometry.boundingBox.getSize(new c.Vector3).x}computeVisibilityTextureData(e,t){p.measureTimings&&performance.mark("computeVisibilityTextureData-start");var i=new Uint8Array(4*e.length),r=new Map;(e=e.slice()).sort((function(e,t){var i=e.geometryNode.name,r=t.geometryNode.name;return i.length!==r.length?i.length-r.length:i<r?-1:i>r?1:0}));for(var n=new c.Vector3,o=(e,t)=>{n.subVectors(t.center,e.origin);var i=n.dot(e.direction),r=n.dot(n)-i*i,o=t.radius*t.radius;if(r>o)return null;var s=i+Math.sqrt(o-r);return s<0?null:s},s=new Map,a=new Map,u=0;u<e.length;u++){var l=e[u];r.set(l,u);for(var h=[],d=0;d<8;d++)(f=l.children[d])&&f.constructor===ie&&e.includes(f,u)&&h.push(f);for(l.geometryNode.estimatedSpacing,i[4*u+0]=0,i[4*u+1]=0,i[4*u+2]=0,i[4*u+3]=l.getLevel(),d=0;d<h.length;d++){var f=h[d],m=parseInt(f.geometryNode.name.substr(-1));if(i[4*u+0]+=Math.pow(2,m),0===d){var g=e.indexOf(f,u);i[4*u+1]=g-u>>8,i[4*u+2]=(g-u)%256}}var v=l.getBoundingBox().clone().getBoundingSphere(new c.Sphere);v.applyMatrix4(l.sceneNode.matrixWorld),v.applyMatrix4(t.matrixWorldInverse);var y=o(new c.Ray(t.position,t.getWorldDirection(this.tempVector3)),v),x=v.center.distanceTo(t.position)+v.radius;if(null===y&&(y=x),y=Math.max(y,x),s.has(l.getLevel())){var b=s.get(l.getLevel()),w=Math.max(b,y);s.set(l.getLevel(),w)}else s.set(l.getLevel(),y);if(!l.geometryNode.hasChildren){var S={distance:y,i:u};a.set(l,S)}}for(var[l,S]of a){var T=l.getLevel();if(y=S.distance,u=S.i,!(T<4))for(var[_,A]of s)y<1.2*A&&(i[4*u+3]=_)}return p.measureTimings&&(performance.mark("computeVisibilityTextureData-end"),performance.measure("render.computeVisibilityTextureData","computeVisibilityTextureData-start","computeVisibilityTextureData-end")),{data:i,offsets:r}}nodeIntersectsProfile(e,t){for(var i=e.boundingBox.clone().applyMatrix4(this.matrixWorld).getBoundingSphere(new c.Sphere),r=!1,n=0;n<t.points.length-1;n++){var o=new c.Vector3(t.points[n+0].x,t.points[n+0].y,i.center.z),s=new c.Vector3(t.points[n+1].x,t.points[n+1].y,i.center.z),a=new c.Line3(o,s).closestPointToPoint(i.center,!0).distanceTo(i.center);r=r||a<i.radius+t.width}return r}nodesOnRay(e,t){for(var i=[],r=t.clone(),n=0;n<e.length;n++){var o=e[n],s=o.getBoundingSphere(new c.Sphere).clone().applyMatrix4(this.matrixWorld);r.intersectsSphere(s)&&i.push(o)}return i}updateMatrixWorld(e){!0===this.matrixAutoUpdate&&this.updateMatrix(),!0!==this.matrixWorldNeedsUpdate&&!0!==e||(this.parent?this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0)}hideDescendants(e){for(var t=[],i=0;i<e.children.length;i++)(r=e.children[i]).visible&&t.push(r);for(;t.length>0;)for((e=t.shift()).visible=!1,i=0;i<e.children.length;i++){var r;(r=e.children[i]).visible&&t.push(r)}}moveToOrigin(){this.position.set(0,0,0),this.updateMatrixWorld(!0);var e=this.boundingBox,t=this.matrixWorld,i=$.computeTransformedBoundingBox(e,t);this.position.set(0,0,0).sub(i.getCenter(new c.Vector3))}moveToGroundPlane(){this.updateMatrixWorld(!0);var e=this.boundingBox,t=this.matrixWorld,i=$.computeTransformedBoundingBox(e,t);this.position.y+=-i.min.y}getBoundingBoxWorld(){this.updateMatrixWorld(!0);var e=this.boundingBox,t=this.matrixWorld;return $.computeTransformedBoundingBox(e,t)}getPointsInProfile(e,t,i){for(var r={segments:[],boundingBox:new c.Box3,projectedBoundingBox:new c.Box2},n=0;n<e.points.length-1;n++){var o=e.points[n],s=e.points[n+1],a=this.getProfile(o,s,e.width,t),u={start:o,end:s,points:a,project:null};r.segments.push(u),r.boundingBox.expandByPoint(a.boundingBox.min),r.boundingBox.expandByPoint(a.boundingBox.max)}var l=new c.Vector3;for(n=0;n<r.segments.length;n++){var h=function(e,t,i,r){var n=e,o=t,s=i,a=r,u=new c.Vector3(1,0,0),l=(new c.Vector3).subVectors(o,n);l.y=0,l.normalize();var h=Math.acos(u.dot(l));return l.z>0&&(h=-h),function(e){var t=(new c.Matrix4).makeTranslation(-n.x,-a.min.y,-n.z),i=(new c.Matrix4).makeRotationY(-h),r=(new c.Matrix4).makeTranslation(s.x,0,0),o=e.clone();return o.applyMatrix4(t),o.applyMatrix4(i),o.applyMatrix4(r),o}}(o=(u=r.segments[n]).start,s=u.end,l.clone(),r.boundingBox.clone());u.project=h,l.x+=new c.Vector3(o.x,0,o.z).distanceTo(new c.Vector3(s.x,0,s.z)),l.y+=s.y-o.y}return r.projectedBoundingBox.min.x=0,r.projectedBoundingBox.min.y=r.boundingBox.min.y,r.projectedBoundingBox.max.x=l.x,r.projectedBoundingBox.max.y=r.boundingBox.max.y,r}getProfile(e,t,i,r,n){}getVisibleExtent(){return this.visibleBounds.applyMatrix4(this.matrixWorld)}pick(e,t,i,r={}){var n=e.renderer,o=e.pRenderer;performance.mark("pick-start");var s=(e,t)=>void 0!==e?e:t,a=s(r.pickWindowSize,17),u=(s(r.pickOutsideClipRegion,!1),n.getSize(new c.Vector3)),l=Math.ceil(s(r.width,u.width)),h=Math.ceil(s(r.height,u.height)),d=s(r.pointSizeType,this.material.pointSizeType),p=s(r.pointSize,this.material.size),f=this.nodesOnRay(this.visibleNodes,i);if(0===f.length)return null;if(!this.pickState){var m=new c.Scene,g=new te;g.pointColorType=me.POINT_INDEX;var v=new c.WebGLRenderTarget(1,1,{minFilter:c.LinearFilter,magFilter:c.NearestFilter,format:c.RGBAFormat});this.pickState={renderTarget:v,material:g,scene:m}}var y=this.pickState,x=y.material;x.pointSizeType=d,x.shape=this.material.shape,x.size=p,x.uniforms.minSize.value=this.material.uniforms.minSize.value,x.uniforms.maxSize.value=this.material.uniforms.maxSize.value,x.classification=this.material.classification,r.pickClipped?(x.clipBoxes=this.material.clipBoxes,this.material.clipTask===de.HIGHLIGHT?x.clipTask=de.NONE:x.clipTask=this.material.clipTask):x.clipBoxes=[],this.updateMaterial(x,f,t,n),y.renderTarget.setSize(l,h);var b=new c.Vector2(r.x,r.y),w=n.getContext();w.enable(w.SCISSOR_TEST),w.scissor(parseInt(b.x-(a-1)/2),parseInt(b.y-(a-1)/2),parseInt(a),parseInt(a)),n.state.buffers.depth.setTest(x.depthTest),n.state.buffers.depth.setMask(x.depthWrite),n.state.setBlending(c.NoBlending),n.setRenderTarget(y.renderTarget),w.clearColor(0,0,0,0),n.clearTarget(y.renderTarget,!0,!0,!0);var S=this.material;this.material=x,o.renderOctree(this,f,t,y.renderTarget),this.material=S;var T=(e,t,i)=>Math.min(Math.max(t,e),i),_=parseInt(T(b.x-(a-1)/2,0,l)),A=parseInt(T(b.y-(a-1)/2,0,h)),E=parseInt(Math.min(_+a,l)-_),B=parseInt(Math.min(A+a,h)-A),N=new Uint8Array(E*B*4);w.readPixels(_,A,a,a,w.RGBA,w.UNSIGNED_BYTE,N),n.setRenderTarget(null),n.resetGLState(),n.setScissorTest(!1),w.disable(w.SCISSOR_TEST);for(var I=N,C=new Uint32Array(N.buffer),P=(Number.MAX_VALUE,[]),R=0;R<a;R++)for(var D=0;D<a;D++){var M=R+D*a,L=Math.pow(R-(a-1)/2,2)+Math.pow(D-(a-1)/2,2),O=I[4*M+3];I[4*M+3]=0;var z=C[M];if((0!==O||0!==z)&&void 0!==O&&void 0!==z){var U={pIndex:z,pcIndex:O,distanceToCenter:L};r.all?P.push(U):P.length>0?L<P[0].distanceToCenter&&(P[0]=U):P.push(U)}}for(var U of P){var F={};if(!f[U.pcIndex])return null;var V=f[U.pcIndex],G=V.sceneNode,H=V.geometryNode.geometry;for(var k in H.attributes){var W=H.attributes[k];if("position"===k){_=W.array[3*U.pIndex+0],A=W.array[3*U.pIndex+1];var Y=W.array[3*U.pIndex+2],j=new c.Vector3(_,A,Y);j.applyMatrix4(G.matrixWorld),F[k]=j}}U.point=F}return performance.mark("pick-end"),performance.measure("pick","pick-start","pick-end"),r.all?P.map((e=>e.point)):0===P.length?null:P[0].point}*getFittedBoxGen(e){var t=new c.Box3,i=(new c.Matrix4).getInverse(e.matrixWorld);for(var r of this.visibleNodes)if(r.sceneNode){for(var n=r.geometryNode.buffer,o=n.offset("position"),s=n.stride,a=new DataView(n.data),u=(new c.Matrix4).multiplyMatrices(i,r.sceneNode.matrixWorld),l=new c.Vector4,h=0;h<n.numElements;h++){var d=a.getFloat32(h*s+o+0,!0),p=a.getFloat32(h*s+o+4,!0),f=a.getFloat32(h*s+o+8,!0);l.set(d,p,f,1),l.applyMatrix4(u),-.5<l.x&&l.x<.5&&-.5<l.y&&l.y<.5&&-.5<l.z&&l.z<.5&&t.expandByPoint(l)}yield}var m=t.getCenter(new c.Vector3).applyMatrix4(e.matrixWorld),g=new c.Object3D;g.position.copy(m),g.scale.copy(e.scale),g.rotation.copy(e.rotation);var v=(new c.Vector3).subVectors(t.max,t.min);g.scale.multiply(v),yield g}getFittedBox(e,t=1/0){var i=new c.Box3,r=(new c.Matrix4).getInverse(e.matrixWorld);for(var n of this.visibleNodes)if(n.sceneNode&&!(n.getLevel()>t))for(var o=n.geometryNode.buffer,s=o.offset("position"),a=o.stride,u=new DataView(o.data),l=(new c.Matrix4).multiplyMatrices(r,n.sceneNode.matrixWorld),h=new c.Vector4,d=0;d<o.numElements;d++){var p=u.getFloat32(d*a+s+0,!0),f=u.getFloat32(d*a+s+4,!0),m=u.getFloat32(d*a+s+8,!0);h.set(p,f,m,1),h.applyMatrix4(l),-.5<h.x&&h.x<.5&&-.5<h.y&&h.y<.5&&-.5<h.z&&h.z<.5&&i.expandByPoint(h)}var g=i.getCenter(new c.Vector3).applyMatrix4(e.matrixWorld),v=new c.Object3D;v.position.copy(g),v.scale.copy(e.scale),v.rotation.copy(e.rotation);var y=(new c.Vector3).subVectors(i.max,i.min);return v.scale.multiply(y),v}get progress(){return this.visibleNodes.length/this.visibleGeometry.length}find(e){var t=null;for(var i of e)t="r"===i?this.root:t.children[i];return t}}class ne extends S{constructor(){super(),this.left=null,this.right=null,this.sceneNode=null,this.kdtree=null}getNumPoints(){return this.geometryNode.numPoints}isLoaded(){return!0}isTreeNode(){return!0}isGeometryNode(){return!1}getLevel(){return this.geometryNode.level}getBoundingSphere(){return this.geometryNode.boundingSphere}getBoundingBox(){return this.geometryNode.boundingBox}toTreeNode(e){var t=null;if(this.left===e?t=this.left:this.right===e&&(t=this.right),t.loaded){var i=new ne,r=c.PointCloud(t.geometry,this.kdtree.material);r.visible=!1,i.kdtree=this.kdtree,i.geometryNode=t,i.sceneNode=r,i.parent=this,i.left=this.geometryNode.left,i.right=this.geometryNode.right}}getChildren(){var e=[];return this.left&&e.push(this.left),this.right&&e.push(this.right),e}}class oe extends T{constructor(e){super(),this.root=null,e.root?this.root=e.root:e.addEventListener("hierarchy_loaded",(()=>{this.root=e.root})),this.visiblePointsTarget=2e6,this.minimumNodePixelSize=150,this.position.sub(e.offset),this.updateMatrix(),this.numVisibleNodes=0,this.numVisiblePoints=0,this.boundingBoxNodes=[],this.loadQueue=[],this.visibleNodes=[],this.pcoGeometry=e,this.boundingBox=this.pcoGeometry.boundingBox,this.boundingSphere=this.pcoGeometry.boundingSphere,this.material=new te({vertexColors:c.VertexColors,size:.05,treeType:ge.KDTREE}),this.material.sizeType=ce.ATTENUATED,this.material.size=.05,this.profileRequests=[],this.name=""}getBoundingBoxWorld(){this.updateMatrixWorld(!0);var e=this.boundingBox,t=this.matrixWorld;return $.computeTransformedBoundingBox(e,t)}setName(e){this.name!==e&&(this.name=e,this.dispatchEvent({type:"name_changed",name:e,pointcloud:this}))}getName(){return this.name}getLevel(){return this.level}toTreeNode(e,t){var i=new ne,r=new c.Points(e.geometry,this.material);return r.frustumCulled=!0,r.onBeforeRender=(t,r,n,o,s,a)=>{if(s.program){if(t.getContext().useProgram(s.program.program),s.program.getUniforms().map.level){var u=e.getLevel();s.uniforms.level.value=u,s.program.getUniforms().map.level.setValue(t.getContext(),u)}if(this.visibleNodeTextureOffsets&&s.program.getUniforms().map.vnStart){var l=this.visibleNodeTextureOffsets.get(i);s.uniforms.vnStart.value=l,s.program.getUniforms().map.vnStart.setValue(t.getContext(),l)}if(s.program.getUniforms().map.pcIndex){var h=i.pcIndex?i.pcIndex:this.visibleNodes.indexOf(i);s.uniforms.pcIndex.value=h,s.program.getUniforms().map.pcIndex.setValue(t.getContext(),h)}}},i.geometryNode=e,i.sceneNode=r,i.pointcloud=this,i.left=e.left,i.right=e.right,t?(t.sceneNode.add(r),t.left===e?t.left=i:t.right===e&&(t.right=i)):(this.root=i,this.add(r)),e.oneTimeDisposeHandlers.push((function(){t.sceneNode.remove(i.sceneNode),t.left===i?t.left=e:t.right===i&&(t.right=e)})),i}updateMaterial(e,t,i,r){e.fov=i.fov*(Math.PI/180),e.screenWidth=r.domElement.clientWidth,e.screenHeight=r.domElement.clientHeight,e.spacing=this.pcoGeometry.spacing,e.near=i.near,e.far=i.far,this.maxLevel>e.levels&&(e.levels=this.maxLevel+2);var n=this.boundingBox.getSize(new c.Vector3);e.bbSize=[n.x,n.y,n.z]}updateVisibleBounds(){}hideDescendants(e){for(var t=[],i=0;i<e.children.length;i++)(r=e.children[i]).visible&&t.push(r);for(;t.length>0;){var r;for((r=t.shift()).visible=!1,r.boundingBoxNode&&(r.boundingBoxNode.visible=!1),i=0;i<r.children.length;i++){var n=r.children[i];n.visible&&t.push(n)}}}updateMatrixWorld(e){!0===this.matrixAutoUpdate&&this.updateMatrix(),!0!==this.matrixWorldNeedsUpdate&&!0!==e||(void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0)}nodesOnRay(e,t){for(var i=[],r=t.clone(),n=0;n<e.length;n++){var o=e[n],s=o.getBoundingSphere(new c.Sphere).clone().applyMatrix4(o.sceneNode.matrixWorld);r.intersectsSphere(s)&&i.push(o)}return i}pick(e,t,i,r={}){var n=e.renderer,o=e.pRenderer;performance.mark("pick-start");var s=(e,t)=>void 0!==e?e:t,a=s(r.pickWindowSize,17),u=(s(r.pickOutsideClipRegion,!1),n.getSize(new c.Vector3)),l=Math.ceil(s(r.width,u.width)),h=Math.ceil(s(r.height,u.height)),d=s(r.pointSizeType,this.material.pointSizeType),p=s(r.pointSize,this.material.size),f=this.nodesOnRay(this.visibleNodes,i);if(0===f.length)return null;if(!this.pickState){var m=new c.Scene,g=new te;g.pointColorType=me.POINT_INDEX;var v=new c.WebGLRenderTarget(1,1,{minFilter:c.LinearFilter,magFilter:c.NearestFilter,format:c.RGBAFormat});this.pickState={renderTarget:v,material:g,scene:m}}var y=this.pickState,x=y.material;x.pointSizeType=d,x.shape=this.material.shape,x.size=p,x.uniforms.minSize.value=this.material.uniforms.minSize.value,x.uniforms.maxSize.value=this.material.uniforms.maxSize.value,x.classification=this.material.classification,r.pickClipped?(x.clipBoxes=this.material.clipBoxes,this.material.clipTask===de.HIGHLIGHT?x.clipTask=de.NONE:x.clipTask=this.material.clipTask):x.clipBoxes=[],this.updateMaterial(x,f,t,n),y.renderTarget.setSize(l,h);var b=new c.Vector2(r.x,r.y),w=n.getContext();w.enable(w.SCISSOR_TEST),w.scissor(parseInt(b.x-(a-1)/2),parseInt(b.y-(a-1)/2),parseInt(a),parseInt(a)),n.state.buffers.depth.setTest(x.depthTest),n.state.buffers.depth.setMask(x.depthWrite),n.state.setBlending(c.NoBlending),n.clearTarget(y.renderTarget,!0,!0,!0),n.setRenderTarget(y.renderTarget),w.clearColor(0,0,0,0),n.clearTarget(y.renderTarget,!0,!0,!0);var S=this.material;this.material=x,o.renderOctree(this,f,t,y.renderTarget),this.material=S;var T=(e,t,i)=>Math.min(Math.max(t,e),i),_=parseInt(T(b.x-(a-1)/2,0,l)),A=parseInt(T(b.y-(a-1)/2,0,h)),E=parseInt(Math.min(_+a,l)-_),B=parseInt(Math.min(A+a,h)-A),N=new Uint8Array(E*B*4);w.readPixels(_,A,a,a,w.RGBA,w.UNSIGNED_BYTE,N),n.setRenderTarget(null),n.resetGLState(),n.setScissorTest(!1),w.disable(w.SCISSOR_TEST);for(var I=N,C=new Uint32Array(N.buffer),P=(Number.MAX_VALUE,[]),R=0;R<a;R++)for(var D=0;D<a;D++){var M=R+D*a,L=Math.pow(R-(a-1)/2,2)+Math.pow(D-(a-1)/2,2),O=I[4*M+3];I[4*M+3]=0;var z=C[M];if((0!==O||0!==z)&&void 0!==O&&void 0!==z){var U={pIndex:z,pcIndex:O,distanceToCenter:L};r.all?P.push(U):P.length>0?L<P[0].distanceToCenter&&(P[0]=U):P.push(U)}}for(var U of P){var F={};if(!f[U.pcIndex])return null;var V=f[U.pcIndex],G=V.sceneNode,H=V.geometryNode.geometry;for(var k in H.attributes){var W=H.attributes[k];if("position"===k){_=W.array[3*U.pIndex+0],A=W.array[3*U.pIndex+1];var Y=W.array[3*U.pIndex+2],j=new c.Vector3(_,A,Y);j.applyMatrix4(G.matrixWorld),F[k]=j}}U.point=F}return performance.mark("pick-end"),performance.measure("pick","pick-start","pick-end"),r.all?P.map((e=>e.point)):0===P.length?null:P[0].point}computeVisibilityTextureData(e){p.measureTimings&&performance.mark("computeVisibilityTextureData-start");var t=new Uint8Array(3*e.length),i=new Map;(e=e.slice()).sort((function(e,t){var i=e.geometryNode.level,r=t.geometryNode.level,n=e.geometryNode.number,o=t.geometryNode.number;return i!==r?i-r:n<o?-1:n>o?1:0}));for(var r=[],n=0;n<e.length;n++)r.push(e[n].geometryNode.number);for(n=0;n<e.length;n++){var o=e[n];i.set(o,n);var s=0,a=0,u=0;o.geometryNode.left&&r.indexOf(o.geometryNode.left.number)>0&&(s+=1,a=r.indexOf(o.geometryNode.left.number)-n),o.geometryNode.right&&r.indexOf(o.geometryNode.right.number)>0&&(s+=2,a=0===a?r.indexOf(o.geometryNode.right.number)-n:a),"X"===o.geometryNode.split?u=1:"Y"===o.geometryNode.split?u=2:"Z"===o.geometryNode.split&&(u=4),t[3*n+0]=s,t[3*n+1]=a,t[3*n+2]=u}return p.measureTimings&&(performance.mark("computeVisibilityTextureData-end"),performance.measure("render.computeVisibilityTextureData","computeVisibilityTextureData-start","computeVisibilityTextureData-end")),{data:t,offsets:i}}get progress(){return this.pcoGeometry.root?p.numNodesLoading>0?0:1:0}}class se{constructor(){this.left=null,this.right=null,this.boundingBox=null,this.number=null,this.pcoGeometry=null,this.loaded=!1,this.numPoints=0,this.level=0,this.children=[],this.oneTimeDisposeHandlers=[]}isGeometryNode(){return!0}isTreeNode(){return!1}isLoaded(){return this.loaded}getBoundingSphere(){return this.boundingSphere}getBoundingBox(){return this.boundingBox}getChildren(){var e=[];return this.left&&e.push(this.left),this.right&&e.push(this.right),e}getLevel(){return this.level}load(){if(!(this.loaded||this.loading||p.numNodesLoading>=p.maxNodesLoading)){this.loading=!0,p.numNodesLoading++;var e=this,t=this.pcoGeometry.url+"?node="+this.number,i=B.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",t,!0),i.responseType="arraybuffer",i.onload=function(){try{for(var t=i.response,r=new DataView(t),n=t.byteLength/17,o=new ArrayBuffer(28*n),s=(new DataView(o),y.POSITION_CARTESIAN,y.RGBA_PACKED,y.INTENSITY,y.CLASSIFICATION,new Float32Array(3*n)),a=new Uint8Array(4*n),u=new Float32Array(n),l=new Uint8Array(n),h=new ArrayBuffer(4*n),d=new Uint32Array(h),f=new c.Box3,m=0;m<n;m++){var g=r.getFloat32(17*m+0,!0)+e.boundingBox.min.x,v=r.getFloat32(17*m+4,!0)+e.boundingBox.min.y,x=r.getFloat32(17*m+8,!0)+e.boundingBox.min.z,b=r.getUint8(17*m+12,!0),w=r.getUint8(17*m+13,!0),S=r.getUint8(17*m+14,!0),T=r.getUint8(17*m+15,!0),_=r.getUint8(17*m+16,!0);f.expandByPoint(new c.Vector3(g,v,x)),s[3*m+0]=g,s[3*m+1]=v,s[3*m+2]=x,a[4*m+0]=b,a[4*m+1]=w,a[4*m+2]=S,a[4*m+3]=255,u[m]=T,l[m]=_,d[m]=m}var A=new c.BufferGeometry;A.setAttribute("position",new c.BufferAttribute(s,3)),A.setAttribute("color",new c.BufferAttribute(a,4,!0)),A.setAttribute("intensity",new c.BufferAttribute(u,1)),A.setAttribute("classification",new c.BufferAttribute(l,1));var E=new c.BufferAttribute(new Uint8Array(h),4,!0);A.setAttribute("indices",E),e.geometry=A,e.numPoints=n,e.loaded=!0,e.loading=!1,p.numNodesLoading--}catch(e){console.error("Potree: Exception thrown parsing points.",e),p.numNodesLoading--}},i.onerror=function(){p.numNodesLoading--,console.log("Potree: Failed to load file, "+i.status+", file: "+t)},i.send(null)}}dispose(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(var e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}}getNumPoints(){return this.numPoints}}class ae extends c.EventDispatcher{constructor(){super(),this.numPoints=0,this.version=0,this.boundingBox=null,this.numNodes=0,this.name=null,this.provider=null,this.url=null,this.root=null,this.levels=0,this._spacing=null,this.pointAttributes=new x(["POSITION_CARTESIAN","COLOR_PACKED"])}static load(e,t){var i=B.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",e+"?info",!0),i.onreadystatechange=function(){try{if(4===i.readyState&&200===i.status){var r=JSON.parse(i.responseText),n=new ae;n.url=e,n.name=r.Name,n.provider=r.Provider,n.numNodes=r.Nodes,n.numPoints=r.Points,n.version=r.Version,n.boundingBox=new c.Box3((new c.Vector3).fromArray(r.BoundingBox.slice(0,3)),(new c.Vector3).fromArray(r.BoundingBox.slice(3,6))),r.Spacing&&(n.spacing=r.Spacing);var o=n.boundingBox.min.clone().multiplyScalar(-1);n.boundingBox.min.add(o),n.boundingBox.max.add(o),n.offset=o;var s=new c.Vector3;n.boundingBox.getCenter(s);var a=n.boundingBox.getSize(new c.Vector3).length()/2;n.boundingSphere=new c.Sphere(s,a),n.loadHierarchy(),t(n)}else 4===i.readyState&&t(null)}catch(e){console.error(e.message),t(null)}},i.send(null)}loadHierarchy(){var e=this.url+"?tree",t=B.createXMLHttpRequest();t.overrideMimeType("text/plain"),t.open("GET",e,!0),t.responseType="arraybuffer",t.onreadystatechange=()=>{if(4===t.readyState&&200===t.status){for(var e=t.response,i=e.byteLength/3,r=new DataView(e),n=[],o=null,s=0,a=0;a<i;a++){var u=r.getUint8(3*a+0,!0),l=(1&u)>0,h=(2&u)>0,d=null;(4&u)>0?d="X":(8&u)>0&&(d="Y"),(16&u)>0&&(d="Z");var p=new se;if(p.hasLeft=l,p.hasRight=h,p.split=d,p.isLeaf=!l&&!h,p.number=a,p.left=null,p.right=null,p.pcoGeometry=this,p.level=n.length,s=Math.max(s,p.level),n.length>0){var f=n[n.length-1];p.boundingBox=f.boundingBox.clone();var m=f.boundingBox.getSize(new c.Vector3);if(f.hasLeft&&!f.left){f.left=p,f.children.push(p),"X"===f.split?p.boundingBox.max.x=p.boundingBox.min.x+m.x/2:"Y"===f.split?p.boundingBox.max.y=p.boundingBox.min.y+m.y/2:"Z"===f.split&&(p.boundingBox.max.z=p.boundingBox.min.z+m.z/2);var g=new c.Vector3;p.boundingBox.getCenter(g);var v=p.boundingBox.getSize(new c.Vector3).length()/2;p.boundingSphere=new c.Sphere(g,v)}else f.right=p,f.children.push(p),"X"===f.split?p.boundingBox.min.x=p.boundingBox.min.x+m.x/2:"Y"===f.split?p.boundingBox.min.y=p.boundingBox.min.y+m.y/2:"Z"===f.split&&(p.boundingBox.min.z=p.boundingBox.min.z+m.z/2),g=new c.Vector3,p.boundingBox.getCenter(g),v=p.boundingBox.getSize(new c.Vector3).length()/2,p.boundingSphere=new c.Sphere(g,v)}else(o=p).boundingBox=this.boundingBox.clone(),g=new c.Vector3,o.boundingBox.getCenter(g),v=o.boundingBox.getSize(new c.Vector3).length()/2,o.boundingSphere=new c.Sphere(g,v);var y=p.boundingBox.getSize(new c.Vector3);if(p.spacing=(y.x+y.y+y.z)/3/75,p.estimatedSpacing=p.spacing,n.push(p),p.isLeaf)for(var x=!1;!x&&n.length>0;){n.pop();var b=n[n.length-1];x=n.length>0&&b.hasRight&&null==b.right}}this.root=o,this.levels=s,this.dispatchEvent({type:"hierarchy_loaded"})}},t.send(null)}get spacing(){return this._spacing?this._spacing:this.root?this.root.spacing:void 0}set spacing(e){this._spacing=e}}function ue(e){this.content=[],this.scoreFunction=e}ue.prototype={push:function(e){this.content.push(e),this.bubbleUp(this.content.length-1)},pop:function(){var e=this.content[0],t=this.content.pop();return this.content.length>0&&(this.content[0]=t,this.sinkDown(0)),e},remove:function(e){for(var t=this.content.length,i=0;i<t;i++)if(this.content[i]==e){var r=this.content.pop();if(i==t-1)break;this.content[i]=r,this.bubbleUp(i),this.sinkDown(i);break}},size:function(){return this.content.length},bubbleUp:function(e){for(var t=this.content[e],i=this.scoreFunction(t);e>0;){var r=Math.floor((e+1)/2)-1,n=this.content[r];if(i>=this.scoreFunction(n))break;this.content[r]=t,this.content[e]=n,e=r}},sinkDown:function(e){for(var t=this.content.length,i=this.content[e],r=this.scoreFunction(i);;){var n=2*(e+1),o=n-1,s=null;if(o<t){var a=this.content[o],u=this.scoreFunction(a);u<r&&(s=o)}if(n<t){var l=this.content[n];this.scoreFunction(l)<(null==s?r:u)&&(s=n)}if(null==s)break;this.content[e]=this.content[s],this.content[s]=i,e=s}}};var le={position:0,color:1,intensity:2,classification:3,returnNumber:4,numberOfReturns:5,pointSourceID:6,indices:7,normal:8,spacing:9},he={DEFAULT:{0:new c.Vector4(.5,.5,.5,1),1:new c.Vector4(.5,.5,.5,1),2:new c.Vector4(.63,.32,.18,1),3:new c.Vector4(0,1,0,1),4:new c.Vector4(0,.8,0,1),5:new c.Vector4(0,.6,0,1),6:new c.Vector4(1,.66,0,1),7:new c.Vector4(1,0,1,1),8:new c.Vector4(1,0,0,1),9:new c.Vector4(0,0,1,1),12:new c.Vector4(1,1,0,1),DEFAULT:new c.Vector4(.3,.6,.6,.5)}},de={NONE:0,HIGHLIGHT:1,SHOW_INSIDE:2,SHOW_OUTSIDE:3},pe={INSIDE_ANY:0,INSIDE_ALL:1},ce={FIXED:0,ATTENUATED:1,ADAPTIVE:2},fe={SQUARE:0,CIRCLE:1,PARABOLOID:2},me={RGB:0,COLOR:1,DEPTH:2,HEIGHT:3,ELEVATION:3,INTENSITY:4,INTENSITY_GRADIENT:5,LOD:6,LEVEL_OF_DETAIL:6,POINT_INDEX:7,CLASSIFICATION:8,RETURN_NUMBER:9,SOURCE:10,NORMAL:11,PHONG:12,RGB_HEIGHT:13,COMPOSITE:50},ge={OCTREE:0,KDTREE:1},ve={BRIGHTNESS:0,COLOR:1};function ye(e,t,i){var r=function(e){void 0!==t&&(e.name=t),i({type:"pointcloud_loaded",pointcloud:e})};if(0===e.indexOf("greyhound://"))C.load(e,(function(e){void 0!==e&&r(new re(e))}));else if(e.indexOf("cloud.js")>0)H.load(e,(function(e){void 0!==e&&r(new re(e))}));else if(e.indexOf("ept.json")>0)Z.load(e,(function(e){void 0!==e&&r(new re(e))}));else{if(!(e.indexOf(".vpc")>0))throw new Error("Potree: Failed to load point cloud from URL "+e);ae.load(e,(function(e){void 0!==e&&r(new oe(e))}))}}function xe(e,t,i){var r=0,n=new Map(e.map((e=>[e,0]))),o=[],s=[],a=[],u=1/0,l=we(e,t),h=l.frustums,d=l.camObjPositions,f=l.priorityQueue,m=0,g=(i.domElement.clientWidth,i.domElement.clientHeight);p.pointcloudTransformVersion||(p.pointcloudTransformVersion=new Map);for(var v=p.pointcloudTransformVersion,y=0;y<e.length;y++)if((T=e[y]).visible)if(T.updateMatrixWorld(),v.has(T)){var x=v.get(T);x.transform.equals(T.matrixWorld)||(x.number++,x.transform.copy(T.matrixWorld),T.dispatchEvent({type:"transformation_changed",target:T}))}else v.set(T,{number:0,transform:T.matrixWorld.clone()});for(;f.size()>0;){var b=f.pop(),w=b.node,S=b.parent,T=e[b.pointcloud],_=w.getBoundingBox(),A=h[b.pointcloud],E=d[b.pointcloud],B=A.intersectsBox(_),N=T.maxLevel||1/0,I=w.getLevel(),C=B;if(C=(C=C&&!(n.get(T)+w.getNumPoints()>T.pointBudget))&&I<N,w.spacing?u=Math.min(u,w.spacing):w.geometryNode&&w.geometryNode.spacing&&(u=Math.min(u,w.geometryNode.spacing)),C){r+=w.getNumPoints();var P=n.get(T);if(n.set(T,P+w.getNumPoints()),T.numVisibleNodes++,T.numVisiblePoints+=w.getNumPoints(),!w.isGeometryNode()||S&&!S.isTreeNode()||(w.isLoaded()&&m<p.maxNodesLoadGPUFrame?(w=T.toTreeNode(w,S),m++):(a.push(w),s.push(w))),w.isTreeNode()){p.lru.touch(w.geometryNode),w.sceneNode.visible=!0,w.sceneNode.material=T.material,o.push(w),T.visibleNodes.push(w),void 0===w._transformVersion&&(w._transformVersion=-1);var R=v.get(T);if(w._transformVersion!==R.number&&(w.sceneNode.updateMatrix(),w.sceneNode.matrixWorld.multiplyMatrices(T.matrixWorld,w.sceneNode.matrix),w._transformVersion=R.number),T.showBoundingBox&&!w.boundingBoxNode&&w.getBoundingBox){var D=new c.Box3Helper(w.getBoundingBox());D.matrixAutoUpdate=!1,T.boundingBoxNodes.push(D),w.boundingBoxNode=D,w.boundingBoxNode.matrix.copy(T.matrixWorld)}else T.showBoundingBox?(w.boundingBoxNode.visible=!0,w.boundingBoxNode.matrix.copy(T.matrixWorld)):!T.showBoundingBox&&w.boundingBoxNode&&(w.boundingBoxNode.visible=!1)}var M=w.getChildren();for(y=0;y<M.length;y++){var L=M[y],O=0;if(t.isPerspectiveCamera){var z=L.getBoundingSphere(new c.Sphere),U=(z.center,z.center.distanceTo(E)),F=z.radius,V=t.fov*Math.PI/180,G=F*(.5*g/(Math.tan(V/2)*U));if(G<T.minimumNodePixelSize)continue;O=G,U-F<0&&(O=Number.MAX_VALUE)}else{var H=L.getBoundingBox();U=L.getBoundingSphere(new c.Sphere).center.distanceTo(E),O=H.max.clone().sub(H.min).length()/U}f.push({pointcloud:b.pointcloud,node:L,parent:w,weight:O})}}}var k=e.filter((e=>e.generateDEM&&e.dem instanceof DEM));for(var T of k){var W=T.visibleNodes.filter((e=>e.getLevel()<=p.maxDEMLevel));T.dem.update(W)}for(y=0;y<Math.min(p.maxNodesLoading,a.length);y++)a[y].load();return{visibleNodes:o,numVisiblePoints:r,lowestSpacing:u}}function be(e,t,i){for(var r=xe(e,t,i),n=0;n<e.length;n++)e[n].updateMaterial(e[n].material,e[n].visibleNodes,t,i),e[n].updateVisibleBounds();return p.lru.freeMemory(),r}function we(e,t,i){for(var r=[],n=[],o=new ue((function(e){return 1/e.weight})),s=0;s<e.length;s++){var a=e[s];if(a.initialized()){a.numVisibleNodes=0,a.numVisiblePoints=0,a.deepestVisibleLevel=0,a.visibleNodes=[],a.visibleGeometry=[],t.updateMatrixWorld();var u=new c.Frustum,l=t.matrixWorldInverse,h=a.matrixWorld,d=t.clone();d.near=t.near,d.updateProjectionMatrix();var p=t.projectionMatrix,f=(new c.Matrix4).multiply(p).multiply(l).multiply(h);u.setFromProjectionMatrix(f),r.push(u);var m=t.matrixWorld,g=h.clone().invert(),v=(new c.Matrix4).multiply(g).multiply(m),y=(new c.Vector3).setFromMatrixPosition(v);n.push(y),a.visible&&null!==a.root&&o.push({pointcloud:s,node:a.root,weight:Number.MAX_VALUE}),a.root.isTreeNode()&&a.hideDescendants(a.root.sceneNode);for(var x=0;x<a.boundingBoxNodes.length;x++)a.boundingBoxNodes[x].visible=!1}}return{frustums:r,camObjPositions:n,priorityQueue:o}}const Se="1.2.0";class Te{constructor(){this.boundingBox=new c.Box3,this.numPoints=0,this.data={}}add(e){var t=this.numPoints,i=t+e.numPoints,r=Object.keys(this.data),n=Object.keys(e.data),o=new Set([...r,...n]);for(var s of o)if(r.includes(s)&&n.includes(s)){var a=new(0,this.data[s].constructor)(this.data[s].length+e.data[s].length);a.set(this.data[s],0),a.set(e.data[s],this.data[s].length),this.data[s]=a}else if(r.includes(s)&&!n.includes(s)){var u=this.data[s].length/this.numPoints;(l=new(0,this.data[s].constructor)(u*i)).set(this.data[s],0),this.data[s]=l}else if(!r.includes(s)&&n.includes(s)){var l;u=e.data[s].length/e.numPoints,(l=new(0,e.data[s].constructor)(u*i)).set(e.data[s],u*t),this.data[s]=l}this.numPoints=i,this.boundingBox.union(e.boundingBox)}}function _e(e,t){var i;if(t===c.RepeatWrapping)return e.REPEAT;if(t===c.ClampToEdgeWrapping)return e.CLAMP_TO_EDGE;if(t===c.MirroredRepeatWrapping)return e.MIRRORED_REPEAT;if(t===c.NearestFilter)return e.NEAREST;if(t===c.NearestMipMapNearestFilter)return e.NEAREST_MIPMAP_NEAREST;if(t===c.NearestMipMapLinearFilter)return e.NEAREST_MIPMAP_LINEAR;if(t===c.LinearFilter)return e.LINEAR;if(t===c.LinearMipMapNearestFilter)return e.LINEAR_MIPMAP_NEAREST;if(t===c.LinearMipMapLinearFilter)return e.LINEAR_MIPMAP_LINEAR;if(t===c.UnsignedByteType)return e.UNSIGNED_BYTE;if(t===c.UnsignedShort4444Type)return e.UNSIGNED_SHORT_4_4_4_4;if(t===c.UnsignedShort5551Type)return e.UNSIGNED_SHORT_5_5_5_1;if(t===c.UnsignedShort565Type)return e.UNSIGNED_SHORT_5_6_5;if(t===c.ByteType)return e.BYTE;if(t===c.ShortType)return e.SHORT;if(t===c.UnsignedShortType)return e.UNSIGNED_SHORT;if(t===c.IntType)return e.INT;if(t===c.UnsignedIntType)return e.UNSIGNED_INT;if(t===c.FloatType)return e.FLOAT;if(t===c.HalfFloatType&&null!==(i=extensions.get("OES_texture_half_float")))return i.HALF_FLOAT_OES;if(t===c.AlphaFormat)return e.ALPHA;if(t===c.RGBFormat)return e.RGB;if(t===c.RGBAFormat)return e.RGBA;if(t===c.LuminanceFormat)return e.LUMINANCE;if(t===c.LuminanceAlphaFormat)return e.LUMINANCE_ALPHA;if(t===c.DepthFormat)return e.DEPTH_COMPONENT;if(t===c.DepthStencilFormat)return e.DEPTH_STENCIL;if(t===c.AddEquation)return e.FUNC_ADD;if(t===c.SubtractEquation)return e.FUNC_SUBTRACT;if(t===c.ReverseSubtractEquation)return e.FUNC_REVERSE_SUBTRACT;if(t===c.ZeroFactor)return e.ZERO;if(t===c.OneFactor)return e.ONE;if(t===c.SrcColorFactor)return e.SRC_COLOR;if(t===c.OneMinusSrcColorFactor)return e.ONE_MINUS_SRC_COLOR;if(t===c.SrcAlphaFactor)return e.SRC_ALPHA;if(t===c.OneMinusSrcAlphaFactor)return e.ONE_MINUS_SRC_ALPHA;if(t===c.DstAlphaFactor)return e.DST_ALPHA;if(t===c.OneMinusDstAlphaFactor)return e.ONE_MINUS_DST_ALPHA;if(t===c.DstColorFactor)return e.DST_COLOR;if(t===c.OneMinusDstColorFactor)return e.ONE_MINUS_DST_COLOR;if(t===c.SrcAlphaSaturateFactor)return e.SRC_ALPHA_SATURATE;if((t===c.RGB_S3TC_DXT1_Format||t===RGBA_S3TC_DXT1_Format||t===c.RGBA_S3TC_DXT3_Format||t===RGBA_S3TC_DXT5_Format)&&null!==(i=extensions.get("WEBGL_compressed_texture_s3tc"))){if(t===c.RGB_S3TC_DXT1_Format)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===c.RGBA_S3TC_DXT1_Format)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===c.RGBA_S3TC_DXT3_Format)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===c.RGBA_S3TC_DXT5_Format)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((t===c.RGB_PVRTC_4BPPV1_Format||t===c.RGB_PVRTC_2BPPV1_Format||t===c.RGBA_PVRTC_4BPPV1_Format||t===c.RGBA_PVRTC_2BPPV1_Format)&&null!==(i=extensions.get("WEBGL_compressed_texture_pvrtc"))){if(t===c.RGB_PVRTC_4BPPV1_Format)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===c.RGB_PVRTC_2BPPV1_Format)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===c.RGBA_PVRTC_4BPPV1_Format)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===c.RGBA_PVRTC_2BPPV1_Format)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(t===c.RGB_ETC1_Format&&null!==(i=extensions.get("WEBGL_compressed_texture_etc1")))return i.COMPRESSED_RGB_ETC1_WEBGL;if((t===c.MinEquation||t===c.MaxEquation)&&null!==(i=extensions.get("EXT_blend_minmax"))){if(t===c.MinEquation)return i.MIN_EXT;if(t===c.MaxEquation)return i.MAX_EXT}return t===UnsignedInt248Type&&null!==(i=extensions.get("WEBGL_depth_texture"))?i.UNSIGNED_INT_24_8_WEBGL:0}class Ae{constructor(e,t){this.gl=e,this.texture=t,this.id=e.createTexture(),this.target=e.TEXTURE_2D,this.version=-1,this.update(t)}update(){if(this.texture.image){var e=this.gl,t=this.texture;if(this.version!==t.version){this.target=e.TEXTURE_2D,e.bindTexture(this.target,this.id);var i,r=_e(e,t.format),n=t.image.width,o=t.image.height,s=r,a=_e(e,t.type);e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,t.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,t.unpackAlignment),t instanceof c.DataTexture?(i=t.image.data,e.texParameteri(this.target,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(this.target,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(this.target,e.TEXTURE_MAG_FILTER,_e(e,t.magFilter)),e.texParameteri(this.target,e.TEXTURE_MIN_FILTER,_e(e,t.minFilter)),e.texImage2D(this.target,0,r,n,o,0,s,a,i)):t instanceof c.CanvasTexture&&(i=t.image,e.texParameteri(this.target,e.TEXTURE_WRAP_S,_e(e,t.wrapS)),e.texParameteri(this.target,e.TEXTURE_WRAP_T,_e(e,t.wrapT)),e.texParameteri(this.target,e.TEXTURE_MAG_FILTER,_e(e,t.magFilter)),e.texParameteri(this.target,e.TEXTURE_MIN_FILTER,_e(e,t.minFilter)),e.texImage2D(this.target,0,r,r,a,i)),e.bindTexture(this.target,null),this.version=t.version}}else this.version=this.texture.version}}class Ee{constructor(e,t,i,r){this.gl=e,this.name=t,this.vsSource=i,this.fsSource=r,this.cache=new Map,this.vs=null,this.fs=null,this.program=null,this.uniformLocations={},this.attributeLocations={},this.update(i,r)}update(e,t){this.vsSource=e,this.fsSource=t,this.linkProgram()}compileShader(e,t){var i=this.gl;if(i.shaderSource(e,t),i.compileShader(e),!i.getShaderParameter(e,i.COMPILE_STATUS)){var r=i.getShaderInfoLog(e);throw new Error("Potree: Could not compile shader "+this.name+", "+r)}}linkProgram(){var e=this.gl;if(this.uniformLocations={},this.attributeLocations={},e.useProgram(null),h=this.cache.get(`${this.vsSource}, ${this.fsSource}`))return this.program=h.program,this.vs=h.vs,this.fs=h.fs,this.attributeLocations=h.attributeLocations,void(this.uniformLocations=h.uniformLocations);for(var t of(this.vs=e.createShader(e.VERTEX_SHADER),this.fs=e.createShader(e.FRAGMENT_SHADER),this.program=e.createProgram(),Object.keys(le))){var i=le[t];e.bindAttribLocation(this.program,i,t)}this.compileShader(this.vs,this.vsSource),this.compileShader(this.fs,this.fsSource);var r=this.program;if(e.attachShader(r,this.vs),e.attachShader(r,this.fs),e.linkProgram(r),e.detachShader(r,this.vs),e.detachShader(r,this.fs),!e.getProgramParameter(r,e.LINK_STATUS)){var n=e.getProgramInfoLog(r);throw new Error("Potree: Could not link program "+this.name+", "+n)}for(var o=e.getProgramParameter(r,e.ACTIVE_ATTRIBUTES),s=0;s<o;s++){var a=e.getActiveAttrib(r,s);i=e.getAttribLocation(r,a.name),this.attributeLocations[a.name]=i}var u=e.getProgramParameter(r,e.ACTIVE_UNIFORMS);for(s=0;s<u;s++){var l=e.getActiveUniform(r,s);i=e.getUniformLocation(r,l.name),this.uniformLocations[l.name]=i}var h={program:this.program,vs:this.vs,fs:this.fs,attributeLocations:this.attributeLocations,uniformLocations:this.uniformLocations};this.cache.set(`${this.vsSource}, ${this.fsSource}`,h)}setUniformMatrix4(e,t){const i=this.gl,r=this.uniformLocations[e];if(null==r)return;let n=new Float32Array(t.elements);i.uniformMatrix4fv(r,!1,n)}setUniformMatrix4v(e,t){const i=this.gl,r=this.uniformLocations[`${e}[0]`];if(null==r)return;const n=t.forEach((e=>n.push(...e.elements))),o=new Float32Array(n);i.uniformMatrix4fv(r,!1,o)}setUniform1f(e,t){const i=this.gl,r=this.uniformLocations[e];null!=r&&i.uniform1f(r,t)}setUniform1fv(e,t){const i=this.gl,r=this.uniformLocations[`${e}[0]`];null!=r&&i.uniform1fv(r,t)}setUniformBoolean(e,t){const i=this.gl,r=this.uniformLocations[e];null!=r&&i.uniform1i(r,t)}setUniformTexture(e,t){const i=this.gl,r=this.uniformLocations[e];null!=r&&i.uniform1i(r,t)}setUniform2f(e,t){const i=this.gl,r=this.uniformLocations[e];null!=r&&i.uniform2f(r,t[0],t[1])}setUniform3f(e,t){const i=this.gl,r=this.uniformLocations[e];t instanceof c.Color&&(t=t.toArray()),null!=r&&i.uniform3f(r,t[0],t[1],t[2])}setUniform(e,t){t.constructor===c.Matrix4?this.setUniformMatrix4(e,t):t.constructor===c.Color?this.setUniform3f(e,t):"number"==typeof t?this.setUniform1f(e,t):"boolean"==typeof t?this.setUniformBoolean(e,t):t instanceof Ae?this.setUniformTexture(e,t):t instanceof Array?2===t.length?this.setUniform2f(e,t):3===t.length&&this.setUniform3f(e,t):console.error("Potree: Unhandled uniform type: ",e,t)}setUniform1i(e,t){var i=this.gl,r=this.uniformLocations[e];null!=r&&i.uniform1i(r,t)}}class Be{constructor(){this.numElements=0,this.vao=null,this.vbos=new Map}}class Ne extends c.Mesh{constructor(){super(new c.BufferGeometry,new c.MeshBasicMaterial({opacity:0,wireframe:!1,transparent:!0})),this.rotation.set(-Math.PI/2,0,0),this.frustumCulled=!0,this.pointclouds=[],this.nodeSize=30,this.pointBudget=1e10,this.nodeLoadRate=2}raycast(e,t){}setPointBudget(e){this.pointBudget=e}onBeforeRender(e,t,i,r,n,o){for(var s=0;s<this.pointclouds.length;s++)this.pointclouds[s].minimumNodePixelSize=this.nodeSize;be(this.pointclouds,i,e)}recalculateBoxGeometry(){var e=this.getBoundingBox(),t=e.getSize(new c.Vector3),i=e.getCenter(new c.Vector3),r=new c.Matrix4;r.makeTranslation(i.x,-i.z,i.y);var n=new c.BoxBufferGeometry(t.x,t.z,t.y);n.applyMatrix4(r),this.geometry=n}add(e){c.Object3D.prototype.add.call(this,e),e instanceof T&&(e.showBoundingBox=!1,e.generateDEM=!1,this.pointclouds.push(e),this.recalculateBoxGeometry())}remove(e){if(c.Object3D.prototype.remove.call(this,e),e instanceof T){var t=this.pointclouds.indexOf(e);-1!==t&&(this.pointclouds.splice(t,1),this.recalculateBoxGeometry())}}getBoundingBox(){var e=new c.Box3;this.updateMatrixWorld(!0);for(var t=0;t<this.pointclouds.length;t++){var i=this.pointclouds[t];i.updateMatrixWorld(!0);var r=i.pcoGeometry.tightBoundingBox?i.pcoGeometry.tightBoundingBox:i.boundingBox,n=$.computeTransformedBoundingBox(r,i.matrixWorld);e.union(n)}return e}estimateHeightAt(e){var t=null,i=1/0;for(var r of this.pointclouds)if(void 0!==r.root.geometryNode){var n=null,o=1/0,s=e.clone().sub(r.position);s.z=0;for(var a=new c.Ray(s,new c.Vector3(0,0,1)),u=[r.root];u.length>0;){var l=u.pop(),h=l.getBoundingBox();if(a.intersectBox(h)){var d=l.geometryNode.mean.z+r.position.z+l.geometryNode.boundingBox.min.z;for(var p of(l.geometryNode.spacing<=o&&(n=d,o=l.geometryNode.spacing),Object.keys(l.children)))l.children[p].geometryNode&&u.push(l.children[p])}}(null===t||o<i)&&(t=n,i=o)}return t}}class Ie extends Ne{constructor(){super(),this.buffers=new Map,this.shaders=new Map,this.textures=new Map,this.types=new Map}getExtensions(e){this.types.set(Float32Array,e.FLOAT),this.types.set(Uint8Array,e.UNSIGNED_BYTE),this.types.set(Uint16Array,e.UNSIGNED_SHORT);var t=e.getExtension("OES_vertex_array_object");e.createVertexArray=t.createVertexArrayOES.bind(t),e.bindVertexArray=t.bindVertexArrayOES.bind(t)}onBeforeRender(e,t,i,r,n,o){super.onBeforeRender(e,t,i,r,n,o);var s=e.getContext();void 0===s.bindVertexArray&&this.getExtensions(s);var a=this.fetchOctrees();for(var u of a.octrees){var l=u.visibleNodes;this.renderOctree(e,u,l,i)}s.activeTexture(s.TEXTURE1),s.bindTexture(s.TEXTURE_2D,null),e.state.reset()}createBuffer(e,t){var i=new Be;for(var r in i.vao=e.createVertexArray(),i.numElements=t.attributes.position.count,e.bindVertexArray(i.vao),t.attributes){var n=t.attributes[r],o=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,o),e.bufferData(e.ARRAY_BUFFER,n.array,e.STATIC_DRAW);var s=le[r],a=n.normalized,u=this.types.get(n.array.constructor);void 0!==u&&(e.vertexAttribPointer(s,n.itemSize,u,a,0,0),e.enableVertexAttribArray(s)),i.vbos.set(r,{handle:o,name:r,count:n.count,itemSize:n.itemSize,type:t.attributes.position.array.constructor,version:0})}return e.bindBuffer(e.ARRAY_BUFFER,null),e.bindVertexArray(null),i}updateBuffer(e,t){var i=this.buffers.get(t);for(var r in e.bindVertexArray(i.vao),t.attributes){var n=t.attributes[r],o=le[r],s=n.normalized,a=this.types.get(n.array.constructor),u=null;i.vbos.has(r)?(u=i.vbos.get(r).handle,i.vbos.get(r).version=n.version):(u=e.createBuffer(),i.vbos.set(r,{handle:u,name:r,count:n.count,itemSize:n.itemSize,type:t.attributes.position.array.constructor,version:n.version})),e.bindBuffer(e.ARRAY_BUFFER,u),e.bufferData(e.ARRAY_BUFFER,n.array,e.STATIC_DRAW),e.vertexAttribPointer(o,n.itemSize,a,s,0,0),e.enableVertexAttribArray(o)}e.bindBuffer(e.ARRAY_BUFFER,null),e.bindVertexArray(null)}fetchOctrees(){for(var e=[],t=[this];t.length>0;){var i=t.pop();if(i instanceof T)e.push(i);else{var r=i.children.filter((e=>e.visible));t.push(...r)}}return{octrees:e}}renderNodes(e,t,i,r,n,o){var s=e.getContext(),a=t.material,u=n.matrixWorldInverse,l=new c.Matrix4,h=new Float32Array(16);for(var d of i)if(void 0===p.debug.allowedNodes||p.debug.allowedNodes.includes(d.name)){var f=d.sceneNode.matrixWorld;if(l.multiplyMatrices(u,f),r){var m=r.offsets.get(d);o.setUniform1f("uVNStart",m)}var g,v=d.getLevel();o.setUniform("uDebug",!0===d.debug),d instanceof ie?g=0===Object.keys(d.children).length:d instanceof ne&&(g=d.geometryNode.isLeaf),o.setUniform("uIsLeafNode",g);var y=o.uniformLocations.modelMatrix;y&&(h.set(f.elements),s.uniformMatrix4fv(y,!1,h));var x=o.uniformLocations.modelViewMatrix;if(h.set(l.elements),s.uniformMatrix4fv(x,!1,h),a.clipPolygons&&a.clipPolygons.length>0){var b=[],w=[];for(var S of a.clipPolygons){u=S.viewMatrix;var T=S.projMatrix.clone().multiply(u).multiply(f);b.push(S.markers.length),w.push(T)}for(var _=[].concat(...w.map((e=>e.elements))),A=new Array(24*a.clipPolygons.length),E=0;E<a.clipPolygons.length;E++){S=a.clipPolygons[E];for(var B=0;B<S.markers.length;B++)A[24*E+(3*B+0)]=S.markers[B].position.x,A[24*E+(3*B+1)]=S.markers[B].position.y,A[24*E+(3*B+2)]=S.markers[B].position.z}var N=o.uniformLocations["uClipPolygonVCount[0]"];s.uniform1iv(N,b);var I=o.uniformLocations["uClipPolygonWVP[0]"];s.uniformMatrix4fv(I,!1,_);var C=o.uniformLocations["uClipPolygonVertices[0]"];s.uniform3fv(C,A)}o.setUniform1f("uLevel",v),o.setUniform1f("uNodeSpacing",d.geometryNode.estimatedSpacing),o.setUniform1f("uPCIndex",E);var P=d.geometryNode.geometry,R=null;if(this.buffers.has(P))for(var D in R=this.buffers.get(P),P.attributes)P.attributes[D].version>R.vbos.get(D).version&&this.updateBuffer(s,P);else R=this.createBuffer(s,P),this.buffers.set(P,R);s.bindVertexArray(R.vao),s.drawArrays(s.POINTS,0,R.numElements)}s.bindVertexArray(null)}renderOctree(e,t,i,r){var n=e.getContext(),o=t.material,s=r.matrixWorldInverse,a=r.matrixWorld,u=r.projectionMatrix,l=u.clone().invert(),h=(new c.Matrix4,null),d=0;if(o.pointSizeType===ce.ADAPTIVE||o.pointColorType===me.LOD){h=t.computeVisibilityTextureData(i,r);var p=o.visibleNodesTexture;p.image.data.set(h.data),p.needsUpdate=!0}var f=null;this.shaders.has(o)?f=this.shaders.get(o):(f=new Ee(n,"pointcloud",o.vertexShader,o.fragmentShader),this.shaders.set(o,f));var m=o.snapEnabled?o.numSnapshots:0,g=o.clipBoxes&&o.clipBoxes.length?o.clipBoxes.length:0,v=o.clipPolygons&&o.clipPolygons.length?o.clipPolygons.length:0,y=["#define num_shadowmaps"+[].length,"#define num_snapshots"+m,"#define num_clipboxes"+g,"#define num_clipspheres0","#define num_clippolygons"+v].join("\n"),x=y+"\n"+o.vertexShader,b=y+"\n"+o.fragmentShader;for(var w of(f.update(x,b),o.needsUpdate=!1,Object.keys(o.uniforms))){var S=o.uniforms[w];if("t"==S.type){if(!(z=S.value))continue;if(!this.textures.has(z)){var T=new Ae(n,z);this.textures.set(z,T)}this.textures.get(z).update()}}n.useProgram(f.program),o.opacity<1?(n.enable(n.BLEND),n.blendFunc(n.SRC_ALPHA,n.ONE),n.depthMask(!1),n.disable(n.DEPTH_TEST)):(n.disable(n.BLEND),n.depthMask(!0),n.enable(n.DEPTH_TEST)),f.setUniformMatrix4("projectionMatrix",u),f.setUniformMatrix4("viewMatrix",s),f.setUniformMatrix4("uViewInv",a),f.setUniformMatrix4("uProjInv",l);var _=o.screenWidth,A=o.screenHeight;if(f.setUniform1f("uScreenWidth",_),f.setUniform1f("uScreenHeight",A),f.setUniform1f("fov",Math.PI*r.fov/180),f.setUniform1f("near",r.near),f.setUniform1f("far",r.far),e.capabilities.logarithmicDepthBuffer&&f.setUniform("logDepthBufFC",2/(Math.log(r.far+1)/Math.LN2)),r instanceof c.OrthographicCamera?(f.setUniform("uUseOrthographicCamera",!0),f.setUniform("uOrthoWidth",r.right-r.left),f.setUniform("uOrthoHeight",r.top-r.bottom)):f.setUniform("uUseOrthographicCamera",!1),o.clipBoxes.length+o.clipPolygons.length===0?f.setUniform1i("clipTask",de.NONE):f.setUniform1i("clipTask",o.clipTask),f.setUniform1i("clipMethod",o.clipMethod),o.clipBoxes&&o.clipBoxes.length>0){var E=f.uniformLocations["clipBoxes[0]"];n.uniformMatrix4fv(E,!1,o.uniforms.clipBoxes.value)}f.setUniform1f("size",o.size),f.setUniform1f("maxSize",o.uniforms.maxSize.value),f.setUniform1f("minSize",o.uniforms.minSize.value),f.setUniform1f("uOctreeSpacing",o.spacing),f.setUniform("uOctreeSize",o.uniforms.octreeSize.value),f.setUniform3f("uColor",o.color.toArray()),f.setUniform1f("uOpacity",o.opacity),f.setUniform2f("elevationRange",o.elevationRange),f.setUniform2f("intensityRange",o.intensityRange),f.setUniform1f("intensityGamma",o.intensityGamma),f.setUniform1f("intensityContrast",o.intensityContrast),f.setUniform1f("intensityBrightness",o.intensityBrightness),f.setUniform1f("rgbGamma",o.rgbGamma),f.setUniform1f("rgbContrast",o.rgbContrast),f.setUniform1f("rgbBrightness",o.rgbBrightness),f.setUniform1f("uTransition",o.transition),f.setUniform1f("wRGB",o.weightRGB),f.setUniform1f("wIntensity",o.weightIntensity),f.setUniform1f("wElevation",o.weightElevation),f.setUniform1f("wClassification",o.weightClassification),f.setUniform1f("wReturnNumber",o.weightReturnNumber),f.setUniform1f("wSourceID",o.weightSourceID),f.setUniform1fv("hiddenClassifications",o.hiddenClassifications),f.setUniform1f("selectedPointSourceID",o.selectedPointSourceID),f.setUniform3f("selectedPointSourceIDColor",o.selectedPointSourceIDColor);var B=this.textures.get(o.visibleNodesTexture);f.setUniform1i("visibleNodesTexture",d),n.activeTexture(n.TEXTURE0+d),n.bindTexture(B.target,B.id),d++;var N=this.textures.get(o.gradientTexture);f.setUniform1i("gradient",d),n.activeTexture(n.TEXTURE0+d),n.bindTexture(N.target,N.id),d++;var I=this.textures.get(o.classificationTexture);f.setUniform1i("classificationLUT",d),n.activeTexture(n.TEXTURE0+d),n.bindTexture(I.target,I.id),d++;var C=this.textures.get(o.hiddenPointSourceIDsTexture);if(f.setUniform1i("hiddenPointSourceIDs",d),n.activeTexture(n.TEXTURE0+d),n.bindTexture(C.target,C.id),d++,!0===o.snapEnabled){var P=f.uniformLocations["uSnapshot[0]"],R=f.uniformLocations["uSnapshotDepth[0]"],D=d,M=new Array(5).fill(D).map(((e,t)=>e+t)),L=new Array(5).fill(1+Math.max(...M)).map(((e,t)=>e+t));d=1+Math.max(...L),n.uniform1iv(P,M),n.uniform1iv(R,L);for(var O=0;O<5;O++){var z=o.uniforms.uSnapshot.value[O],U=o.uniforms.uSnapshotDepth.value[O];if(!z)break;var F=e.properties.get(z).__webglTexture,V=e.properties.get(U).__webglTexture,G=M[O],H=L[O];n.activeTexture(n[`TEXTURE${G}`]),n.bindTexture(n.TEXTURE_2D,F),n.activeTexture(n[`TEXTURE${H}`]),n.bindTexture(n.TEXTURE_2D,V)}var k=[].concat(...o.uniforms.uSnapView.value.map((e=>e.elements))),W=f.uniformLocations["uSnapView[0]"];n.uniformMatrix4fv(W,!1,k),k=[].concat(...o.uniforms.uSnapProj.value.map((e=>e.elements)));var Y=f.uniformLocations["uSnapProj[0]"];n.uniformMatrix4fv(Y,!1,k),k=[].concat(...o.uniforms.uSnapProjInv.value.map((e=>e.elements)));var j=f.uniformLocations["uSnapProjInv[0]"];n.uniformMatrix4fv(j,!1,k),k=[].concat(...o.uniforms.uSnapViewInv.value.map((e=>e.elements)));var X=f.uniformLocations["uSnapViewInv[0]"];n.uniformMatrix4fv(X,!1,k)}this.renderNodes(e,t,i,h,r,f),n.activeTexture(n.TEXTURE2),n.bindTexture(n.TEXTURE_2D,null),n.activeTexture(n.TEXTURE0)}}})(),module.exports=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL25vZGVfbW9kdWxlcy93b3JrZXItbG9hZGVyL2Rpc3QvcnVudGltZS9pbmxpbmUuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3BvdHJlZS1jb3JlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS91dGlscy9MUlUuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2Uvd29ya2Vycy9CaW5hcnlEZWNvZGVyV29ya2VyLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL3dvcmtlcnMvTEFTRGVjb2Rlcldvcmtlci5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS93b3JrZXJzL0RFTVdvcmtlci5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS93b3JrZXJzL0VwdExhc3ppcERlY29kZXJXb3JrZXIuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2Uvd29ya2Vycy9FcHRCaW5hcnlEZWNvZGVyV29ya2VyLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL3V0aWxzL1dvcmtlck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvR2xvYmFsLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlL2V4dGVybmFsIFwidGhyZWVcIiIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9Qb2ludEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvcG9pbnRjbG91ZC9ERU1Ob2RlLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL3BvaW50Y2xvdWQvREVNLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL3BvaW50Y2xvdWQvUG9pbnRDbG91ZFRyZWUuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvcG9pbnRjbG91ZC9nZW9tZXRyaWVzL1BvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeS5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS91dGlscy9WZXJzaW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvWEhSRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9sb2FkZXJzL0dyZXlob3VuZEJpbmFyeUxvYWRlci5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9sb2FkZXJzL0dyZXlob3VuZFV0aWxzLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL2xvYWRlcnMvR3JleWhvdW5kTG9hZGVyLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL2xvYWRlcnMvQmluYXJ5TG9hZGVyLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL2xvYWRlcnMvTEFTTG9hZGVyLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL2xvYWRlcnMvTEFTTEFaTG9hZGVyLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL3BvaW50Y2xvdWQvZ2VvbWV0cmllcy9Qb2ludENsb3VkT2N0cmVlR2VvbWV0cnkuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvbG9hZGVycy9QT0NMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvbG9hZGVycy9lcHQvRXB0QmluYXJ5TG9hZGVyLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL2xvYWRlcnMvZXB0L0VwdExhc3ppcExvYWRlci5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9wb2ludGNsb3VkL2dlb21ldHJpZXMvUG9pbnRDbG91ZEVwdEdlb21ldHJ5LmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL2xvYWRlcnMvRXB0TG9hZGVyLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL3V0aWxzL0hlbHBlclV0aWxzLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL0dyYWRpZW50cy5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9TaGFkZXJzLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL3BvaW50Y2xvdWQvbWF0ZXJpYWxzL1BvaW50Q2xvdWRNYXRlcmlhbC5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9wb2ludGNsb3VkL1BvaW50Q2xvdWRPY3RyZWUuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvcG9pbnRjbG91ZC9Qb2ludENsb3VkQXJlbmE0RC5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9wb2ludGNsb3VkL2dlb21ldHJpZXMvUG9pbnRDbG91ZEFyZW5hNERHZW9tZXRyeS5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9saWIvQmluYXJ5SGVhcC5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9Qb3RyZWUuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvUG9pbnRzLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL1dlYkdMVGV4dHVyZS5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9TaGFkZXIuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvV2ViR0xCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2Uvb2JqZWN0cy9CYXNpY0dyb3VwLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL29iamVjdHMvR3JvdXAuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNvbnRlbnQiLCJ3b3JrZXJDb25zdHJ1Y3RvciIsIndvcmtlck9wdGlvbnMiLCJ1cmwiLCJnbG9iYWxTY29wZSIsInNlbGYiLCJ3aW5kb3ciLCJibG9iIiwiQmxvYiIsImUiLCJCbG9iQnVpbGRlciIsIldlYktpdEJsb2JCdWlsZGVyIiwiTW96QmxvYkJ1aWxkZXIiLCJNU0Jsb2JCdWlsZGVyIiwiYXBwZW5kIiwiZ2V0QmxvYiIsIlVSTCIsIndlYmtpdFVSTCIsIm9iamVjdFVSTCIsImNyZWF0ZU9iamVjdFVSTCIsIndvcmtlciIsInJldm9rZU9iamVjdFVSTCIsImNvbmNhdCIsImVuY29kZVVSSUNvbXBvbmVudCIsIkVycm9yIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsIkxSVUl0ZW0iLCJub2RlIiwidGhpcyIsInByZXZpb3VzIiwibmV4dCIsIkxSVSIsImZpcnN0IiwibGFzdCIsIml0ZW1zIiwiZWxlbWVudHMiLCJudW1Qb2ludHMiLCJpZCIsIml0ZW0iLCJsb2FkZWQiLCJscnVJdGVtIiwic3RyaW5nIiwiY3VyciIsInNpemUiLCJHbG9iYWwiLCJwb2ludExvYWRMaW1pdCIsImRpc3Bvc2VEZXNjZW5kYW50cyIsInN0YWNrIiwicHVzaCIsImxlbmd0aCIsImN1cnJlbnQiLCJwb3AiLCJkaXNwb3NlIiwicmVtb3ZlIiwiY2hpbGRyZW4iLCJXb3JrZXJfZm4iLCJXb3JrZXJNYW5hZ2VyIiwid29ya2VycyIsImkiLCJ0eXBlIiwib25NZXNzYWdlIiwibWVzc2FnZSIsInRyYW5zZmVyIiwiZ2V0V29ya2VyIiwib25tZXNzYWdlIiwiZXZlbnQiLCJyZXR1cm5Xb3JrZXIiLCJwb3N0TWVzc2FnZSIsIkJJTkFSWV9ERUNPREVSIiwiTEFTX0xBWiIsIkxBU19ERUNPREVSIiwiR1JFWUhPVU5EIiwiREVNIiwiRVBUX0xBU19aSVBfREVDT0RFUiIsIkVQVF9CSU5BUllfREVDT0RFUiIsImRlYnVnIiwid29ya2VyUGF0aCIsInNjcmlwdHMiLCJjdXJyZW50U2NyaXB0IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEF0dHJpYnV0ZSIsInNyYyIsInNjcmlwdFBhdGgiLCJocmVmIiwic2xpY2UiLCJjb25zb2xlIiwiZXJyb3IiLCJnZXRCYXNlUGF0aCIsIm1heE5vZGVzTG9hZEdQVUZyYW1lIiwibWF4REVNTGV2ZWwiLCJtYXhOb2Rlc0xvYWRpbmciLCJuYXZpZ2F0b3IiLCJoYXJkd2FyZUNvbmN1cnJlbmN5IiwibnVtTm9kZXNMb2FkaW5nIiwibWVhc3VyZVRpbWluZ3MiLCJ3b3JrZXJQb29sIiwibHJ1IiwicG9pbnRjbG91ZFRyYW5zZm9ybVZlcnNpb24iLCJyZXF1aXJlIiwiUG9pbnRBdHRyaWJ1dGVOYW1lcyIsIlBPU0lUSU9OX0NBUlRFU0lBTiIsIkNPTE9SX1BBQ0tFRCIsIkNPTE9SX0ZMT0FUU18xIiwiQ09MT1JfRkxPQVRTXzI1NSIsIk5PUk1BTF9GTE9BVFMiLCJGSUxMRVIiLCJJTlRFTlNJVFkiLCJDTEFTU0lGSUNBVElPTiIsIk5PUk1BTF9TUEhFUkVNQVBQRUQiLCJOT1JNQUxfT0NUMTYiLCJOT1JNQUwiLCJSRVRVUk5fTlVNQkVSIiwiTlVNQkVSX09GX1JFVFVSTlMiLCJTT1VSQ0VfSUQiLCJJTkRJQ0VTIiwiU1BBQ0lORyIsIlBvaW50QXR0cmlidXRlVHlwZXMiLCJEQVRBX1RZUEVfRE9VQkxFIiwib3JkaW5hbCIsIkRBVEFfVFlQRV9GTE9BVCIsIkRBVEFfVFlQRV9JTlQ4IiwiREFUQV9UWVBFX1VJTlQ4IiwiREFUQV9UWVBFX0lOVDE2IiwiREFUQV9UWVBFX1VJTlQxNiIsIkRBVEFfVFlQRV9JTlQzMiIsIkRBVEFfVFlQRV9VSU5UMzIiLCJEQVRBX1RZUEVfSU5UNjQiLCJEQVRBX1RZUEVfVUlOVDY0IiwiUG9pbnRBdHRyaWJ1dGUiLCJuYW1lIiwibnVtRWxlbWVudHMiLCJieXRlU2l6ZSIsIlBvaW50QXR0cmlidXRlcyIsInBvaW50QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJwb2ludEF0dHJpYnV0ZSIsIlJHQkFfUEFDS0VEIiwiUkdCX1BBQ0tFRCIsIkZJTExFUl8xQiIsImFkZCIsImhhc0NvbG9ycyIsImhhc05vcm1hbHMiLCJERU1Ob2RlIiwiYm94IiwidGlsZVNpemUiLCJsZXZlbCIsImRhdGEiLCJGbG9hdDMyQXJyYXkiLCJmaWxsIiwibWlwTWFwIiwibWlwTWFwTmVlZHNVcGRhdGUiLCJzb3VyY2VTaXplIiwibWlwU2l6ZSIsInBhcnNlSW50IiwibWlwU291cmNlIiwibWlwRGF0YSIsImoiLCJoMDAiLCJoMDEiLCJoMTAiLCJoMTEiLCJoZWlnaHQiLCJ3ZWlnaHQiLCJpc0Zpbml0ZSIsInBvc2l0aW9uIiwiYm94U2l6ZSIsImdldFNpemUiLCJ4IiwibWluIiwieSIsIm1pcE1hcExldmVsIiwidXYiLCJNYXRoIiwiYiIsImkwIiwiaTEiLCJmbG9vciIsImNlaWwiLCJqMCIsImoxIiwid2gwMCIsIndoMDEiLCJ3aDEwIiwid2gxMSIsIndzdW0iLCJoIiwiaGVpZ2h0QXRNaXBNYXBMZXZlbCIsImhhbmRsZXIiLCJjaGlsZCIsImZpbHRlciIsImMiLCJ0cmF2ZXJzZSIsInBvaW50Y2xvdWQiLCJtYXRyaXgiLCJib3VuZGluZ0JveCIsInJvb3QiLCJ2ZXJzaW9uIiwicmVzdWx0Iiwibm9kZUJveFNpemUiLCJtYXgiLCJpbmRleCIsImNoaWxkQm94IiwiY2xvbmUiLCJtYXAiLCJsaXN0IiwiY3VycmVudEhlaWdodCIsImNoaWxkSW5kZXgiLCJ6IiwidmlzaWJsZU5vZGVzIiwiZXF1YWxzIiwibWF0cml4V29ybGQiLCJhcHBseU1hdHJpeDQiLCJ2biIsImRlbVZlcnNpb24iLCJwcm9qZWN0ZWRCb3giLCJnZXRCb3VuZGluZ0JveCIsInByb2plY3RlZEJveFNpemUiLCJ0YXJnZXROb2RlcyIsImV4cGFuZEFuZEZpbmRCeUJveCIsImdldExldmVsIiwiZ2VvbWV0cnlOb2RlIiwiZ2VvbWV0cnkiLCJhcnJheSIsInRvQXJyYXkiLCJidWZmZXIiLCJ0cmFuc2ZlcmFibGVzIiwicnVuVGFzayIsImRlbSIsImRlbU5vZGUiLCJ1IiwidiIsIml4IiwiaXkiLCJjcmVhdGVNaXBNYXAiLCJQb2ludENsb3VkVHJlZU5vZGUiLCJuZWVkc1RyYW5zZm9ybVVwZGF0ZSIsIlBvaW50Q2xvdWRUcmVlIiwic3VwZXIiLCJQb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnkiLCJzcGFjaW5nIiwibm9kZXMiLCJoaWVyYXJjaHlTdGVwU2l6ZSIsImxvYWRlciIsInNjaGVtYSIsImJhc2VEZXB0aCIsIm9mZnNldCIsInByb2plY3Rpb24iLCJib3VuZGluZ1NwaGVyZSIsInNlcnZlclVSTCIsIm5vcm1hbGl6ZSIsImNvbG9yIiwiaW50ZW5zaXR5IiwiUG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5Tm9kZSIsInBjb0dlb21ldHJ5Iiwic2NhbGUiLCJJRENvdW50IiwiY2hhckF0IiwiZ2V0Qm91bmRpbmdTcGhlcmUiLCJvbmVUaW1lRGlzcG9zZUhhbmRsZXJzIiwiYmFzZUxvYWRlZCIsImNlbnRlciIsImJvdW5kcyIsInN1YiIsImdldENlbnRlciIsIm11bHRpcGx5U2NhbGFyIiwiZ3JleWhvdW5kQm91bmRzIiwiZ3JleWhvdW5kT2Zmc2V0IiwiVmVyc2lvblV0aWxzIiwidm1MZW5ndGgiLCJpbmRleE9mIiwidmVyc2lvbk1ham9yIiwic3Vic3RyIiwidmVyc2lvbk1pbm9yIiwiY3JlYXRlIiwiaXNHZW9tZXRyeU5vZGUiLCJpc1RyZWVOb2RlIiwiaXNMb2FkZWQiLCJnZXRDaGlsZHJlbiIsImdldFVSTCIsImJvdW5kc1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJhZGRDaGlsZCIsInBhcmVudCIsImxvYWQiLCJsb2FkaW5nIiwiaGFzQ2hpbGRyZW4iLCJsb2FkSGllcmFyY2h5VGhlblBvaW50cyIsImxvYWRQb2ludHMiLCJ0cmFuc2Zvcm0iLCJwYXJzZUNoaWxkcmVuQ291bnRzIiwiYmFzZSIsInBhcmVudE5hbWUiLCJjaGlsZE5hbWUiLCJrZXlzIiwiZm9yRWFjaCIsInN3ZCIsIm53ZCIsInN3dSIsIm53dSIsInNlZCIsIm5lZCIsInNldSIsIm5ldSIsIm1hc2siLCJkZXB0aEJlZ2luIiwiZGVwdGhFbmQiLCJodXJsIiwieGhyIiwiWEhSRmFjdG9yeSIsImNyZWF0ZVhNTEh0dHBSZXF1ZXN0Iiwib3ZlcnJpZGVNaW1lVHlwZSIsIm9wZW4iLCJvbmxvYWQiLCJncmV5aG91bmRIaWVyYXJjaHkiLCJkZWNvZGVkIiwicGdnIiwicGFyZW50Tm9kZSIsInN1YnN0cmluZyIsImN1cnJlbnROb2RlIiwiR3JleWhvdW5kTG9hZGVyIiwiY3JlYXRlQ2hpbGRBQUJCIiwicG93IiwiY2FsbGJhY2siLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsIm9uZXJyb3IiLCJsb2ciLCJzdGF0dXMiLCJzZW5kIiwiZ2V0TnVtUG9pbnRzIiwiYXNzaWduIiwibmV3ZXJUaGFuIiwiZXF1YWxPckhpZ2hlciIsInVwVG8iLCJjb25maWciLCJ3aXRoQ3JlZGVudGlhbHMiLCJjdXN0b21IZWFkZXJzIiwiaGVhZGVyIiwiWE1MSHR0cFJlcXVlc3QiLCJBcnJheSIsImlzQXJyYXkiLCJiYXNlT3BlbiIsImFwcGx5IiwiYXJndW1lbnRzIiwiY3VzdG9tSGVhZGVyIiwic2V0UmVxdWVzdEhlYWRlciIsImZldGNoIiwiYXN5bmMiLCJyZXNvdXJjZSIsImhlYWRlcnMiLCJIZWFkZXJzIiwib3B0aW9ucyIsImNyZWRlbnRpYWxzIiwiR3JleWhvdW5kQmluYXJ5TG9hZGVyIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2UiLCJEYXRhVmlldyIsImJ5dGVMZW5ndGgiLCJnZXRVaW50MzIiLCJiYiIsIlRIUkVFIiwiVmVjdG9yMyIsIm5vZGVPZmZzZXQiLCJidWZmZXJzIiwiYXR0cmlidXRlQnVmZmVycyIsInRpZ2h0Qm91bmRpbmdCb3giLCJCb3gzIiwiZnJvbUFycmF5IiwiQnVmZmVyR2VvbWV0cnkiLCJwcm9wZXJ0eSIsInNldEF0dHJpYnV0ZSIsIkJ1ZmZlckF0dHJpYnV0ZSIsIlVpbnQ4QXJyYXkiLCJidWZmZXJBdHRyaWJ1dGUiLCJub3JtYWxpemVkIiwic2V0IiwibWVhbiIsIkdyZXlob3VuZFV0aWxzIiwicmVwbGFjZSIsInJlc3VsdHMiLCJSZWdFeHAiLCJleGVjIiwibG9jYXRpb24iLCJkZWNvZGVVUklDb21wb25lbnQiLCJjYiIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZWR1Y2UiLCJwIiwicyIsImZldGNoQmluYXJ5IiwiZXJyIiwidmlldyIsIm51bUJ5dGVzIiwicG9pbnRTaXplIiwicG9pbnRTaXplRnJvbSIsImNvbG9yTm9ybSIsImludGVuc2l0eU5vcm0iLCJnZXRVaW50MTYiLCJsb2FkSW5mb0pTT04iLCJzcGxpdCIsImdyZXlob3VuZEluZm8iLCJnZXRRdWVyeVBhcmFtIiwicGFyc2VGbG9hdCIsInJlZCIsImdyZWVuIiwiYmx1ZSIsImVudHJ5IiwiY3JlYXRlU2NoZW1hIiwic3JzIiwiU3BoZXJlIiwiZ2V0Tm9ybWFsaXphdGlvbiIsIl8iLCJsb2FkUG9pbnRBdHRyaWJ1dGVzIiwibW5vIiwiZnBhIiwicGEiLCJhYWJiIiwiZEhhbGZMZW5ndGgiLCJjb3B5IiwieEhhbGZMZW5ndGgiLCJ5SGFsZkxlbmd0aCIsInpIYWxmTGVuZ3RoIiwiY21pbiIsImNtYXgiLCJCaW5hcnlMb2FkZXIiLCJlc3RpbWF0ZWRTcGFjaW5nIiwicG9pbnRGb3JtYXRSZWFkZXJzIiwiZHYiLCJnZXRJbnQzMiIsImdldFVpbnQ4IiwicmVhZEFzIiwiYnVmIiwiVHlwZSIsImNvdW50IiwiQllURVNfUEVSX0VMRU1FTlQiLCJyZXQiLCJMQVNMb2FkZXIiLCJhcnJheWJ1ZmZlciIsIkxBWkxvYWRlciIsIm5leHRDQiIsImRvcnIiLCJyZXEiLCJMQVNGaWxlIiwiZGV0ZXJtaW5lVmVyc2lvbiIsImRldGVybWluZUZvcm1hdCIsImZvcm1hdElkIiwiaXNDb21wcmVzc2VkIiwiTEFTRGVjb2RlciIsInBvaW50Rm9ybWF0SUQiLCJwb2ludHNDb3VudCIsIm1pbnMiLCJtYXhzIiwiYXJyYXliIiwiZGVjb2RlciIsInJlYWRPZmZzZXQiLCJQcm9taXNlIiwicmVzIiwicmVqIiwic2V0VGltZW91dCIsImdldEhlYWRlciIsInBvaW50c09mZnNldCIsIlVpbnQzMkFycmF5IiwicG9pbnRzRm9ybWF0SWQiLCJwb2ludHNTdHJ1Y3RTaXplIiwiVWludDE2QXJyYXkiLCJzdGFydCIsIkZsb2F0NjRBcnJheSIsInBhcnNlTEFTSGVhZGVyIiwicmVhZERhdGEiLCJza2lwIiwiZW5kIiwiaGFzTW9yZURhdGEiLCJwb2ludHNUb1JlYWQiLCJidWZmZXJTaXplIiwicG9pbnRzUmVhZCIsImNsb3NlIiwiYml0XzciLCJiaXRfNiIsInZlciIsIkludDhBcnJheSIsInZlcnNpb25Bc1N0cmluZyIsImdldFBvaW50IiwiTEFTTEFaTG9hZGVyIiwidG9Mb3dlckNhc2UiLCJBcnJheUJ1ZmZlciIsImxmIiwiTEFTTEFaQmF0Y2hlciIsInRoZW4iLCJtc2ciLCJpc09wZW4iLCJ0b3RhbFJlYWQiLCJyZWFkZXIiLCJjYXRjaCIsInBvc2l0aW9ucyIsImNvbG9ycyIsImludGVuc2l0aWVzIiwiY2xhc3NpZmljYXRpb25zIiwiY2xhc3NpZmljYXRpb24iLCJyZXR1cm5OdW1iZXJzIiwicmV0dXJuTnVtYmVyIiwibnVtYmVyT2ZSZXR1cm5zIiwicG9pbnRTb3VyY2VJRHMiLCJwb2ludFNvdXJjZUlEIiwiaW5kaWNlcyIsIlBvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeSIsIm9jdHJlZURpciIsIlBvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeU5vZGUiLCJnZXRIaWVyYXJjaHlQYXRoIiwicGF0aCIsIm51bVBhcnRzIiwibG9hZEhpZXJhY2h5VGhlblBvaW50cyIsImhidWZmZXIiLCJzbm9kZSIsInNoaWZ0IiwiY2hpbGRDaGlsZHJlbiIsImNoaWxkTnVtUG9pbnRzIiwicGNvIiwiZGVjb2RlZE51bVBvaW50cyIsIlBPQ0xvYWRlciIsImx4IiwibHkiLCJseiIsInV4IiwidXkiLCJ1eiIsInRpZ2h0Qm91bmRpbmdTcGhlcmUiLCJoaWVyYXJjaHkiLCJzdWJWZWN0b3JzIiwiRXB0QmluYXJ5TG9hZGVyIiwiZyIsInBvaW50U291cmNlSWQiLCJkb25lTG9hZGluZyIsImVwdCIsImVwdFNjYWxlIiwiZXB0T2Zmc2V0IiwiRXB0TGFzemlwTG9hZGVyIiwiRXB0TGF6QmF0Y2hlciIsInJlYWQiLCJleHRyYUJ5dGVzIiwibGFzIiwiVXRpbHMiLCJ0b1ZlY3RvcjMiLCJkaW0iLCJmaW5kIiwiUG9pbnRDbG91ZEVwdEdlb21ldHJ5IiwiaW5mbyIsImJvdW5kc0NvbmZvcm1pbmciLCJ4eXoiLCJmaW5kRGltIiwic3BhbiIsInRpY2tzIiwidG9Cb3gzIiwic3BoZXJlRnJvbSIsImZhbGxiYWNrUHJvamVjdGlvbiIsImhvcml6b250YWwiLCJhdXRob3JpdHkiLCJ3a3QiLCJoaWVyYXJjaHlUeXBlIiwiZGF0YVR5cGUiLCJFcHRLZXkiLCJkc3QiLCJzdGVwIiwiaW5jbHVkZXMiLCJQb2ludENsb3VkRXB0R2VvbWV0cnlOb2RlIiwiayIsInRvUG90cmVlTmFtZSIsImZpbGVuYW1lIiwibG9hZEhpZXJhcmNoeSIsImVwdEhpZXJhcmNoeUZpbGUiLCJoaWVyIiwianNvbiIsInNvcnQiLCJkYSIsInhhIiwieWEiLCJ6YSIsImRiIiwieGIiLCJ5YiIsInpiIiwiYnVmZmVyR2VvbWV0cnkiLCJucCIsIkVwdExvYWRlciIsImZpbGUiLCJsYXN0SW5kZXhPZiIsIkhlbHBlclV0aWxzIiwid2lkdGgiLCJ0ZXh0dXJlIiwibmVlZHNVcGRhdGUiLCJtYWdGaWx0ZXIiLCJ2ZXJ0aWNlcyIsInNldEZyb21Qb2ludHMiLCJHcmFkaWVudHMiLCJSQUlOQk9XIiwiU1BFQ1RSQUwiLCJQTEFTTUEiLCJZRUxMT1dfR1JFRU4iLCJWSVJJRElTIiwiSU5GRVJOTyIsIkdSQVlTQ0FMRSIsImdsc2wiLCJzdHJpbmdzIiwicmF3IiwiU2hhZGVycyIsInZlcnRleCIsImZyYWdtZW50IiwiUG9pbnRDbG91ZE1hdGVyaWFsIiwicGFyYW1ldGVycyIsInZpc2libGVOb2Rlc1RleHR1cmUiLCJnZW5lcmF0ZURhdGFUZXh0dXJlIiwibWluRmlsdGVyIiwiZ2V0VmFsaWQiLCJtaW5TaXplIiwibWF4U2l6ZSIsInRyZWVUeXBlIiwiVHJlZVR5cGUiLCJPQ1RSRUUiLCJfcG9pbnRTaXplVHlwZSIsIlBvaW50U2l6ZVR5cGUiLCJGSVhFRCIsIl9zaGFwZSIsIlBvaW50U2hhcGUiLCJTUVVBUkUiLCJfcG9pbnRDb2xvclR5cGUiLCJQb2ludENvbG9yVHlwZSIsIlJHQiIsIl91c2VDbGlwQm94IiwiX3dlaWdodGVkIiwiX2dyYWRpZW50IiwiX3RyZWVUeXBlIiwiX3VzZUVETCIsIl9zbmFwRW5hYmxlZCIsIl9udW1TbmFwc2hvdHMiLCJfZGVmYXVsdEludGVuc2l0eVJhbmdlQ2hhbmdlZCIsIl9kZWZhdWx0RWxldmF0aW9uUmFuZ2VDaGFuZ2VkIiwiX3BvaW50U2VsZWN0aW9uVHlwZSIsIlBvaW50U2VsZWN0aW9uVHlwZSIsIkJSSUdIVE5FU1MiLCJjbGlwQm94ZXMiLCJjbGlwUG9seWdvbnMiLCJncmFkaWVudFRleHR1cmUiLCJnZW5lcmF0ZUdyYWRpZW50VGV4dHVyZSIsImxpZ2h0cyIsImZvZyIsImRlZmluZXMiLCJNYXAiLCJub3JtYWwiLCJ1bmlmb3JtcyIsInZuU3RhcnQiLCJibGVuZEhhcmRuZXNzIiwiYmxlbmREZXB0aFN1cHBsZW1lbnQiLCJmb3YiLCJzY3JlZW5XaWR0aCIsInNjcmVlbkhlaWdodCIsIm5lYXIiLCJmYXIiLCJ1Q29sb3IiLCJ1T3BhY2l0eSIsIm9jdHJlZVNpemUiLCJiYlNpemUiLCJlbGV2YXRpb25SYW5nZSIsImNsaXBCb3hDb3VudCIsImNsaXBQb2x5Z29uQ291bnQiLCJjbGlwUG9seWdvblZDb3VudCIsImNsaXBQb2x5Z29uVlAiLCJwY0luZGV4IiwiZ3JhZGllbnQiLCJjbGFzc2lmaWNhdGlvbkxVVCIsImNsYXNzaWZpY2F0aW9uVGV4dHVyZSIsInVIUURlcHRoTWFwIiwidG9Nb2RlbCIsImRpZmZ1c2UiLCJ0cmFuc2l0aW9uIiwiaW50ZW5zaXR5UmFuZ2UiLCJpbnRlbnNpdHlHYW1tYSIsImludGVuc2l0eUNvbnRyYXN0IiwiaW50ZW5zaXR5QnJpZ2h0bmVzcyIsInJnYkdhbW1hIiwicmdiQ29udHJhc3QiLCJyZ2JCcmlnaHRuZXNzIiwid1JHQiIsIndJbnRlbnNpdHkiLCJ3RWxldmF0aW9uIiwid0NsYXNzaWZpY2F0aW9uIiwid1JldHVybk51bWJlciIsIndTb3VyY2VJRCIsInVzZU9ydGhvZ3JhcGhpY0NhbWVyYSIsImNsaXBUYXNrIiwiY2xpcE1ldGhvZCIsInVTbmFwc2hvdCIsInVTbmFwc2hvdERlcHRoIiwidVNuYXBWaWV3IiwidVNuYXBQcm9qIiwidVNuYXBQcm9qSW52IiwidVNuYXBWaWV3SW52IiwidVNoYWRvd0NvbG9yIiwidUZpbHRlclJldHVybk51bWJlclJhbmdlIiwidUZpbHRlck51bWJlck9mUmV0dXJuc1JhbmdlIiwidUZpbHRlckdQU1RpbWVDbGlwUmFuZ2UiLCJoaWRkZW5DbGFzc2lmaWNhdGlvbnMiLCJoaWRkZW5Qb2ludFNvdXJjZUlEcyIsInNlbGVjdGVkUG9pbnRTb3VyY2VJRCIsInNlbGVjdGVkUG9pbnRTb3VyY2VJRENvbG9yIiwiQ2xhc3NpZmljYXRpb24iLCJERUZBVUxUIiwiZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyIsImdldERlZmluZXMiLCJ2ZXJ0ZXhTaGFkZXIiLCJmcmFnbWVudFNoYWRlciIsInZlcnRleENvbG9ycyIsInVwZGF0ZVNoYWRlclNvdXJjZSIsInJlbW92ZURlZmluZSIsImRlbGV0ZSIsIm9wYWNpdHkiLCJibGVuZGluZyIsInRyYW5zcGFyZW50IiwiZGVwdGhUZXN0IiwiZGVwdGhXcml0ZSIsImRlcHRoRnVuYyIsInVzZUVETCIsIndlaWdodGVkIiwic2hhZGVyIiwicmVuZGVyZXIiLCJjYXBhYmlsaXRpZXMiLCJsb2dhcml0aG1pY0RlcHRoQnVmZmVyIiwiZGVmaW5lIiwicG9pbnRTaXplVHlwZSIsIkFUVEVOVUFURUQiLCJBREFQVElWRSIsInNoYXBlIiwiQ0lSQ0xFIiwiUEFSQUJPTE9JRCIsIkNPTE9SIiwiREVQVEgiLCJIRUlHSFQiLCJJTlRFTlNJVFlfR1JBRElFTlQiLCJMT0QiLCJQT0lOVF9JTkRFWCIsIlNPVVJDRSIsIlBIT05HIiwiUkdCX0hFSUdIVCIsIkNPTVBPU0lURSIsIktEVFJFRSIsInBvaW50U2VsZWN0aW9uVHlwZSIsImpvaW4iLCJkb1VwZGF0ZSIsImludmVyc2UiLCJOdW1iZXIiLCJpc05hTiIsIkluZmluaXR5IiwibWF4UG9seWdvblZlcnRpY2VzIiwiX2NsYXNzaWZpY2F0aW9uIiwiaXNFcXVhbCIsInJlY29tcHV0ZUNsYXNzaWZpY2F0aW9uIiwiZ2VuZXJhdGVDbGFzc2lmaWNhdGlvblRleHR1cmUiLCJkaXNwYXRjaEV2ZW50IiwidGFyZ2V0IiwiZ2V0RGlzdGluY3RGViIsIl9oaWRkZW5Qb2ludFNvdXJjZUlEcyIsInJlY29tcHV0ZUhpZGRlblBvaW50U291cmNlSURzIiwiU2V0IiwibW9kZSIsImNhbnZhcyIsImNyZWF0ZUVsZW1lbnQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInJlY3QiLCJjdHhHcmFkaWVudCIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwiZ2V0SGV4U3RyaW5nIiwiZmlsbFN0eWxlIiwidyIsIl9oaWRkZW5MaXN0ZW5lcnMiLCJfbGlzdGVuZXJzIiwiZnJvbSIsIlBvaW50Q2xvdWRPY3RyZWVOb2RlIiwic2NlbmVOb2RlIiwib2N0cmVlIiwiYm94Tm9kZSIsInBvc09mZnNldCIsInN0cmlkZSIsIndvcmxkVG9Cb3giLCJnZXRJbnZlcnNlIiwib2JqZWN0VG9Cb3giLCJtdWx0aXBseU1hdHJpY2VzIiwiaW5Cb3giLCJwb3MiLCJnZXRGbG9hdDMyIiwiUG9pbnRDbG91ZE9jdHJlZSIsIm1hdGVyaWFsIiwicG9pbnRCdWRnZXQiLCJ2aXNpYmxlUG9pbnRzVGFyZ2V0IiwibWluaW11bU5vZGVQaXhlbFNpemUiLCJ1cGRhdGVNYXRyaXgiLCJzaG93Qm91bmRpbmdCb3giLCJib3VuZGluZ0JveE5vZGVzIiwibG9hZFF1ZXVlIiwidmlzaWJsZUJvdW5kcyIsInZpc2libGVHZW9tZXRyeSIsImdlbmVyYXRlREVNIiwicHJvZmlsZVJlcXVlc3RzIiwidGVtcFZlY3RvcjMiLCJnZXRCb3VuZGluZ0JveFdvcmxkIiwidXBkYXRlTWF0cml4V29ybGQiLCJiTWluIiwiY29tcHV0ZVRyYW5zZm9ybWVkQm91bmRpbmdCb3giLCJiTWF4IiwiaGVpZ2h0TWluIiwiaGVpZ2h0TWF4IiwiZnJ1c3R1bUN1bGxlZCIsIm9uQmVmb3JlUmVuZGVyIiwiX3RoaXMiLCJzY2VuZSIsImNhbWVyYSIsImdyb3VwIiwicHJvZ3JhbSIsInVzZVByb2dyYW0iLCJnZXRVbmlmb3JtcyIsInNldFZhbHVlIiwidmlzaWJsZU5vZGVUZXh0dXJlT2Zmc2V0cyIsImxlYWZOb2RlcyIsImlzTGVhZiIsInZpc2libGUiLCJleHBhbmRCeVBvaW50IiwiUEkiLCJkb21FbGVtZW50IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJwZXJmb3JtYW5jZSIsIm1hcmsiLCJuYSIsIm5iIiwidjEiLCJpbnRlcnNlY3RTcGhlcmVCYWNrIiwicmF5Iiwic3BoZXJlIiwib3JpZ2luIiwidGNhIiwiZG90IiwiZGlyZWN0aW9uIiwiZDIiLCJyYWRpdXMyIiwicmFkaXVzIiwidDEiLCJzcXJ0IiwibG9kUmFuZ2VzIiwibGVhZk5vZGVMb2RSYW5nZXMiLCJjb25zdHJ1Y3RvciIsInZBcnJheUluZGV4IiwiYlNwaGVyZSIsIm1hdHJpeFdvcmxkSW52ZXJzZSIsImRpc3RhbmNlIiwiZ2V0V29ybGREaXJlY3Rpb24iLCJkaXN0YW5jZTIiLCJkaXN0YW5jZVRvIiwiaGFzIiwicHJldkRpc3RhbmNlIiwibmV3RGlzdGFuY2UiLCJsb2QiLCJyYW5nZSIsIm1lYXN1cmUiLCJvZmZzZXRzIiwicHJvZmlsZSIsImJzV29ybGQiLCJpbnRlcnNlY3RzIiwicG9pbnRzIiwiY2xvc2VzdFBvaW50VG9Qb2ludCIsIm5vZGVzT25SYXkiLCJfcmF5IiwiaW50ZXJzZWN0c1NwaGVyZSIsImZvcmNlIiwibWF0cml4QXV0b1VwZGF0ZSIsIm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJvYmplY3QiLCJ0Qm94IiwibWF4RGVwdGgiLCJzZWdtZW50cyIsInByb2plY3RlZEJvdW5kaW5nQm94IiwicHMiLCJnZXRQcm9maWxlIiwic2VnbWVudCIsInByb2plY3QiLCJtaWxlYWdlIiwiX3N0YXJ0IiwiX2VuZCIsIl9taWxlYWdlIiwiX2JvdW5kaW5nQm94IiwieEF4aXMiLCJkaXIiLCJhbHBoYSIsImFjb3MiLCJ0b09yaWdpbiIsIm1ha2VUcmFuc2xhdGlvbiIsImFsaWduV2l0aFgiLCJtYWtlUm90YXRpb25ZIiwiYXBwbHlNaWxlYWdlIiwiZGVwdGgiLCJ2aWV3ZXIiLCJwYXJhbXMiLCJwUmVuZGVyZXIiLCJnZXRWYWwiLCJwaWNrV2luZG93U2l6ZSIsInBpY2tPdXRzaWRlQ2xpcFJlZ2lvbiIsInBpY2tTdGF0ZSIsInBvaW50Q29sb3JUeXBlIiwicmVuZGVyVGFyZ2V0IiwiZm9ybWF0IiwicGlja01hdGVyaWFsIiwicGlja0NsaXBwZWQiLCJDbGlwVGFzayIsIkhJR0hMSUdIVCIsIk5PTkUiLCJ1cGRhdGVNYXRlcmlhbCIsInNldFNpemUiLCJwaXhlbFBvcyIsImdsIiwiZW5hYmxlIiwiU0NJU1NPUl9URVNUIiwic2Npc3NvciIsInN0YXRlIiwic2V0VGVzdCIsInNldE1hc2siLCJzZXRCbGVuZGluZyIsInNldFJlbmRlclRhcmdldCIsImNsZWFyQ29sb3IiLCJjbGVhclRhcmdldCIsInRtcCIsInJlbmRlck9jdHJlZSIsImNsYW1wIiwibnVtYmVyIiwicmVhZFBpeGVscyIsIlJHQkEiLCJVTlNJR05FRF9CWVRFIiwicmVzZXRHTFN0YXRlIiwic2V0U2Npc3NvclRlc3QiLCJkaXNhYmxlIiwicGl4ZWxzIiwiaWJ1ZmZlciIsImhpdHMiLCJNQVhfVkFMVUUiLCJwSW5kZXgiLCJoaXQiLCJkaXN0YW5jZVRvQ2VudGVyIiwiYWxsIiwicG9pbnQiLCJwYyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGUiLCJzaHJpbmtlZExvY2FsQm91bmRzIiwiZml0dGVkUG9zaXRpb24iLCJmaXR0ZWQiLCJyb3RhdGlvbiIsImRzIiwibXVsdGlwbHkiLCJtYXhMZXZlbCIsImNoYXIiLCJQb2ludENsb3VkQXJlbmE0RE5vZGUiLCJsZWZ0IiwicmlnaHQiLCJrZHRyZWUiLCJQb2ludENsb3VkQXJlbmE0RCIsImFkZEV2ZW50TGlzdGVuZXIiLCJudW1WaXNpYmxlTm9kZXMiLCJudW1WaXNpYmxlUG9pbnRzIiwic2l6ZVR5cGUiLCJsZXZlbHMiLCJib3VuZGluZ0JveE5vZGUiLCJjaGlsZE9mQ2hpbGQiLCJsYSIsImxiIiwidmlzaWJsZU5vZGVOYW1lcyIsImIxIiwiYjIiLCJiMyIsIlBvaW50Q2xvdWRBcmVuYTRER2VvbWV0cnlOb2RlIiwic291cmNlVmlldyIsInUzMkluZGljZXMiLCJQb2ludENsb3VkQXJlbmE0REdlb21ldHJ5IiwibnVtTm9kZXMiLCJwcm92aWRlciIsIl9zcGFjaW5nIiwiTmFtZSIsIlByb3ZpZGVyIiwiTm9kZXMiLCJQb2ludHMiLCJWZXJzaW9uIiwiQm91bmRpbmdCb3giLCJTcGFjaW5nIiwiaGFzTGVmdCIsImhhc1JpZ2h0IiwicGFyZW50QkJTaXplIiwiZG9uZSIsInRvcCIsIkJpbmFyeUhlYXAiLCJzY29yZUZ1bmN0aW9uIiwiZWxlbWVudCIsImJ1YmJsZVVwIiwic2lua0Rvd24iLCJzY29yZSIsInBhcmVudE4iLCJlbGVtU2NvcmUiLCJjaGlsZDJOIiwiY2hpbGQxTiIsInN3YXAiLCJjaGlsZDEiLCJjaGlsZDFTY29yZSIsImNoaWxkMiIsIkF0dHJpYnV0ZUxvY2F0aW9ucyIsIjAiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCIxMiIsIlNIT1dfSU5TSURFIiwiU0hPV19PVVRTSURFIiwiQ2xpcE1ldGhvZCIsIklOU0lERV9BTlkiLCJJTlNJREVfQUxMIiwiRUxFVkFUSU9OIiwiTEVWRUxfT0ZfREVUQUlMIiwibG9hZFBvaW50Q2xvdWQiLCJ1cGRhdGVWaXNpYmlsaXR5IiwicG9pbnRjbG91ZHMiLCJudW1WaXNpYmxlUG9pbnRzSW5Qb2ludGNsb3VkcyIsInVubG9hZGVkR2VvbWV0cnkiLCJsb3dlc3RTcGFjaW5nIiwic3RydWN0dXJlcyIsInVwZGF0ZVZpc2liaWxpdHlTdHJ1Y3R1cmVzIiwiZnJ1c3R1bXMiLCJjYW1PYmpQb3NpdGlvbnMiLCJwcmlvcml0eVF1ZXVlIiwibG9hZGVkVG9HUFVUaGlzRnJhbWUiLCJkb21IZWlnaHQiLCJmcnVzdHVtIiwiY2FtT2JqUG9zIiwiaW5zaWRlRnJ1c3R1bSIsImludGVyc2VjdHNCb3giLCJudW1WaXNpYmxlUG9pbnRzSW5Qb2ludGNsb3VkIiwidG9UcmVlTm9kZSIsInRvdWNoIiwiX3RyYW5zZm9ybVZlcnNpb24iLCJ0cmFuc2Zvcm1WZXJzaW9uIiwiYm94SGVscGVyIiwiaXNQZXJzcGVjdGl2ZUNhbWVyYSIsInNjcmVlblBpeGVsUmFkaXVzIiwidGFuIiwiY2FuZGlkYXRlcyIsInVwZGF0aW5nTm9kZXMiLCJ1cGRhdGUiLCJ1cGRhdGVQb2ludENsb3VkcyIsInVwZGF0ZVZpc2libGVCb3VuZHMiLCJmcmVlTWVtb3J5IiwiaW5pdGlhbGl6ZWQiLCJkZWVwZXN0VmlzaWJsZUxldmVsIiwidmlld0kiLCJ3b3JsZCIsImZydXN0dW1DYW0iLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwicHJvaiIsInByb2plY3Rpb25NYXRyaXgiLCJmbSIsInNldEZyb21Qcm9qZWN0aW9uTWF0cml4Iiwid29ybGRJIiwiaW52ZXJ0IiwiY2FtTWF0cml4T2JqZWN0Iiwic2V0RnJvbU1hdHJpeFBvc2l0aW9uIiwiaGlkZURlc2NlbmRhbnRzIiwiVkVSU0lPTiIsImN1cnJlbnRTaXplIiwibmV3U2l6ZSIsInRoaXNBdHRyaWJ1dGVzIiwib3RoZXJBdHRyaWJ1dGVzIiwibWVyZ2VkIiwiZWxlbWVudHNQZXJQb2ludCIsImV4cGFuZGVkIiwidW5pb24iLCJwYXJhbVRocmVlVG9HTCIsImV4dGVuc2lvbiIsIlJFUEVBVCIsIkNMQU1QX1RPX0VER0UiLCJNSVJST1JFRF9SRVBFQVQiLCJORUFSRVNUIiwiTkVBUkVTVF9NSVBNQVBfTkVBUkVTVCIsIk5FQVJFU1RfTUlQTUFQX0xJTkVBUiIsIkxJTkVBUiIsIkxJTkVBUl9NSVBNQVBfTkVBUkVTVCIsIkxJTkVBUl9NSVBNQVBfTElORUFSIiwiVU5TSUdORURfU0hPUlRfNF80XzRfNCIsIlVOU0lHTkVEX1NIT1JUXzVfNV81XzEiLCJVTlNJR05FRF9TSE9SVF81XzZfNSIsIkJZVEUiLCJTSE9SVCIsIlVOU0lHTkVEX1NIT1JUIiwiSU5UIiwiVU5TSUdORURfSU5UIiwiRkxPQVQiLCJleHRlbnNpb25zIiwiSEFMRl9GTE9BVF9PRVMiLCJBTFBIQSIsIkxVTUlOQU5DRSIsIkxVTUlOQU5DRV9BTFBIQSIsIkRFUFRIX0NPTVBPTkVOVCIsIkRFUFRIX1NURU5DSUwiLCJGVU5DX0FERCIsIkZVTkNfU1VCVFJBQ1QiLCJGVU5DX1JFVkVSU0VfU1VCVFJBQ1QiLCJaRVJPIiwiT05FIiwiU1JDX0NPTE9SIiwiT05FX01JTlVTX1NSQ19DT0xPUiIsIlNSQ19BTFBIQSIsIk9ORV9NSU5VU19TUkNfQUxQSEEiLCJEU1RfQUxQSEEiLCJPTkVfTUlOVVNfRFNUX0FMUEhBIiwiRFNUX0NPTE9SIiwiT05FX01JTlVTX0RTVF9DT0xPUiIsIlNSQ19BTFBIQV9TQVRVUkFURSIsIlJHQkFfUzNUQ19EWFQxX0Zvcm1hdCIsIlJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCIsIkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQiLCJDT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMIiwiTUlOX0VYVCIsIk1BWF9FWFQiLCJVbnNpZ25lZEludDI0OFR5cGUiLCJVTlNJR05FRF9JTlRfMjRfOF9XRUJHTCIsIldlYkdMVGV4dHVyZSIsImNyZWF0ZVRleHR1cmUiLCJURVhUVVJFXzJEIiwiaW1hZ2UiLCJiaW5kVGV4dHVyZSIsImludGVybmFsRm9ybWF0Iiwic3JjRm9ybWF0Iiwic3JjVHlwZSIsInBpeGVsU3RvcmVpIiwiVU5QQUNLX0ZMSVBfWV9XRUJHTCIsImZsaXBZIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwicHJlbXVsdGlwbHlBbHBoYSIsIlVOUEFDS19BTElHTk1FTlQiLCJ1bnBhY2tBbGlnbm1lbnQiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9XUkFQX1MiLCJURVhUVVJFX1dSQVBfVCIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsInRleEltYWdlMkQiLCJ3cmFwUyIsIndyYXBUIiwiU2hhZGVyIiwidnNTb3VyY2UiLCJmc1NvdXJjZSIsImNhY2hlIiwidnMiLCJmcyIsInVuaWZvcm1Mb2NhdGlvbnMiLCJhdHRyaWJ1dGVMb2NhdGlvbnMiLCJsaW5rUHJvZ3JhbSIsInNvdXJjZSIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsImdldFNoYWRlckluZm9Mb2ciLCJjYWNoZWQiLCJjcmVhdGVTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwiRlJBR01FTlRfU0hBREVSIiwiY3JlYXRlUHJvZ3JhbSIsImJpbmRBdHRyaWJMb2NhdGlvbiIsImF0dGFjaFNoYWRlciIsImRldGFjaFNoYWRlciIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImdldFByb2dyYW1JbmZvTG9nIiwibnVtQXR0cmlidXRlcyIsIkFDVElWRV9BVFRSSUJVVEVTIiwiZ2V0QWN0aXZlQXR0cmliIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJudW1Vbmlmb3JtcyIsIkFDVElWRV9VTklGT1JNUyIsInVuaWZvcm0iLCJnZXRBY3RpdmVVbmlmb3JtIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwidW5pZm9ybU1hdHJpeDRmdiIsInZhbHVlcyIsIm1hdHJpeDQiLCJ1bmlmb3JtMWYiLCJ1bmlmb3JtMWZ2IiwidW5pZm9ybTFpIiwidW5pZm9ybTJmIiwidW5pZm9ybTNmIiwic2V0VW5pZm9ybU1hdHJpeDQiLCJzZXRVbmlmb3JtM2YiLCJzZXRVbmlmb3JtMWYiLCJzZXRVbmlmb3JtQm9vbGVhbiIsInNldFVuaWZvcm1UZXh0dXJlIiwic2V0VW5pZm9ybTJmIiwiV2ViR0xCdWZmZXIiLCJ2YW8iLCJ2Ym9zIiwiQmFzaWNHcm91cCIsIndpcmVmcmFtZSIsIm5vZGVTaXplIiwibm9kZUxvYWRSYXRlIiwicmF5Y2FzdGVyIiwiYnVkZ2V0IiwicmVjYWxjdWxhdGVCb3hHZW9tZXRyeSIsInNwbGljZSIsInBvaW50Y2xvdWRCb3giLCJib3hXb3JsZCIsImZyb21TcGFjaW5nIiwicEhlaWdodCIsInBGcm9tU3BhY2luZyIsImxwb3MiLCJpbnRlcnNlY3RCb3giLCJHcm91cCIsInNoYWRlcnMiLCJ0ZXh0dXJlcyIsInR5cGVzIiwiZXh0VkFPIiwiZ2V0RXh0ZW5zaW9uIiwiY3JlYXRlVmVydGV4QXJyYXkiLCJjcmVhdGVWZXJ0ZXhBcnJheU9FUyIsImJpbmQiLCJiaW5kVmVydGV4QXJyYXkiLCJiaW5kVmVydGV4QXJyYXlPRVMiLCJnZXRFeHRlbnNpb25zIiwiZmV0Y2hPY3RyZWVzIiwib2N0cmVlcyIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMSIsInJlc2V0Iiwid2ViZ2xCdWZmZXIiLCJ2Ym8iLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiYnVmZmVyRGF0YSIsIlNUQVRJQ19EUkFXIiwiYXR0cmlidXRlTG9jYXRpb24iLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiaXRlbVNpemUiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsImhhbmRsZSIsInZpc2libGVDaGlsZHJlbiIsInZpc2liaWxpdHlUZXh0dXJlRGF0YSIsIndvcmxkVmlldyIsIm1hdDRob2xkZXIiLCJhbGxvd2VkTm9kZXMiLCJzZXRVbmlmb3JtIiwibE1vZGVsIiwibE1vZGVsVmlldyIsIndvcmxkVmlld1Byb2pNYXRyaWNlcyIsImNsaXBQb2x5Z29uIiwidmlld01hdHJpeCIsIndvcmxkVmlld1Byb2oiLCJwcm9qTWF0cml4IiwibWFya2VycyIsImZsYXR0ZW5lZE1hdHJpY2VzIiwibSIsImZsYXR0ZW5lZFZlcnRpY2VzIiwibENsaXBQb2x5Z29uVkNvdW50IiwidW5pZm9ybTFpdiIsImxDbGlwUG9seWdvblZQIiwibENsaXBQb2x5Z29ucyIsInVuaWZvcm0zZnYiLCJ1cGRhdGVCdWZmZXIiLCJkcmF3QXJyYXlzIiwiUE9JTlRTIiwidmlld0ludiIsInByb2pJbnYiLCJjdXJyZW50VGV4dHVyZUJpbmRpbmdQb2ludCIsImNvbXB1dGVWaXNpYmlsaXR5VGV4dHVyZURhdGEiLCJ2bnQiLCJudW1TbmFwc2hvdHMiLCJzbmFwRW5hYmxlZCIsIm51bUNsaXBCb3hlcyIsIm51bUNsaXBQb2x5Z29ucyIsImRlZmluZXNTdHJpbmciLCJ1bmlmb3JtTmFtZSIsIndlYmdsVGV4dHVyZSIsIkJMRU5EIiwiYmxlbmRGdW5jIiwiZGVwdGhNYXNrIiwiREVQVEhfVEVTVCIsIkxOMiIsImJvdHRvbSIsInNldFVuaWZvcm0xaSIsImxDbGlwQm94ZXMiLCJ3ZWlnaHRSR0IiLCJ3ZWlnaHRJbnRlbnNpdHkiLCJ3ZWlnaHRFbGV2YXRpb24iLCJ3ZWlnaHRDbGFzc2lmaWNhdGlvbiIsIndlaWdodFJldHVybk51bWJlciIsIndlaWdodFNvdXJjZUlEIiwic2V0VW5pZm9ybTFmdiIsInZuV2ViR0xUZXh0dXJlIiwiVEVYVFVSRTAiLCJoaWRkZW5Qb2ludFNvdXJjZUlEc1RleHR1cmUiLCJsU25hcHNob3QiLCJsU25hcHNob3REZXB0aCIsImJpbmRpbmdTdGFydCIsImxTbmFwc2hvdEJpbmRpbmdQb2ludHMiLCJsU25hcHNob3REZXB0aEJpbmRpbmdQb2ludHMiLCJ0ZXh0dXJlRGVwdGgiLCJzbmFwVGV4dHVyZSIsInByb3BlcnRpZXMiLCJfX3dlYmdsVGV4dHVyZSIsInNuYXBUZXh0dXJlRGVwdGgiLCJiaW5kaW5nUG9pbnQiLCJkZXB0aEJpbmRpbmdQb2ludCIsImxTbmFwVmlldyIsImxTbmFwUHJvaiIsImxTbmFwUHJvakludiIsImxTbmFwVmlld0ludiIsInJlbmRlck5vZGVzIiwiVEVYVFVSRTIiXSwibWFwcGluZ3MiOiJrQ0FLQUEsRUFBT0MsUUFBVSxTQUFVQyxFQUFTQyxFQUFtQkMsRUFBZUMsR0FDcEUsSUFBSUMsRUFBY0MsTUFBUUMsT0FFMUIsSUFDRSxJQUNFLElBQUlDLEVBRUosSUFFRUEsRUFBTyxJQUFJSCxFQUFZSSxLQUFLLENBQUNSLElBQzdCLE1BQU9TLElBR1BGLEVBQU8sSUFEV0gsRUFBWU0sYUFBZU4sRUFBWU8sbUJBQXFCUCxFQUFZUSxnQkFBa0JSLEVBQVlTLGdCQUVuSEMsT0FBT2QsR0FDWk8sRUFBT0EsRUFBS1EsVUFHZCxJQUFJQyxFQUFN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QUFJLFFBQVksTUFBUSxNQUFRLFFBQ3RDLENBQUMsR0FBSyxJQUFJLFFBQVksTUFBUSxNQUFRLFFBQ3RDLENBQUMsR0FBSyxJQUFJLFFBQVksTUFBUSxNQUFRLFFBQ3RDLENBQUMsR0FBSyxJQUFJLFFBQVksTUFBUSxNQUFRLFFBQ3RDLENBQUMsRUFBRyxJQUFJLFFBQVksTUFBUSxNQUFRLFNBRXJDQyxPQUFRLENBQ1AsQ0FBQyxFQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sTUFDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxFQUFLLElBQUksUUFBWSxJQUFPLEtBQU8sUUFFckNDLGFBQWMsQ0FDYixDQUFDLEVBQUcsSUFBSSxRQUFZLE1BQVEsTUFBUSxRQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLE1BQVEsTUFBUSxRQUN0QyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQVEsTUFBUSxRQUN0QyxDQUFDLEdBQUssSUFBSSxRQUFZLEVBQVEsTUFBUSxRQUN0QyxDQUFDLEdBQUssSUFBSSxRQUFZLEVBQVEsTUFBUSxRQUN0QyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQVEsS0FBUSxRQUN0QyxDQUFDLEdBQUssSUFBSSxRQUFZLE1BQVEsTUFBUSxRQUN0QyxDQUFDLEdBQUssSUFBSSxRQUFZLE1BQVEsTUFBUSxRQUN0QyxDQUFDLEdBQUssSUFBSSxRQUFZLE1BQVEsTUFBUSxPQUN0QyxDQUFDLEdBQUssSUFBSSxRQUFZLE1BQVEsTUFBUSxRQUN0QyxDQUFDLEVBQUcsSUFBSSxRQUFZLE1BQVEsTUFBUSxTQUVyQ0MsUUFBUyxDQUNSLENBQUMsRUFBSyxJQUFJLFFBQVksS0FBTyxLQUFPLE9BQ3BDLENBQUMsR0FBSyxJQUFJLFFBQVksS0FBTyxLQUFPLE9BQ3BDLENBQUMsR0FBSyxJQUFJLFFBQVksS0FBTyxLQUFPLE1BQ3BDLENBQUMsR0FBSyxJQUFJLFFBQVksS0FBTyxLQUFPLE9BQ3BDLENBQUMsR0FBSyxJQUFJLFFBQVksS0FBTyxLQUFPLE9BQ3BDLENBQUMsR0FBSyxJQUFJLFFBQVksS0FBTyxLQUFPLE9BQ3BDLENBQUMsR0FBSyxJQUFJLFFBQVksS0FBTyxLQUFPLE9BQ3BDLENBQUMsR0FBSyxJQUFJLFFBQVksS0FBTyxLQUFPLE9BQ3BDLENBQUMsR0FBSyxJQUFJLFFBQVksS0FBTyxLQUFPLE9BQ3BDLENBQUMsR0FBSyxJQUFJLFFBQVksS0FBTyxLQUFPLE1BQ3BDLENBQUMsRUFBSyxJQUFJLFFBQVksS0FBTyxLQUFPLFFBRXJDQyxRQUFTLENBQ1IsQ0FBQyxFQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sTUFDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sTUFDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxFQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sUUFFckNDLFVBQVcsQ0FDVixDQUFDLEVBQUcsSUFBSSxRQUFZLEVBQUcsRUFBRyxJQUMxQixDQUFDLEVBQUcsSUFBSSxRQUFZLEVBQUcsRUFBRyxNQzdHNUIsTUFBTUMsRUFBT0MsR0FBV0EsRUFBUUMsSUFBSSxHQUVwQyxJQUFJQyxHQUFVLEdBR2RBLEdBQVFDLE9BQVNKLENBQUk7Ozs7OztFQU1qQixxQkFBMkIsS0FDM0Isc0NBQTRDQSxDQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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LEtBQUt3eEMsWUFBWS9sQixFQUFVd0QsRUFBUTVoQixFQUFPNi9CLEVBQXVCN2IsRUFBUTdGLEdBRXpFbU0sRUFBR3VVLGNBQWN2VSxFQUFHOFosVUFDcEI5WixFQUFHbU8sWUFBWW5PLEVBQUdpTyxXQUFZLE1BQzlCak8sRUFBR3VVLGNBQWN2VSxFQUFHMlksYSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYsIG5vLXVzZS1iZWZvcmUtZGVmaW5lLCBuZXctY2FwICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb250ZW50LCB3b3JrZXJDb25zdHJ1Y3Rvciwgd29ya2VyT3B0aW9ucywgdXJsKSB7XG4gIHZhciBnbG9iYWxTY29wZSA9IHNlbGYgfHwgd2luZG93O1xuXG4gIHRyeSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBibG9iO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBOZXcgQVBJXG4gICAgICAgIGJsb2IgPSBuZXcgZ2xvYmFsU2NvcGUuQmxvYihbY29udGVudF0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBCbG9iQnVpbGRlciA9IERlcHJlY2F0ZWQsIGJ1dCB3aWRlbHkgaW1wbGVtZW50ZWRcbiAgICAgICAgdmFyIEJsb2JCdWlsZGVyID0gZ2xvYmFsU2NvcGUuQmxvYkJ1aWxkZXIgfHwgZ2xvYmFsU2NvcGUuV2ViS2l0QmxvYkJ1aWxkZXIgfHwgZ2xvYmFsU2NvcGUuTW96QmxvYkJ1aWxkZXIgfHwgZ2xvYmFsU2NvcGUuTVNCbG9iQnVpbGRlcjtcbiAgICAgICAgYmxvYiA9IG5ldyBCbG9iQnVpbGRlcigpO1xuICAgICAgICBibG9iLmFwcGVuZChjb250ZW50KTtcbiAgICAgICAgYmxvYiA9IGJsb2IuZ2V0QmxvYigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgVVJMID0gZ2xvYmFsU2NvcGUuVVJMIHx8IGdsb2JhbFNjb3BlLndlYmtpdFVSTDtcbiAgICAgIHZhciBvYmplY3RVUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgdmFyIHdvcmtlciA9IG5ldyBnbG9iYWxTY29wZVt3b3JrZXJDb25zdHJ1Y3Rvcl0ob2JqZWN0VVJMLCB3b3JrZXJPcHRpb25zKTtcbiAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwob2JqZWN0VVJMKTtcbiAgICAgIHJldHVybiB3b3JrZXI7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG5ldyBnbG9iYWxTY29wZVt3b3JrZXJDb25zdHJ1Y3Rvcl0oXCJkYXRhOmFwcGxpY2F0aW9uL2phdmFzY3JpcHQsXCIuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChjb250ZW50KSksIHdvcmtlck9wdGlvbnMpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICghdXJsKSB7XG4gICAgICB0aHJvdyBFcnJvcihcIklubGluZSB3b3JrZXIgaXMgbm90IHN1cHBvcnRlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IGdsb2JhbFNjb3BlW3dvcmtlckNvbnN0cnVjdG9yXSh1cmwsIHdvcmtlck9wdGlvbnMpO1xuICB9XG59OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7R2xvYmFsfSBmcm9tIFwiLi4vR2xvYmFsLmpzXCI7XHJcblxyXG5jbGFzcyBMUlVJdGVtXHJcbntcclxuXHRjb25zdHJ1Y3Rvcihub2RlKVxyXG5cdHtcclxuXHRcdHRoaXMucHJldmlvdXMgPSBudWxsO1xyXG5cdFx0dGhpcy5uZXh0ID0gbnVsbDtcclxuXHRcdHRoaXMubm9kZSA9IG5vZGU7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICogQGNsYXNzIEEgZG91Ymx5LWxpbmtlZC1saXN0IG9mIHRoZSBsZWFzdCByZWNlbnRseSB1c2VkIGVsZW1lbnRzLlxyXG4gKi9cclxuY2xhc3MgTFJVXHJcbntcclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdFx0Ly8gdGhlIGxlYXN0IHJlY2VudGx5IHVzZWQgaXRlbVxyXG5cdFx0dGhpcy5maXJzdCA9IG51bGw7XHJcblx0XHQvLyB0aGUgbW9zdCByZWNlbnRseSB1c2VkIGl0ZW1cclxuXHRcdHRoaXMubGFzdCA9IG51bGw7XHJcblx0XHQvLyBhIGxpc3Qgb2YgYWxsIGl0ZW1zIGluIHRoZSBscnUgbGlzdFxyXG5cdFx0dGhpcy5pdGVtcyA9IHt9O1xyXG5cdFx0dGhpcy5lbGVtZW50cyA9IDA7XHJcblx0XHR0aGlzLm51bVBvaW50cyA9IDA7XHJcblx0fVxyXG5cclxuXHRzaXplKClcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50cztcclxuXHR9XHJcblxyXG5cdGNvbnRhaW5zKG5vZGUpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuaXRlbXNbbm9kZS5pZF0gPT0gbnVsbDtcclxuXHR9XHJcblxyXG5cdHRvdWNoKG5vZGUpXHJcblx0e1xyXG5cdFx0aWYoIW5vZGUubG9hZGVkKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGl0ZW07XHJcblxyXG5cdFx0aWYodGhpcy5pdGVtc1tub2RlLmlkXSA9PSBudWxsKVxyXG5cdFx0e1xyXG5cdFx0XHQvLyBhZGQgdG8gbGlzdFxyXG5cdFx0XHRpdGVtID0gbmV3IExSVUl0ZW0obm9kZSk7XHJcblx0XHRcdGl0ZW0ucHJldmlvdXMgPSB0aGlzLmxhc3Q7XHJcblx0XHRcdHRoaXMubGFzdCA9IGl0ZW07XHJcblx0XHRcdGlmKGl0ZW0ucHJldmlvdXMgIT09IG51bGwpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpdGVtLnByZXZpb3VzLm5leHQgPSBpdGVtO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLml0ZW1zW25vZGUuaWRdID0gaXRlbTtcclxuXHRcdFx0dGhpcy5lbGVtZW50cysrO1xyXG5cclxuXHRcdFx0aWYodGhpcy5maXJzdCA9PT0gbnVsbClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRoaXMuZmlyc3QgPSBpdGVtO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMubnVtUG9pbnRzICs9IG5vZGUubnVtUG9pbnRzO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHQvLyB1cGRhdGUgaW4gbGlzdFxyXG5cdFx0XHRpdGVtID0gdGhpcy5pdGVtc1tub2RlLmlkXTtcclxuXHJcblx0XHRcdGlmKGl0ZW0ucHJldmlvdXMgPT09IG51bGwpXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvLyBoYW5kbGUgdG91Y2ggb24gZmlyc3QgZWxlbWVudFxyXG5cdFx0XHRcdGlmKGl0ZW0ubmV4dCAhPT0gbnVsbClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0aGlzLmZpcnN0ID0gaXRlbS5uZXh0O1xyXG5cdFx0XHRcdFx0dGhpcy5maXJzdC5wcmV2aW91cyA9IG51bGw7XHJcblx0XHRcdFx0XHRpdGVtLnByZXZpb3VzID0gdGhpcy5sYXN0O1xyXG5cdFx0XHRcdFx0aXRlbS5uZXh0ID0gbnVsbDtcclxuXHRcdFx0XHRcdHRoaXMubGFzdCA9IGl0ZW07XHJcblx0XHRcdFx0XHRpdGVtLnByZXZpb3VzLm5leHQgPSBpdGVtO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKGl0ZW0ubmV4dCAhPT0gbnVsbClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8vIGhhbmRsZSB0b3VjaCBvbiBhbnkgb3RoZXIgZWxlbWVudFxyXG5cdFx0XHRcdGl0ZW0ucHJldmlvdXMubmV4dCA9IGl0ZW0ubmV4dDtcclxuXHRcdFx0XHRpdGVtLm5leHQucHJldmlvdXMgPSBpdGVtLnByZXZpb3VzO1xyXG5cdFx0XHRcdGl0ZW0ucHJldmlvdXMgPSB0aGlzLmxhc3Q7XHJcblx0XHRcdFx0aXRlbS5uZXh0ID0gbnVsbDtcclxuXHRcdFx0XHR0aGlzLmxhc3QgPSBpdGVtO1xyXG5cdFx0XHRcdGl0ZW0ucHJldmlvdXMubmV4dCA9IGl0ZW07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJlbW92ZShub2RlKVxyXG5cdHtcclxuXHRcdHZhciBscnVJdGVtID0gdGhpcy5pdGVtc1tub2RlLmlkXTtcclxuXHRcdGlmKGxydUl0ZW0pXHJcblx0XHR7XHJcblx0XHRcdGlmKHRoaXMuZWxlbWVudHMgPT09IDEpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0aGlzLmZpcnN0ID0gbnVsbDtcclxuXHRcdFx0XHR0aGlzLmxhc3QgPSBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKCFscnVJdGVtLnByZXZpb3VzKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHRoaXMuZmlyc3QgPSBscnVJdGVtLm5leHQ7XHJcblx0XHRcdFx0XHR0aGlzLmZpcnN0LnByZXZpb3VzID0gbnVsbDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYoIWxydUl0ZW0ubmV4dClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0aGlzLmxhc3QgPSBscnVJdGVtLnByZXZpb3VzO1xyXG5cdFx0XHRcdFx0dGhpcy5sYXN0Lm5leHQgPSBudWxsO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZihscnVJdGVtLnByZXZpb3VzICYmIGxydUl0ZW0ubmV4dClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRscnVJdGVtLnByZXZpb3VzLm5leHQgPSBscnVJdGVtLm5leHQ7XHJcblx0XHRcdFx0XHRscnVJdGVtLm5leHQucHJldmlvdXMgPSBscnVJdGVtLnByZXZpb3VzO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZGVsZXRlIHRoaXMuaXRlbXNbbm9kZS5pZF07XHJcblx0XHRcdHRoaXMuZWxlbWVudHMtLTtcclxuXHRcdFx0dGhpcy5udW1Qb2ludHMgLT0gbm9kZS5udW1Qb2ludHM7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXRMUlVJdGVtKClcclxuXHR7XHJcblx0XHRpZih0aGlzLmZpcnN0ID09PSBudWxsKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHRcdHZhciBscnUgPSB0aGlzLmZpcnN0O1xyXG5cclxuXHRcdHJldHVybiBscnUubm9kZTtcclxuXHR9XHJcblxyXG5cdHRvU3RyaW5nKClcclxuXHR7XHJcblx0XHR2YXIgc3RyaW5nID0gXCJ7IFwiO1xyXG5cdFx0dmFyIGN1cnIgPSB0aGlzLmZpcnN0O1xyXG5cclxuXHRcdHdoaWxlIChjdXJyICE9PSBudWxsKVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgKz0gY3Vyci5ub2RlLmlkO1xyXG5cdFx0XHRpZihjdXJyLm5leHQgIT09IG51bGwpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzdHJpbmcgKz0gXCIsIFwiO1xyXG5cdFx0XHR9XHJcblx0XHRcdGN1cnIgPSBjdXJyLm5leHQ7XHJcblx0XHR9XHJcblxyXG5cdFx0c3RyaW5nICs9IFwifVwiO1xyXG5cdFx0c3RyaW5nICs9IFwiKFwiICsgdGhpcy5zaXplKCkgKyBcIilcIjtcclxuXHRcdHJldHVybiBzdHJpbmc7XHJcblx0fVxyXG5cclxuXHRmcmVlTWVtb3J5KClcclxuXHR7XHJcblx0XHRpZih0aGlzLmVsZW1lbnRzIDw9IDEpXHJcblx0XHR7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR3aGlsZSh0aGlzLm51bVBvaW50cyA+IEdsb2JhbC5wb2ludExvYWRMaW1pdClcclxuXHRcdHtcclxuXHRcdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmZpcnN0O1xyXG5cdFx0XHR2YXIgbm9kZSA9IGVsZW1lbnQubm9kZTtcclxuXHRcdFx0dGhpcy5kaXNwb3NlRGVzY2VuZGFudHMobm9kZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRkaXNwb3NlRGVzY2VuZGFudHMobm9kZSlcclxuXHR7XHJcblx0XHR2YXIgc3RhY2sgPSBbXTtcclxuXHRcdHN0YWNrLnB1c2gobm9kZSk7XHJcblxyXG5cdFx0d2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApXHJcblx0XHR7XHJcblx0XHRcdHZhciBjdXJyZW50ID0gc3RhY2sucG9wKCk7XHJcblxyXG5cdFx0XHRjdXJyZW50LmRpc3Bvc2UoKTtcclxuXHRcdFx0dGhpcy5yZW1vdmUoY3VycmVudCk7XHJcblxyXG5cdFx0XHRmb3IodmFyIGtleSBpbiBjdXJyZW50LmNoaWxkcmVuKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYoY3VycmVudC5jaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShrZXkpKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciBjaGlsZCA9IGN1cnJlbnQuY2hpbGRyZW5ba2V5XTtcclxuXHRcdFx0XHRcdGlmKGNoaWxkLmxvYWRlZClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0c3RhY2sucHVzaChjdXJyZW50LmNoaWxkcmVuW2tleV0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IHtMUlUsIExSVUl0ZW19O1xyXG4iLCJcbmltcG9ydCB3b3JrZXIgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3dvcmtlci1sb2FkZXIvZGlzdC9ydW50aW1lL2lubGluZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBXb3JrZXJfZm4oKSB7XG4gIHJldHVybiB3b3JrZXIoXCIoKCk9PntcXFwidXNlIHN0cmljdFxcXCI7ZnVuY3Rpb24gZShlKXt0aGlzLmJ1ZmZlcj1lLHRoaXMudTg9bmV3IFVpbnQ4QXJyYXkoZSk7dmFyIHQ9bmV3IEFycmF5QnVmZmVyKDQpLHI9bmV3IEZsb2F0MzJBcnJheSh0KSxpPW5ldyBVaW50OEFycmF5KHQpO3RoaXMuZ2V0VWludDMyPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnU4W2UrM108PDI0fHRoaXMudThbZSsyXTw8MTZ8dGhpcy51OFtlKzFdPDw4fHRoaXMudThbZV19LHRoaXMuZ2V0VWludDE2PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnU4W2UrMV08PDh8dGhpcy51OFtlXX0sdGhpcy5nZXRGbG9hdDMyPWZ1bmN0aW9uKGUpe3JldHVybiBpWzBdPXRoaXMudThbZSswXSxpWzFdPXRoaXMudThbZSsxXSxpWzJdPXRoaXMudThbZSsyXSxpWzNdPXRoaXMudThbZSszXSxyWzBdfSx0aGlzLmdldFVpbnQ4PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnU4W2VdfX1mdW5jdGlvbiB0KGUpe3RoaXMudmVyc2lvbj1lO3ZhciB0PS0xPT09ZS5pbmRleE9mKFxcXCIuXFxcIik/ZS5sZW5ndGg6ZS5pbmRleE9mKFxcXCIuXFxcIik7dGhpcy52ZXJzaW9uTWFqb3I9cGFyc2VJbnQoZS5zdWJzdHIoMCx0KSksdGhpcy52ZXJzaW9uTWlub3I9cGFyc2VJbnQoZS5zdWJzdHIodCsxKSksMD09PXRoaXMudmVyc2lvbk1pbm9yLmxlbmd0aCYmKHRoaXMudmVyc2lvbk1pbm9yPTApfW9ubWVzc2FnZT1mdW5jdGlvbihyKXtpZihyLmRhdGEmJnIuZGF0YS5idWZmZXIpdHJ5e3ZhciBpPXIuZGF0YS5idWZmZXIsbj1yLmRhdGEucG9pbnRBdHRyaWJ1dGVzLHM9aS5ieXRlTGVuZ3RoL24uYnl0ZVNpemUsQT1uZXcgZShpKSxUPW5ldyB0KHIuZGF0YS52ZXJzaW9uKSx1PXIuZGF0YS5vZmZzZXQsbz1yLmRhdGEuc2NhbGUsZj0oci5kYXRhLnNwYWNpbmcsci5kYXRhLmhhc0NoaWxkcmVuLHIuZGF0YS5uYW1lLFtOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLE51bWJlci5QT1NJVElWRV9JTkZJTklUWV0pLGg9W051bWJlci5ORUdBVElWRV9JTkZJTklUWSxOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXSxfPVswLDAsMF0sST17fSxiPTA7Zm9yKHZhciBOIG9mIG4uYXR0cmlidXRlcyl7aWYoTi5uYW1lPT09YS5QT1NJVElPTl9DQVJURVNJQU4ubmFtZSl7Zm9yKHZhciBFPW5ldyBBcnJheUJ1ZmZlcig0KnMqMykseT1uZXcgRmxvYXQzMkFycmF5KEUpLFM9MDtTPHM7UysrKVQubmV3ZXJUaGFuKFxcXCIxLjNcXFwiKT8oTD1BLmdldFVpbnQzMihiK1Mqbi5ieXRlU2l6ZSswLCEwKSpvLEM9QS5nZXRVaW50MzIoYitTKm4uYnl0ZVNpemUrNCwhMCkqbyxkPUEuZ2V0VWludDMyKGIrUypuLmJ5dGVTaXplKzgsITApKm8pOihMPUEuZ2V0RmxvYXQzMihTKm4uYnl0ZVNpemUrMCwhMCkrdVswXSxDPUEuZ2V0RmxvYXQzMihTKm4uYnl0ZVNpemUrNCwhMCkrdVsxXSxkPUEuZ2V0RmxvYXQzMihTKm4uYnl0ZVNpemUrOCwhMCkrdVsyXSkseVszKlMrMF09TCx5WzMqUysxXT1DLHlbMypTKzJdPWQsX1swXSs9TC9zLF9bMV0rPUMvcyxfWzJdKz1kL3MsZlswXT1NYXRoLm1pbihmWzBdLEwpLGZbMV09TWF0aC5taW4oZlsxXSxDKSxmWzJdPU1hdGgubWluKGZbMl0sZCksaFswXT1NYXRoLm1heChoWzBdLEwpLGhbMV09TWF0aC5tYXgoaFsxXSxDKSxoWzJdPU1hdGgubWF4KGhbMl0sZCk7SVtOLm5hbWVdPXtidWZmZXI6RSxhdHRyaWJ1dGU6Tn19ZWxzZSBpZihOLm5hbWU9PT1hLkNPTE9SX1BBQ0tFRC5uYW1lKXtFPW5ldyBBcnJheUJ1ZmZlcig0KnMpO3ZhciBtPW5ldyBVaW50OEFycmF5KEUpO2ZvcihTPTA7UzxzO1MrKyltWzQqUyswXT1BLmdldFVpbnQ4KGIrUypuLmJ5dGVTaXplKzApLG1bNCpTKzFdPUEuZ2V0VWludDgoYitTKm4uYnl0ZVNpemUrMSksbVs0KlMrMl09QS5nZXRVaW50OChiK1Mqbi5ieXRlU2l6ZSsyKTtJW04ubmFtZV09e2J1ZmZlcjpFLGF0dHJpYnV0ZTpOfX1lbHNlIGlmKE4ubmFtZT09PWEuSU5URU5TSVRZLm5hbWUpe0U9bmV3IEFycmF5QnVmZmVyKDQqcyk7dmFyIFA9bmV3IEZsb2F0MzJBcnJheShFKTtmb3IoUz0wO1M8cztTKyspe3ZhciBNPUEuZ2V0VWludDE2KGIrUypuLmJ5dGVTaXplLCEwKTtQW1NdPU19SVtOLm5hbWVdPXtidWZmZXI6RSxhdHRyaWJ1dGU6Tn19ZWxzZSBpZihOLm5hbWU9PT1hLkNMQVNTSUZJQ0FUSU9OLm5hbWUpe0U9bmV3IEFycmF5QnVmZmVyKHMpO3ZhciB3PW5ldyBVaW50OEFycmF5KEUpO2ZvcihTPTA7UzxzO1MrKyl7dmFyIGw9QS5nZXRVaW50OChiK1Mqbi5ieXRlU2l6ZSk7d1tTXT1sfUlbTi5uYW1lXT17YnVmZmVyOkUsYXR0cmlidXRlOk59fWVsc2UgaWYoTi5uYW1lPT09YS5OT1JNQUxfU1BIRVJFTUFQUEVELm5hbWUpe0U9bmV3IEFycmF5QnVmZmVyKDQqcyozKTt2YXIgej1uZXcgRmxvYXQzMkFycmF5KEUpO2ZvcihTPTA7UzxzO1MrKyl7dmFyIE89QS5nZXRVaW50OChiK1Mqbi5ieXRlU2l6ZSswKSxVPUEuZ2V0VWludDgoYitTKm4uYnl0ZVNpemUrMSksRD1PLzI1NSoyLTEsZz1VLzI1NSoyLTEsdj0xLFk9RCotRCtnKi1nKzEqdjt2PVksRCo9TWF0aC5zcXJ0KFkpLGcqPU1hdGguc3FydChZKSxEKj0yLGcqPTIsdj0yKnYtMSx6WzMqUyswXT1ELHpbMypTKzFdPWcselszKlMrMl09dn1JW04ubmFtZV09e2J1ZmZlcjpFLGF0dHJpYnV0ZTpOfX1lbHNlIGlmKE4ubmFtZT09PWEuTk9STUFMX09DVDE2Lm5hbWUpe2ZvcihFPW5ldyBBcnJheUJ1ZmZlcig0KnMqMyksej1uZXcgRmxvYXQzMkFycmF5KEUpLFM9MDtTPHM7UysrKXtPPUEuZ2V0VWludDgoYitTKm4uYnl0ZVNpemUrMCksVT1BLmdldFVpbnQ4KGIrUypuLmJ5dGVTaXplKzEpO3ZhciBGPU8vMjU1KjItMSxSPVUvMjU1KjItMSxkPTEtTWF0aC5hYnMoRiktTWF0aC5hYnMoUiksTD0wLEM9MDtkPj0wPyhMPUYsQz1SKTooTD0tKFIvTWF0aC5zaWduKFIpLTEpL01hdGguc2lnbihGKSxDPS0oRi9NYXRoLnNpZ24oRiktMSkvTWF0aC5zaWduKFIpKTt2YXIgcD1NYXRoLnNxcnQoTCpMK0MqQytkKmQpO0wvPXAsQy89cCxkLz1wLHpbMypTKzBdPUwselszKlMrMV09Qyx6WzMqUysyXT1kfUlbTi5uYW1lXT17YnVmZmVyOkUsYXR0cmlidXRlOk59fWVsc2UgaWYoTi5uYW1lPT09YS5OT1JNQUwubmFtZSl7Zm9yKEU9bmV3IEFycmF5QnVmZmVyKDQqcyozKSx6PW5ldyBGbG9hdDMyQXJyYXkoRSksUz0wO1M8cztTKyspTD1BLmdldEZsb2F0MzIoYitTKm4uYnl0ZVNpemUrMCwhMCksQz1BLmdldEZsb2F0MzIoYitTKm4uYnl0ZVNpemUrNCwhMCksZD1BLmdldEZsb2F0MzIoYitTKm4uYnl0ZVNpemUrOCwhMCkselszKlMrMF09TCx6WzMqUysxXT1DLHpbMypTKzJdPWQ7SVtOLm5hbWVdPXtidWZmZXI6RSxhdHRyaWJ1dGU6Tn19Yis9Ti5ieXRlU2l6ZX1FPW5ldyBBcnJheUJ1ZmZlcig0KnMpO2Zvcih2YXIgQj1uZXcgVWludDMyQXJyYXkoRSksYz0wO2M8cztjKyspQltjXT1jO0lbYS5JTkRJQ0VTLm5hbWVdPXtidWZmZXI6RSxhdHRyaWJ1dGU6YS5JTkRJQ0VTfTt2YXIgeD17YnVmZmVyOmksbWVhbjpfLGF0dHJpYnV0ZUJ1ZmZlcnM6SSx0aWdodEJvdW5kaW5nQm94OnttaW46ZixtYXg6aH19LEc9W107Zm9yKHZhciBWIGluIHguYXR0cmlidXRlQnVmZmVycylHLnB1c2goeC5hdHRyaWJ1dGVCdWZmZXJzW1ZdLmJ1ZmZlcik7Ry5wdXNoKGkpLHBvc3RNZXNzYWdlKHgsRyl9Y2F0Y2goZSl7cG9zdE1lc3NhZ2Uoe2Vycm9yOlxcXCJFeGVwdGlvbiB0aHJvd24gZHVyaW5nIGV4ZWN1dGlvbi5cXFwifSl9fSx0LnByb3RvdHlwZS5uZXdlclRoYW49ZnVuY3Rpb24oZSl7dmFyIHI9bmV3IHQoZSk7cmV0dXJuIHRoaXMudmVyc2lvbk1ham9yPnIudmVyc2lvbk1ham9yfHx0aGlzLnZlcnNpb25NYWpvcj09PXIudmVyc2lvbk1ham9yJiZ0aGlzLnZlcnNpb25NaW5vcj5yLnZlcnNpb25NaW5vcn07dmFyIHI9e0RBVEFfVFlQRV9ET1VCTEU6e29yZGluYWw6MCxzaXplOjh9LERBVEFfVFlQRV9GTE9BVDp7b3JkaW5hbDoxLHNpemU6NH0sREFUQV9UWVBFX0lOVDg6e29yZGluYWw6MixzaXplOjF9LERBVEFfVFlQRV9VSU5UODp7b3JkaW5hbDozLHNpemU6MX0sREFUQV9UWVBFX0lOVDE2OntvcmRpbmFsOjQsc2l6ZToyfSxEQVRBX1RZUEVfVUlOVDE2OntvcmRpbmFsOjUsc2l6ZToyfSxEQVRBX1RZUEVfSU5UMzI6e29yZGluYWw6NixzaXplOjR9LERBVEFfVFlQRV9VSU5UMzI6e29yZGluYWw6NyxzaXplOjR9LERBVEFfVFlQRV9JTlQ2NDp7b3JkaW5hbDo4LHNpemU6OH0sREFUQV9UWVBFX1VJTlQ2NDp7b3JkaW5hbDo5LHNpemU6OH19LGk9MDtmb3IodmFyIG4gaW4gcilyW2ldPXJbbl0saSsrO2Z1bmN0aW9uIGEoZSx0LHIpe3RoaXMubmFtZT1lLHRoaXMudHlwZT10LHRoaXMubnVtRWxlbWVudHM9cix0aGlzLmJ5dGVTaXplPXRoaXMubnVtRWxlbWVudHMqdGhpcy50eXBlLnNpemV9ZnVuY3Rpb24gcyhlKXtpZih0aGlzLmF0dHJpYnV0ZXM9W10sdGhpcy5ieXRlU2l6ZT0wLHRoaXMuc2l6ZT0wLG51bGwhPWUpZm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kyspe3ZhciByPWFbZVt0XV07dGhpcy5hdHRyaWJ1dGVzLnB1c2gociksdGhpcy5ieXRlU2l6ZSs9ci5ieXRlU2l6ZSx0aGlzLnNpemUrK319YS5QT1NJVElPTl9DQVJURVNJQU49bmV3IGEoMCxyLkRBVEFfVFlQRV9GTE9BVCwzKSxhLlJHQkFfUEFDS0VEPW5ldyBhKDEsci5EQVRBX1RZUEVfSU5UOCw0KSxhLkNPTE9SX1BBQ0tFRD1hLlJHQkFfUEFDS0VELGEuUkdCX1BBQ0tFRD1uZXcgYSgxLHIuREFUQV9UWVBFX0lOVDgsMyksYS5OT1JNQUxfRkxPQVRTPW5ldyBhKDQsci5EQVRBX1RZUEVfRkxPQVQsMyksYS5GSUxMRVJfMUI9bmV3IGEoNSxyLkRBVEFfVFlQRV9VSU5UOCwxKSxhLklOVEVOU0lUWT1uZXcgYSg2LHIuREFUQV9UWVBFX1VJTlQxNiwxKSxhLkNMQVNTSUZJQ0FUSU9OPW5ldyBhKDcsci5EQVRBX1RZUEVfVUlOVDgsMSksYS5OT1JNQUxfU1BIRVJFTUFQUEVEPW5ldyBhKDgsci5EQVRBX1RZUEVfVUlOVDgsMiksYS5OT1JNQUxfT0NUMTY9bmV3IGEoOSxyLkRBVEFfVFlQRV9VSU5UOCwyKSxhLk5PUk1BTD1uZXcgYSgxMCxyLkRBVEFfVFlQRV9GTE9BVCwzKSxhLlJFVFVSTl9OVU1CRVI9bmV3IGEoMTEsci5EQVRBX1RZUEVfVUlOVDgsMSksYS5OVU1CRVJfT0ZfUkVUVVJOUz1uZXcgYSgxMixyLkRBVEFfVFlQRV9VSU5UOCwxKSxhLlNPVVJDRV9JRD1uZXcgYSgxMyxyLkRBVEFfVFlQRV9VSU5UOCwxKSxhLklORElDRVM9bmV3IGEoMTQsci5EQVRBX1RZUEVfVUlOVDMyLDEpLGEuU1BBQ0lORz1uZXcgYSgxNSxyLkRBVEFfVFlQRV9GTE9BVCwxKSxzLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oZSl7dGhpcy5hdHRyaWJ1dGVzLnB1c2goZSksdGhpcy5ieXRlU2l6ZSs9ZS5ieXRlU2l6ZSx0aGlzLnNpemUrK30scy5wcm90b3R5cGUuaGFzQ29sb3JzPWZ1bmN0aW9uKCl7Zm9yKHZhciBlIGluIHRoaXMuYXR0cmlidXRlcylpZigxPT09dGhpcy5hdHRyaWJ1dGVzW2VdLm5hbWUpcmV0dXJuITA7cmV0dXJuITF9LHMucHJvdG90eXBlLmhhc05vcm1hbHM9ZnVuY3Rpb24oKXtmb3IodmFyIGUgaW4gdGhpcy5hdHRyaWJ1dGVzKXt2YXIgdD10aGlzLmF0dHJpYnV0ZXNbZV07aWYodD09PWEuTk9STUFMX1NQSEVSRU1BUFBFRHx8dD09PWEuTk9STUFMX0ZMT0FUU3x8dD09PWEuTk9STUFMfHx0PT09YS5OT1JNQUxfT0NUMTYpcmV0dXJuITB9cmV0dXJuITF9fSkoKTtcXG5cIiwgXCJXb3JrZXJcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xufVxuIiwiXG5pbXBvcnQgd29ya2VyIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy93b3JrZXItbG9hZGVyL2Rpc3QvcnVudGltZS9pbmxpbmUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gV29ya2VyX2ZuKCkge1xuICByZXR1cm4gd29ya2VyKFwiKCgpPT57XFxcInVzZSBzdHJpY3RcXFwiO29ubWVzc2FnZT1mdW5jdGlvbihhKXtpZihhLmRhdGEmJmEuZGF0YS5idWZmZXIpe2Zvcih2YXIgcj1hLmRhdGEuYnVmZmVyLG49YS5kYXRhLm51bVBvaW50cyx0PWEuZGF0YS5wb2ludFNpemUsZT1hLmRhdGEucG9pbnRGb3JtYXRJRCxpPWEuZGF0YS5zY2FsZSxtPWEuZGF0YS5vZmZzZXQsZj0obmV3IFVpbnQ4QXJyYXkociksbmV3IERhdGFWaWV3KHIpKSxJPW5ldyBBcnJheUJ1ZmZlcig0MCpuKSx1PShuZXcgRGF0YVZpZXcoSSkse21pbjpbTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFldLG1heDpbTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLE51bWJlci5ORUdBVElWRV9JTkZJTklUWSxOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFldfSksbz1bMCwwLDBdLHM9bmV3IEFycmF5QnVmZmVyKDMqbio0KSxOPW5ldyBBcnJheUJ1ZmZlcig0Km4pLHc9bmV3IEFycmF5QnVmZmVyKDQqbiksQT1uZXcgQXJyYXlCdWZmZXIobikseT1uZXcgQXJyYXlCdWZmZXIobiksZD1uZXcgQXJyYXlCdWZmZXIobiksZz1uZXcgQXJyYXlCdWZmZXIoMipuKSxVPW5ldyBGbG9hdDMyQXJyYXkocyksYz1uZXcgVWludDhBcnJheShOKSxiPW5ldyBGbG9hdDMyQXJyYXkodyksVD1uZXcgVWludDhBcnJheShBKSx4PW5ldyBVaW50OEFycmF5KHkpLEI9bmV3IFVpbnQ4QXJyYXkoZCksdj1uZXcgVWludDE2QXJyYXkoZyksRT0wO0U8bjtFKyspe3ZhciBGPWYuZ2V0SW50MzIoRSp0KzAsITApLFY9Zi5nZXRJbnQzMihFKnQrNCwhMCksaD1mLmdldEludDMyKEUqdCs4LCEwKSxsPUYqaVswXSttWzBdLWEuZGF0YS5taW5zWzBdLHA9VippWzFdK21bMV0tYS5kYXRhLm1pbnNbMV0sTT1oKmlbMl0rbVsyXS1hLmRhdGEubWluc1syXTtVWzMqRSswXT1sLFVbMypFKzFdPXAsVVszKkUrMl09TSxvWzBdKz1sL24sb1sxXSs9cC9uLG9bMl0rPU0vbix1Lm1pblswXT1NYXRoLm1pbih1Lm1pblswXSxsKSx1Lm1pblsxXT1NYXRoLm1pbih1Lm1pblsxXSxwKSx1Lm1pblsyXT1NYXRoLm1pbih1Lm1pblsyXSxNKSx1Lm1heFswXT1NYXRoLm1heCh1Lm1heFswXSxsKSx1Lm1heFsxXT1NYXRoLm1heCh1Lm1heFsxXSxwKSx1Lm1heFsyXT1NYXRoLm1heCh1Lm1heFsyXSxNKTt2YXIgUz1mLmdldFVpbnQxNihFKnQrMTIsITApO2JbRV09Uzt2YXIgWT1mLmdldFVpbnQ4KEUqdCsxNCwhMCksXz03JlksRD0oNTYmWSk+PjM7eFtFXT1fLEJbRV09RDt2YXIgTz1mLmdldFVpbnQ4KEUqdCsxNSwhMCk7VFtFXT1PO3ZhciBQPWYuZ2V0VWludDE2KEUqdCsxOCwhMCk7aWYodltFXT1QLDI9PT1lKXt2YXIgRz1mLmdldFVpbnQxNihFKnQrMjAsITApLzI1NixSPWYuZ2V0VWludDE2KEUqdCsyMiwhMCkvMjU2LHo9Zi5nZXRVaW50MTYoRSp0KzI0LCEwKS8yNTY7Y1s0KkUrMF09RyxjWzQqRSsxXT1SLGNbNCpFKzJdPXosY1s0KkUrM109MjU1fX12YXIgaj1uZXcgQXJyYXlCdWZmZXIoNCpuKSxrPW5ldyBVaW50MzJBcnJheShqKTtmb3IoRT0wO0U8bjtFKyspa1tFXT1FO3ZhciBxPXttZWFuOm8scG9zaXRpb246cyxjb2xvcjpOLGludGVuc2l0eTp3LGNsYXNzaWZpY2F0aW9uOkEscmV0dXJuTnVtYmVyOnksbnVtYmVyT2ZSZXR1cm5zOmQscG9pbnRTb3VyY2VJRDpnLHRpZ2h0Qm91bmRpbmdCb3g6dSxpbmRpY2VzOmp9O3Bvc3RNZXNzYWdlKHEsW3EucG9zaXRpb24scS5jb2xvcixxLmludGVuc2l0eSxxLmNsYXNzaWZpY2F0aW9uLHEucmV0dXJuTnVtYmVyLHEubnVtYmVyT2ZSZXR1cm5zLHEucG9pbnRTb3VyY2VJRCxxLmluZGljZXNdKX19fSkoKTtcXG5cIiwgXCJXb3JrZXJcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xufVxuIiwiXG5pbXBvcnQgd29ya2VyIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy93b3JrZXItbG9hZGVyL2Rpc3QvcnVudGltZS9pbmxpbmUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gV29ya2VyX2ZuKCkge1xuICByZXR1cm4gd29ya2VyKFwiKCgpPT57XFxcInVzZSBzdHJpY3RcXFwiO29ubWVzc2FnZT1mdW5jdGlvbihhKXt2YXIgdD1hLmRhdGEuYm91bmRpbmdCb3gsbj1uZXcgRmxvYXQzMkFycmF5KGEuZGF0YS5wb3NpdGlvbiksZT1uLmxlbmd0aC8zLGk9dC5tYXhbMF0tdC5taW5bMF0scj10Lm1heFsxXS10Lm1pblsxXSxtPSh0Lm1heFsyXSx0Lm1pblsyXSxuZXcgRmxvYXQzMkFycmF5KDQwOTYpKTttLmZpbGwoLTEvMCk7Zm9yKHZhciBvPTA7bzxlO28rKyl7dmFyIHM9blszKm8rMF0sZD1uWzMqbysxXSxoPW5bMypvKzJdLGY9cy9pLGc9ZC9yO21bcGFyc2VJbnQoTWF0aC5taW4oNjQqZiw2MykpKzY0KnBhcnNlSW50KE1hdGgubWluKDY0KmcsNjMpKV09aH12YXIgbD17ZGVtOnt3aWR0aDo2NCxoZWlnaHQ6NjQsZGF0YTptLmJ1ZmZlcn19O3Bvc3RNZXNzYWdlKGwsW2wuZGVtLmRhdGFdKX19KSgpO1xcblwiLCBcIldvcmtlclwiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG59XG4iLCJcbmltcG9ydCB3b3JrZXIgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3dvcmtlci1sb2FkZXIvZGlzdC9ydW50aW1lL2lubGluZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBXb3JrZXJfZm4oKSB7XG4gIHJldHVybiB3b3JrZXIoXCJvbm1lc3NhZ2U9ZnVuY3Rpb24oZSl7aWYocGVyZm9ybWFuY2UubWFyayhcXFwibGFzbGF6LXN0YXJ0XFxcIiksIWUuZGF0YXx8IWUuZGF0YS5idWZmZXIpcmV0dXJuO2xldCB0PWUuZGF0YS5idWZmZXIsbj1lLmRhdGEubnVtUG9pbnRzLHI9ZS5kYXRhLnBvaW50U2l6ZSxhPWUuZGF0YS5wb2ludEZvcm1hdElELGk9ZS5kYXRhLnNjYWxlLG09ZS5kYXRhLm9mZnNldCxmPShuZXcgVWludDhBcnJheSh0KSxuZXcgRGF0YVZpZXcodCkpLG89e21pbjpbTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFldLG1heDpbTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLE51bWJlci5ORUdBVElWRV9JTkZJTklUWSxOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFldfSxJPVswLDAsMF0sdT1uZXcgQXJyYXlCdWZmZXIoMypuKjQpLHM9bmV3IEFycmF5QnVmZmVyKDQqbiksbD1uZXcgQXJyYXlCdWZmZXIoNCpuKSxOPW5ldyBBcnJheUJ1ZmZlcihuKSxBPW5ldyBBcnJheUJ1ZmZlcihuKSx3PW5ldyBBcnJheUJ1ZmZlcihuKSxjPW5ldyBBcnJheUJ1ZmZlcigyKm4pLGc9bmV3IEZsb2F0MzJBcnJheSh1KSxVPW5ldyBVaW50OEFycmF5KHMpLGQ9bmV3IEZsb2F0MzJBcnJheShsKSxiPW5ldyBVaW50OEFycmF5KE4pLFQ9bmV3IFVpbnQ4QXJyYXkoQSkscD1uZXcgVWludDhBcnJheSh3KSxCPW5ldyBVaW50MTZBcnJheShjKSxFPTI9PWF8fDM9PWEsRj0yPT1hPzIwOjI4LE09ITE7aWYoRSl7bGV0IGUsdCxhLGk7Zm9yKGxldCBtPTA7bTxuJiYhTTsrK20paT1tKnIsZT1mLmdldFVpbnQxNihpK0YsITApLHQ9Zi5nZXRVaW50MTYoaStGKzIsITApLGE9Zi5nZXRVaW50MTYoaStGKzQsITApLChlPjI1NXx8dD4yNTV8fGE+MjU1KSYmKE09ITApfWZvcihsZXQgdD0wO3Q8bjt0Kyspe2xldCBhPWYuZ2V0SW50MzIodCpyKzAsITApLHU9Zi5nZXRJbnQzMih0KnIrNCwhMCkscz1mLmdldEludDMyKHQqcis4LCEwKTt4PWEqaVswXSttWzBdLWUuZGF0YS5taW5zWzBdLHk9dSppWzFdK21bMV0tZS5kYXRhLm1pbnNbMV0sej1zKmlbMl0rbVsyXS1lLmRhdGEubWluc1syXSxnWzMqdCswXT14LGdbMyp0KzFdPXksZ1szKnQrMl09eixJWzBdKz14L24sSVsxXSs9eS9uLElbMl0rPXovbixvLm1pblswXT1NYXRoLm1pbihvLm1pblswXSx4KSxvLm1pblsxXT1NYXRoLm1pbihvLm1pblsxXSx5KSxvLm1pblsyXT1NYXRoLm1pbihvLm1pblsyXSx6KSxvLm1heFswXT1NYXRoLm1heChvLm1heFswXSx4KSxvLm1heFsxXT1NYXRoLm1heChvLm1heFsxXSx5KSxvLm1heFsyXT1NYXRoLm1heChvLm1heFsyXSx6KTtsZXQgbD1mLmdldFVpbnQxNih0KnIrMTIsITApO2RbdF09bDtsZXQgTj1mLmdldFVpbnQ4KHQqcisxNCwhMCksQT03Jk4sdz0oNTYmTik+PjM7VFt0XT1BLHBbdF09dztsZXQgYz1mLmdldFVpbnQ4KHQqcisxNSwhMCk7Ylt0XT1jO2xldCBoPWYuZ2V0VWludDE2KHQqcisxOCwhMCk7aWYoQlt0XT1oLEUpe2xldCBlPWYuZ2V0VWludDE2KHQqcitGLCEwKSxuPWYuZ2V0VWludDE2KHQqcitGKzIsITApLGE9Zi5nZXRVaW50MTYodCpyK0YrNCwhMCk7TSYmKGUvPTI1NixuLz0yNTYsYS89MjU2KSxVWzQqdCswXT1lLFVbNCp0KzFdPW4sVVs0KnQrMl09YSxVWzQqdCszXT0yNTV9fWxldCBoPW5ldyBBcnJheUJ1ZmZlcig0Km4pLFY9bmV3IFVpbnQzMkFycmF5KGgpO2ZvcihsZXQgZT0wO2U8bjtlKyspVltlXT1lO3BlcmZvcm1hbmNlLm1hcmsoXFxcImxhc2xhei1lbmRcXFwiKSxwZXJmb3JtYW5jZS5jbGVhck1hcmtzKCkscGVyZm9ybWFuY2UuY2xlYXJNZWFzdXJlcygpO2xldCBTPXttZWFuOkkscG9zaXRpb246dSxjb2xvcjpzLGludGVuc2l0eTpsLGNsYXNzaWZpY2F0aW9uOk4scmV0dXJuTnVtYmVyOkEsbnVtYmVyT2ZSZXR1cm5zOncscG9pbnRTb3VyY2VJRDpjLHRpZ2h0Qm91bmRpbmdCb3g6byxpbmRpY2VzOmh9O3Bvc3RNZXNzYWdlKFMsW1MucG9zaXRpb24sUy5jb2xvcixTLmludGVuc2l0eSxTLmNsYXNzaWZpY2F0aW9uLFMucmV0dXJuTnVtYmVyLFMubnVtYmVyT2ZSZXR1cm5zLFMucG9pbnRTb3VyY2VJRCxTLmluZGljZXNdKX07XFxuXCIsIFwiV29ya2VyXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcbn1cbiIsIlxuaW1wb3J0IHdvcmtlciBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5saW5lLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFdvcmtlcl9mbigpIHtcbiAgcmV0dXJuIHdvcmtlcihcIlBvdHJlZT17fSxvbm1lc3NhZ2U9ZnVuY3Rpb24oZSl7aWYoIWUuZGF0YXx8IWUuZGF0YS5idWZmZXIpcmV0dXJuO2xldCByLHQsbixhLGksdSxzLGYsbSxvLGMsbCxBLHksdyxkLGcsYixVLGgseCxNPWUuZGF0YS5idWZmZXIsTj1uZXcgRGF0YVZpZXcoTSksQj1lLmRhdGEuc2NoZW1hLEk9ZS5kYXRhLnNjYWxlLFI9ZS5kYXRhLm9mZnNldCxYPWUuZGF0YS5taW5zLHA9Qi5yZWR1Y2UoKChlLHIpPT4oZVtyLm5hbWVdPXIsZSkpLHt9KSxFPWU9PntsZXQgcj0oZT0+e2xldCByPTA7Zm9yKHZhciB0PTA7dDxCLmxlbmd0aDsrK3Qpe2lmKEJbdF0ubmFtZT09ZSlyZXR1cm4gcjtyKz1CW3RdLnNpemV9fSkoZSksdD1wW2VdLnR5cGUsbj1wW2VdLnNpemU7aWYoXFxcInNpZ25lZFxcXCI9PXQpc3dpdGNoKG4pe2Nhc2UgMTpyZXR1cm4gZT0+Ti5nZXRJbnQ4KGUrcik7Y2FzZSAyOnJldHVybiBlPT5OLmdldEludDE2KGUrciwhMCk7Y2FzZSA0OnJldHVybiBlPT5OLmdldEludDMyKGUrciwhMCk7Y2FzZSA4OnJldHVybiBlPT5OLmdldEludDY0KGUrciwhMCl9aWYoXFxcInVuc2lnbmVkXFxcIj09dClzd2l0Y2gobil7Y2FzZSAxOnJldHVybiBlPT5OLmdldFVpbnQ4KGUrcik7Y2FzZSAyOnJldHVybiBlPT5OLmdldFVpbnQxNihlK3IsITApO2Nhc2UgNDpyZXR1cm4gZT0+Ti5nZXRVaW50MzIoZStyLCEwKTtjYXNlIDg6cmV0dXJuIGU9Pk4uZ2V0VWludDY0KGUrciwhMCl9aWYoXFxcImZsb2F0XFxcIj09dClzd2l0Y2gobil7Y2FzZSA0OnJldHVybiBlPT5OLmdldEZsb2F0MzIoZStyLCEwKTtjYXNlIDg6cmV0dXJuIGU9Pk4uZ2V0RmxvYXQ2NChlK3IsITApfWxldCBhPUpTT04uc3RyaW5naWZ5KHBbZV0pO3Rocm93IG5ldyBFcnJvcihgSW52YWxpZCBkaW1lbnNpb24gc3BlY2lmaWNhdGlvbiBmb3IgJHtlfTogJHthfWApfSxMPUIucmVkdWNlKCgoZSxyKT0+ZStyLnNpemUpLDApLFY9TS5ieXRlTGVuZ3RoL0wsXz0hMTtpZihwLlgmJnAuWSYmcC5aJiYocj1uZXcgQXJyYXlCdWZmZXIoNCpWKjMpLGY9bmV3IEZsb2F0MzJBcnJheShyKSx3PVtFKFxcXCJYXFxcIiksRShcXFwiWVxcXCIpLEUoXFxcIlpcXFwiKV0pLHAuUmVkJiZwLkdyZWVuJiZwLkJsdWUpe2xldCBlLHIsbixhO3Q9bmV3IEFycmF5QnVmZmVyKDQqViksbT1uZXcgVWludDhBcnJheSh0KSxkPVtFKFxcXCJSZWRcXFwiKSxFKFxcXCJHcmVlblxcXCIpLEUoXFxcIkJsdWVcXFwiKV07Zm9yKGxldCB0PTA7dDxWJiYhXzsrK3QpYT10KkwsZT1kWzBdKGEpLHI9ZFsxXShhKSxuPWRbMl0oYSksKGU+MjU1fHxyPjI1NXx8bj4yNTUpJiYoXz0hMCl9cC5JbnRlbnNpdHkmJihuPW5ldyBBcnJheUJ1ZmZlcig0KlYpLG89bmV3IEZsb2F0MzJBcnJheShuKSxnPUUoXFxcIkludGVuc2l0eVxcXCIpKSxwLkNsYXNzaWZpY2F0aW9uJiYoYT1uZXcgQXJyYXlCdWZmZXIoViksYz1uZXcgVWludDhBcnJheShhKSxiPUUoXFxcIkNsYXNzaWZpY2F0aW9uXFxcIikpLHAuUmV0dXJuTnVtYmVyJiYoaT1uZXcgQXJyYXlCdWZmZXIoViksbD1uZXcgVWludDhBcnJheShpKSxVPUUoXFxcIlJldHVybk51bWJlclxcXCIpKSxwLk51bWJlck9mUmV0dXJucyYmKHU9bmV3IEFycmF5QnVmZmVyKFYpLEE9bmV3IFVpbnQ4QXJyYXkodSksaD1FKFxcXCJOdW1iZXJPZlJldHVybnNcXFwiKSkscC5Qb2ludFNvdXJjZUlkJiYocz1uZXcgQXJyYXlCdWZmZXIoMipWKSx5PW5ldyBVaW50MTZBcnJheShzKSx4PUUoXFxcIlBvaW50U291cmNlSWRcXFwiKSk7bGV0IHosTyxTLEYsUCx2LEM9WzAsMCwwXSxHPXttaW46W051bWJlci5NQVhfVkFMVUUsTnVtYmVyLk1BWF9WQUxVRSxOdW1iZXIuTUFYX1ZBTFVFXSxtYXg6Wy1OdW1iZXIuTUFYX1ZBTFVFLC1OdW1iZXIuTUFYX1ZBTFVFLC1OdW1iZXIuTUFYX1ZBTFVFXX07Zm9yKGxldCBlPTA7ZTxWOysrZSl7bGV0IHI9ZSpMO2YmJih6PXdbMF0ocikqSS54K1IueC1YWzBdLE89d1sxXShyKSpJLnkrUi55LVhbMV0sUz13WzJdKHIpKkkueitSLnotWFsyXSxDWzBdKz16L1YsQ1sxXSs9Ty9WLENbMl0rPVMvVixHLm1pblswXT1NYXRoLm1pbihHLm1pblswXSx6KSxHLm1pblsxXT1NYXRoLm1pbihHLm1pblsxXSxPKSxHLm1pblsyXT1NYXRoLm1pbihHLm1pblsyXSxTKSxHLm1heFswXT1NYXRoLm1heChHLm1heFswXSx6KSxHLm1heFsxXT1NYXRoLm1heChHLm1heFsxXSxPKSxHLm1heFsyXT1NYXRoLm1heChHLm1heFsyXSxTKSxmWzMqZSswXT16LGZbMyplKzFdPU8sZlszKmUrMl09UyksbSYmKEY9ZFswXShyKSxQPWRbMV0ociksdj1kWzJdKHIpLF8mJihGLz0yNTYsUC89MjU2LHYvPTI1NiksbVs0KmUrMF09RixtWzQqZSsxXT1QLG1bNCplKzJdPXYpLG8mJihvW2VdPWcocikpLGMmJihjW2VdPWIocikpLGwmJihsW2VdPVUocikpLEEmJihBW2VdPWgocikpLHkmJih5W2VdPXgocikpfWxldCBZPW5ldyBBcnJheUJ1ZmZlcig0KlYpLFo9bmV3IFVpbnQzMkFycmF5KFkpO2ZvcihsZXQgZT0wO2U8VjsrK2UpWltlXT1lO2xldCAkPXtudW1Qb2ludHM6Vix0aWdodEJvdW5kaW5nQm94OkcsbWVhbjpDLHBvc2l0aW9uOnIsY29sb3I6dCxpbnRlbnNpdHk6bixjbGFzc2lmaWNhdGlvbjphLHJldHVybk51bWJlcjppLG51bWJlck9mUmV0dXJuczp1LHBvaW50U291cmNlSWQ6cyxpbmRpY2VzOll9LEQ9WyQucG9zaXRpb24sJC5jb2xvciwkLmludGVuc2l0eSwkLmNsYXNzaWZpY2F0aW9uLCQucmV0dXJuTnVtYmVyLCQubnVtYmVyT2ZSZXR1cm5zLCQucG9pbnRTb3VyY2VJZCwkLmluZGljZXNdLmZpbHRlcigoZT0+ZSkpO3Bvc3RNZXNzYWdlKCQsRCl9O1xcblwiLCBcIldvcmtlclwiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gXCIuLi9HbG9iYWwuanNcIjtcclxuLy8gRm9yY2Ugd29ya2VycyB0byBiZSBpbmNsdWRlZFxyXG5pbXBvcnQgQmluYXJ5RGVjb2RlcldvcmtlciBmcm9tIFwiLi4vd29ya2Vycy9CaW5hcnlEZWNvZGVyV29ya2VyXCI7XHJcbi8vIGltcG9ydCBMQVNMQVpXb3JrZXIgZnJvbSBcIi4uL3dvcmtlcnMvTEFTTEFaV29ya2VyXCI7XHJcbmltcG9ydCBMQVNEZWNvZGVyV29ya2VyIGZyb20gXCIuLi93b3JrZXJzL0xBU0RlY29kZXJXb3JrZXJcIjtcclxuLy8gaW1wb3J0IEdyZXlob3VuZEJpbmFyeURlY29kZXJXb3JrZXIgZnJvbSBcIi4uL3dvcmtlcnMvR3JleWhvdW5kQmluYXJ5RGVjb2RlcldvcmtlclwiO1xyXG5pbXBvcnQgREVNV29ya2VyIGZyb20gXCIuLi93b3JrZXJzL0RFTVdvcmtlclwiO1xyXG5pbXBvcnQgRXB0TGFzemlwRGVjb2RlcldvcmtlciBmcm9tIFwiLi4vd29ya2Vycy9FcHRMYXN6aXBEZWNvZGVyV29ya2VyXCI7XHJcbmltcG9ydCBFcHRCaW5hcnlEZWNvZGVyV29ya2VyIGZyb20gXCIuLi93b3JrZXJzL0VwdEJpbmFyeURlY29kZXJXb3JrZXJcIjtcclxuXHJcbi8qKlxyXG4gKiBUaGUgd29ya2VyIG1hbmFnZXIgaXMgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIGFuZCBtYW5hZ2luZyB3b3JrZXIgaW5zdGFuY2VzLlxyXG4gKi9cclxuY2xhc3MgV29ya2VyTWFuYWdlciB7XHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHR0aGlzLndvcmtlcnMgPSBbXTtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDc7IGkrKykge1xyXG5cdFx0XHR0aGlzLndvcmtlcnMucHVzaChbXSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXQgYSB3b3JrZXIgZnJvbSB0aGUgcG9vbCwgaWYgbm9uZSBhdmFpbGFibGUgb25lIHdpbGwgYmUgY3JlYXRlZC5cclxuXHQgKi9cclxuXHRnZXRXb3JrZXIodHlwZSkge1xyXG5cdFx0aWYgKHRoaXMud29ya2Vyc1t0eXBlXS5sZW5ndGggPiAwKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLndvcmtlcnNbdHlwZV0ucG9wKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0c3dpdGNoICh0eXBlKSB7XHJcblx0XHRcdGNhc2UgMDpcclxuXHRcdFx0XHRyZXR1cm4gbmV3IEJpbmFyeURlY29kZXJXb3JrZXIoKTtcclxuXHRcdFx0Y2FzZSAxOlxyXG5cdFx0XHRcdC8vIHJldHVybiBuZXcgTEFTTEFaV29ya2VyKCk7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdMQVNMQVpXb3JrZXIgbm90IGltcGxlbWVudGVkJyk7XHJcblx0XHRcdGNhc2UgMjpcclxuXHRcdFx0XHRyZXR1cm4gbmV3IExBU0RlY29kZXJXb3JrZXIoKTtcclxuXHRcdFx0Y2FzZSAzOlxyXG5cdFx0XHRcdC8vIHJldHVybiBuZXcgR3JleWhvdW5kQmluYXJ5RGVjb2RlcldvcmtlcigpO1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignR3JleWhvdW5kQmluYXJ5RGVjb2RlcldvcmtlciBub3QgaW1wbGVtZW50ZWQnKTtcclxuXHRcdFx0Y2FzZSA0OlxyXG5cdFx0XHRcdHJldHVybiBuZXcgREVNV29ya2VyKCk7XHJcblx0XHRcdGNhc2UgNTpcclxuXHRcdFx0XHRyZXR1cm4gbmV3IEVwdExhc3ppcERlY29kZXJXb3JrZXIoKTtcclxuXHRcdFx0Y2FzZSA2OlxyXG5cdFx0XHRcdHJldHVybiBuZXcgRXB0QmluYXJ5RGVjb2RlcldvcmtlcigpO1xyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdHRocm93IFwiVW5rbm93biB3b3JrZXIgcmVxdWVzdGVkXCI7XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmV0dXJuIChyZWluc2VydCkgdGhlIHdvcmtlciBpbnRvIHRoZSBwb29sLlxyXG5cdCAqL1xyXG5cdHJldHVybldvcmtlcih0eXBlLCB3b3JrZXIpIHtcclxuXHRcdHRoaXMud29ya2Vyc1t0eXBlXS5wdXNoKHdvcmtlcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSdW4gYSB0YXNrIGltbWVkaWF0bHkuXHJcblx0ICovXHJcblx0cnVuVGFzayh0eXBlLCBvbk1lc3NhZ2UsIG1lc3NhZ2UsIHRyYW5zZmVyKSB7XHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0dmFyIHdvcmtlciA9IHRoaXMuZ2V0V29ya2VyKHR5cGUpO1xyXG5cdFx0d29ya2VyLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xyXG5cdFx0XHRvbk1lc3NhZ2UoZXZlbnQpO1xyXG5cdFx0XHRzZWxmLnJldHVybldvcmtlcih0eXBlLCB3b3JrZXIpO1xyXG5cdFx0fTtcclxuXHJcblx0XHRpZiAodHJhbnNmZXIgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR3b3JrZXIucG9zdE1lc3NhZ2UobWVzc2FnZSwgdHJhbnNmZXIpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdHdvcmtlci5wb3N0TWVzc2FnZShtZXNzYWdlKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5Xb3JrZXJNYW5hZ2VyLkJJTkFSWV9ERUNPREVSID0gMDtcclxuV29ya2VyTWFuYWdlci5MQVNfTEFaID0gMTtcclxuV29ya2VyTWFuYWdlci5MQVNfREVDT0RFUiA9IDI7XHJcbldvcmtlck1hbmFnZXIuR1JFWUhPVU5EID0gMztcclxuV29ya2VyTWFuYWdlci5ERU0gPSA0O1xyXG5Xb3JrZXJNYW5hZ2VyLkVQVF9MQVNfWklQX0RFQ09ERVIgPSA1O1xyXG5Xb3JrZXJNYW5hZ2VyLkVQVF9CSU5BUllfREVDT0RFUiA9IDY7XHJcblxyXG5leHBvcnQgeyBXb3JrZXJNYW5hZ2VyIH07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHtMUlV9IGZyb20gXCIuL3V0aWxzL0xSVS5qc1wiO1xyXG5pbXBvcnQge1dvcmtlck1hbmFnZXJ9IGZyb20gXCIuL3V0aWxzL1dvcmtlck1hbmFnZXIuanNcIjtcclxuXHJcbmZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHQoKSB7XHJcblx0dmFyIGN1cnJlbnRTY3JpcHQgPSAoZG9jdW1lbnQgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdCkgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0IDogKGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XHJcblx0XHRyZXR1cm4gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLmdldEF0dHJpYnV0ZSgnc3JjJyk7XHJcblx0fSkoKTtcclxuXHRyZXR1cm4gY3VycmVudFNjcmlwdDtcdFxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRCYXNlUGF0aCgpXHJcbntcclxuXHR2YXIgY3VycmVudFNjcmlwdCA9IGdldEN1cnJlbnRTY3JpcHQoKTtcclxuXHRpZihjdXJyZW50U2NyaXB0ICYmIGN1cnJlbnRTY3JpcHQuc3JjKVxyXG5cdHtcclxuXHRcdHZhciBzY3JpcHRQYXRoID0gbmV3IFVSTChjdXJyZW50U2NyaXB0LnNyYyArIFwiLy4uXCIpLmhyZWY7XHJcblxyXG5cdFx0aWYoc2NyaXB0UGF0aC5zbGljZSgtMSkgPT09IFwiL1wiKVxyXG5cdFx0e1xyXG5cdFx0XHRzY3JpcHRQYXRoID0gc2NyaXB0UGF0aC5zbGljZSgwLCAtMSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHNjcmlwdFBhdGg7XHJcblx0fVxyXG5cdGVsc2VcclxuXHR7XHJcblx0XHRjb25zb2xlLmVycm9yKFwiUG90cmVlOiBXYXMgdW5hYmxlIHRvIGZpbmQgaXRzIHNjcmlwdCBwYXRoIHVzaW5nIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuXCIpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIFwiXCI7XHJcbn1cclxuXHJcbnZhciBHbG9iYWwgPSBcclxue1xyXG5cdGRlYnVnOiB7fSxcclxuXHR3b3JrZXJQYXRoOiBnZXRCYXNlUGF0aCgpLFxyXG5cdG1heE5vZGVzTG9hZEdQVUZyYW1lOiAyMCxcclxuXHRtYXhERU1MZXZlbDogMCxcclxuXHRtYXhOb2Rlc0xvYWRpbmc6IG5hdmlnYXRvci5oYXJkd2FyZUNvbmN1cnJlbmN5ICE9PSB1bmRlZmluZWQgPyBuYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeSA6IDQsXHJcblx0cG9pbnRMb2FkTGltaXQ6IDFlMTAsXHJcblx0bnVtTm9kZXNMb2FkaW5nOiAwLFxyXG5cdG1lYXN1cmVUaW1pbmdzOiBmYWxzZSxcclxuXHR3b3JrZXJQb29sOiBuZXcgV29ya2VyTWFuYWdlcigpLFxyXG5cdGxydTogbmV3IExSVSgpLFxyXG5cdHBvaW50Y2xvdWRUcmFuc2Zvcm1WZXJzaW9uOiB1bmRlZmluZWRcclxufTtcclxuXHJcbmV4cG9ydCB7R2xvYmFsfTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcInRocmVlXCIpOzsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnZhciBQb2ludEF0dHJpYnV0ZU5hbWVzID1cclxue1xyXG5cdFBPU0lUSU9OX0NBUlRFU0lBTjogMCwgLy9mbG9hdCB4LCB5LCB6LFxyXG5cdENPTE9SX1BBQ0tFRDogMSwgLy9ieXRlIHIsIGcsIGIsIGEsIEk6IFswLDFdXHJcblx0Q09MT1JfRkxPQVRTXzE6IDIsIC8vZmxvYXQgciwgZywgYiwgSTogWzAsMV1cclxuXHRDT0xPUl9GTE9BVFNfMjU1OiAzLCAvL2Zsb2F0IHIsIGcsIGIsIEk6IFswLDI1NV1cclxuXHROT1JNQUxfRkxPQVRTOiA0LCAvL2Zsb2F0IHgsIHksIHosXHJcblx0RklMTEVSOiA1LFxyXG5cdElOVEVOU0lUWTogNixcclxuXHRDTEFTU0lGSUNBVElPTjogNyxcclxuXHROT1JNQUxfU1BIRVJFTUFQUEVEOiA4LFxyXG5cdE5PUk1BTF9PQ1QxNjogOSxcclxuXHROT1JNQUw6IDEwLFxyXG5cdFJFVFVSTl9OVU1CRVI6IDExLFxyXG5cdE5VTUJFUl9PRl9SRVRVUk5TOiAxMixcclxuXHRTT1VSQ0VfSUQ6IDEzLFxyXG5cdElORElDRVM6IDE0LFxyXG5cdFNQQUNJTkc6IDE1XHJcbn07XHJcblxyXG4vKipcclxuICogU29tZSB0eXBlcyBvZiBwb3NzaWJsZSBwb2ludCBhdHRyaWJ1dGUgZGF0YSBmb3JtYXRzXHJcbiAqXHJcbiAqIEBjbGFzc1xyXG4gKi9cclxudmFyIFBvaW50QXR0cmlidXRlVHlwZXMgPVxyXG57XHJcblx0REFUQV9UWVBFX0RPVUJMRTpcclxuXHR7XHJcblx0XHRvcmRpbmFsOiAwLFxyXG5cdFx0c2l6ZTogOFxyXG5cdH0sXHJcblx0REFUQV9UWVBFX0ZMT0FUOlxyXG5cdHtcclxuXHRcdG9yZGluYWw6IDEsXHJcblx0XHRzaXplOiA0XHJcblx0fSxcclxuXHREQVRBX1RZUEVfSU5UODpcclxuXHR7XHJcblx0XHRvcmRpbmFsOiAyLFxyXG5cdFx0c2l6ZTogMVxyXG5cdH0sXHJcblx0REFUQV9UWVBFX1VJTlQ4OlxyXG5cdHtcclxuXHRcdG9yZGluYWw6IDMsXHJcblx0XHRzaXplOiAxXHJcblx0fSxcclxuXHREQVRBX1RZUEVfSU5UMTY6XHJcblx0e1xyXG5cdFx0b3JkaW5hbDogNCxcclxuXHRcdHNpemU6IDJcclxuXHR9LFxyXG5cdERBVEFfVFlQRV9VSU5UMTY6XHJcblx0e1xyXG5cdFx0b3JkaW5hbDogNSxcclxuXHRcdHNpemU6IDJcclxuXHR9LFxyXG5cdERBVEFfVFlQRV9JTlQzMjpcclxuXHR7XHJcblx0XHRvcmRpbmFsOiA2LFxyXG5cdFx0c2l6ZTogNFxyXG5cdH0sXHJcblx0REFUQV9UWVBFX1VJTlQzMjpcclxuXHR7XHJcblx0XHRvcmRpbmFsOiA3LFxyXG5cdFx0c2l6ZTogNFxyXG5cdH0sXHJcblx0REFUQV9UWVBFX0lOVDY0OlxyXG5cdHtcclxuXHRcdG9yZGluYWw6IDgsXHJcblx0XHRzaXplOiA4XHJcblx0fSxcclxuXHREQVRBX1RZUEVfVUlOVDY0OlxyXG5cdHtcclxuXHRcdG9yZGluYWw6IDksXHJcblx0XHRzaXplOiA4XHJcblx0fVxyXG59O1xyXG5cclxudmFyIGkgPSAwO1xyXG5mb3IodmFyIG9iaiBpbiBQb2ludEF0dHJpYnV0ZVR5cGVzKVxyXG57XHJcblx0UG9pbnRBdHRyaWJ1dGVUeXBlc1tpXSA9IFBvaW50QXR0cmlidXRlVHlwZXNbb2JqXTtcclxuXHRpKys7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBIHNpbmdsZSBwb2ludCBhdHRyaWJ1dGUgc3VjaCBhcyBjb2xvci9ub3JtYWwvLi4gYW5kIGl0cyBkYXRhIGZvcm1hdC9udW1iZXIgb2YgZWxlbWVudHMvLi4uXHJcbiAqL1xyXG5mdW5jdGlvbiBQb2ludEF0dHJpYnV0ZShuYW1lLCB0eXBlLCBudW1FbGVtZW50cylcclxue1xyXG5cdHRoaXMubmFtZSA9IG5hbWU7XHJcblx0dGhpcy50eXBlID0gdHlwZTtcclxuXHR0aGlzLm51bUVsZW1lbnRzID0gbnVtRWxlbWVudHM7XHJcblx0dGhpcy5ieXRlU2l6ZSA9IHRoaXMubnVtRWxlbWVudHMgKiB0aGlzLnR5cGUuc2l6ZTtcclxufTtcclxuXHJcblBvaW50QXR0cmlidXRlLlBPU0lUSU9OX0NBUlRFU0lBTiA9IG5ldyBQb2ludEF0dHJpYnV0ZShQb2ludEF0dHJpYnV0ZU5hbWVzLlBPU0lUSU9OX0NBUlRFU0lBTiwgUG9pbnRBdHRyaWJ1dGVUeXBlcy5EQVRBX1RZUEVfRkxPQVQsIDMpO1xyXG5Qb2ludEF0dHJpYnV0ZS5SR0JBX1BBQ0tFRCA9IG5ldyBQb2ludEF0dHJpYnV0ZShQb2ludEF0dHJpYnV0ZU5hbWVzLkNPTE9SX1BBQ0tFRCwgUG9pbnRBdHRyaWJ1dGVUeXBlcy5EQVRBX1RZUEVfSU5UOCwgNCk7XHJcblBvaW50QXR0cmlidXRlLkNPTE9SX1BBQ0tFRCA9IFBvaW50QXR0cmlidXRlLlJHQkFfUEFDS0VEO1xyXG5Qb2ludEF0dHJpYnV0ZS5SR0JfUEFDS0VEID0gbmV3IFBvaW50QXR0cmlidXRlKFBvaW50QXR0cmlidXRlTmFtZXMuQ09MT1JfUEFDS0VELCBQb2ludEF0dHJpYnV0ZVR5cGVzLkRBVEFfVFlQRV9JTlQ4LCAzKTtcclxuUG9pbnRBdHRyaWJ1dGUuTk9STUFMX0ZMT0FUUyA9IG5ldyBQb2ludEF0dHJpYnV0ZShQb2ludEF0dHJpYnV0ZU5hbWVzLk5PUk1BTF9GTE9BVFMsIFBvaW50QXR0cmlidXRlVHlwZXMuREFUQV9UWVBFX0ZMT0FULCAzKTtcclxuUG9pbnRBdHRyaWJ1dGUuRklMTEVSXzFCID0gbmV3IFBvaW50QXR0cmlidXRlKFBvaW50QXR0cmlidXRlTmFtZXMuRklMTEVSLCBQb2ludEF0dHJpYnV0ZVR5cGVzLkRBVEFfVFlQRV9VSU5UOCwgMSk7XHJcblBvaW50QXR0cmlidXRlLklOVEVOU0lUWSA9IG5ldyBQb2ludEF0dHJpYnV0ZShQb2ludEF0dHJpYnV0ZU5hbWVzLklOVEVOU0lUWSwgUG9pbnRBdHRyaWJ1dGVUeXBlcy5EQVRBX1RZUEVfVUlOVDE2LCAxKTtcclxuUG9pbnRBdHRyaWJ1dGUuQ0xBU1NJRklDQVRJT04gPSBuZXcgUG9pbnRBdHRyaWJ1dGUoUG9pbnRBdHRyaWJ1dGVOYW1lcy5DTEFTU0lGSUNBVElPTiwgUG9pbnRBdHRyaWJ1dGVUeXBlcy5EQVRBX1RZUEVfVUlOVDgsIDEpO1xyXG5Qb2ludEF0dHJpYnV0ZS5OT1JNQUxfU1BIRVJFTUFQUEVEID0gbmV3IFBvaW50QXR0cmlidXRlKFBvaW50QXR0cmlidXRlTmFtZXMuTk9STUFMX1NQSEVSRU1BUFBFRCwgUG9pbnRBdHRyaWJ1dGVUeXBlcy5EQVRBX1RZUEVfVUlOVDgsIDIpO1xyXG5Qb2ludEF0dHJpYnV0ZS5OT1JNQUxfT0NUMTYgPSBuZXcgUG9pbnRBdHRyaWJ1dGUoUG9pbnRBdHRyaWJ1dGVOYW1lcy5OT1JNQUxfT0NUMTYsIFBvaW50QXR0cmlidXRlVHlwZXMuREFUQV9UWVBFX1VJTlQ4LCAyKTtcclxuUG9pbnRBdHRyaWJ1dGUuTk9STUFMID0gbmV3IFBvaW50QXR0cmlidXRlKFBvaW50QXR0cmlidXRlTmFtZXMuTk9STUFMLCBQb2ludEF0dHJpYnV0ZVR5cGVzLkRBVEFfVFlQRV9GTE9BVCwgMyk7XHJcblBvaW50QXR0cmlidXRlLlJFVFVSTl9OVU1CRVIgPSBuZXcgUG9pbnRBdHRyaWJ1dGUoUG9pbnRBdHRyaWJ1dGVOYW1lcy5SRVRVUk5fTlVNQkVSLCBQb2ludEF0dHJpYnV0ZVR5cGVzLkRBVEFfVFlQRV9VSU5UOCwgMSk7XHJcblBvaW50QXR0cmlidXRlLk5VTUJFUl9PRl9SRVRVUk5TID0gbmV3IFBvaW50QXR0cmlidXRlKFBvaW50QXR0cmlidXRlTmFtZXMuTlVNQkVSX09GX1JFVFVSTlMsIFBvaW50QXR0cmlidXRlVHlwZXMuREFUQV9UWVBFX1VJTlQ4LCAxKTtcclxuUG9pbnRBdHRyaWJ1dGUuU09VUkNFX0lEID0gbmV3IFBvaW50QXR0cmlidXRlKFBvaW50QXR0cmlidXRlTmFtZXMuU09VUkNFX0lELCBQb2ludEF0dHJpYnV0ZVR5cGVzLkRBVEFfVFlQRV9VSU5UOCwgMSk7XHJcblBvaW50QXR0cmlidXRlLklORElDRVMgPSBuZXcgUG9pbnRBdHRyaWJ1dGUoUG9pbnRBdHRyaWJ1dGVOYW1lcy5JTkRJQ0VTLCBQb2ludEF0dHJpYnV0ZVR5cGVzLkRBVEFfVFlQRV9VSU5UMzIsIDEpO1xyXG5Qb2ludEF0dHJpYnV0ZS5TUEFDSU5HID0gbmV3IFBvaW50QXR0cmlidXRlKFBvaW50QXR0cmlidXRlTmFtZXMuU1BBQ0lORywgUG9pbnRBdHRyaWJ1dGVUeXBlcy5EQVRBX1RZUEVfRkxPQVQsIDEpO1xyXG5cclxuLyoqXHJcbiAqIE9yZGVyZWQgbGlzdCBvZiBQb2ludEF0dHJpYnV0ZXMgdXNlZCB0byBpZGVudGlmeSBob3cgcG9pbnRzIGFyZSBhbGlnbmVkIGluIGEgYnVmZmVyLlxyXG4gKi9cclxuZnVuY3Rpb24gUG9pbnRBdHRyaWJ1dGVzKHBvaW50QXR0cmlidXRlcylcclxue1xyXG5cdHRoaXMuYXR0cmlidXRlcyA9IFtdO1xyXG5cdHRoaXMuYnl0ZVNpemUgPSAwO1xyXG5cdHRoaXMuc2l6ZSA9IDA7XHJcblxyXG5cdGlmKHBvaW50QXR0cmlidXRlcyAhPSBudWxsKVxyXG5cdHtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBwb2ludEF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspXHJcblx0XHR7XHJcblx0XHRcdHZhciBwb2ludEF0dHJpYnV0ZU5hbWUgPSBwb2ludEF0dHJpYnV0ZXNbaV07XHJcblx0XHRcdHZhciBwb2ludEF0dHJpYnV0ZSA9IFBvaW50QXR0cmlidXRlW3BvaW50QXR0cmlidXRlTmFtZV07XHJcblx0XHRcdHRoaXMuYXR0cmlidXRlcy5wdXNoKHBvaW50QXR0cmlidXRlKTtcclxuXHRcdFx0dGhpcy5ieXRlU2l6ZSArPSBwb2ludEF0dHJpYnV0ZS5ieXRlU2l6ZTtcclxuXHRcdFx0dGhpcy5zaXplKys7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuUG9pbnRBdHRyaWJ1dGVzLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihwb2ludEF0dHJpYnV0ZSlcclxue1xyXG5cdHRoaXMuYXR0cmlidXRlcy5wdXNoKHBvaW50QXR0cmlidXRlKTtcclxuXHR0aGlzLmJ5dGVTaXplICs9IHBvaW50QXR0cmlidXRlLmJ5dGVTaXplO1xyXG5cdHRoaXMuc2l6ZSsrO1xyXG59O1xyXG5cclxuUG9pbnRBdHRyaWJ1dGVzLnByb3RvdHlwZS5oYXNDb2xvcnMgPSBmdW5jdGlvbigpXHJcbntcclxuXHRmb3IodmFyIG5hbWUgaW4gdGhpcy5hdHRyaWJ1dGVzKVxyXG5cdHtcclxuXHRcdHZhciBwb2ludEF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlc1tuYW1lXTtcclxuXHRcdGlmKHBvaW50QXR0cmlidXRlLm5hbWUgPT09IFBvaW50QXR0cmlidXRlTmFtZXMuQ09MT1JfUEFDS0VEKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcblBvaW50QXR0cmlidXRlcy5wcm90b3R5cGUuaGFzTm9ybWFscyA9IGZ1bmN0aW9uKClcclxue1xyXG5cdGZvcih2YXIgbmFtZSBpbiB0aGlzLmF0dHJpYnV0ZXMpXHJcblx0e1xyXG5cdFx0dmFyIHBvaW50QXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzW25hbWVdO1xyXG5cdFx0aWYocG9pbnRBdHRyaWJ1dGUgPT09IFBvaW50QXR0cmlidXRlLk5PUk1BTF9TUEhFUkVNQVBQRUQgfHwgcG9pbnRBdHRyaWJ1dGUgPT09IFBvaW50QXR0cmlidXRlLk5PUk1BTF9GTE9BVFMgfHwgcG9pbnRBdHRyaWJ1dGUgPT09IFBvaW50QXR0cmlidXRlLk5PUk1BTCB8fCBwb2ludEF0dHJpYnV0ZSA9PT0gUG9pbnRBdHRyaWJ1dGUuTk9STUFMX09DVDE2KVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcbmV4cG9ydCB7UG9pbnRBdHRyaWJ1dGUsIFBvaW50QXR0cmlidXRlcywgUG9pbnRBdHRyaWJ1dGVOYW1lcywgUG9pbnRBdHRyaWJ1dGVUeXBlc307IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG4vL1xyXG4vL2luZGV4IGlzIGluIG9yZGVyIHh5enh5enh5elxyXG5jbGFzcyBERU1Ob2RlXHJcbntcclxuXHRjb25zdHJ1Y3RvcihuYW1lLCBib3gsIHRpbGVTaXplKVxyXG5cdHtcclxuXHRcdHRoaXMubmFtZSA9IG5hbWU7XHJcblx0XHR0aGlzLmJveCA9IGJveDtcclxuXHRcdHRoaXMudGlsZVNpemUgPSB0aWxlU2l6ZTtcclxuXHRcdHRoaXMubGV2ZWwgPSB0aGlzLm5hbWUubGVuZ3RoIC0gMTtcclxuXHRcdHRoaXMuZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkodGlsZVNpemUgKiB0aWxlU2l6ZSk7XHJcblx0XHR0aGlzLmRhdGEuZmlsbCgtSW5maW5pdHkpO1xyXG5cdFx0dGhpcy5jaGlsZHJlbiA9IFtdO1xyXG5cclxuXHRcdHRoaXMubWlwTWFwID0gW3RoaXMuZGF0YV07XHJcblx0XHR0aGlzLm1pcE1hcE5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdGNyZWF0ZU1pcE1hcCgpXHJcblx0e1xyXG5cdFx0dGhpcy5taXBNYXAgPSBbdGhpcy5kYXRhXTtcclxuXHJcblx0XHR2YXIgc291cmNlU2l6ZSA9IHRoaXMudGlsZVNpemU7XHJcblx0XHR2YXIgbWlwU2l6ZSA9IHBhcnNlSW50KHNvdXJjZVNpemUgLyAyKTtcclxuXHRcdHZhciBtaXBTb3VyY2UgPSB0aGlzLmRhdGE7XHJcblx0XHR3aGlsZShtaXBTaXplID4gMSlcclxuXHRcdHtcclxuXHRcdFx0dmFyIG1pcERhdGEgPSBuZXcgRmxvYXQzMkFycmF5KG1pcFNpemUgKiBtaXBTaXplKTtcclxuXHJcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBtaXBTaXplOyBpKyspXHJcblx0XHRcdHtcclxuXHRcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgbWlwU2l6ZTsgaisrKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciBoMDAgPSBtaXBTb3VyY2VbMiAqIGkgKyAwICsgMiAqIGogKiBzb3VyY2VTaXplXTtcclxuXHRcdFx0XHRcdHZhciBoMDEgPSBtaXBTb3VyY2VbMiAqIGkgKyAwICsgMiAqIGogKiBzb3VyY2VTaXplICsgc291cmNlU2l6ZV07XHJcblx0XHRcdFx0XHR2YXIgaDEwID0gbWlwU291cmNlWzIgKiBpICsgMSArIDIgKiBqICogc291cmNlU2l6ZV07XHJcblx0XHRcdFx0XHR2YXIgaDExID0gbWlwU291cmNlWzIgKiBpICsgMSArIDIgKiBqICogc291cmNlU2l6ZSArIHNvdXJjZVNpemVdO1xyXG5cclxuXHRcdFx0XHRcdHZhciBbaGVpZ2h0LCB3ZWlnaHRdID0gWzAsIDBdO1xyXG5cclxuXHRcdFx0XHRcdGlmKGlzRmluaXRlKGgwMCkpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGhlaWdodCArPSBoMDA7XHJcblx0XHRcdFx0XHRcdHdlaWdodCArPSAxO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdGlmKGlzRmluaXRlKGgwMSkpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGhlaWdodCArPSBoMDE7XHJcblx0XHRcdFx0XHRcdHdlaWdodCArPSAxO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdGlmKGlzRmluaXRlKGgxMCkpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGhlaWdodCArPSBoMTA7XHJcblx0XHRcdFx0XHRcdHdlaWdodCArPSAxO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdGlmKGlzRmluaXRlKGgxMSkpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGhlaWdodCArPSBoMTE7XHJcblx0XHRcdFx0XHRcdHdlaWdodCArPSAxO1xyXG5cdFx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0XHRoZWlnaHQgPSBoZWlnaHQgLyB3ZWlnaHQ7XHJcblxyXG5cdFx0XHRcdFx0Ly92YXIgaHMgPSBbaDAwLCBoMDEsIGgxMCwgaDExXS5maWx0ZXIoaCA9PiBpc0Zpbml0ZShoKSk7XHJcblx0XHRcdFx0XHQvL3ZhciBoZWlnaHQgPSBocy5yZWR1Y2UoKGEsIHYsIGkpID0+IGEgKyB2LCAwKSAvIGhzLmxlbmd0aDtcclxuXHJcblx0XHRcdFx0XHRtaXBEYXRhW2kgKyBqICogbWlwU2l6ZV0gPSBoZWlnaHQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLm1pcE1hcC5wdXNoKG1pcERhdGEpO1xyXG5cclxuXHRcdFx0bWlwU291cmNlID0gbWlwRGF0YTtcclxuXHRcdFx0c291cmNlU2l6ZSA9IG1pcFNpemU7XHJcblx0XHRcdG1pcFNpemUgPSBwYXJzZUludChtaXBTaXplIC8gMik7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5taXBNYXBOZWVkc1VwZGF0ZSA9IGZhbHNlO1xyXG5cdH1cclxuXHJcblx0dXYocG9zaXRpb24pXHJcblx0e1xyXG5cdFx0dmFyIGJveFNpemUgPSB0aGlzLmJveC5nZXRTaXplKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG5cclxuXHRcdHZhciB1ID0gKHBvc2l0aW9uLnggLSB0aGlzLmJveC5taW4ueCkgLyBib3hTaXplLng7XHJcblx0XHR2YXIgdiA9IChwb3NpdGlvbi55IC0gdGhpcy5ib3gubWluLnkpIC8gYm94U2l6ZS55O1xyXG5cclxuXHRcdHJldHVybiBbdSwgdl07XHJcblx0fVxyXG5cclxuXHRoZWlnaHRBdE1pcE1hcExldmVsKHBvc2l0aW9uLCBtaXBNYXBMZXZlbClcclxuXHR7XHJcblx0XHR2YXIgdXYgPSB0aGlzLnV2KHBvc2l0aW9uKTtcclxuXHJcblx0XHR2YXIgdGlsZVNpemUgPSBwYXJzZUludCh0aGlzLnRpbGVTaXplIC8gcGFyc2VJbnQoMiAqKiBtaXBNYXBMZXZlbCkpO1xyXG5cdFx0dmFyIGRhdGEgPSB0aGlzLm1pcE1hcFttaXBNYXBMZXZlbF07XHJcblxyXG5cdFx0dmFyIGkgPSBNYXRoLm1pbih1dlswXSAqIHRpbGVTaXplLCB0aWxlU2l6ZSAtIDEpO1xyXG5cdFx0dmFyIGogPSBNYXRoLm1pbih1dlsxXSAqIHRpbGVTaXplLCB0aWxlU2l6ZSAtIDEpO1xyXG5cclxuXHRcdHZhciBhID0gaSAlIDE7XHJcblx0XHR2YXIgYiA9IGogJSAxO1xyXG5cclxuXHRcdHZhciBbaTAsIGkxXSA9IFtNYXRoLmZsb29yKGkpLCBNYXRoLmNlaWwoaSldO1xyXG5cdFx0dmFyIFtqMCwgajFdID0gW01hdGguZmxvb3IoaiksIE1hdGguY2VpbChqKV07XHJcblxyXG5cdFx0dmFyIGgwMCA9IGRhdGFbaTAgKyB0aWxlU2l6ZSAqIGowXTtcclxuXHRcdHZhciBoMDEgPSBkYXRhW2kwICsgdGlsZVNpemUgKiBqMV07XHJcblx0XHR2YXIgaDEwID0gZGF0YVtpMSArIHRpbGVTaXplICogajBdO1xyXG5cdFx0dmFyIGgxMSA9IGRhdGFbaTEgKyB0aWxlU2l6ZSAqIGoxXTtcclxuXHJcblx0XHR2YXIgd2gwMCA9IGlzRmluaXRlKGgwMCkgPyAoMSAtIGEpICogKDEgLSBiKSA6IDA7XHJcblx0XHR2YXIgd2gwMSA9IGlzRmluaXRlKGgwMSkgPyAoMSAtIGEpICogYiA6IDA7XHJcblx0XHR2YXIgd2gxMCA9IGlzRmluaXRlKGgxMCkgPyBhICogKDEgLSBiKSA6IDA7XHJcblx0XHR2YXIgd2gxMSA9IGlzRmluaXRlKGgxMSkgPyBhICogYiA6IDA7XHJcblxyXG5cdFx0dmFyIHdzdW0gPSB3aDAwICsgd2gwMSArIHdoMTAgKyB3aDExO1xyXG5cdFx0d2gwMCA9IHdoMDAgLyB3c3VtO1xyXG5cdFx0d2gwMSA9IHdoMDEgLyB3c3VtO1xyXG5cdFx0d2gxMCA9IHdoMTAgLyB3c3VtO1xyXG5cdFx0d2gxMSA9IHdoMTEgLyB3c3VtO1xyXG5cclxuXHRcdGlmKHdzdW0gPT09IDApXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBoID0gMDtcclxuXHJcblx0XHRpZihpc0Zpbml0ZShoMDApKSBoICs9IGgwMCAqIHdoMDA7XHJcblx0XHRpZihpc0Zpbml0ZShoMDEpKSBoICs9IGgwMSAqIHdoMDE7XHJcblx0XHRpZihpc0Zpbml0ZShoMTApKSBoICs9IGgxMCAqIHdoMTA7XHJcblx0XHRpZihpc0Zpbml0ZShoMTEpKSBoICs9IGgxMSAqIHdoMTE7XHJcblxyXG5cdFx0cmV0dXJuIGg7XHJcblx0fVxyXG5cclxuXHRoZWlnaHQocG9zaXRpb24pXHJcblx0e1xyXG5cdFx0dmFyIGggPSBudWxsO1xyXG5cclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLm1pcE1hcC5sZW5ndGg7IGkrKylcclxuXHRcdHtcclxuXHRcdFx0aCA9IHRoaXMuaGVpZ2h0QXRNaXBNYXBMZXZlbChwb3NpdGlvbiwgaSk7XHJcblxyXG5cdFx0XHRpZihoICE9PSBudWxsKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmV0dXJuIGg7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gaDtcclxuXHR9XHJcblxyXG5cdHRyYXZlcnNlKGhhbmRsZXIsIGxldmVsID0gMClcclxuXHR7XHJcblx0XHRoYW5kbGVyKHRoaXMsIGxldmVsKTtcclxuXHJcblx0XHRmb3IodmFyIGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4uZmlsdGVyKGMgPT4gYyAhPT0gdW5kZWZpbmVkKSlcclxuXHRcdHtcclxuXHRcdFx0Y2hpbGQudHJhdmVyc2UoaGFuZGxlciwgbGV2ZWwgKyAxKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQge0RFTU5vZGV9IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5pbXBvcnQge1dvcmtlck1hbmFnZXJ9IGZyb20gXCIuLi91dGlscy9Xb3JrZXJNYW5hZ2VyLmpzXCI7XHJcbmltcG9ydCB7R2xvYmFsfSBmcm9tIFwiLi4vR2xvYmFsLmpzXCI7XHJcbmltcG9ydCB7REVNTm9kZX0gZnJvbSBcIi4vREVNTm9kZS5qc1wiO1xyXG5cclxuY2xhc3MgREVNXHJcbntcclxuXHRjb25zdHJ1Y3Rvcihwb2ludGNsb3VkKVxyXG5cdHtcclxuXHRcdHRoaXMucG9pbnRjbG91ZCA9IHBvaW50Y2xvdWQ7XHJcblx0XHR0aGlzLm1hdHJpeCA9IG51bGw7XHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcclxuXHRcdHRoaXMudGlsZVNpemUgPSA2NDtcclxuXHRcdHRoaXMucm9vdCA9IG51bGw7XHJcblx0XHR0aGlzLnZlcnNpb24gPSAwO1xyXG5cdH1cclxuXHJcblx0Ly9leHBhbmRzIHRoZSB0cmVlIHRvIGFsbCBub2RlcyB0aGF0IGludGVyc2VjdCA8Ym94PiBhdCA8bGV2ZWw+IHJldHVybnMgdGhlIGludGVyc2VjdGluZyBub2RlcyBhdCA8bGV2ZWw+XHJcblx0ZXhwYW5kQW5kRmluZEJ5Qm94KGJveCwgbGV2ZWwpXHJcblx0e1xyXG5cdFx0aWYobGV2ZWwgPT09IDApXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiBbdGhpcy5yb290XTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgcmVzdWx0ID0gW107XHJcblx0XHR2YXIgc3RhY2sgPSBbdGhpcy5yb290XTtcclxuXHJcblx0XHR3aGlsZShzdGFjay5sZW5ndGggPiAwKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgbm9kZSA9IHN0YWNrLnBvcCgpO1xyXG5cdFx0XHR2YXIgbm9kZUJveFNpemUgPSBub2RlLmJveC5nZXRTaXplKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG5cclxuXHRcdFx0Ly9jaGVjayB3aGljaCBjaGlsZHJlbiBpbnRlcnNlY3QgYnkgdHJhbnNmb3JtaW5nIG1pbi9tYXggdG8gcXVhZHJhbnRzXHJcblx0XHRcdHZhciBtaW4gPSB7XHJcblx0XHRcdFx0eDogKGJveC5taW4ueCAtIG5vZGUuYm94Lm1pbi54KSAvIG5vZGVCb3hTaXplLngsXHJcblx0XHRcdFx0eTogKGJveC5taW4ueSAtIG5vZGUuYm94Lm1pbi55KSAvIG5vZGVCb3hTaXplLnlcclxuXHRcdFx0fTtcclxuXHRcdFx0dmFyIG1heCA9IHtcclxuXHRcdFx0XHR4OiAoYm94Lm1heC54IC0gbm9kZS5ib3gubWF4LngpIC8gbm9kZUJveFNpemUueCxcclxuXHRcdFx0XHR5OiAoYm94Lm1heC55IC0gbm9kZS5ib3gubWF4LnkpIC8gbm9kZUJveFNpemUueVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0bWluLnggPSBtaW4ueCA8IDAuNSA/IDAgOiAxO1xyXG5cdFx0XHRtaW4ueSA9IG1pbi55IDwgMC41ID8gMCA6IDE7XHJcblx0XHRcdG1heC54ID0gbWF4LnggPCAwLjUgPyAwIDogMTtcclxuXHRcdFx0bWF4LnkgPSBtYXgueSA8IDAuNSA/IDAgOiAxO1xyXG5cclxuXHRcdFx0dmFyIGNoaWxkSW5kaWNlcztcclxuXHRcdFx0aWYobWluLnggPT09IDAgJiYgbWluLnkgPT09IDAgJiYgbWF4LnggPT09IDEgJiYgbWF4LnkgPT09IDEpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjaGlsZEluZGljZXMgPSBbMCwgMSwgMiwgM107XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZihtaW4ueCA9PT0gbWF4LnggJiYgbWluLnkgPT09IG1heC55KVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y2hpbGRJbmRpY2VzID0gWyhtaW4ueCA8PCAxKSB8IG1pbi55XTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjaGlsZEluZGljZXMgPSBbKG1pbi54IDw8IDEpIHwgbWluLnksIChtYXgueCA8PCAxKSB8IG1heC55XTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Zm9yKHZhciBpbmRleCBvZiBjaGlsZEluZGljZXMpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpZihub2RlLmNoaWxkcmVuW2luZGV4XSA9PT0gdW5kZWZpbmVkKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciBjaGlsZEJveCA9IG5vZGUuYm94LmNsb25lKCk7XHJcblxyXG5cdFx0XHRcdFx0aWYoKGluZGV4ICYgMikgPiAwKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRjaGlsZEJveC5taW4ueCArPSBub2RlQm94U2l6ZS54IC8gMi4wO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRjaGlsZEJveC5tYXgueCAtPSBub2RlQm94U2l6ZS54IC8gMi4wO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdGlmKChpbmRleCAmIDEpID4gMClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0Y2hpbGRCb3gubWluLnkgKz0gbm9kZUJveFNpemUueSAvIDIuMDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0Y2hpbGRCb3gubWF4LnkgLT0gbm9kZUJveFNpemUueSAvIDIuMDtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR2YXIgY2hpbGQgPSBuZXcgREVNTm9kZShub2RlLm5hbWUgKyBpbmRleCwgY2hpbGRCb3gsIHRoaXMudGlsZVNpemUpO1xyXG5cdFx0XHRcdFx0bm9kZS5jaGlsZHJlbltpbmRleF0gPSBjaGlsZDtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHZhciBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baW5kZXhdO1xyXG5cclxuXHRcdFx0XHRpZihjaGlsZC5sZXZlbCA8IGxldmVsKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHN0YWNrLnB1c2goY2hpbGQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0cmVzdWx0LnB1c2goY2hpbGQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRjaGlsZEluZGV4KHV2KVxyXG5cdHtcclxuXHRcdHZhciBbeCwgeV0gPSB1di5tYXAobiA9PiBuIDwgMC41ID8gMCA6IDEpO1xyXG5cclxuXHRcdHZhciBpbmRleCA9ICh4IDw8IDEpIHwgeTtcclxuXHJcblx0XHRyZXR1cm4gaW5kZXg7XHJcblx0fVxyXG5cclxuXHRoZWlnaHQocG9zaXRpb24pXHJcblx0e1xyXG5cdFx0aWYoIXRoaXMucm9vdClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGhlaWdodCA9IG51bGw7XHJcblx0XHR2YXIgbGlzdCA9IFt0aGlzLnJvb3RdO1xyXG5cdFx0d2hpbGUodHJ1ZSlcclxuXHRcdHtcclxuXHRcdFx0dmFyIG5vZGUgPSBsaXN0W2xpc3QubGVuZ3RoIC0gMV07XHJcblxyXG5cdFx0XHR2YXIgY3VycmVudEhlaWdodCA9IG5vZGUuaGVpZ2h0KHBvc2l0aW9uKTtcclxuXHJcblx0XHRcdGlmKGN1cnJlbnRIZWlnaHQgIT09IG51bGwpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRoZWlnaHQgPSBjdXJyZW50SGVpZ2h0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgdXYgPSBub2RlLnV2KHBvc2l0aW9uKTtcclxuXHRcdFx0dmFyIGNoaWxkSW5kZXggPSB0aGlzLmNoaWxkSW5kZXgodXYpO1xyXG5cclxuXHRcdFx0aWYobm9kZS5jaGlsZHJlbltjaGlsZEluZGV4XSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGxpc3QucHVzaChub2RlLmNoaWxkcmVuW2NoaWxkSW5kZXhdKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBoZWlnaHQgKyB0aGlzLnBvaW50Y2xvdWQucG9zaXRpb24uejtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZSh2aXNpYmxlTm9kZXMpXHJcblx0e1xyXG5cdFx0Ly9jaGVjayBpZiBwb2ludCBjbG91ZCB0cmFuc2Zvcm1hdGlvbiBjaGFuZ2VkXHJcblx0XHRpZih0aGlzLm1hdHJpeCA9PT0gbnVsbCB8fCAhdGhpcy5tYXRyaXguZXF1YWxzKHRoaXMucG9pbnRjbG91ZC5tYXRyaXhXb3JsZCkpXHJcblx0XHR7XHJcblx0XHRcdHRoaXMubWF0cml4ID0gdGhpcy5wb2ludGNsb3VkLm1hdHJpeFdvcmxkLmNsb25lKCk7XHJcblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSB0aGlzLnBvaW50Y2xvdWQuYm91bmRpbmdCb3guY2xvbmUoKS5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXgpO1xyXG5cdFx0XHR0aGlzLnJvb3QgPSBuZXcgREVNTm9kZShcInJcIiwgdGhpcy5ib3VuZGluZ0JveCwgdGhpcy50aWxlU2l6ZSk7XHJcblx0XHRcdHRoaXMudmVyc2lvbisrO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vZmluZCBub2RlIHRvIHVwZGF0ZVxyXG5cdFx0dmFyIG5vZGUgPSBudWxsO1xyXG5cdFx0Zm9yKHZhciB2biBvZiB2aXNpYmxlTm9kZXMpXHJcblx0XHR7XHJcblx0XHRcdGlmKHZuLmRlbVZlcnNpb24gPT09IHVuZGVmaW5lZCB8fCB2bi5kZW1WZXJzaW9uIDwgdGhpcy52ZXJzaW9uKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bm9kZSA9IHZuO1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZihub2RlID09PSBudWxsKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly91cGRhdGUgbm9kZVxyXG5cdFx0dmFyIHByb2plY3RlZEJveCA9IG5vZGUuZ2V0Qm91bmRpbmdCb3goKS5jbG9uZSgpLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeCk7XHJcblx0XHR2YXIgcHJvamVjdGVkQm94U2l6ZSA9IHByb2plY3RlZEJveC5nZXRTaXplKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG5cclxuXHRcdHZhciB0YXJnZXROb2RlcyA9IHRoaXMuZXhwYW5kQW5kRmluZEJ5Qm94KHByb2plY3RlZEJveCwgbm9kZS5nZXRMZXZlbCgpKTtcclxuXHRcdG5vZGUuZGVtVmVyc2lvbiA9IHRoaXMudmVyc2lvbjtcclxuXHJcblx0XHR2YXIgcG9zaXRpb24gPSBub2RlLmdlb21ldHJ5Tm9kZS5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xyXG5cdFx0dmFyIG1lc3NhZ2UgPVxyXG5cdFx0e1xyXG5cdFx0XHRib3VuZGluZ0JveDpcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG1pbjogbm9kZS5nZXRCb3VuZGluZ0JveCgpLm1pbi50b0FycmF5KCksXHJcblx0XHRcdFx0bWF4OiBub2RlLmdldEJvdW5kaW5nQm94KCkubWF4LnRvQXJyYXkoKVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRwb3NpdGlvbjogbmV3IEZsb2F0MzJBcnJheShwb3NpdGlvbikuYnVmZmVyXHJcblx0XHR9O1xyXG5cdFx0dmFyIHRyYW5zZmVyYWJsZXMgPSBbbWVzc2FnZS5wb3NpdGlvbl07XHJcblxyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdEdsb2JhbC53b3JrZXJQb29sLnJ1blRhc2soV29ya2VyTWFuYWdlci5ERU0sIGZ1bmN0aW9uKGUpXHJcblx0XHR7XHJcblx0XHRcdHZhciBkYXRhID0gbmV3IEZsb2F0MzJBcnJheShlLmRhdGEuZGVtLmRhdGEpO1xyXG5cclxuXHRcdFx0Zm9yKHZhciBkZW1Ob2RlIG9mIHRhcmdldE5vZGVzKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIGJveFNpemUgPSBkZW1Ob2RlLmJveC5nZXRTaXplKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG5cclxuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2VsZi50aWxlU2l6ZTsgaSsrKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBzZWxmLnRpbGVTaXplOyBqKyspXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHZhciB1ID0gKGkgLyAoc2VsZi50aWxlU2l6ZSAtIDEpKTtcclxuXHRcdFx0XHRcdFx0dmFyIHYgPSAoaiAvIChzZWxmLnRpbGVTaXplIC0gMSkpO1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIHggPSBkZW1Ob2RlLmJveC5taW4ueCArIHUgKiBib3hTaXplLng7XHJcblx0XHRcdFx0XHRcdHZhciB5ID0gZGVtTm9kZS5ib3gubWluLnkgKyB2ICogYm94U2l6ZS55O1xyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGl4ID0gc2VsZi50aWxlU2l6ZSAqICh4IC0gcHJvamVjdGVkQm94Lm1pbi54KSAvIHByb2plY3RlZEJveFNpemUueDtcclxuXHRcdFx0XHRcdFx0dmFyIGl5ID0gc2VsZi50aWxlU2l6ZSAqICh5IC0gcHJvamVjdGVkQm94Lm1pbi55KSAvIHByb2plY3RlZEJveFNpemUueTtcclxuXHJcblx0XHRcdFx0XHRcdGlmKGl4IDwgMCB8fCBpeCA+IHNlbGYudGlsZVNpemUpXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aWYoaXkgPCAwIHx8IGl5ID4gc2VsZi50aWxlU2l6ZSlcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRpeCA9IE1hdGgubWluKE1hdGguZmxvb3IoaXgpLCBzZWxmLnRpbGVTaXplIC0gMSk7XHJcblx0XHRcdFx0XHRcdGl5ID0gTWF0aC5taW4oTWF0aC5mbG9vcihpeSksIHNlbGYudGlsZVNpemUgLSAxKTtcclxuXHJcblx0XHRcdFx0XHRcdGRlbU5vZGUuZGF0YVtpICsgc2VsZi50aWxlU2l6ZSAqIGpdID0gZGF0YVtpeCArIHNlbGYudGlsZVNpemUgKiBpeV07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRkZW1Ob2RlLmNyZWF0ZU1pcE1hcCgpO1xyXG5cdFx0XHRcdGRlbU5vZGUubWlwTWFwTmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9LCBtZXNzYWdlLCB0cmFuc2ZlcmFibGVzKTtcclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQge0RFTX07IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5pbXBvcnQge0RFTX0gZnJvbSBcIi4vREVNLmpzXCI7XHJcblxyXG5jbGFzcyBQb2ludENsb3VkVHJlZU5vZGVcclxue1xyXG5cdGNvbnN0cnVjdG9yKClcclxuXHR7XHJcblx0XHR0aGlzLm5lZWRzVHJhbnNmb3JtVXBkYXRlID0gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdGdldENoaWxkcmVuKCl7fVxyXG5cclxuXHRnZXRCb3VuZGluZ0JveCgpe31cclxuXHJcblx0aXNMb2FkZWQoKXt9XHJcblxyXG5cdGlzR2VvbWV0cnlOb2RlKCl7fVxyXG5cclxuXHRpc1RyZWVOb2RlKCl7fVxyXG5cclxuXHRnZXRMZXZlbCgpe31cclxuXHJcblx0Z2V0Qm91bmRpbmdTcGhlcmUoKXt9XHJcbn07XHJcblxyXG5jbGFzcyBQb2ludENsb3VkVHJlZSBleHRlbmRzIFRIUkVFLk9iamVjdDNEXHJcbntcclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmRlbSA9IG5ldyBERU0odGhpcyk7XHJcblx0fVxyXG5cclxuXHRpbml0aWFsaXplZCgpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMucm9vdCAhPT0gbnVsbDtcclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQge1BvaW50Q2xvdWRUcmVlLCBQb2ludENsb3VkVHJlZU5vZGV9O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmltcG9ydCB7R3JleWhvdW5kTG9hZGVyfSBmcm9tIFwiLi4vLi4vbG9hZGVycy9HcmV5aG91bmRMb2FkZXIuanNcIjtcclxuaW1wb3J0IHtHbG9iYWx9IGZyb20gXCIuLi8uLi9HbG9iYWwuanNcIjtcclxuaW1wb3J0IHtQb2ludENsb3VkVHJlZSwgUG9pbnRDbG91ZFRyZWVOb2RlfSBmcm9tIFwiLi4vUG9pbnRDbG91ZFRyZWUuanNcIjtcclxuXHJcbmNsYXNzIFBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeVxyXG57XHJcblx0Y29uc3RydWN0b3IoKVxyXG5cdHtcclxuXHRcdHRoaXMuc3BhY2luZyA9IDA7XHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcclxuXHRcdHRoaXMucm9vdCA9IG51bGw7XHJcblx0XHR0aGlzLm5vZGVzID0gbnVsbDtcclxuXHRcdHRoaXMucG9pbnRBdHRyaWJ1dGVzID0ge307XHJcblx0XHR0aGlzLmhpZXJhcmNoeVN0ZXBTaXplID0gLTE7XHJcblx0XHR0aGlzLmxvYWRlciA9IG51bGw7XHJcblx0XHR0aGlzLnNjaGVtYSA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5iYXNlRGVwdGggPSBudWxsO1xyXG5cdFx0dGhpcy5vZmZzZXQgPSBudWxsO1xyXG5cdFx0dGhpcy5wcm9qZWN0aW9uID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcclxuXHJcblx0XHQvLyB0aGUgc2VydmVyVVJMIHdpbGwgY29udGFpbiB0aGUgYmFzZSBVUkwgb2YgdGhlIGdyZXlob3VuZCBzZXJ2ZXIuIGYuZS4gaHR0cDovL2Rldi5ncmV5aG91bmQuaW8vcmVzb3VyY2UvYXV0emVuL1xyXG5cdFx0dGhpcy5zZXJ2ZXJVUkwgPSBudWxsO1xyXG5cdFx0dGhpcy5ub3JtYWxpemUgPSB7Y29sb3I6IGZhbHNlLCBpbnRlbnNpdHk6IGZhbHNlfTtcclxuXHR9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUobmFtZSwgcGNvR2VvbWV0cnksIGJvdW5kaW5nQm94LCBzY2FsZSwgb2Zmc2V0KVxyXG57XHJcblx0dGhpcy5pZCA9IFBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUuSURDb3VudCsrO1xyXG5cdHRoaXMubmFtZSA9IG5hbWU7XHJcblx0dGhpcy5pbmRleCA9IHBhcnNlSW50KG5hbWUuY2hhckF0KG5hbWUubGVuZ3RoIC0gMSkpO1xyXG5cdHRoaXMucGNvR2VvbWV0cnkgPSBwY29HZW9tZXRyeTtcclxuXHR0aGlzLmdlb21ldHJ5ID0gbnVsbDtcclxuXHR0aGlzLmJvdW5kaW5nQm94ID0gYm91bmRpbmdCb3g7XHJcblx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IGJvdW5kaW5nQm94LmdldEJvdW5kaW5nU3BoZXJlKG5ldyBUSFJFRS5TcGhlcmUoKSk7XHJcblx0dGhpcy5zY2FsZSA9IHNjYWxlO1xyXG5cdHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG5cdHRoaXMuY2hpbGRyZW4gPSB7fTtcclxuXHR0aGlzLm51bVBvaW50cyA9IDA7XHJcblx0dGhpcy5sZXZlbCA9IG51bGw7XHJcblx0dGhpcy5sb2FkZWQgPSBmYWxzZTtcclxuXHR0aGlzLm9uZVRpbWVEaXNwb3NlSGFuZGxlcnMgPSBbXTtcclxuXHR0aGlzLmJhc2VMb2FkZWQgPSBmYWxzZTtcclxuXHJcblx0dmFyIGNlbnRlciA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcblxyXG5cdHZhciBib3VuZHMgPSB0aGlzLmJvdW5kaW5nQm94LmNsb25lKCk7XHJcblx0Ym91bmRzLm1pbi5zdWIodGhpcy5wY29HZW9tZXRyeS5ib3VuZGluZ0JveC5nZXRDZW50ZXIoY2VudGVyKSk7XHJcblx0Ym91bmRzLm1heC5zdWIodGhpcy5wY29HZW9tZXRyeS5ib3VuZGluZ0JveC5nZXRDZW50ZXIoY2VudGVyKSk7XHJcblxyXG5cdGlmKHRoaXMuc2NhbGUpXHJcblx0e1xyXG5cdFx0Ym91bmRzLm1pbi5tdWx0aXBseVNjYWxhcigxIC8gdGhpcy5zY2FsZSk7XHJcblx0XHRib3VuZHMubWF4Lm11bHRpcGx5U2NhbGFyKDEgLyB0aGlzLnNjYWxlKTtcclxuXHR9XHJcblxyXG5cdC8vVGhpcyByZXByZXNlbnRzIHRoZSBib3VuZHMgZm9yIHRoaXMgbm9kZSBpbiB0aGUgcmVmZXJlbmNlIGZyYW1lIG9mIHRoZVxyXG5cdC8vZ2xvYmFsIGJvdW5kcyBmcm9tIGBpbmZvYCwgY2VudGVyZWQgYXJvdW5kIHRoZSBvcmlnaW4sIGFuZCB0aGVuIHNjYWxlZFxyXG5cdC8vYnkgb3VyIHNlbGVjdGVkIHNjYWxlLlxyXG5cdHRoaXMuZ3JleWhvdW5kQm91bmRzID0gYm91bmRzO1xyXG5cclxuXHQvL1RoaXMgcmVwcmVzZW50cyB0aGUgb2Zmc2V0IGJldHdlZW4gdGhlIGNvb3JkaW5hdGUgc3lzdGVtIGRlc2NyaWJlZCBhYm92ZVxyXG5cdC8vYW5kIG91ciBwY29HZW9tZXRyeSBib3VuZHMuXHJcblx0dGhpcy5ncmV5aG91bmRPZmZzZXQgPSB0aGlzLnBjb0dlb21ldHJ5Lm9mZnNldC5jbG9uZSgpLmFkZCh0aGlzLnBjb0dlb21ldHJ5LmJvdW5kaW5nQm94LmdldFNpemUobmV3IFRIUkVFLlZlY3RvcjMoKSkubXVsdGlwbHlTY2FsYXIoMC41KSk7XHJcbn07XHJcblxyXG5Qb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlLklEQ291bnQgPSAwO1xyXG5cclxuUG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5Tm9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBvaW50Q2xvdWRUcmVlTm9kZS5wcm90b3R5cGUpO1xyXG5cclxuUG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5Tm9kZS5wcm90b3R5cGUuaXNHZW9tZXRyeU5vZGUgPSBmdW5jdGlvbigpXHJcbntcclxuXHRyZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcblBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUucHJvdG90eXBlLmlzVHJlZU5vZGUgPSBmdW5jdGlvbigpXHJcbntcclxuXHRyZXR1cm4gZmFsc2U7XHJcbn07XHJcblxyXG5Qb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlLnByb3RvdHlwZS5pc0xvYWRlZCA9IGZ1bmN0aW9uKClcclxue1xyXG5cdHJldHVybiB0aGlzLmxvYWRlZDtcclxufTtcclxuXHJcblBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUucHJvdG90eXBlLmdldEJvdW5kaW5nU3BoZXJlID0gZnVuY3Rpb24oKVxyXG57XHJcblx0cmV0dXJuIHRoaXMuYm91bmRpbmdTcGhlcmU7XHJcbn07XHJcblxyXG5Qb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlLnByb3RvdHlwZS5nZXRCb3VuZGluZ0JveCA9IGZ1bmN0aW9uKClcclxue1xyXG5cdHJldHVybiB0aGlzLmJvdW5kaW5nQm94O1xyXG59O1xyXG5cclxuUG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5Tm9kZS5wcm90b3R5cGUuZ2V0TGV2ZWwgPSBmdW5jdGlvbigpXHJcbntcclxuXHRyZXR1cm4gdGhpcy5sZXZlbDtcclxufTtcclxuXHJcblBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUucHJvdG90eXBlLmdldENoaWxkcmVuID0gZnVuY3Rpb24oKVxyXG57XHJcblx0dmFyIGNoaWxkcmVuID0gW107XHJcblxyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCA4OyArK2kpXHJcblx0e1xyXG5cdFx0aWYodGhpcy5jaGlsZHJlbltpXSlcclxuXHRcdHtcclxuXHRcdFx0Y2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJldHVybiBjaGlsZHJlbjtcclxufTtcclxuXHJcblBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUucHJvdG90eXBlLmdldFVSTCA9IGZ1bmN0aW9uKClcclxue1xyXG5cdHZhciBzY2hlbWEgPSB0aGlzLnBjb0dlb21ldHJ5LnNjaGVtYTtcclxuXHR2YXIgYm91bmRzID0gdGhpcy5ncmV5aG91bmRCb3VuZHM7XHJcblxyXG5cdHZhciBib3VuZHNTdHJpbmcgPSBib3VuZHMubWluLnggKyBcIixcIiArIGJvdW5kcy5taW4ueSArIFwiLFwiICsgYm91bmRzLm1pbi56ICsgXCIsXCIgKyBib3VuZHMubWF4LnggKyBcIixcIiArIGJvdW5kcy5tYXgueSArIFwiLFwiICsgYm91bmRzLm1heC56O1xyXG5cclxuXHR2YXIgdXJsID0gXCJcIiArIHRoaXMucGNvR2VvbWV0cnkuc2VydmVyVVJMICtcclxuXHRcdFwicmVhZD9kZXB0aEJlZ2luPVwiICtcclxuXHRcdCh0aGlzLmJhc2VMb2FkZWQgPyAodGhpcy5sZXZlbCArIHRoaXMucGNvR2VvbWV0cnkuYmFzZURlcHRoKSA6IDApICtcclxuXHRcdFwiJmRlcHRoRW5kPVwiICsgKHRoaXMubGV2ZWwgKyB0aGlzLnBjb0dlb21ldHJ5LmJhc2VEZXB0aCArIDEpICtcclxuXHRcdFwiJmJvdW5kcz1bXCIgKyBib3VuZHNTdHJpbmcgKyBcIl1cIiArXHJcblx0XHRcIiZzY2hlbWE9XCIgKyBKU09OLnN0cmluZ2lmeShzY2hlbWEpICtcclxuXHRcdFwiJmNvbXByZXNzPXRydWVcIjtcclxuXHJcblx0aWYodGhpcy5zY2FsZSlcclxuXHR7XHJcblx0XHR1cmwgKz0gXCImc2NhbGU9XCIgKyB0aGlzLnNjYWxlO1xyXG5cdH1cclxuXHJcblx0aWYodGhpcy5ncmV5aG91bmRPZmZzZXQpXHJcblx0e1xyXG5cdFx0dmFyIG9mZnNldCA9IHRoaXMuZ3JleWhvdW5kT2Zmc2V0O1xyXG5cdFx0dXJsICs9IFwiJm9mZnNldD1bXCIgKyBvZmZzZXQueCArIFwiLFwiICsgb2Zmc2V0LnkgKyBcIixcIiArIG9mZnNldC56ICsgXCJdXCI7XHJcblx0fVxyXG5cclxuXHRpZighdGhpcy5iYXNlTG9hZGVkKSB0aGlzLmJhc2VMb2FkZWQgPSB0cnVlO1xyXG5cclxuXHRyZXR1cm4gdXJsO1xyXG59O1xyXG5cclxuUG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5Tm9kZS5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbihjaGlsZClcclxue1xyXG5cdHRoaXMuY2hpbGRyZW5bY2hpbGQuaW5kZXhdID0gY2hpbGQ7XHJcblx0Y2hpbGQucGFyZW50ID0gdGhpcztcclxufTtcclxuXHJcblBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbigpXHJcbntcclxuXHRpZih0aGlzLmxvYWRpbmcgPT09IHRydWUgfHwgdGhpcy5sb2FkZWQgPT09IHRydWUgfHwgR2xvYmFsLm51bU5vZGVzTG9hZGluZyA+PSBHbG9iYWwubWF4Tm9kZXNMb2FkaW5nKVxyXG5cdHtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblxyXG5cdHRoaXMubG9hZGluZyA9IHRydWU7XHJcblx0R2xvYmFsLm51bU5vZGVzTG9hZGluZysrO1xyXG5cclxuXHRpZih0aGlzLmxldmVsICUgdGhpcy5wY29HZW9tZXRyeS5oaWVyYXJjaHlTdGVwU2l6ZSA9PT0gMCAmJiB0aGlzLmhhc0NoaWxkcmVuKVxyXG5cdHtcclxuXHRcdHRoaXMubG9hZEhpZXJhcmNoeVRoZW5Qb2ludHMoKTtcclxuXHR9XHJcblx0ZWxzZVxyXG5cdHtcclxuXHRcdHRoaXMubG9hZFBvaW50cygpO1xyXG5cdH1cclxufTtcclxuXHJcblBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUucHJvdG90eXBlLmxvYWRQb2ludHMgPSBmdW5jdGlvbigpXHJcbntcclxuXHR0aGlzLnBjb0dlb21ldHJ5LmxvYWRlci5sb2FkKHRoaXMpO1xyXG59O1xyXG5cclxuUG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5Tm9kZS5wcm90b3R5cGUubG9hZEhpZXJhcmNoeVRoZW5Qb2ludHMgPSBmdW5jdGlvbigpXHJcbntcclxuXHQvL0Zyb20gR3JleWhvdW5kIChDYXJ0ZXNpYW4pIG9yZGVyaW5nIGZvciB0aGUgb2N0cmVlIHRvIFBvdHJlZS1kZWZhdWx0XHJcblx0dmFyIHRyYW5zZm9ybSA9IFswLCAyLCAxLCAzLCA0LCA2LCA1LCA3XTtcclxuXHJcblx0dmFyIG1ha2VCaXRNYXNrID0gZnVuY3Rpb24obm9kZSlcclxuXHR7XHJcblx0XHR2YXIgbWFzayA9IDA7XHJcblx0XHRPYmplY3Qua2V5cyhub2RlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSlcclxuXHRcdHtcclxuXHRcdFx0aWYoa2V5ID09PSBcInN3ZFwiKSBtYXNrICs9IDEgPDwgdHJhbnNmb3JtWzBdO1xyXG5cdFx0XHRlbHNlIGlmKGtleSA9PT0gXCJud2RcIikgbWFzayArPSAxIDw8IHRyYW5zZm9ybVsxXTtcclxuXHRcdFx0ZWxzZSBpZihrZXkgPT09IFwic3d1XCIpIG1hc2sgKz0gMSA8PCB0cmFuc2Zvcm1bMl07XHJcblx0XHRcdGVsc2UgaWYoa2V5ID09PSBcIm53dVwiKSBtYXNrICs9IDEgPDwgdHJhbnNmb3JtWzNdO1xyXG5cdFx0XHRlbHNlIGlmKGtleSA9PT0gXCJzZWRcIikgbWFzayArPSAxIDw8IHRyYW5zZm9ybVs0XTtcclxuXHRcdFx0ZWxzZSBpZihrZXkgPT09IFwibmVkXCIpIG1hc2sgKz0gMSA8PCB0cmFuc2Zvcm1bNV07XHJcblx0XHRcdGVsc2UgaWYoa2V5ID09PSBcInNldVwiKSBtYXNrICs9IDEgPDwgdHJhbnNmb3JtWzZdO1xyXG5cdFx0XHRlbHNlIGlmKGtleSA9PT0gXCJuZXVcIikgbWFzayArPSAxIDw8IHRyYW5zZm9ybVs3XTtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIG1hc2s7XHJcblx0fTtcclxuXHJcblx0dmFyIHBhcnNlQ2hpbGRyZW5Db3VudHMgPSBmdW5jdGlvbihiYXNlLCBwYXJlbnROYW1lLCBzdGFjaylcclxuXHR7XHJcblx0XHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKGJhc2UpO1xyXG5cdFx0dmFyIGNoaWxkO1xyXG5cdFx0dmFyIGNoaWxkTmFtZTtcclxuXHJcblx0XHRrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KVxyXG5cdFx0e1xyXG5cdFx0XHRpZihrZXkgPT09IFwiblwiKSByZXR1cm47XHJcblx0XHRcdHN3aXRjaChrZXkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjYXNlIFwic3dkXCI6XHJcblx0XHRcdFx0XHRjaGlsZCA9IGJhc2Uuc3dkO1xyXG5cdFx0XHRcdFx0Y2hpbGROYW1lID0gcGFyZW50TmFtZSArIHRyYW5zZm9ybVswXTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgXCJud2RcIjpcclxuXHRcdFx0XHRcdGNoaWxkID0gYmFzZS5ud2Q7XHJcblx0XHRcdFx0XHRjaGlsZE5hbWUgPSBwYXJlbnROYW1lICsgdHJhbnNmb3JtWzFdO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBcInN3dVwiOlxyXG5cdFx0XHRcdFx0Y2hpbGQgPSBiYXNlLnN3dTtcclxuXHRcdFx0XHRcdGNoaWxkTmFtZSA9IHBhcmVudE5hbWUgKyB0cmFuc2Zvcm1bMl07XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIFwibnd1XCI6XHJcblx0XHRcdFx0XHRjaGlsZCA9IGJhc2Uubnd1O1xyXG5cdFx0XHRcdFx0Y2hpbGROYW1lID0gcGFyZW50TmFtZSArIHRyYW5zZm9ybVszXTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgXCJzZWRcIjpcclxuXHRcdFx0XHRcdGNoaWxkID0gYmFzZS5zZWQ7XHJcblx0XHRcdFx0XHRjaGlsZE5hbWUgPSBwYXJlbnROYW1lICsgdHJhbnNmb3JtWzRdO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBcIm5lZFwiOlxyXG5cdFx0XHRcdFx0Y2hpbGQgPSBiYXNlLm5lZDtcclxuXHRcdFx0XHRcdGNoaWxkTmFtZSA9IHBhcmVudE5hbWUgKyB0cmFuc2Zvcm1bNV07XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIFwic2V1XCI6XHJcblx0XHRcdFx0XHRjaGlsZCA9IGJhc2Uuc2V1O1xyXG5cdFx0XHRcdFx0Y2hpbGROYW1lID0gcGFyZW50TmFtZSArIHRyYW5zZm9ybVs2XTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgXCJuZXVcIjpcclxuXHRcdFx0XHRcdGNoaWxkID0gYmFzZS5uZXU7XHJcblx0XHRcdFx0XHRjaGlsZE5hbWUgPSBwYXJlbnROYW1lICsgdHJhbnNmb3JtWzddO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzdGFjay5wdXNoKFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y2hpbGRyZW46IG1ha2VCaXRNYXNrKGNoaWxkKSxcclxuXHRcdFx0XHRudW1Qb2ludHM6IGNoaWxkLm4sXHJcblx0XHRcdFx0bmFtZTogY2hpbGROYW1lXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0cGFyc2VDaGlsZHJlbkNvdW50cyhjaGlsZCwgY2hpbGROYW1lLCBzdGFjayk7XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHQvL0xvYWQgaGllcmFyY2h5LlxyXG5cdHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uKG5vZGUsIGdyZXlob3VuZEhpZXJhcmNoeSlcclxuXHR7XHJcblx0XHR2YXIgZGVjb2RlZCA9IFtdO1xyXG5cdFx0bm9kZS5udW1Qb2ludHMgPSBncmV5aG91bmRIaWVyYXJjaHkubjtcclxuXHRcdHBhcnNlQ2hpbGRyZW5Db3VudHMoZ3JleWhvdW5kSGllcmFyY2h5LCBub2RlLm5hbWUsIGRlY29kZWQpO1xyXG5cclxuXHRcdHZhciBub2RlcyA9IHt9O1xyXG5cdFx0bm9kZXNbbm9kZS5uYW1lXSA9IG5vZGU7XHJcblx0XHR2YXIgcGdnID0gbm9kZS5wY29HZW9tZXRyeTtcclxuXHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVjb2RlZC5sZW5ndGg7IGkrKylcclxuXHRcdHtcclxuXHRcdFx0dmFyIG5hbWUgPSBkZWNvZGVkW2ldLm5hbWU7XHJcblx0XHRcdHZhciBudW1Qb2ludHMgPSBkZWNvZGVkW2ldLm51bVBvaW50cztcclxuXHRcdFx0dmFyIGluZGV4ID0gcGFyc2VJbnQobmFtZS5jaGFyQXQobmFtZS5sZW5ndGggLSAxKSk7XHJcblx0XHRcdHZhciBwYXJlbnROYW1lID0gbmFtZS5zdWJzdHJpbmcoMCwgbmFtZS5sZW5ndGggLSAxKTtcclxuXHRcdFx0dmFyIHBhcmVudE5vZGUgPSBub2Rlc1twYXJlbnROYW1lXTtcclxuXHRcdFx0dmFyIGxldmVsID0gbmFtZS5sZW5ndGggLSAxO1xyXG5cdFx0XHR2YXIgYm91bmRpbmdCb3ggPSBHcmV5aG91bmRMb2FkZXIuY3JlYXRlQ2hpbGRBQUJCKHBhcmVudE5vZGUuYm91bmRpbmdCb3gsIGluZGV4KTtcclxuXHJcblx0XHRcdHZhciBjdXJyZW50Tm9kZSA9IG5ldyBQb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlKG5hbWUsIHBnZywgYm91bmRpbmdCb3gsIG5vZGUuc2NhbGUsIG5vZGUub2Zmc2V0KTtcclxuXHRcdFx0Y3VycmVudE5vZGUubGV2ZWwgPSBsZXZlbDtcclxuXHRcdFx0Y3VycmVudE5vZGUubnVtUG9pbnRzID0gbnVtUG9pbnRzO1xyXG5cdFx0XHRjdXJyZW50Tm9kZS5oYXNDaGlsZHJlbiA9IGRlY29kZWRbaV0uY2hpbGRyZW4gPiAwO1xyXG5cdFx0XHRjdXJyZW50Tm9kZS5zcGFjaW5nID0gcGdnLnNwYWNpbmcgLyBNYXRoLnBvdygyLCBsZXZlbCk7XHJcblxyXG5cdFx0XHRwYXJlbnROb2RlLmFkZENoaWxkKGN1cnJlbnROb2RlKTtcclxuXHRcdFx0bm9kZXNbbmFtZV0gPSBjdXJyZW50Tm9kZTtcclxuXHRcdH1cclxuXHJcblx0XHRub2RlLmxvYWRQb2ludHMoKTtcclxuXHR9O1xyXG5cclxuXHRpZih0aGlzLmxldmVsICUgdGhpcy5wY29HZW9tZXRyeS5oaWVyYXJjaHlTdGVwU2l6ZSA9PT0gMClcclxuXHR7XHJcblx0XHR2YXIgZGVwdGhCZWdpbiA9IHRoaXMubGV2ZWwgKyB0aGlzLnBjb0dlb21ldHJ5LmJhc2VEZXB0aDtcclxuXHRcdHZhciBkZXB0aEVuZCA9IGRlcHRoQmVnaW4gKyB0aGlzLnBjb0dlb21ldHJ5LmhpZXJhcmNoeVN0ZXBTaXplICsgMjtcclxuXHJcblx0XHR2YXIgYm91bmRzID0gdGhpcy5ncmV5aG91bmRCb3VuZHM7XHJcblxyXG5cdFx0dmFyIGJvdW5kc1N0cmluZyA9IGJvdW5kcy5taW4ueCArIFwiLFwiICsgYm91bmRzLm1pbi55ICsgXCIsXCIgKyBib3VuZHMubWluLnogKyBcIixcIiArIGJvdW5kcy5tYXgueCArIFwiLFwiICsgYm91bmRzLm1heC55ICsgXCIsXCIgKyBib3VuZHMubWF4Lno7XHJcblxyXG5cdFx0dmFyIGh1cmwgPSBcIlwiICsgdGhpcy5wY29HZW9tZXRyeS5zZXJ2ZXJVUkwgK1xyXG5cdFx0XHRcImhpZXJhcmNoeT9ib3VuZHM9W1wiICsgYm91bmRzU3RyaW5nICsgXCJdXCIgK1xyXG5cdFx0XHRcIiZkZXB0aEJlZ2luPVwiICsgZGVwdGhCZWdpbiArXHJcblx0XHRcdFwiJmRlcHRoRW5kPVwiICsgZGVwdGhFbmQ7XHJcblxyXG5cdFx0aWYodGhpcy5zY2FsZSlcclxuXHRcdHtcclxuXHRcdFx0aHVybCArPSBcIiZzY2FsZT1cIiArIHRoaXMuc2NhbGU7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYodGhpcy5ncmV5aG91bmRPZmZzZXQpXHJcblx0XHR7XHJcblx0XHRcdHZhciBvZmZzZXQgPSB0aGlzLmdyZXlob3VuZE9mZnNldDtcclxuXHRcdFx0aHVybCArPSBcIiZvZmZzZXQ9W1wiICsgb2Zmc2V0LnggKyBcIixcIiArIG9mZnNldC55ICsgXCIsXCIgKyBvZmZzZXQueiArIFwiXVwiO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdHZhciB4aHIgPSBYSFJGYWN0b3J5LmNyZWF0ZVhNTEh0dHBSZXF1ZXN0KCk7XHJcblx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZShcInRleHQvcGxhaW5cIik7XHJcblx0XHR4aHIub3BlbihcIkdFVFwiLCBodXJsLCB0cnVlKTtcclxuXHRcdHhoci5vbmxvYWQgPSBmdW5jdGlvbihldmVudClcclxuXHRcdHtcclxuXHRcdFx0dHJ5XHJcblx0XHRcdHtcclxuXHRcdFx0XHRjYWxsYmFjayhzZWxmLCBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpIHx8IHt9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjYXRjaChlKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJQb3RyZWU6IEV4Y2VwdGlvbiB0aHJvd24gcGFyc2luZyBwb2ludHMuXCIsIGUpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFx0eGhyLm9uZXJyb3IgPSBmdW5jdGlvbihldmVudClcclxuXHRcdHtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJQb3RyZWU6IEZhaWxlZCB0byBsb2FkIGZpbGUhIEhUVFAgc3RhdHVzIFwiICsgeGhyLnN0YXR1cyArIFwiLCBmaWxlOlwiICsgaHVybCwgZXZlbnQpO1xyXG5cdFx0fVxyXG5cdFx0eGhyLnNlbmQobnVsbCk7XHJcblx0fVxyXG59O1xyXG5cclxuUG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5Tm9kZS5wcm90b3R5cGUuZ2V0TnVtUG9pbnRzID0gZnVuY3Rpb24oKVxyXG57XHJcblx0cmV0dXJuIHRoaXMubnVtUG9pbnRzO1xyXG59O1xyXG5cclxuUG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5Tm9kZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uKClcclxue1xyXG5cdGlmKHRoaXMuZ2VvbWV0cnkgJiYgdGhpcy5wYXJlbnQgIT0gbnVsbClcclxuXHR7XHJcblx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcclxuXHRcdHRoaXMuZ2VvbWV0cnkgPSBudWxsO1xyXG5cdFx0dGhpcy5sb2FkZWQgPSBmYWxzZTtcclxuXHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5vbmVUaW1lRGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaSsrKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgaGFuZGxlciA9IHRoaXMub25lVGltZURpc3Bvc2VIYW5kbGVyc1tpXTtcclxuXHRcdFx0aGFuZGxlcigpO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHR0aGlzLm9uZVRpbWVEaXNwb3NlSGFuZGxlcnMgPSBbXTtcclxuXHR9XHJcbn07XHJcblxyXG5PYmplY3QuYXNzaWduKFBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUucHJvdG90eXBlLCBUSFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlKTtcclxuXHJcbmV4cG9ydCB7UG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5LCBQb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlfTsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmZ1bmN0aW9uIFZlcnNpb25VdGlscyh2ZXJzaW9uKVxyXG57XHJcblx0dGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcclxuXHR2YXIgdm1MZW5ndGggPSAodmVyc2lvbi5pbmRleE9mKFwiLlwiKSA9PT0gLTEpID8gdmVyc2lvbi5sZW5ndGggOiB2ZXJzaW9uLmluZGV4T2YoXCIuXCIpO1xyXG5cdHRoaXMudmVyc2lvbk1ham9yID0gcGFyc2VJbnQodmVyc2lvbi5zdWJzdHIoMCwgdm1MZW5ndGgpKTtcclxuXHR0aGlzLnZlcnNpb25NaW5vciA9IHBhcnNlSW50KHZlcnNpb24uc3Vic3RyKHZtTGVuZ3RoICsgMSkpO1xyXG5cdFxyXG5cdGlmKHRoaXMudmVyc2lvbk1pbm9yLmxlbmd0aCA9PT0gMClcclxuXHR7XHJcblx0XHR0aGlzLnZlcnNpb25NaW5vciA9IDA7XHJcblx0fVxyXG59O1xyXG5cclxuVmVyc2lvblV0aWxzLnByb3RvdHlwZS5uZXdlclRoYW4gPSBmdW5jdGlvbih2ZXJzaW9uKVxyXG57XHJcblx0dmFyIHYgPSBuZXcgVmVyc2lvblV0aWxzKHZlcnNpb24pO1xyXG5cclxuXHRpZigodGhpcy52ZXJzaW9uTWFqb3IgPiB2LnZlcnNpb25NYWpvcikgfHwgKHRoaXMudmVyc2lvbk1ham9yID09PSB2LnZlcnNpb25NYWpvciAmJiB0aGlzLnZlcnNpb25NaW5vciA+IHYudmVyc2lvbk1pbm9yKSlcclxuXHR7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblx0XHJcblx0cmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuVmVyc2lvblV0aWxzLnByb3RvdHlwZS5lcXVhbE9ySGlnaGVyID0gZnVuY3Rpb24odmVyc2lvbilcclxue1xyXG5cdHZhciB2ID0gbmV3IFZlcnNpb25VdGlscyh2ZXJzaW9uKTtcclxuXHJcblx0aWYoKHRoaXMudmVyc2lvbk1ham9yID4gdi52ZXJzaW9uTWFqb3IpIHx8ICh0aGlzLnZlcnNpb25NYWpvciA9PT0gdi52ZXJzaW9uTWFqb3IgJiYgdGhpcy52ZXJzaW9uTWlub3IgPj0gdi52ZXJzaW9uTWlub3IpKVxyXG5cdHtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuVmVyc2lvblV0aWxzLnByb3RvdHlwZS51cFRvID0gZnVuY3Rpb24odmVyc2lvbilcclxue1xyXG5cdHJldHVybiAhdGhpcy5uZXdlclRoYW4odmVyc2lvbik7XHJcbn07XHJcblxyXG5leHBvcnQge1ZlcnNpb25VdGlsc307XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbi8qKlxyXG4gKiBNaWdyYXRlZCBmcm9tIFBvdHJlZSAoaHR0cHM6Ly9naXRodWIuY29tL3BvdHJlZS9wb3RyZWUvYmxvYi9kZXZlbG9wL3NyYy9YSFJGYWN0b3J5LmpzKVxyXG4gKiBieSBMYXJzIE1vYXN0dWVuIDxAbGFyc21vYT4uXHJcbiAqL1xyXG5cclxuY29uc3QgWEhSRmFjdG9yeSA9IHtcclxuXHRjb25maWc6IHtcclxuXHRcdHdpdGhDcmVkZW50aWFsczogZmFsc2UsXHJcblx0XHRjdXN0b21IZWFkZXJzOiBbXHJcblx0XHRcdHsgaGVhZGVyOiBudWxsLCB2YWx1ZTogbnVsbCB9XHJcblx0XHRdXHJcblx0fSxcclxuXHJcblx0Y3JlYXRlWE1MSHR0cFJlcXVlc3Q6IGZ1bmN0aW9uICgpIHtcclxuXHRcdGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHJcblx0XHRpZiAodGhpcy5jb25maWcuY3VzdG9tSGVhZGVycyAmJlxyXG5cdFx0XHRBcnJheS5pc0FycmF5KHRoaXMuY29uZmlnLmN1c3RvbUhlYWRlcnMpICYmXHJcblx0XHRcdHRoaXMuY29uZmlnLmN1c3RvbUhlYWRlcnMubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRsZXQgYmFzZU9wZW4gPSB4aHIub3BlbjtcclxuXHRcdFx0bGV0IGN1c3RvbUhlYWRlcnMgPSB0aGlzLmNvbmZpZy5jdXN0b21IZWFkZXJzO1xyXG5cdFx0XHR4aHIub3BlbiA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRiYXNlT3Blbi5hcHBseSh0aGlzLCBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xyXG5cdFx0XHRcdGN1c3RvbUhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoY3VzdG9tSGVhZGVyKSB7XHJcblx0XHRcdFx0XHRpZiAoISFjdXN0b21IZWFkZXIuaGVhZGVyICYmICEhY3VzdG9tSGVhZGVyLnZhbHVlKSB7XHJcblx0XHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKGN1c3RvbUhlYWRlci5oZWFkZXIsIGN1c3RvbUhlYWRlci52YWx1ZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHhocjtcclxuXHR9LFxyXG5cclxuXHRmZXRjaDogYXN5bmMgZnVuY3Rpb24ocmVzb3VyY2UpIHtcclxuXHRcdGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xyXG5cdFx0aWYgKHRoaXMuY29uZmlnLmN1c3RvbUhlYWRlcnMpIHtcclxuXHRcdFx0dGhpcy5jb25maWcuY3VzdG9tSGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChjdXN0b21IZWFkZXIpIHtcclxuXHRcdFx0XHRpZiAoISFjdXN0b21IZWFkZXIuaGVhZGVyICYmICEhY3VzdG9tSGVhZGVyLnZhbHVlKSB7XHJcblx0XHRcdFx0XHRoZWFkZXJzLmFwcGVuZChjdXN0b21IZWFkZXIuaGVhZGVyLCBjdXN0b21IZWFkZXIudmFsdWUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHRjb25zdCBvcHRpb25zID0ge1xyXG5cdFx0XHRoZWFkZXJzLFxyXG5cdFx0XHRjcmVkZW50aWFsczogWEhSRmFjdG9yeS5jb25maWcud2l0aENyZWRlbnRpYWxzID8gJ2luY2x1ZGUnIDogJ3NhbWUtb3JpZ2luJ1xyXG5cdFx0fTtcclxuXHRcdHJldHVybiBmZXRjaChyZXNvdXJjZSwgb3B0aW9ucyk7XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IHtYSFJGYWN0b3J5fTsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7UG9pbnRBdHRyaWJ1dGVOYW1lc30gZnJvbSBcIi4uL1BvaW50QXR0cmlidXRlcy5qc1wiO1xyXG5pbXBvcnQge1ZlcnNpb25VdGlsc30gZnJvbSBcIi4uL3V0aWxzL1ZlcnNpb25VdGlscy5qc1wiO1xyXG5pbXBvcnQge1dvcmtlck1hbmFnZXJ9IGZyb20gXCIuLi91dGlscy9Xb3JrZXJNYW5hZ2VyLmpzXCI7XHJcbmltcG9ydCB7R2xvYmFsfSBmcm9tIFwiLi4vR2xvYmFsLmpzXCI7XHJcbmltcG9ydCB7WEhSRmFjdG9yeX0gZnJvbSBcIi4uL1hIUkZhY3RvcnkuanNcIjtcclxuXHJcbmNsYXNzIEdyZXlob3VuZEJpbmFyeUxvYWRlclxyXG57XHJcblx0Y29uc3RydWN0b3IodmVyc2lvbiwgYm91bmRpbmdCb3gsIHNjYWxlKVxyXG5cdHtcclxuXHRcdGlmKHR5cGVvZih2ZXJzaW9uKSA9PT0gXCJzdHJpbmdcIilcclxuXHRcdHtcclxuXHRcdFx0dGhpcy52ZXJzaW9uID0gbmV3IFZlcnNpb25VdGlscyh2ZXJzaW9uKTtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0dGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gYm91bmRpbmdCb3g7XHJcblx0XHR0aGlzLnNjYWxlID0gc2NhbGU7XHJcblx0fVxyXG5cclxuXHRsb2FkKG5vZGUpXHJcblx0e1xyXG5cdFx0aWYobm9kZS5sb2FkZWQpIHJldHVybjtcclxuXHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHR2YXIgdXJsID0gbm9kZS5nZXRVUkwoKTtcclxuXHJcblx0XHR2YXIgeGhyID0gWEhSRmFjdG9yeS5jcmVhdGVYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluXCIpO1xyXG5cdFx0eGhyLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcclxuXHRcdHhoci5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XHJcblx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZShcInRleHQvcGxhaW47IGNoYXJzZXQ9eC11c2VyLWRlZmluZWRcIik7XHJcblx0XHR4aHIub25sb2FkID0gZnVuY3Rpb24oKVxyXG5cdFx0e1xyXG5cdFx0XHR0cnlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHNlbGYucGFyc2Uobm9kZSwgeGhyLnJlc3BvbnNlKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjYXRjaChlKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlBvdHJlZTogRXhjZXB0aW9uIHRocm93biBwYXJzaW5nIHBvaW50cy5cIiwgZSk7XHJcblx0XHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFx0eGhyLm9uZXJyb3IgPSBmdW5jdGlvbihldmVudClcclxuXHRcdHtcclxuXHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKFwiUG90cmVlOiBGYWlsZWQgdG8gbG9hZCBmaWxlLlwiLCB4aHIsIHVybCk7XHJcblx0XHR9O1xyXG5cdFx0eGhyLnNlbmQobnVsbCk7XHJcblx0fVxyXG5cclxuXHRwYXJzZShub2RlLCBidWZmZXIpXHJcblx0e1xyXG5cdFx0dmFyIE5VTV9QT0lOVFNfQllURVMgPSA0O1xyXG5cdFx0dmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLCBidWZmZXIuYnl0ZUxlbmd0aCAtIE5VTV9QT0lOVFNfQllURVMsIE5VTV9QT0lOVFNfQllURVMpO1xyXG5cdFx0dmFyIG51bVBvaW50cyA9IHZpZXcuZ2V0VWludDMyKDAsIHRydWUpO1xyXG5cdFx0dmFyIHBvaW50QXR0cmlidXRlcyA9IG5vZGUucGNvR2VvbWV0cnkucG9pbnRBdHRyaWJ1dGVzO1xyXG5cclxuXHRcdG5vZGUubnVtUG9pbnRzID0gbnVtUG9pbnRzO1xyXG5cclxuXHRcdHZhciBiYiA9IG5vZGUuYm91bmRpbmdCb3g7XHJcblx0XHR2YXIgY2VudGVyID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHRcdHZhciBub2RlT2Zmc2V0ID0gbm9kZS5wY29HZW9tZXRyeS5ib3VuZGluZ0JveC5nZXRDZW50ZXIoY2VudGVyKS5zdWIobm9kZS5ib3VuZGluZ0JveC5taW4pO1xyXG5cclxuXHRcdHZhciBtZXNzYWdlID1cclxuXHRcdHtcclxuXHRcdFx0YnVmZmVyOiBidWZmZXIsXHJcblx0XHRcdHBvaW50QXR0cmlidXRlczogcG9pbnRBdHRyaWJ1dGVzLFxyXG5cdFx0XHR2ZXJzaW9uOiB0aGlzLnZlcnNpb24udmVyc2lvbixcclxuXHRcdFx0c2NoZW1hOiBub2RlLnBjb0dlb21ldHJ5LnNjaGVtYSxcclxuXHRcdFx0bWluOiBbYmIubWluLngsIGJiLm1pbi55LCBiYi5taW4uel0sXHJcblx0XHRcdG1heDogW2JiLm1heC54LCBiYi5tYXgueSwgYmIubWF4LnpdLFxyXG5cdFx0XHRvZmZzZXQ6IG5vZGVPZmZzZXQudG9BcnJheSgpLFxyXG5cdFx0XHRzY2FsZTogdGhpcy5zY2FsZSxcclxuXHRcdFx0bm9ybWFsaXplOiBub2RlLnBjb0dlb21ldHJ5Lm5vcm1hbGl6ZVxyXG5cdFx0fTtcclxuXHJcblx0XHRHbG9iYWwud29ya2VyUG9vbC5ydW5UYXNrKFdvcmtlck1hbmFnZXIuR1JFWUhPVU5ELCBmdW5jdGlvbihlKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgZGF0YSA9IGUuZGF0YTtcclxuXHRcdFx0dmFyIGJ1ZmZlcnMgPSBkYXRhLmF0dHJpYnV0ZUJ1ZmZlcnM7XHJcblx0XHRcdFxyXG5cdFx0XHR2YXIgdGlnaHRCb3VuZGluZ0JveCA9IG5ldyBUSFJFRS5Cb3gzXHJcblx0XHRcdChcclxuXHRcdFx0XHRuZXcgVEhSRUUuVmVjdG9yMygpLmZyb21BcnJheShkYXRhLnRpZ2h0Qm91bmRpbmdCb3gubWluKSxcclxuXHRcdFx0XHRuZXcgVEhSRUUuVmVjdG9yMygpLmZyb21BcnJheShkYXRhLnRpZ2h0Qm91bmRpbmdCb3gubWF4KVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XHJcblxyXG5cdFx0XHRmb3IodmFyIHByb3BlcnR5IGluIGJ1ZmZlcnMpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR2YXIgYnVmZmVyID0gYnVmZmVyc1twcm9wZXJ0eV0uYnVmZmVyO1xyXG5cclxuXHRcdFx0XHRpZihwYXJzZUludChwcm9wZXJ0eSkgPT09IFBvaW50QXR0cmlidXRlTmFtZXMuUE9TSVRJT05fQ0FSVEVTSUFOKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShidWZmZXIpLCAzKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYocGFyc2VJbnQocHJvcGVydHkpID09PSBQb2ludEF0dHJpYnV0ZU5hbWVzLkNPTE9SX1BBQ0tFRClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJjb2xvclwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBVaW50OEFycmF5KGJ1ZmZlciksIDQsIHRydWUpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZihwYXJzZUludChwcm9wZXJ0eSkgPT09IFBvaW50QXR0cmlidXRlTmFtZXMuSU5URU5TSVRZKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcImludGVuc2l0eVwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyKSwgMSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmKHBhcnNlSW50KHByb3BlcnR5KSA9PT0gUG9pbnRBdHRyaWJ1dGVOYW1lcy5DTEFTU0lGSUNBVElPTilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJjbGFzc2lmaWNhdGlvblwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBVaW50OEFycmF5KGJ1ZmZlciksIDEpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZihwYXJzZUludChwcm9wZXJ0eSkgPT09IFBvaW50QXR0cmlidXRlTmFtZXMuTk9STUFMX1NQSEVSRU1BUFBFRClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJub3JtYWxcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlciksIDMpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZihwYXJzZUludChwcm9wZXJ0eSkgPT09IFBvaW50QXR0cmlidXRlTmFtZXMuTk9STUFMX09DVDE2KVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcIm5vcm1hbFwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyKSwgMykpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmKHBhcnNlSW50KHByb3BlcnR5KSA9PT0gUG9pbnRBdHRyaWJ1dGVOYW1lcy5OT1JNQUwpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwibm9ybWFsXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShidWZmZXIpLCAzKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYocGFyc2VJbnQocHJvcGVydHkpID09PSBQb2ludEF0dHJpYnV0ZU5hbWVzLklORElDRVMpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSwgNCk7XHJcblx0XHRcdFx0XHRidWZmZXJBdHRyaWJ1dGUubm9ybWFsaXplZCA9IHRydWU7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJpbmRpY2VzXCIsIGJ1ZmZlckF0dHJpYnV0ZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYocGFyc2VJbnQocHJvcGVydHkpID09PSBQb2ludEF0dHJpYnV0ZU5hbWVzLlNQQUNJTkcpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShidWZmZXIpLCAxKTtcclxuXHRcdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcInNwYWNpbmdcIiwgYnVmZmVyQXR0cmlidXRlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRpZ2h0Qm91bmRpbmdCb3gubWF4LnN1Yih0aWdodEJvdW5kaW5nQm94Lm1pbik7XHJcblx0XHRcdHRpZ2h0Qm91bmRpbmdCb3gubWluLnNldCgwLCAwLCAwKTtcclxuXHJcblx0XHRcdG5vZGUubnVtUG9pbnRzID0gZGF0YS5udW1Qb2ludHM7XHJcblx0XHRcdG5vZGUuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcclxuXHRcdFx0bm9kZS5tZWFuID0gbmV3IFRIUkVFLlZlY3RvcjMoLi4uZGF0YS5tZWFuKTtcclxuXHRcdFx0bm9kZS50aWdodEJvdW5kaW5nQm94ID0gdGlnaHRCb3VuZGluZ0JveDtcclxuXHRcdFx0bm9kZS5sb2FkZWQgPSB0cnVlO1xyXG5cdFx0XHRub2RlLmxvYWRpbmcgPSBmYWxzZTtcclxuXHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0fSwgbWVzc2FnZSwgW21lc3NhZ2UuYnVmZmVyXSk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQge0dyZXlob3VuZEJpbmFyeUxvYWRlcn07IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQge1hIUkZhY3Rvcnl9IGZyb20gXCIuLi9YSFJGYWN0b3J5LmpzXCI7XHJcblxyXG4vKipcclxuICogQGNsYXNzIExvYWRzIGdyZXlob3VuZCBtZXRhZGF0YSBhbmQgcmV0dXJucyBhIFBvaW50Y2xvdWRPY3RyZWVcclxuICpcclxuICogQGF1dGhvciBNYWFydGVuIHZhbiBNZWVyc2JlcmdlblxyXG4gKiBAYXV0aG9yIE9zY2FyIE1hcnRpbmV6IFJ1YmlcclxuICogQGF1dGhvciBDb25ub3IgTWFubmluZ1xyXG4gKi9cclxuY2xhc3MgR3JleWhvdW5kVXRpbHNcclxue1xyXG5cdHN0YXRpYyBnZXRRdWVyeVBhcmFtKG5hbWUpXHJcblx0e1xyXG5cdFx0bmFtZSA9IG5hbWUucmVwbGFjZSgvW1tcXF1dL2csIFwiXFxcXCQmXCIpO1xyXG5cdFx0dmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIls/Jl1cIiArIG5hbWUgKyBcIig9KFteJiNdKil8JnwjfCQpXCIpO1xyXG5cdFx0dmFyIHJlc3VsdHMgPSByZWdleC5leGVjKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcclxuXHRcdGlmKCFyZXN1bHRzKSByZXR1cm4gbnVsbDtcclxuXHRcdGlmKCFyZXN1bHRzWzJdKSByZXR1cm4gXCJcIjtcclxuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0c1syXS5yZXBsYWNlKC9cXCsvZywgXCIgXCIpKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBjcmVhdGVTY2hlbWEoYXR0cmlidXRlcylcclxuXHR7XHJcblx0XHR2YXIgc2NoZW1hID0gW1xyXG5cdFx0XHR7XHJcblx0XHRcdFx0XCJuYW1lXCI6IFwiWFwiLFxyXG5cdFx0XHRcdFwic2l6ZVwiOiA0LFxyXG5cdFx0XHRcdFwidHlwZVwiOiBcInNpZ25lZFwiXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRcIm5hbWVcIjogXCJZXCIsXHJcblx0XHRcdFx0XCJzaXplXCI6IDQsXHJcblx0XHRcdFx0XCJ0eXBlXCI6IFwic2lnbmVkXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFwibmFtZVwiOiBcIlpcIixcclxuXHRcdFx0XHRcInNpemVcIjogNCxcclxuXHRcdFx0XHRcInR5cGVcIjogXCJzaWduZWRcIlxyXG5cdFx0XHR9XHJcblx0XHRdO1xyXG5cclxuXHRcdC8vT25jZSB3ZSBpbmNsdWRlIG9wdGlvbnMgaW4gdGhlIFVJIHRvIGxvYWQgYSBkeW5hbWljIGxpc3Qgb2YgYXZhaWxhYmxlXHJcblx0XHQvL2F0dHJpYnV0ZXMgZm9yIHZpc3VhbGl6YXRpb24gKGYuZS4gQ2xhc3NpZmljYXRpb24sIEludGVuc2l0eSBldGMuKVxyXG5cdFx0Ly93ZSB3aWxsIGJlIGFibGUgdG8gYXNrIGZvciB0aGF0IHNwZWNpZmljIGF0dHJpYnV0ZSBmcm9tIHRoZSBzZXJ2ZXIsXHJcblx0XHQvL3doZXJlIHdlIGFyZSBub3cgcmVxdWVzdGluZyBhbGwgYXR0cmlidXRlcyBmb3IgYWxsIHBvaW50cyBhbGwgdGhlIHRpbWUuXHJcblx0XHQvL0lmIHdlIGRvIHRoYXQgdGhvdWdoLCB3ZSBhbHNvIG5lZWQgdG8gdGVsbCBQb3RyZWUgdG8gcmVkcmF3IHRoZSBwb2ludHNcclxuXHRcdC8vdGhhdCBhcmUgYWxyZWFkeSBsb2FkZWQgKHdpdGggZGlmZmVyZW50IGF0dHJpYnV0ZXMpLlxyXG5cdFx0Ly9UaGlzIGlzIG5vdCBkZWZhdWx0IGJlaGF2aW91ci5cclxuXHRcdGF0dHJpYnV0ZXMuZm9yRWFjaChmdW5jdGlvbihpdGVtKVxyXG5cdFx0e1xyXG5cdFx0XHRpZihpdGVtID09PSBcIkNPTE9SX1BBQ0tFRFwiKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c2NoZW1hLnB1c2goXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiUmVkXCIsXHJcblx0XHRcdFx0XHRcInNpemVcIjogMixcclxuXHRcdFx0XHRcdFwidHlwZVwiOiBcInVuc2lnbmVkXCJcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRzY2hlbWEucHVzaChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJHcmVlblwiLFxyXG5cdFx0XHRcdFx0XCJzaXplXCI6IDIsXHJcblx0XHRcdFx0XHRcInR5cGVcIjogXCJ1bnNpZ25lZFwiXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0c2NoZW1hLnB1c2goXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiQmx1ZVwiLFxyXG5cdFx0XHRcdFx0XCJzaXplXCI6IDIsXHJcblx0XHRcdFx0XHRcInR5cGVcIjogXCJ1bnNpZ25lZFwiXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZihpdGVtID09PSBcIklOVEVOU0lUWVwiKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c2NoZW1hLnB1c2goXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSW50ZW5zaXR5XCIsXHJcblx0XHRcdFx0XHRcInNpemVcIjogMixcclxuXHRcdFx0XHRcdFwidHlwZVwiOiBcInVuc2lnbmVkXCJcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKGl0ZW0gPT09IFwiQ0xBU1NJRklDQVRJT05cIilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHNjaGVtYS5wdXNoKFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkNsYXNzaWZpY2F0aW9uXCIsXHJcblx0XHRcdFx0XHRcInNpemVcIjogMSxcclxuXHRcdFx0XHRcdFwidHlwZVwiOiBcInVuc2lnbmVkXCJcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIHNjaGVtYTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBmZXRjaCh1cmwsIGNiKVxyXG5cdHtcclxuXHRcdHZhciB4aHIgPSBYSFJGYWN0b3J5LmNyZWF0ZVhNTEh0dHBSZXF1ZXN0KCk7XHJcblx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZShcInRleHQvcGxhaW5cIik7XHJcblx0XHR4aHIub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpO1xyXG5cdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKClcclxuXHRcdHtcclxuXHRcdFx0aWYoeGhyLnJlYWR5U3RhdGUgPT09IDQpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpZih4aHIuc3RhdHVzID09PSAyMDAgfHwgeGhyLnN0YXR1cyA9PT0gMClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRjYihudWxsLCB4aHIucmVzcG9uc2VUZXh0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGNiKHhoci5yZXNwb25zZVRleHQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdHhoci5zZW5kKG51bGwpO1xyXG5cdH07XHJcblxyXG5cdHN0YXRpYyBmZXRjaEJpbmFyeSh1cmwsIGNiKVxyXG5cdHtcclxuXHRcdHZhciB4aHIgPSBYSFJGYWN0b3J5LmNyZWF0ZVhNTEh0dHBSZXF1ZXN0KCk7XHJcblx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZShcInRleHQvcGxhaW5cIik7XHJcblx0XHR4aHIub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpO1xyXG5cdFx0eGhyLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcclxuXHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpXHJcblx0XHR7XHJcblx0XHRcdGlmKHhoci5yZWFkeVN0YXRlID09PSA0KVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYoeGhyLnN0YXR1cyA9PT0gMjAwIHx8IHhoci5zdGF0dXMgPT09IDApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Y2IobnVsbCwgeGhyLnJlc3BvbnNlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGNiKHhoci5yZXNwb25zZVRleHQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdHhoci5zZW5kKG51bGwpO1xyXG5cdH07XHJcblxyXG5cdHN0YXRpYyBwb2ludFNpemVGcm9tKHNjaGVtYSlcclxuXHR7XHJcblx0XHRyZXR1cm4gc2NoZW1hLnJlZHVjZSgocCwgYykgPT4gcCArIGMuc2l6ZSwgMCk7XHJcblx0fTtcclxuXHJcblx0c3RhdGljIGdldE5vcm1hbGl6YXRpb24oc2VydmVyVVJMLCBiYXNlRGVwdGgsIGNiKVxyXG5cdHtcclxuXHRcdHZhciBzID0gW1xyXG5cdFx0XHR7XHJcblx0XHRcdFx0XCJuYW1lXCI6IFwiWFwiLFxyXG5cdFx0XHRcdFwic2l6ZVwiOiA0LFxyXG5cdFx0XHRcdFwidHlwZVwiOiBcImZsb2F0aW5nXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFwibmFtZVwiOiBcIllcIixcclxuXHRcdFx0XHRcInNpemVcIjogNCxcclxuXHRcdFx0XHRcInR5cGVcIjogXCJmbG9hdGluZ1wiXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRcIm5hbWVcIjogXCJaXCIsXHJcblx0XHRcdFx0XCJzaXplXCI6IDQsXHJcblx0XHRcdFx0XCJ0eXBlXCI6IFwiZmxvYXRpbmdcIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0XCJuYW1lXCI6IFwiUmVkXCIsXHJcblx0XHRcdFx0XCJzaXplXCI6IDIsXHJcblx0XHRcdFx0XCJ0eXBlXCI6IFwidW5zaWduZWRcIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0XCJuYW1lXCI6IFwiR3JlZW5cIixcclxuXHRcdFx0XHRcInNpemVcIjogMixcclxuXHRcdFx0XHRcInR5cGVcIjogXCJ1bnNpZ25lZFwiXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRcIm5hbWVcIjogXCJCbHVlXCIsXHJcblx0XHRcdFx0XCJzaXplXCI6IDIsXHJcblx0XHRcdFx0XCJ0eXBlXCI6IFwidW5zaWduZWRcIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0XCJuYW1lXCI6IFwiSW50ZW5zaXR5XCIsXHJcblx0XHRcdFx0XCJzaXplXCI6IDIsXHJcblx0XHRcdFx0XCJ0eXBlXCI6IFwidW5zaWduZWRcIlxyXG5cdFx0XHR9XHJcblx0XHRdO1xyXG5cclxuXHRcdHZhciB1cmwgPSBzZXJ2ZXJVUkwgKyBcInJlYWQ/ZGVwdGg9XCIgKyBiYXNlRGVwdGggKyBcIiZzY2hlbWE9XCIgKyBKU09OLnN0cmluZ2lmeShzKTtcclxuXHJcblx0XHRHcmV5aG91bmRVdGlscy5mZXRjaEJpbmFyeSh1cmwsIGZ1bmN0aW9uKGVyciwgYnVmZmVyKVxyXG5cdFx0e1xyXG5cdFx0XHRpZihlcnIpIHRocm93IG5ldyBFcnJvcihlcnIpO1xyXG5cclxuXHRcdFx0dmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcclxuXHRcdFx0dmFyIG51bUJ5dGVzID0gYnVmZmVyLmJ5dGVMZW5ndGggLSA0O1xyXG5cdFx0XHR2YXIgcG9pbnRTaXplID0gR3JleWhvdW5kVXRpbHMucG9pbnRTaXplRnJvbShzKTtcclxuXHJcblx0XHRcdHZhciBjb2xvck5vcm0gPSBmYWxzZTtcclxuXHRcdFx0dmFyIGludGVuc2l0eU5vcm0gPSBmYWxzZTtcclxuXHJcblx0XHRcdGZvcih2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgbnVtQnl0ZXM7IG9mZnNldCArPSBwb2ludFNpemUpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpZih2aWV3LmdldFVpbnQxNihvZmZzZXQgKyAxMiwgdHJ1ZSkgPiAyNTUgfHxcclxuXHRcdFx0XHRcdHZpZXcuZ2V0VWludDE2KG9mZnNldCArIDE0LCB0cnVlKSA+IDI1NSB8fFxyXG5cdFx0XHRcdFx0dmlldy5nZXRVaW50MTYob2Zmc2V0ICsgMTYsIHRydWUpID4gMjU1KVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGNvbG9yTm9ybSA9IHRydWU7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZih2aWV3LmdldFVpbnQxNihvZmZzZXQgKyAxOCwgdHJ1ZSkgPiAyNTUpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0aW50ZW5zaXR5Tm9ybSA9IHRydWU7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZihjb2xvck5vcm0gJiYgaW50ZW5zaXR5Tm9ybSkgYnJlYWs7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGNiKG51bGwsXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjb2xvcjogY29sb3JOb3JtLFxyXG5cdFx0XHRcdGludGVuc2l0eTogaW50ZW5zaXR5Tm9ybVxyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH07XHJcbn07XHJcblxyXG5leHBvcnQge0dyZXlob3VuZFV0aWxzfTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQge1BvaW50QXR0cmlidXRlcywgUG9pbnRBdHRyaWJ1dGV9IGZyb20gXCIuLi9Qb2ludEF0dHJpYnV0ZXMuanNcIjtcclxuaW1wb3J0IHtQb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnksIFBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGV9IGZyb20gXCIuLi9wb2ludGNsb3VkL2dlb21ldHJpZXMvUG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5LmpzXCI7XHJcbmltcG9ydCB7R3JleWhvdW5kQmluYXJ5TG9hZGVyfSBmcm9tIFwiLi9HcmV5aG91bmRCaW5hcnlMb2FkZXIuanNcIjtcclxuaW1wb3J0IHtWZXJzaW9uVXRpbHN9IGZyb20gXCIuLi91dGlscy9WZXJzaW9uVXRpbHMuanNcIjtcclxuaW1wb3J0IHtHcmV5aG91bmRVdGlsc30gZnJvbSBcIi4vR3JleWhvdW5kVXRpbHMuanNcIjtcclxuXHJcbmZ1bmN0aW9uIEdyZXlob3VuZExvYWRlcigpe31cclxuXHJcbkdyZXlob3VuZExvYWRlci5sb2FkSW5mb0pTT04gPSBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKXt9O1xyXG5cclxuLyoqXHJcbiAqIEByZXR1cm4gYSBwb2ludCBjbG91ZCBvY3RyZWUgd2l0aCB0aGUgcm9vdCBub2RlIGRhdGEgbG9hZGVkLlxyXG4gKiBsb2FkaW5nIG9mIGRlc2NlbmRhbnRzIGhhcHBlbnMgYXN5bmNocm9ub3VzbHkgd2hlbiB0aGV5XCJyZSBuZWVkZWRcclxuICpcclxuICogQHBhcmFtIHVybFxyXG4gKiBAcGFyYW0gbG9hZGluZ0ZpbmlzaGVkTGlzdGVuZXIgZXhlY3V0ZWQgYWZ0ZXIgbG9hZGluZyB0aGUgYmluYXJ5IGhhcyBiZWVuXHJcbiAqIGZpbmlzaGVkXHJcbiAqL1xyXG5HcmV5aG91bmRMb2FkZXIubG9hZCA9IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spXHJcbntcclxuXHR2YXIgSElFUkFSQ0hZX1NURVBfU0laRSA9IDU7XHJcblxyXG5cdHRyeVxyXG5cdHtcclxuXHRcdC8vV2UgYXNzdW1lIGV2ZXJ5dGhpbmcgYXRlciB0aGUgc3RyaW5nIFwiZ3JleWhvdW5kOi8vXCIgaXMgdGhlIHNlcnZlciB1cmxcclxuXHRcdHZhciBzZXJ2ZXJVUkwgPSB1cmwuc3BsaXQoXCJncmV5aG91bmQ6Ly9cIilbMV07XHJcblx0XHRpZihzZXJ2ZXJVUkwuc3BsaXQoXCJodHRwOi8vXCIpLmxlbmd0aCA9PT0gMSAmJiBzZXJ2ZXJVUkwuc3BsaXQoXCJodHRwczovL1wiKS5sZW5ndGggPT09IDEpXHJcblx0XHR7XHJcblx0XHRcdHNlcnZlclVSTCA9IFwiaHR0cDovL1wiICsgc2VydmVyVVJMO1xyXG5cdFx0fVxyXG5cclxuXHRcdEdyZXlob3VuZFV0aWxzLmZldGNoKHNlcnZlclVSTCArIFwiaW5mb1wiLCBmdW5jdGlvbihlcnIsIGRhdGEpXHJcblx0XHR7XHJcblx0XHRcdGlmKGVycikgdGhyb3cgbmV3IEVycm9yKGVycik7XHJcblxyXG5cdFx0XHQvKiBXZSBwYXJzZSB0aGUgcmVzdWx0IG9mIHRoZSBpbmZvIHF1ZXJ5LCB3aGljaCBzaG91bGQgYmUgYSBKU09OIGRhdGFzdHJ1Y3R1cmUgc29tZXdoYXQgbGlrZTpcclxuXHRcdFx0e1xyXG5cdFx0XHQgIFwiYm91bmRzXCI6IFs2MzU1NzcsIDg0ODg4MiwgLTEwMDAsIDYzOTAwNCwgODUzNTM4LCAyMDAwXSxcclxuXHRcdFx0ICBcIm51bVBvaW50c1wiOiAxMDY1MzMzNixcclxuXHRcdFx0ICBcInNjaGVtYVwiOiBbXHJcblx0XHRcdCAgICAgIHsgXCJuYW1lXCI6IFwiWFwiLCBcInNpemVcIjogOCwgXCJ0eXBlXCI6IFwiZmxvYXRpbmdcIiB9LFxyXG5cdFx0XHQgICAgICB7IFwibmFtZVwiOiBcIllcIiwgXCJzaXplXCI6IDgsIFwidHlwZVwiOiBcImZsb2F0aW5nXCIgfSxcclxuXHRcdFx0ICAgICAgeyBcIm5hbWVcIjogXCJaXCIsIFwic2l6ZVwiOiA4LCBcInR5cGVcIjogXCJmbG9hdGluZ1wiIH0sXHJcblx0XHRcdCAgICAgIHsgXCJuYW1lXCI6IFwiSW50ZW5zaXR5XCIsIFwic2l6ZVwiOiAyLCBcInR5cGVcIjogXCJ1bnNpZ25lZFwiIH0sXHJcblx0XHRcdCAgICAgIHsgXCJuYW1lXCI6IFwiT3JpZ2luSWRcIiwgXCJzaXplXCI6IDQsIFwidHlwZVwiOiBcInVuc2lnbmVkXCIgfSxcclxuXHRcdFx0ICAgICAgeyBcIm5hbWVcIjogXCJSZWRcIiwgXCJzaXplXCI6IDIsIFwidHlwZVwiOiBcInVuc2lnbmVkXCIgfSxcclxuXHRcdFx0ICAgICAgeyBcIm5hbWVcIjogXCJHcmVlblwiLCBcInNpemVcIjogMiwgXCJ0eXBlXCI6IFwidW5zaWduZWRcIiB9LFxyXG5cdFx0XHQgICAgICB7IFwibmFtZVwiOiBcIkJsdWVcIiwgXCJzaXplXCI6IDIsIFwidHlwZVwiOiBcInVuc2lnbmVkXCIgfVxyXG5cdFx0XHQgIF0sXHJcblx0XHRcdCAgXCJzcnNcIjogXCI8b21pdHRlZCBmb3IgYnJldml0eT5cIixcclxuXHRcdFx0ICBcInR5cGVcIjogXCJvY3RyZWVcIlxyXG5cdFx0XHR9XHJcblx0XHRcdCovXHJcblx0XHRcdHZhciBncmV5aG91bmRJbmZvID0gSlNPTi5wYXJzZShkYXRhKTtcclxuXHRcdFx0dmFyIHZlcnNpb24gPSBuZXcgVmVyc2lvblV0aWxzKFwiMS40XCIpO1xyXG5cclxuXHRcdFx0dmFyIGJvdW5kcyA9IGdyZXlob3VuZEluZm8uYm91bmRzO1xyXG5cclxuXHRcdFx0Ly9UT0RPIFVudXNlZDogdmFyIGJvdW5kc0NvbmZvcm1pbmcgPSBncmV5aG91bmRJbmZvLmJvdW5kc0NvbmZvcm1pbmc7XHJcblx0XHRcdC8vVE9ETyBVbnVzZWQ6IHZhciB3aWR0aCA9IGJvdW5kc1szXSAtIGJvdW5kc1swXTtcclxuXHRcdFx0Ly9UT0RPIFVudXNlZDogdmFyIGRlcHRoID0gYm91bmRzWzRdIC0gYm91bmRzWzFdO1xyXG5cdFx0XHQvL1RPRE8gVW51c2VkOiB2YXIgaGVpZ2h0ID0gYm91bmRzWzVdIC0gYm91bmRzWzJdO1xyXG5cdFx0XHQvL1RPRE8gVW51c2VkOiB2YXIgcmFkaXVzID0gd2lkdGggLyAyO1xyXG5cdFx0XHRcclxuXHRcdFx0dmFyIHNjYWxlID0gZ3JleWhvdW5kSW5mby5zY2FsZSB8fCAwLjAxO1xyXG5cdFx0XHRpZihBcnJheS5pc0FycmF5KHNjYWxlKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHNjYWxlID0gTWF0aC5taW4oc2NhbGVbMF0sIHNjYWxlWzFdLCBzY2FsZVsyXSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmKEdyZXlob3VuZFV0aWxzLmdldFF1ZXJ5UGFyYW0oXCJzY2FsZVwiKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHNjYWxlID0gcGFyc2VGbG9hdChHcmV5aG91bmRVdGlscy5nZXRRdWVyeVBhcmFtKFwic2NhbGVcIikpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgYmFzZURlcHRoID0gTWF0aC5tYXgoOCwgZ3JleWhvdW5kSW5mby5iYXNlRGVwdGgpO1xyXG5cclxuXHRcdFx0Ly9JZGVhbGx5IHdlIHdhbnQgdG8gY2hhbmdlIHRoaXMgYml0IGNvbXBsZXRlbHksIHNpbmNlXHJcblx0XHRcdC8vZ3JleWhvdW5kXCJzIG9wdGlvbnMgYXJlIHdpZGVyIHRoYW4gdGhlIGRlZmF1bHQgb3B0aW9ucyBmb3JcclxuXHRcdFx0Ly92aXN1YWxpemluZyBwb2ludGNsb3Vkcy4gSWYgc29tZW9uZSBldmVyIGhhcyB0aW1lIHRvIGJ1aWxkIGFcclxuXHRcdFx0Ly9jdXN0b20gdWkgZWxlbWVudCBmb3IgZ3JleWhvdW5kLCB0aGUgc2NoZW1hIG9wdGlvbnMgZnJvbVxyXG5cdFx0XHQvL3RoaXMgaW5mbyByZXF1ZXN0IHNob3VsZCBiZSBnaXZlbiB0byB0aGUgVUksIHNvIHRoZSB1c2VyIGNhblxyXG5cdFx0XHQvL2Nob29zZSBiZXR3ZWVuIHRoZW0uIFRoZSBzZWxlY3RlZCBvcHRpb24gY2FuIHRoZW4gYmVcclxuXHRcdFx0Ly9kaXJlY3RseSByZXF1ZXN0ZWQgZnJvbSB0aGUgc2VydmVyIGluIHRoZVxyXG5cdFx0XHQvL1BvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUgd2l0aG91dCBhc2tpbmcgZm9yXHJcblx0XHRcdC8vYXR0cmlidXRlcyB0aGF0IHdlIGFyZSBub3QgY3VycmVudGx5IHZpc3VhbGl6aW5nLiAgV2UgYXNzdW1lXHJcblx0XHRcdC8vWFlaIGFyZSBhbHdheXMgYXZhaWxhYmxlLlxyXG5cdFx0XHR2YXIgYXR0cmlidXRlcyA9IFtcIlBPU0lUSU9OX0NBUlRFU0lBTlwiXTtcclxuXHJcblx0XHRcdC8vVG8gYmUgY2FyZWZ1bCwgd2Ugb25seSBhZGQgQ09MT1JfUEFDS0VEIGFzIGFuIG9wdGlvbiBpZiBhbGxcclxuXHRcdFx0Ly9jb2xvcnMgYXJlIGFjdHVhbGx5IGZvdW5kLlxyXG5cdFx0XHR2YXIgcmVkID0gZmFsc2U7XHJcblx0XHRcdHZhciBncmVlbiA9IGZhbHNlO1xyXG5cdFx0XHR2YXIgYmx1ZSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0Z3JleWhvdW5kSW5mby5zY2hlbWEuZm9yRWFjaChmdW5jdGlvbihlbnRyeSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8vSW50ZW5zaXR5IGFuZCBDbGFzc2lmaWNhdGlvbiBhcmUgb3B0aW9uYWwuXHJcblx0XHRcdFx0aWYoZW50cnkubmFtZSA9PT0gXCJJbnRlbnNpdHlcIilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRhdHRyaWJ1dGVzLnB1c2goXCJJTlRFTlNJVFlcIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmKGVudHJ5Lm5hbWUgPT09IFwiQ2xhc3NpZmljYXRpb25cIilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRhdHRyaWJ1dGVzLnB1c2goXCJDTEFTU0lGSUNBVElPTlwiKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmKGVudHJ5Lm5hbWUgPT09IFwiUmVkXCIpIHJlZCA9IHRydWU7XHJcblx0XHRcdFx0ZWxzZSBpZihlbnRyeS5uYW1lID09PSBcIkdyZWVuXCIpIGdyZWVuID0gdHJ1ZTtcclxuXHRcdFx0XHRlbHNlIGlmKGVudHJ5Lm5hbWUgPT09IFwiQmx1ZVwiKSBibHVlID0gdHJ1ZTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRpZihyZWQgJiYgZ3JlZW4gJiYgYmx1ZSkgYXR0cmlidXRlcy5wdXNoKFwiQ09MT1JfUEFDS0VEXCIpO1xyXG5cclxuXHRcdFx0Ly9GaWxsIGluIGdlb21ldHJ5IGZpZWxkcy5cclxuXHRcdFx0dmFyIHBnZyA9IG5ldyBQb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnkoKTtcclxuXHRcdFx0cGdnLnNlcnZlclVSTCA9IHNlcnZlclVSTDtcclxuXHRcdFx0cGdnLnNwYWNpbmcgPSAoYm91bmRzWzNdIC0gYm91bmRzWzBdKSAvIE1hdGgucG93KDIsIGJhc2VEZXB0aCk7XHJcblx0XHRcdHBnZy5iYXNlRGVwdGggPSBiYXNlRGVwdGg7XHJcblx0XHRcdHBnZy5oaWVyYXJjaHlTdGVwU2l6ZSA9IEhJRVJBUkNIWV9TVEVQX1NJWkU7XHJcblxyXG5cdFx0XHRwZ2cuc2NoZW1hID0gR3JleWhvdW5kVXRpbHMuY3JlYXRlU2NoZW1hKGF0dHJpYnV0ZXMpO1xyXG5cdFx0XHR2YXIgcG9pbnRTaXplID0gR3JleWhvdW5kVXRpbHMucG9pbnRTaXplRnJvbShwZ2cuc2NoZW1hKTtcclxuXHJcblx0XHRcdHBnZy5wb2ludEF0dHJpYnV0ZXMgPSBuZXcgUG9pbnRBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpO1xyXG5cdFx0XHRwZ2cucG9pbnRBdHRyaWJ1dGVzLmJ5dGVTaXplID0gcG9pbnRTaXplO1xyXG5cclxuXHRcdFx0dmFyIGJvdW5kaW5nQm94ID0gbmV3IFRIUkVFLkJveDMoXHJcblx0XHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoKS5mcm9tQXJyYXkoYm91bmRzLCAwKSxcclxuXHRcdFx0XHRuZXcgVEhSRUUuVmVjdG9yMygpLmZyb21BcnJheShib3VuZHMsIDMpXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0XHR2YXIgb2Zmc2V0ID0gYm91bmRpbmdCb3gubWluLmNsb25lKCk7XHJcblxyXG5cdFx0XHRib3VuZGluZ0JveC5tYXguc3ViKGJvdW5kaW5nQm94Lm1pbik7XHJcblx0XHRcdGJvdW5kaW5nQm94Lm1pbi5zZXQoMCwgMCwgMCk7XHJcblxyXG5cdFx0XHRwZ2cucHJvamVjdGlvbiA9IGdyZXlob3VuZEluZm8uc3JzO1xyXG5cdFx0XHRwZ2cuYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveDtcclxuXHRcdFx0cGdnLmJvdW5kaW5nU3BoZXJlID0gYm91bmRpbmdCb3guZ2V0Qm91bmRpbmdTcGhlcmUobmV3IFRIUkVFLlNwaGVyZSgpKTtcclxuXHJcblx0XHRcdHBnZy5zY2FsZSA9IHNjYWxlO1xyXG5cdFx0XHRwZ2cub2Zmc2V0ID0gb2Zmc2V0O1xyXG5cdFx0XHRwZ2cubG9hZGVyID0gbmV3IEdyZXlob3VuZEJpbmFyeUxvYWRlcih2ZXJzaW9uLCBib3VuZGluZ0JveCwgcGdnLnNjYWxlKTtcclxuXHJcblx0XHRcdHZhciBub2RlcyA9IHt9O1xyXG5cclxuXHRcdFx0Ly9sb2FkIHJvb3RcclxuXHRcdFx0dmFyIG5hbWUgPSBcInJcIjtcclxuXHJcblx0XHRcdHZhciByb290ID0gbmV3IFBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUobmFtZSwgcGdnLCBib3VuZGluZ0JveCwgc2NhbGUsIG9mZnNldCk7XHJcblx0XHRcdHJvb3QubGV2ZWwgPSAwO1xyXG5cdFx0XHRyb290Lmhhc0NoaWxkcmVuID0gdHJ1ZTtcclxuXHRcdFx0cm9vdC5udW1Qb2ludHMgPSBncmV5aG91bmRJbmZvLm51bVBvaW50cztcclxuXHRcdFx0cm9vdC5zcGFjaW5nID0gcGdnLnNwYWNpbmc7XHJcblx0XHRcdHBnZy5yb290ID0gcm9vdDtcclxuXHRcdFx0cGdnLnJvb3QubG9hZCgpO1xyXG5cdFx0XHRub2Rlc1tuYW1lXSA9IHJvb3Q7XHJcblx0XHJcblx0XHRcdHBnZy5ub2RlcyA9IG5vZGVzO1xyXG5cclxuXHRcdFx0R3JleWhvdW5kVXRpbHMuZ2V0Tm9ybWFsaXphdGlvbihzZXJ2ZXJVUkwsIGdyZXlob3VuZEluZm8uYmFzZURlcHRoLFxyXG5cdFx0XHRcdGZ1bmN0aW9uKF8sIG5vcm1hbGl6ZSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRpZihub3JtYWxpemUuY29sb3IpIHBnZy5ub3JtYWxpemUuY29sb3IgPSB0cnVlO1xyXG5cdFx0XHRcdFx0aWYobm9ybWFsaXplLmludGVuc2l0eSkgcGdnLm5vcm1hbGl6ZS5pbnRlbnNpdHkgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRcdGNhbGxiYWNrKHBnZyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdGNhdGNoKGUpXHJcblx0e1xyXG5cdFx0Y29uc29sZS5sb2coXCJQb3RyZWU6IExvYWRpbmcgZmFpbGVkLlwiLCB1cmwsIGUpO1xyXG5cdFx0Y2FsbGJhY2soKTtcclxuXHR9XHJcbn07XHJcblxyXG5HcmV5aG91bmRMb2FkZXIubG9hZFBvaW50QXR0cmlidXRlcyA9IGZ1bmN0aW9uKG1ubylcclxue1xyXG5cdHZhciBmcGEgPSBtbm8ucG9pbnRBdHRyaWJ1dGVzO1xyXG5cdHZhciBwYSA9IG5ldyBQb2ludEF0dHJpYnV0ZXMoKTtcclxuXHJcblx0Zm9yKHZhciBpID0gMDsgaSA8IGZwYS5sZW5ndGg7IGkrKylcclxuXHR7XHJcblx0XHR2YXIgcG9pbnRBdHRyaWJ1dGUgPSBQb2ludEF0dHJpYnV0ZVtmcGFbaV1dO1xyXG5cdFx0cGEuYWRkKHBvaW50QXR0cmlidXRlKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBwYTtcclxufTtcclxuXHJcbkdyZXlob3VuZExvYWRlci5jcmVhdGVDaGlsZEFBQkIgPSBmdW5jdGlvbihhYWJiLCBjaGlsZEluZGV4KVxyXG57XHJcblx0dmFyIG1pbiA9IGFhYmIubWluO1xyXG5cdHZhciBtYXggPSBhYWJiLm1heDtcclxuXHR2YXIgZEhhbGZMZW5ndGggPSBuZXcgVEhSRUUuVmVjdG9yMygpLmNvcHkobWF4KS5zdWIobWluKS5tdWx0aXBseVNjYWxhcigwLjUpO1xyXG5cdHZhciB4SGFsZkxlbmd0aCA9IG5ldyBUSFJFRS5WZWN0b3IzKGRIYWxmTGVuZ3RoLngsIDAsIDApO1xyXG5cdHZhciB5SGFsZkxlbmd0aCA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIGRIYWxmTGVuZ3RoLnksIDApO1xyXG5cdHZhciB6SGFsZkxlbmd0aCA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIGRIYWxmTGVuZ3RoLnopO1xyXG5cclxuXHR2YXIgY21pbiA9IG1pbjtcclxuXHR2YXIgY21heCA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuYWRkKG1pbikuYWRkKGRIYWxmTGVuZ3RoKTtcclxuXHJcblx0aWYoY2hpbGRJbmRleCA9PT0gMSlcclxuXHR7XHJcblx0XHRtaW4gPSBuZXcgVEhSRUUuVmVjdG9yMygpLmNvcHkoY21pbikuYWRkKHpIYWxmTGVuZ3RoKTtcclxuXHRcdG1heCA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuY29weShjbWF4KS5hZGQoekhhbGZMZW5ndGgpO1xyXG5cdH1cclxuXHRlbHNlIGlmKGNoaWxkSW5kZXggPT09IDMpXHJcblx0e1xyXG5cdFx0bWluID0gbmV3IFRIUkVFLlZlY3RvcjMoKS5jb3B5KGNtaW4pLmFkZCh6SGFsZkxlbmd0aCkuYWRkKHlIYWxmTGVuZ3RoKTtcclxuXHRcdG1heCA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuY29weShjbWF4KS5hZGQoekhhbGZMZW5ndGgpLmFkZCh5SGFsZkxlbmd0aCk7XHJcblx0fVxyXG5cdGVsc2UgaWYoY2hpbGRJbmRleCA9PT0gMClcclxuXHR7XHJcblx0XHRtaW4gPSBjbWluO1xyXG5cdFx0bWF4ID0gY21heDtcclxuXHR9XHJcblx0ZWxzZSBpZihjaGlsZEluZGV4ID09PSAyKVxyXG5cdHtcclxuXHRcdG1pbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuY29weShjbWluKS5hZGQoeUhhbGZMZW5ndGgpO1xyXG5cdFx0bWF4ID0gbmV3IFRIUkVFLlZlY3RvcjMoKS5jb3B5KGNtYXgpLmFkZCh5SGFsZkxlbmd0aCk7XHJcblx0fVxyXG5cdGVsc2UgaWYoY2hpbGRJbmRleCA9PT0gNSlcclxuXHR7XHJcblx0XHRtaW4gPSBuZXcgVEhSRUUuVmVjdG9yMygpLmNvcHkoY21pbikuYWRkKHpIYWxmTGVuZ3RoKS5hZGQoeEhhbGZMZW5ndGgpO1xyXG5cdFx0bWF4ID0gbmV3IFRIUkVFLlZlY3RvcjMoKS5jb3B5KGNtYXgpLmFkZCh6SGFsZkxlbmd0aCkuYWRkKHhIYWxmTGVuZ3RoKTtcclxuXHR9XHJcblx0ZWxzZSBpZihjaGlsZEluZGV4ID09PSA3KVxyXG5cdHtcclxuXHRcdG1pbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuY29weShjbWluKS5hZGQoZEhhbGZMZW5ndGgpO1xyXG5cdFx0bWF4ID0gbmV3IFRIUkVFLlZlY3RvcjMoKS5jb3B5KGNtYXgpLmFkZChkSGFsZkxlbmd0aCk7XHJcblx0fVxyXG5cdGVsc2UgaWYoY2hpbGRJbmRleCA9PT0gNClcclxuXHR7XHJcblx0XHRtaW4gPSBuZXcgVEhSRUUuVmVjdG9yMygpLmNvcHkoY21pbikuYWRkKHhIYWxmTGVuZ3RoKTtcclxuXHRcdG1heCA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuY29weShjbWF4KS5hZGQoeEhhbGZMZW5ndGgpO1xyXG5cdH1cclxuXHRlbHNlIGlmKGNoaWxkSW5kZXggPT09IDYpXHJcblx0e1xyXG5cdFx0bWluID0gbmV3IFRIUkVFLlZlY3RvcjMoKS5jb3B5KGNtaW4pLmFkZCh4SGFsZkxlbmd0aCkuYWRkKHlIYWxmTGVuZ3RoKTtcclxuXHRcdG1heCA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuY29weShjbWF4KS5hZGQoeEhhbGZMZW5ndGgpLmFkZCh5SGFsZkxlbmd0aCk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gbmV3IFRIUkVFLkJveDMobWluLCBtYXgpO1xyXG59O1xyXG5cclxuZXhwb3J0IHtHcmV5aG91bmRMb2FkZXJ9OyIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxuaW1wb3J0IHtQb2ludEF0dHJpYnV0ZU5hbWVzfSBmcm9tIFwiLi4vUG9pbnRBdHRyaWJ1dGVzLmpzXCI7XHJcbmltcG9ydCB7VmVyc2lvblV0aWxzfSBmcm9tIFwiLi4vdXRpbHMvVmVyc2lvblV0aWxzLmpzXCI7XHJcbmltcG9ydCB7V29ya2VyTWFuYWdlcn0gZnJvbSBcIi4uL3V0aWxzL1dvcmtlck1hbmFnZXIuanNcIjtcclxuaW1wb3J0IHtHbG9iYWx9IGZyb20gXCIuLi9HbG9iYWwuanNcIjtcclxuaW1wb3J0IHsgWEhSRmFjdG9yeSB9IGZyb20gJy4uL1hIUkZhY3RvcnkuanMnO1xyXG5cclxuY2xhc3MgQmluYXJ5TG9hZGVyXHJcbntcclxuXHRjb25zdHJ1Y3Rvcih2ZXJzaW9uLCBib3VuZGluZ0JveCwgc2NhbGUpXHJcblx0e1xyXG5cdFx0aWYodHlwZW9mKHZlcnNpb24pID09PSBcInN0cmluZ1wiKVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLnZlcnNpb24gPSBuZXcgVmVyc2lvblV0aWxzKHZlcnNpb24pO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLnZlcnNpb24gPSB2ZXJzaW9uO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveDtcclxuXHRcdHRoaXMuc2NhbGUgPSBzY2FsZTtcclxuXHR9XHJcblxyXG5cdGxvYWQobm9kZSlcclxuXHR7XHJcblx0XHRpZihub2RlLmxvYWRlZClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciB1cmwgPSBub2RlLmdldFVSTCgpO1xyXG5cclxuXHRcdGlmKHRoaXMudmVyc2lvbi5lcXVhbE9ySGlnaGVyKFwiMS40XCIpKVxyXG5cdFx0e1xyXG5cdFx0XHR1cmwgKz0gXCIuYmluXCI7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdHZhciB4aHIgPSBYSFJGYWN0b3J5LmNyZWF0ZVhNTEh0dHBSZXF1ZXN0KCk7XHJcblx0XHR4aHIub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpO1xyXG5cdFx0eGhyLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcclxuXHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZFwiKTtcclxuXHRcdHhoci5vbmxvYWQgPSBmdW5jdGlvbigpXHJcblx0XHR7XHJcblx0XHRcdHRyeVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c2VsZi5wYXJzZShub2RlLCB4aHIucmVzcG9uc2UpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNhdGNoKGUpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRHbG9iYWwubnVtTm9kZXNMb2FkaW5nLS07XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlBvdHJlZTogRXhjZXB0aW9uIHRocm93biBwYXJzaW5nIHBvaW50cy5cIiwgZSk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHR4aHIub25lcnJvciA9IGZ1bmN0aW9uKGV2ZW50KVxyXG5cdFx0e1xyXG5cdFx0XHRHbG9iYWwubnVtTm9kZXNMb2FkaW5nLS07XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJQb3RyZWU6IEZhaWxlZCB0byBsb2FkIGZpbGUuXCIsIHhociwgdXJsKTtcclxuXHRcdH07XHJcblxyXG5cdFx0eGhyLnNlbmQobnVsbCk7XHJcblx0fTtcclxuXHJcblx0cGFyc2Uobm9kZSwgYnVmZmVyKVxyXG5cdHtcclxuXHRcdHZhciBwb2ludEF0dHJpYnV0ZXMgPSBub2RlLnBjb0dlb21ldHJ5LnBvaW50QXR0cmlidXRlcztcclxuXHRcdHZhciBudW1Qb2ludHMgPSBidWZmZXIuYnl0ZUxlbmd0aCAvIG5vZGUucGNvR2VvbWV0cnkucG9pbnRBdHRyaWJ1dGVzLmJ5dGVTaXplO1xyXG5cclxuXHRcdGlmKHRoaXMudmVyc2lvbi51cFRvKFwiMS41XCIpKVxyXG5cdFx0e1xyXG5cdFx0XHRub2RlLm51bVBvaW50cyA9IG51bVBvaW50cztcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgbWVzc2FnZSA9XHJcblx0XHR7XHJcblx0XHRcdGJ1ZmZlcjogYnVmZmVyLFxyXG5cdFx0XHRwb2ludEF0dHJpYnV0ZXM6IHBvaW50QXR0cmlidXRlcyxcclxuXHRcdFx0dmVyc2lvbjogdGhpcy52ZXJzaW9uLnZlcnNpb24sXHJcblx0XHRcdG1pbjogW25vZGUuYm91bmRpbmdCb3gubWluLngsIG5vZGUuYm91bmRpbmdCb3gubWluLnksIG5vZGUuYm91bmRpbmdCb3gubWluLnpdLFxyXG5cdFx0XHRvZmZzZXQ6IFtub2RlLnBjb0dlb21ldHJ5Lm9mZnNldC54LCBub2RlLnBjb0dlb21ldHJ5Lm9mZnNldC55LCBub2RlLnBjb0dlb21ldHJ5Lm9mZnNldC56XSxcclxuXHRcdFx0c2NhbGU6IHRoaXMuc2NhbGUsXHJcblx0XHRcdHNwYWNpbmc6IG5vZGUuc3BhY2luZyxcclxuXHRcdFx0aGFzQ2hpbGRyZW46IG5vZGUuaGFzQ2hpbGRyZW4sXHJcblx0XHRcdG5hbWU6IG5vZGUubmFtZVxyXG5cdFx0fTtcclxuXHJcblx0XHRHbG9iYWwud29ya2VyUG9vbC5ydW5UYXNrKFdvcmtlck1hbmFnZXIuQklOQVJZX0RFQ09ERVIsIGZ1bmN0aW9uKGUpXHJcblx0XHR7XHJcblx0XHRcdHZhciBkYXRhID0gZS5kYXRhO1xyXG5cclxuXHRcdFx0aWYoZGF0YS5lcnJvciAhPT0gdW5kZWZpbmVkKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJQb3RyZWU6IEJpbmFyeSB3b3JrZXIgZXJyb3IuXCIsIGRhdGEpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIGJ1ZmZlcnMgPSBkYXRhLmF0dHJpYnV0ZUJ1ZmZlcnM7XHJcblx0XHRcdHZhciB0aWdodEJvdW5kaW5nQm94ID0gbmV3IFRIUkVFLkJveDMobmV3IFRIUkVFLlZlY3RvcjMoKS5mcm9tQXJyYXkoZGF0YS50aWdodEJvdW5kaW5nQm94Lm1pbiksIG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KGRhdGEudGlnaHRCb3VuZGluZ0JveC5tYXgpKTtcclxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XHJcblxyXG5cdFx0XHRmb3IodmFyIHByb3BlcnR5IGluIGJ1ZmZlcnMpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR2YXIgYnVmZmVyID0gYnVmZmVyc1twcm9wZXJ0eV0uYnVmZmVyO1xyXG5cclxuXHRcdFx0XHRpZihwYXJzZUludChwcm9wZXJ0eSkgPT09IFBvaW50QXR0cmlidXRlTmFtZXMuUE9TSVRJT05fQ0FSVEVTSUFOKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShidWZmZXIpLCAzKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYocGFyc2VJbnQocHJvcGVydHkpID09PSBQb2ludEF0dHJpYnV0ZU5hbWVzLkNPTE9SX1BBQ0tFRClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJjb2xvclwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBVaW50OEFycmF5KGJ1ZmZlciksIDQsIHRydWUpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZihwYXJzZUludChwcm9wZXJ0eSkgPT09IFBvaW50QXR0cmlidXRlTmFtZXMuSU5URU5TSVRZKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcImludGVuc2l0eVwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyKSwgMSkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmKHBhcnNlSW50KHByb3BlcnR5KSA9PT0gUG9pbnRBdHRyaWJ1dGVOYW1lcy5DTEFTU0lGSUNBVElPTilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJjbGFzc2lmaWNhdGlvblwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBVaW50OEFycmF5KGJ1ZmZlciksIDEpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZihwYXJzZUludChwcm9wZXJ0eSkgPT09IFBvaW50QXR0cmlidXRlTmFtZXMuTk9STUFMX1NQSEVSRU1BUFBFRClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJub3JtYWxcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlciksIDMpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZihwYXJzZUludChwcm9wZXJ0eSkgPT09IFBvaW50QXR0cmlidXRlTmFtZXMuTk9STUFMX09DVDE2KVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcIm5vcm1hbFwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyKSwgMykpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmKHBhcnNlSW50KHByb3BlcnR5KSA9PT0gUG9pbnRBdHRyaWJ1dGVOYW1lcy5OT1JNQUwpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwibm9ybWFsXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShidWZmZXIpLCAzKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYocGFyc2VJbnQocHJvcGVydHkpID09PSBQb2ludEF0dHJpYnV0ZU5hbWVzLklORElDRVMpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSwgNCk7XHJcblx0XHRcdFx0XHRidWZmZXJBdHRyaWJ1dGUubm9ybWFsaXplZCA9IHRydWU7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJpbmRpY2VzXCIsIGJ1ZmZlckF0dHJpYnV0ZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYocGFyc2VJbnQocHJvcGVydHkpID09PSBQb2ludEF0dHJpYnV0ZU5hbWVzLlNQQUNJTkcpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShidWZmZXIpLCAxKTtcclxuXHRcdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcInNwYWNpbmdcIiwgYnVmZmVyQXR0cmlidXRlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRpZ2h0Qm91bmRpbmdCb3gubWF4LnN1Yih0aWdodEJvdW5kaW5nQm94Lm1pbik7XHJcblx0XHRcdHRpZ2h0Qm91bmRpbmdCb3gubWluLnNldCgwLCAwLCAwKTtcclxuXHJcblx0XHRcdHZhciBudW1Qb2ludHMgPSBlLmRhdGEuYnVmZmVyLmJ5dGVMZW5ndGggLyBwb2ludEF0dHJpYnV0ZXMuYnl0ZVNpemU7XHJcblxyXG5cdFx0XHRub2RlLm51bVBvaW50cyA9IG51bVBvaW50cztcclxuXHRcdFx0bm9kZS5nZW9tZXRyeSA9IGdlb21ldHJ5O1xyXG5cdFx0XHRub2RlLm1lYW4gPSBuZXcgVEhSRUUuVmVjdG9yMyguLi5kYXRhLm1lYW4pO1xyXG5cdFx0XHRub2RlLnRpZ2h0Qm91bmRpbmdCb3ggPSB0aWdodEJvdW5kaW5nQm94O1xyXG5cdFx0XHRub2RlLmxvYWRlZCA9IHRydWU7XHJcblx0XHRcdG5vZGUubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0XHRub2RlLmVzdGltYXRlZFNwYWNpbmcgPSBkYXRhLmVzdGltYXRlZFNwYWNpbmc7XHJcblx0XHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmctLTtcclxuXHRcdH0sIG1lc3NhZ2UsIFttZXNzYWdlLmJ1ZmZlcl0pO1xyXG5cdH07XHJcbn07XHJcblxyXG5leHBvcnQge0JpbmFyeUxvYWRlcn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHtXb3JrZXJNYW5hZ2VyfSBmcm9tIFwiLi4vdXRpbHMvV29ya2VyTWFuYWdlci5qc1wiO1xyXG5pbXBvcnQge0dsb2JhbH0gZnJvbSBcIi4uL0dsb2JhbC5qc1wiO1xyXG5cclxudmFyIHBvaW50Rm9ybWF0UmVhZGVycyA9XHJcbltcclxuXHRmdW5jdGlvbihkdilcclxuXHR7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcInBvc2l0aW9uXCI6IFsgZHYuZ2V0SW50MzIoMCwgdHJ1ZSksIGR2LmdldEludDMyKDQsIHRydWUpLCBkdi5nZXRJbnQzMig4LCB0cnVlKV0sXHJcblx0XHRcdFwiaW50ZW5zaXR5XCI6IGR2LmdldFVpbnQxNigxMiwgdHJ1ZSksXHJcblx0XHRcdFwiY2xhc3NpZmljYXRpb25cIjogZHYuZ2V0VWludDgoMTYsIHRydWUpXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0ZnVuY3Rpb24oZHYpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0XCJwb3NpdGlvblwiOiBbIGR2LmdldEludDMyKDAsIHRydWUpLCBkdi5nZXRJbnQzMig0LCB0cnVlKSwgZHYuZ2V0SW50MzIoOCwgdHJ1ZSldLFxyXG5cdFx0XHRcImludGVuc2l0eVwiOiBkdi5nZXRVaW50MTYoMTIsIHRydWUpLFxyXG5cdFx0XHRcImNsYXNzaWZpY2F0aW9uXCI6IGR2LmdldFVpbnQ4KDE2LCB0cnVlKVxyXG5cdFx0fTtcclxuXHR9LFxyXG5cdGZ1bmN0aW9uKGR2KVxyXG5cdHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdFwicG9zaXRpb25cIjogWyBkdi5nZXRJbnQzMigwLCB0cnVlKSwgZHYuZ2V0SW50MzIoNCwgdHJ1ZSksIGR2LmdldEludDMyKDgsIHRydWUpXSxcclxuXHRcdFx0XCJpbnRlbnNpdHlcIjogZHYuZ2V0VWludDE2KDEyLCB0cnVlKSxcclxuXHRcdFx0XCJjbGFzc2lmaWNhdGlvblwiOiBkdi5nZXRVaW50OCgxNiwgdHJ1ZSksXHJcblx0XHRcdFwiY29sb3JcIjogW2R2LmdldFVpbnQxNigyMCwgdHJ1ZSksIGR2LmdldFVpbnQxNigyMiwgdHJ1ZSksIGR2LmdldFVpbnQxNigyNCwgdHJ1ZSldXHJcblx0XHR9O1xyXG5cdH0sXHJcblx0ZnVuY3Rpb24oZHYpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0XCJwb3NpdGlvblwiOiBbIGR2LmdldEludDMyKDAsIHRydWUpLCBkdi5nZXRJbnQzMig0LCB0cnVlKSwgZHYuZ2V0SW50MzIoOCwgdHJ1ZSldLFxyXG5cdFx0XHRcImludGVuc2l0eVwiOiBkdi5nZXRVaW50MTYoMTIsIHRydWUpLFxyXG5cdFx0XHRcImNsYXNzaWZpY2F0aW9uXCI6IGR2LmdldFVpbnQ4KDE2LCB0cnVlKSxcclxuXHRcdFx0XCJjb2xvclwiOiBbZHYuZ2V0VWludDE2KDI4LCB0cnVlKSwgZHYuZ2V0VWludDE2KDMwLCB0cnVlKSwgZHYuZ2V0VWludDE2KDMyLCB0cnVlKV1cclxuXHRcdH07XHJcblx0fVxyXG5dO1xyXG5cclxuZnVuY3Rpb24gcmVhZEFzKGJ1ZiwgVHlwZSwgb2Zmc2V0LCBjb3VudClcclxue1xyXG5cdGNvdW50ID0gKGNvdW50ID09PSB1bmRlZmluZWQgfHwgY291bnQgPT09IDAgPyAxIDogY291bnQpO1xyXG5cdHZhciBzdWIgPSBidWYuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBUeXBlLkJZVEVTX1BFUl9FTEVNRU5UICogY291bnQpO1xyXG5cclxuXHR2YXIgciA9IG5ldyBUeXBlKHN1Yik7XHJcblx0aWYoY291bnQgPT09IHVuZGVmaW5lZCB8fCBjb3VudCA9PT0gMSlcclxuXHR7XHJcblx0XHRyZXR1cm4gclswXTtcclxuXHR9XHJcblxyXG5cdHZhciByZXQgPSBbXTtcclxuXHRmb3IodmFyIGkgPSAwIDsgaSA8IGNvdW50IDsgaSArKylcclxuXHR7XHJcblx0XHRyZXQucHVzaChyW2ldKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiByZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlTEFTSGVhZGVyKGFycmF5YnVmZmVyKVxyXG57XHJcblx0dmFyIGRhdGEgPSB7fTtcclxuXHJcblx0ZGF0YS5wb2ludHNPZmZzZXQgPSByZWFkQXMoYXJyYXlidWZmZXIsIFVpbnQzMkFycmF5LCAzMiozKTtcclxuXHRkYXRhLnBvaW50c0Zvcm1hdElkID0gcmVhZEFzKGFycmF5YnVmZmVyLCBVaW50OEFycmF5LCAzMiozKzgpO1xyXG5cdGRhdGEucG9pbnRzU3RydWN0U2l6ZSA9IHJlYWRBcyhhcnJheWJ1ZmZlciwgVWludDE2QXJyYXksIDMyKjMrOCsxKTtcclxuXHRkYXRhLnBvaW50c0NvdW50ID0gcmVhZEFzKGFycmF5YnVmZmVyLCBVaW50MzJBcnJheSwgMzIqMyArIDExKTtcclxuXHJcblx0dmFyIHN0YXJ0ID0gMzIqMyArIDM1O1xyXG5cdGRhdGEuc2NhbGUgPSByZWFkQXMoYXJyYXlidWZmZXIsIEZsb2F0NjRBcnJheSwgc3RhcnQsIDMpOyBzdGFydCArPSAyNDsgLy8gOCozXHJcblx0ZGF0YS5vZmZzZXQgPSByZWFkQXMoYXJyYXlidWZmZXIsIEZsb2F0NjRBcnJheSwgc3RhcnQsIDMpOyBzdGFydCArPSAyNDtcclxuXHJcblx0dmFyIGJvdW5kcyA9IHJlYWRBcyhhcnJheWJ1ZmZlciwgRmxvYXQ2NEFycmF5LCBzdGFydCwgNik7IHN0YXJ0ICs9IDQ4OyAvLyA4KjY7XHJcblx0ZGF0YS5tYXhzID0gW2JvdW5kc1swXSwgYm91bmRzWzJdLCBib3VuZHNbNF1dO1xyXG5cdGRhdGEubWlucyA9IFtib3VuZHNbMV0sIGJvdW5kc1szXSwgYm91bmRzWzVdXTtcclxuXHJcblx0cmV0dXJuIGRhdGE7XHJcbn1cclxuXHJcbi8vIExBUyBMb2FkZXJcclxuLy8gTG9hZHMgdW5jb21wcmVzc2VkIGZpbGVzXHJcbi8vXHJcbmZ1bmN0aW9uIExBU0xvYWRlcihhcnJheWJ1ZmZlcilcclxue1xyXG5cdHRoaXMuYXJyYXlidWZmZXIgPSBhcnJheWJ1ZmZlcjtcclxufTtcclxuXHJcbkxBU0xvYWRlci5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKClcclxue1xyXG5cdC8vIG5vdGhpbmcgbmVlZHMgdG8gYmUgZG9uZSB0byBvcGVuIHRoaXMgZmlsZVxyXG5cdC8vXHJcblx0dGhpcy5yZWFkT2Zmc2V0ID0gMDtcclxuXHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzLCByZWopXHJcblx0e1xyXG5cdFx0c2V0VGltZW91dChyZXMsIDApO1xyXG5cdH0pO1xyXG59O1xyXG5cclxuTEFTTG9hZGVyLnByb3RvdHlwZS5nZXRIZWFkZXIgPSBmdW5jdGlvbigpXHJcbntcclxuXHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXMsIHJlailcclxuXHR7XHJcblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKClcclxuXHRcdHtcclxuXHRcdFx0c2VsZi5oZWFkZXIgPSBwYXJzZUxBU0hlYWRlcihzZWxmLmFycmF5YnVmZmVyKTtcclxuXHRcdFx0cmVzKHNlbGYuaGVhZGVyKTtcclxuXHRcdH0sIDApO1xyXG5cdH0pO1xyXG59O1xyXG5cclxuTEFTTG9hZGVyLnByb3RvdHlwZS5yZWFkRGF0YSA9IGZ1bmN0aW9uKGNvdW50LCBvZmZzZXQsIHNraXApXHJcbntcclxuXHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXMsIHJlailcclxuXHR7XHJcblx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKClcclxuXHRcdHtcclxuXHRcdFx0aWYoIXNlbGYuaGVhZGVyKVxyXG5cdFx0XHRcdHJldHVybiByZWoobmV3IEVycm9yKFwiQ2Fubm90IHN0YXJ0IHJlYWRpbmcgZGF0YSB0aWxsIGEgaGVhZGVyIHJlcXVlc3QgaXMgaXNzdWVkXCIpKTtcclxuXHJcblx0XHRcdHZhciBzdGFydDtcclxuXHRcdFx0aWYoc2tpcCA8PSAxKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y291bnQgPSBNYXRoLm1pbihjb3VudCwgc2VsZi5oZWFkZXIucG9pbnRzQ291bnQgLSBzZWxmLnJlYWRPZmZzZXQpO1xyXG5cdFx0XHRcdHN0YXJ0ID0gc2VsZi5oZWFkZXIucG9pbnRzT2Zmc2V0ICsgc2VsZi5yZWFkT2Zmc2V0ICogc2VsZi5oZWFkZXIucG9pbnRzU3RydWN0U2l6ZTtcclxuXHRcdFx0XHR2YXIgZW5kID0gc3RhcnQgKyBjb3VudCAqIHNlbGYuaGVhZGVyLnBvaW50c1N0cnVjdFNpemU7XHJcblx0XHRcdFx0cmVzKFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGJ1ZmZlcjogc2VsZi5hcnJheWJ1ZmZlci5zbGljZShzdGFydCwgZW5kKSxcclxuXHRcdFx0XHRcdGNvdW50OiBjb3VudCxcclxuXHRcdFx0XHRcdGhhc01vcmVEYXRhOiBzZWxmLnJlYWRPZmZzZXQgKyBjb3VudCA8IHNlbGYuaGVhZGVyLnBvaW50c0NvdW50XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0c2VsZi5yZWFkT2Zmc2V0ICs9IGNvdW50O1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZhciBwb2ludHNUb1JlYWQgPSBNYXRoLm1pbihjb3VudCAqIHNraXAsIHNlbGYuaGVhZGVyLnBvaW50c0NvdW50IC0gc2VsZi5yZWFkT2Zmc2V0KTtcclxuXHRcdFx0XHR2YXIgYnVmZmVyU2l6ZSA9IE1hdGguY2VpbChwb2ludHNUb1JlYWQgLyBza2lwKTtcclxuXHRcdFx0XHR2YXIgcG9pbnRzUmVhZCA9IDA7XHJcblxyXG5cdFx0XHRcdHZhciBidWYgPSBuZXcgVWludDhBcnJheShidWZmZXJTaXplICogc2VsZi5oZWFkZXIucG9pbnRzU3RydWN0U2l6ZSk7XHJcblxyXG5cdFx0XHRcdGZvcih2YXIgaSA9IDAgOyBpIDwgcG9pbnRzVG9SZWFkIDsgaSsrKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGlmKGkgJSBza2lwID09PSAwKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRzdGFydCA9IHNlbGYuaGVhZGVyLnBvaW50c09mZnNldCArIHNlbGYucmVhZE9mZnNldCAqIHNlbGYuaGVhZGVyLnBvaW50c1N0cnVjdFNpemU7XHJcblx0XHRcdFx0XHRcdHZhciBzcmMgPSBuZXcgVWludDhBcnJheShzZWxmLmFycmF5YnVmZmVyLCBzdGFydCwgc2VsZi5oZWFkZXIucG9pbnRzU3RydWN0U2l6ZSk7XHJcblxyXG5cdFx0XHRcdFx0XHRidWYuc2V0KHNyYywgcG9pbnRzUmVhZCAqIHNlbGYuaGVhZGVyLnBvaW50c1N0cnVjdFNpemUpO1xyXG5cdFx0XHRcdFx0XHRwb2ludHNSZWFkICsrO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHNlbGYucmVhZE9mZnNldCArKztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHJlcyhcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRidWZmZXI6IGJ1Zi5idWZmZXIsXHJcblx0XHRcdFx0XHRjb3VudDogcG9pbnRzUmVhZCxcclxuXHRcdFx0XHRcdGhhc01vcmVEYXRhOiBzZWxmLnJlYWRPZmZzZXQgPCBzZWxmLmhlYWRlci5wb2ludHNDb3VudFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9LCAwKTtcclxuXHR9KTtcclxufTtcclxuXHJcbkxBU0xvYWRlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpXHJcbntcclxuXHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlcywgcmVqKVxyXG5cdHtcclxuXHRcdHNlbGYuYXJyYXlidWZmZXIgPSBudWxsO1xyXG5cdFx0c2V0VGltZW91dChyZXMsIDApO1xyXG5cdH0pO1xyXG59O1xyXG5cclxuLy8gTEFaIExvYWRlclxyXG4vLyBVc2VzIE5hQ0wgbW9kdWxlIHRvIGxvYWQgTEFaIGZpbGVzXHJcbi8vXHJcbmZ1bmN0aW9uIExBWkxvYWRlcihhcnJheWJ1ZmZlcilcclxue1xyXG5cdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0dGhpcy5hcnJheWJ1ZmZlciA9IGFycmF5YnVmZmVyO1xyXG5cdHRoaXMubmV4dENCID0gbnVsbDtcclxuXHJcblx0dGhpcy5kb3JyID0gZnVuY3Rpb24ocmVxLCBjYilcclxuXHR7XHJcblx0XHRzZWxmLm5leHRDQiA9IGNiO1xyXG5cdFx0XHJcblx0XHRHbG9iYWwud29ya2VyUG9vbC5ydW5UYXNrKFdvcmtlck1hbmFnZXIuTEFTX0xBWiwgZnVuY3Rpb24oZSlcclxuXHRcdHtcclxuXHRcdFx0aWYoc2VsZi5uZXh0Q0IgIT09IG51bGwpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzZWxmLm5leHRDQihlLmRhdGEpO1xyXG5cdFx0XHRcdHNlbGYubmV4dENCID0gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0fSwgcmVxKTtcclxuXHR9O1xyXG59O1xyXG5cclxuTEFaTG9hZGVyLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24oKVxyXG57XHJcblx0Ly8gbm90aGluZyBuZWVkcyB0byBiZSBkb25lIHRvIG9wZW4gdGhpcyBmaWxlXHJcblx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXMsIHJlailcclxuXHR7XHJcblx0XHRzZWxmLmRvcnIoe3R5cGU6XCJvcGVuXCIsIGFycmF5YnVmZmVyOiBzZWxmLmFycmF5YnVmZmVyfSwgZnVuY3Rpb24ocilcclxuXHRcdHtcclxuXHRcdFx0aWYoci5zdGF0dXMgIT09IDEpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXR1cm4gcmVqKG5ldyBFcnJvcihcIkZhaWxlZCB0byBvcGVuIGZpbGVcIikpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXModHJ1ZSk7XHJcblx0XHR9KTtcclxuXHR9KTtcclxufTtcclxuXHJcbkxBWkxvYWRlci5wcm90b3R5cGUuZ2V0SGVhZGVyID0gZnVuY3Rpb24oKVxyXG57XHJcblx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzLCByZWopXHJcblx0e1xyXG5cdFx0c2VsZi5kb3JyKHt0eXBlOidoZWFkZXInfSwgZnVuY3Rpb24ocilcclxuXHRcdHtcclxuXHRcdFx0aWYoci5zdGF0dXMgIT09IDEpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXR1cm4gcmVqKG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZXQgaGVhZGVyXCIpKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmVzKHIuaGVhZGVyKTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59O1xyXG5cclxuTEFaTG9hZGVyLnByb3RvdHlwZS5yZWFkRGF0YSA9IGZ1bmN0aW9uKGNvdW50LCBvZmZzZXQsIHNraXApXHJcbntcclxuXHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXMsIHJlailcclxuXHR7XHJcblx0XHRzZWxmLmRvcnIoe3R5cGU6J3JlYWQnLCBjb3VudDogY291bnQsIG9mZnNldDogb2Zmc2V0LCBza2lwOiBza2lwfSwgZnVuY3Rpb24ocilcclxuXHRcdHtcclxuXHRcdFx0aWYoci5zdGF0dXMgIT09IDEpXHJcblx0XHRcdFx0cmV0dXJuIHJlaihuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcmVhZCBkYXRhXCIpKTtcclxuXHRcdFx0cmVzKHtcclxuXHRcdFx0XHRidWZmZXI6IHIuYnVmZmVyLFxyXG5cdFx0XHRcdGNvdW50OiByLmNvdW50LFxyXG5cdFx0XHRcdGhhc01vcmVEYXRhOiByLmhhc01vcmVEYXRhXHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn07XHJcblxyXG5MQVpMb2FkZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKVxyXG57XHJcblx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzLCByZWopXHJcblx0e1xyXG5cdFx0c2VsZi5kb3JyKHt0eXBlOidjbG9zZSd9LCBmdW5jdGlvbihyKVxyXG5cdFx0e1xyXG5cdFx0XHRpZihyLnN0YXR1cyAhPT0gMSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldHVybiByZWoobmV3IEVycm9yKFwiRmFpbGVkIHRvIGNsb3NlIGZpbGVcIikpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXModHJ1ZSk7XHJcblx0XHR9KTtcclxuXHR9KTtcclxufTtcclxuXHJcbi8vIEEgc2luZ2xlIGNvbnNpc3RlbnQgaW50ZXJmYWNlIGZvciBsb2FkaW5nIExBUy9MQVogZmlsZXNcclxuZnVuY3Rpb24gTEFTRmlsZShhcnJheWJ1ZmZlcilcclxue1xyXG5cdHRoaXMuYXJyYXlidWZmZXIgPSBhcnJheWJ1ZmZlcjtcclxuXHJcblx0dGhpcy5kZXRlcm1pbmVWZXJzaW9uKCk7XHJcblx0aWYodGhpcy52ZXJzaW9uID4gMTIpXHJcblx0e1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiT25seSBmaWxlIHZlcnNpb25zIDw9IDEuMiBhcmUgc3VwcG9ydGVkIGF0IHRoaXMgdGltZVwiKTtcclxuXHR9XHJcblxyXG5cdHRoaXMuZGV0ZXJtaW5lRm9ybWF0KCk7XHJcblx0aWYocG9pbnRGb3JtYXRSZWFkZXJzW3RoaXMuZm9ybWF0SWRdID09PSB1bmRlZmluZWQpXHJcblx0e1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiVGhlIHBvaW50IGZvcm1hdCBJRCBpcyBub3Qgc3VwcG9ydGVkXCIpO1xyXG5cdH1cclxuXHJcblx0dGhpcy5sb2FkZXIgPSB0aGlzLmlzQ29tcHJlc3NlZCA/IG5ldyBMQVpMb2FkZXIodGhpcy5hcnJheWJ1ZmZlcikgOiBuZXcgTEFTTG9hZGVyKHRoaXMuYXJyYXlidWZmZXIpO1xyXG59O1xyXG5cclxuTEFTRmlsZS5wcm90b3R5cGUuZGV0ZXJtaW5lRm9ybWF0ID0gZnVuY3Rpb24oKVxyXG57XHJcblx0dmFyIGZvcm1hdElkID0gcmVhZEFzKHRoaXMuYXJyYXlidWZmZXIsIFVpbnQ4QXJyYXksIDMyKjMrOCk7XHJcblx0dmFyIGJpdF83ID0gKGZvcm1hdElkICYgMHg4MCkgPj4gNztcclxuXHR2YXIgYml0XzYgPSAoZm9ybWF0SWQgJiAweDQwKSA+PiA2O1xyXG5cclxuXHRpZihiaXRfNyA9PT0gMSAmJiBiaXRfNiA9PT0gMSlcclxuXHR7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJPbGQgc3R5bGUgY29tcHJlc3Npb24gbm90IHN1cHBvcnRlZFwiKTtcclxuXHR9XHJcblxyXG5cdHRoaXMuZm9ybWF0SWQgPSBmb3JtYXRJZCAmIDB4M2Y7XHJcblx0dGhpcy5pc0NvbXByZXNzZWQgPSAoYml0XzcgPT09IDEgfHwgYml0XzYgPT09IDEpO1xyXG59O1xyXG5cclxuTEFTRmlsZS5wcm90b3R5cGUuZGV0ZXJtaW5lVmVyc2lvbiA9IGZ1bmN0aW9uKClcclxue1xyXG5cdHZhciB2ZXIgPSBuZXcgSW50OEFycmF5KHRoaXMuYXJyYXlidWZmZXIsIDI0LCAyKTtcclxuXHR0aGlzLnZlcnNpb24gPSB2ZXJbMF0gKiAxMCArIHZlclsxXTtcclxuXHR0aGlzLnZlcnNpb25Bc1N0cmluZyA9IHZlclswXSArIFwiLlwiICsgdmVyWzFdO1xyXG59O1xyXG5cclxuTEFTRmlsZS5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKClcclxue1xyXG5cdHJldHVybiB0aGlzLmxvYWRlci5vcGVuKCk7XHJcbn07XHJcblxyXG5MQVNGaWxlLnByb3RvdHlwZS5nZXRIZWFkZXIgPSBmdW5jdGlvbigpXHJcbntcclxuXHRyZXR1cm4gdGhpcy5sb2FkZXIuZ2V0SGVhZGVyKCk7XHJcbn07XHJcblxyXG5MQVNGaWxlLnByb3RvdHlwZS5yZWFkRGF0YSA9IGZ1bmN0aW9uKGNvdW50LCBzdGFydCwgc2tpcClcclxue1xyXG5cdHJldHVybiB0aGlzLmxvYWRlci5yZWFkRGF0YShjb3VudCwgc3RhcnQsIHNraXApO1xyXG59O1xyXG5cclxuTEFTRmlsZS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpXHJcbntcclxuXHRyZXR1cm4gdGhpcy5sb2FkZXIuY2xvc2UoKTtcclxufTtcclxuXHJcbi8vIERlY29kZXMgTEFTIHJlY29yZHMgaW50byBwb2ludHNcclxuZnVuY3Rpb24gTEFTRGVjb2RlcihidWZmZXIsIHBvaW50Rm9ybWF0SUQsIHBvaW50U2l6ZSwgcG9pbnRzQ291bnQsIHNjYWxlLCBvZmZzZXQsIG1pbnMsIG1heHMpXHJcbntcclxuXHR0aGlzLmFycmF5YiA9IGJ1ZmZlcjtcclxuXHR0aGlzLmRlY29kZXIgPSBwb2ludEZvcm1hdFJlYWRlcnNbcG9pbnRGb3JtYXRJRF07XHJcblx0dGhpcy5wb2ludHNDb3VudCA9IHBvaW50c0NvdW50O1xyXG5cdHRoaXMucG9pbnRTaXplID0gcG9pbnRTaXplO1xyXG5cdHRoaXMuc2NhbGUgPSBzY2FsZTtcclxuXHR0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuXHR0aGlzLm1pbnMgPSBtaW5zO1xyXG5cdHRoaXMubWF4cyA9IG1heHM7XHJcbn07XHJcblxyXG5MQVNEZWNvZGVyLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uKGluZGV4KVxyXG57XHJcblx0aWYoaW5kZXggPCAwIHx8IGluZGV4ID49IHRoaXMucG9pbnRzQ291bnQpXHJcblx0e1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiUG9pbnQgaW5kZXggb3V0IG9mIHJhbmdlXCIpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIHRoaXMuZGVjb2RlcihuZXcgRGF0YVZpZXcodGhpcy5hcnJheWIsIGluZGV4ICogdGhpcy5wb2ludFNpemUsIHRoaXMucG9pbnRTaXplKSk7XHJcbn07XHJcblxyXG5leHBvcnQge0xBU0xvYWRlciwgTEFaTG9hZGVyLCBMQVNGaWxlLCBMQVNEZWNvZGVyfTsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmltcG9ydCB7IFZlcnNpb25VdGlscyB9IGZyb20gXCIuLi91dGlscy9WZXJzaW9uVXRpbHMuanNcIjtcclxuaW1wb3J0IHsgV29ya2VyTWFuYWdlciB9IGZyb20gXCIuLi91dGlscy9Xb3JrZXJNYW5hZ2VyLmpzXCI7XHJcbmltcG9ydCB7IExBU0xvYWRlciwgTEFaTG9hZGVyLCBMQVNGaWxlLCBMQVNEZWNvZGVyIH0gZnJvbSBcIi4vTEFTTG9hZGVyLmpzXCI7XHJcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gXCIuLi9HbG9iYWwuanNcIjtcclxuaW1wb3J0IHsgWEhSRmFjdG9yeSB9IGZyb20gXCIuLi9YSFJGYWN0b3J5LmpzXCI7XHJcblxyXG4vKipcclxuICogbGFzbGF6IGNvZGUgdGFrZW4gYW5kIGFkYXB0ZWQgZnJvbSBwbGFzLmlvIGpzLWxhc2xhelxyXG4gKlx0aHR0cDovL3BsYXMuaW8vXHJcbiAqICBodHRwczovL2dpdGh1Yi5jb20vdmVybWEvcGxhc2lvXHJcbiAqXHJcbiAqIFRoYW5rcyB0byBVZGF5IFZlcm1hIGFuZCBIb3dhcmQgQnV0bGVyXHJcbiAqL1xyXG5jbGFzcyBMQVNMQVpMb2FkZXIge1xyXG5cdGNvbnN0cnVjdG9yKHZlcnNpb24pIHtcclxuXHRcdGlmICh0eXBlb2YgKHZlcnNpb24pID09PSBcInN0cmluZ1wiKSB7XHJcblx0XHRcdHRoaXMudmVyc2lvbiA9IG5ldyBWZXJzaW9uVXRpbHModmVyc2lvbik7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0dGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGxvYWQobm9kZSkge1xyXG5cdFx0aWYgKG5vZGUubG9hZGVkKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgcG9pbnRBdHRyaWJ1dGVzID0gbm9kZS5wY29HZW9tZXRyeS5wb2ludEF0dHJpYnV0ZXM7XHJcblx0XHR2YXIgdXJsID0gbm9kZS5nZXRVUkwoKTtcclxuXHJcblx0XHRpZiAodGhpcy52ZXJzaW9uLmVxdWFsT3JIaWdoZXIoXCIxLjRcIikpIHtcclxuXHRcdFx0dXJsICs9IFwiLlwiICsgcG9pbnRBdHRyaWJ1dGVzLnRvTG93ZXJDYXNlKCk7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdHZhciB4aHIgPSBYSFJGYWN0b3J5LmNyZWF0ZVhNTEh0dHBSZXF1ZXN0KCk7XHJcblx0XHR4aHIub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpO1xyXG5cdFx0eGhyLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcclxuXHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZFwiKTtcclxuXHRcdHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGlmICh4aHIucmVzcG9uc2UgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG5cdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRzZWxmLnBhcnNlKG5vZGUsIHhoci5yZXNwb25zZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGNhdGNoIChlKSB7XHJcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKFwiUG90cmVlOiBFeGNlcHRpb24gdGhyb3duIHBhcnNpbmcgcG9pbnRzLlwiLCBlKTtcclxuXHRcdFx0XHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmctLTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiUG90cmVlOiBMQVNMQVpMb2FkZXIgeGhyIHJlc3BvbnNlIGlzIG5vdCBhIEFycmF5QnVmZmVyLlwiKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRHbG9iYWwubnVtTm9kZXNMb2FkaW5nLS07XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiUG90cmVlOiBMQVNMQVpMb2FkZXIgZmFpbGVkIHRvIGxvYWQgZmlsZSwgXCIgKyB4aHIuc3RhdHVzICsgXCIsIGZpbGU6IFwiICsgdXJsKTtcclxuXHRcdH07XHJcblx0XHR4aHIuc2VuZChudWxsKTtcclxuXHR9XHJcblxyXG5cdHBhcnNlKG5vZGUsIGJ1ZmZlcikge1xyXG5cdFx0dmFyIGxmID0gbmV3IExBU0ZpbGUoYnVmZmVyKTtcclxuXHRcdHZhciBoYW5kbGVyID0gbmV3IExBU0xBWkJhdGNoZXIobm9kZSk7XHJcblxyXG5cdFx0bGYub3BlbigpLnRoZW4obXNnID0+IHtcclxuXHRcdFx0bGYuaXNPcGVuID0gdHJ1ZTtcclxuXHRcdFx0cmV0dXJuIGxmO1xyXG5cdFx0fSkudGhlbihsZiA9PiB7XHJcblx0XHRcdHJldHVybiBsZi5nZXRIZWFkZXIoKS50aGVuKGZ1bmN0aW9uIChoKSB7XHJcblx0XHRcdFx0cmV0dXJuIFtsZiwgaF07XHJcblx0XHRcdH0pO1xyXG5cdFx0fSkudGhlbih2ID0+IHtcclxuXHRcdFx0bGV0IGxmID0gdlswXTtcclxuXHRcdFx0bGV0IGhlYWRlciA9IHZbMV07XHJcblx0XHRcdGxldCBza2lwID0gMTtcclxuXHRcdFx0bGV0IHRvdGFsUmVhZCA9IDA7XHJcblx0XHRcdGxldCB0b3RhbFRvUmVhZCA9IChza2lwIDw9IDEgPyBoZWFkZXIucG9pbnRzQ291bnQgOiBoZWFkZXIucG9pbnRzQ291bnQgLyBza2lwKTtcclxuXHJcblx0XHRcdHZhciByZWFkZXIgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0bGV0IHAgPSBsZi5yZWFkRGF0YSgxMDAwMDAwLCAwLCBza2lwKTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG5cdFx0XHRcdFx0aGFuZGxlci5wdXNoKG5ldyBMQVNEZWNvZGVyKGRhdGEuYnVmZmVyLFxyXG5cdFx0XHRcdFx0XHRoZWFkZXIucG9pbnRzRm9ybWF0SWQsXHJcblx0XHRcdFx0XHRcdGhlYWRlci5wb2ludHNTdHJ1Y3RTaXplLFxyXG5cdFx0XHRcdFx0XHRkYXRhLmNvdW50LFxyXG5cdFx0XHRcdFx0XHRoZWFkZXIuc2NhbGUsXHJcblx0XHRcdFx0XHRcdGhlYWRlci5vZmZzZXQsXHJcblx0XHRcdFx0XHRcdGhlYWRlci5taW5zLCBoZWFkZXIubWF4cykpO1xyXG5cclxuXHRcdFx0XHRcdHRvdGFsUmVhZCArPSBkYXRhLmNvdW50O1xyXG5cclxuXHRcdFx0XHRcdGlmIChkYXRhLmhhc01vcmVEYXRhKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiByZWFkZXIoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRoZWFkZXIudG90YWxSZWFkID0gdG90YWxSZWFkO1xyXG5cdFx0XHRcdFx0XHRoZWFkZXIudmVyc2lvbkFzU3RyaW5nID0gbGYudmVyc2lvbkFzU3RyaW5nO1xyXG5cdFx0XHRcdFx0XHRoZWFkZXIuaXNDb21wcmVzc2VkID0gbGYuaXNDb21wcmVzc2VkO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gW2xmLCBoZWFkZXIsIGhhbmRsZXJdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0cmV0dXJuIHJlYWRlcigpO1xyXG5cdFx0fSkudGhlbih2ID0+IHtcclxuXHRcdFx0bGV0IGxmID0gdlswXTtcclxuXHJcblx0XHRcdC8vQ2xvc2UgaXRcclxuXHRcdFx0cmV0dXJuIGxmLmNsb3NlKCkudGhlbihmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0bGYuaXNPcGVuID0gZmFsc2U7XHJcblx0XHRcdFx0cmV0dXJuIHYuc2xpY2UoMSk7XHJcblx0XHRcdH0pLmNhdGNoKGUgPT4ge1xyXG5cdFx0XHRcdC8vSWYgdGhlcmUgd2FzIGEgY2FuY2VsbGF0aW9uLCBtYWtlIHN1cmUgdGhlIGZpbGUgaXMgY2xvc2VkLCBpZiB0aGUgZmlsZSBpcyBvcGVuIGNsb3NlIGFuZCB0aGVuIGZhaWxcclxuXHRcdFx0XHRpZiAobGYuaXNPcGVuKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gbGYuY2xvc2UoKS50aGVuKGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0bGYuaXNPcGVuID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdHRocm93IGU7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dGhyb3cgZTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KS5jYXRjaChtc2cgPT4ge1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKFwiUG90cmVlOiBGYWlsZWQgdG8gb3BlbiBmaWxlOlwiLCBtc2cpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRoYW5kbGUobm9kZSwgdXJsKSB7IH1cclxufTtcclxuXHJcbmNsYXNzIExBU0xBWkJhdGNoZXIge1xyXG5cdGNvbnN0cnVjdG9yKG5vZGUpIHtcclxuXHRcdHRoaXMubm9kZSA9IG5vZGU7XHJcblx0fVxyXG5cclxuXHRwdXNoKGRhdGEpIHtcclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHR2YXIgbWVzc2FnZSA9XHJcblx0XHR7XHJcblx0XHRcdGJ1ZmZlcjogZGF0YS5hcnJheWIsXHJcblx0XHRcdG51bVBvaW50czogZGF0YS5wb2ludHNDb3VudCxcclxuXHRcdFx0cG9pbnRTaXplOiBkYXRhLnBvaW50U2l6ZSxcclxuXHRcdFx0cG9pbnRGb3JtYXRJRDogMixcclxuXHRcdFx0c2NhbGU6IGRhdGEuc2NhbGUsXHJcblx0XHRcdG9mZnNldDogZGF0YS5vZmZzZXQsXHJcblx0XHRcdG1pbnM6IGRhdGEubWlucyxcclxuXHRcdFx0bWF4czogZGF0YS5tYXhzXHJcblx0XHR9O1xyXG5cclxuXHRcdHZhciB3b3JrZXIgPSBHbG9iYWwud29ya2VyUG9vbC5nZXRXb3JrZXIoV29ya2VyTWFuYWdlci5MQVNfREVDT0RFUik7XHJcblx0XHR3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XHJcblx0XHRcdHZhciBudW1Qb2ludHMgPSBkYXRhLnBvaW50c0NvdW50O1xyXG5cclxuXHRcdFx0dmFyIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoZS5kYXRhLnBvc2l0aW9uKTtcclxuXHRcdFx0dmFyIGNvbG9ycyA9IG5ldyBVaW50OEFycmF5KGUuZGF0YS5jb2xvcik7XHJcblx0XHRcdHZhciBpbnRlbnNpdGllcyA9IG5ldyBGbG9hdDMyQXJyYXkoZS5kYXRhLmludGVuc2l0eSk7XHJcblx0XHRcdHZhciBjbGFzc2lmaWNhdGlvbnMgPSBuZXcgVWludDhBcnJheShlLmRhdGEuY2xhc3NpZmljYXRpb24pO1xyXG5cdFx0XHR2YXIgcmV0dXJuTnVtYmVycyA9IG5ldyBVaW50OEFycmF5KGUuZGF0YS5yZXR1cm5OdW1iZXIpO1xyXG5cdFx0XHR2YXIgbnVtYmVyT2ZSZXR1cm5zID0gbmV3IFVpbnQ4QXJyYXkoZS5kYXRhLm51bWJlck9mUmV0dXJucyk7XHJcblx0XHRcdHZhciBwb2ludFNvdXJjZUlEcyA9IG5ldyBVaW50MTZBcnJheShlLmRhdGEucG9pbnRTb3VyY2VJRCk7XHJcblx0XHRcdHZhciBpbmRpY2VzID0gbmV3IFVpbnQ4QXJyYXkoZS5kYXRhLmluZGljZXMpO1xyXG5cclxuXHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwicG9zaXRpb25cIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbnMsIDMpKTtcclxuXHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwiY29sb3JcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShjb2xvcnMsIDQsIHRydWUpKTtcclxuXHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwiaW50ZW5zaXR5XCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoaW50ZW5zaXRpZXMsIDEpKTtcclxuXHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwiY2xhc3NpZmljYXRpb25cIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShjbGFzc2lmaWNhdGlvbnMsIDEpKTtcclxuXHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwicmV0dXJuTnVtYmVyXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocmV0dXJuTnVtYmVycywgMSkpO1xyXG5cdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJudW1iZXJPZlJldHVybnNcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShudW1iZXJPZlJldHVybnMsIDEpKTtcclxuXHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwicG9pbnRTb3VyY2VJRFwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHBvaW50U291cmNlSURzLCAxKSk7XHJcblx0XHRcdC8vZ2VvbWV0cnkuc2V0QXR0cmlidXRlKFwibm9ybWFsXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShudW1Qb2ludHMgKiAzKSwgMykpO1xyXG5cdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJpbmRpY2VzXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoaW5kaWNlcywgNCkpO1xyXG5cdFx0XHRnZW9tZXRyeS5hdHRyaWJ1dGVzLmluZGljZXMubm9ybWFsaXplZCA9IHRydWU7XHJcblxyXG5cdFx0XHR2YXIgdGlnaHRCb3VuZGluZ0JveCA9IG5ldyBUSFJFRS5Cb3gzXHJcblx0XHRcdFx0KFxyXG5cdFx0XHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoKS5mcm9tQXJyYXkoZS5kYXRhLnRpZ2h0Qm91bmRpbmdCb3gubWluKSxcclxuXHRcdFx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KGUuZGF0YS50aWdodEJvdW5kaW5nQm94Lm1heClcclxuXHRcdFx0XHQpO1xyXG5cclxuXHRcdFx0Z2VvbWV0cnkuYm91bmRpbmdCb3ggPSBzZWxmLm5vZGUuYm91bmRpbmdCb3g7XHJcblx0XHRcdHNlbGYubm9kZS50aWdodEJvdW5kaW5nQm94ID0gdGlnaHRCb3VuZGluZ0JveDtcclxuXHJcblx0XHRcdHNlbGYubm9kZS5nZW9tZXRyeSA9IGdlb21ldHJ5O1xyXG5cdFx0XHRzZWxmLm5vZGUubnVtUG9pbnRzID0gbnVtUG9pbnRzO1xyXG5cdFx0XHRzZWxmLm5vZGUubG9hZGVkID0gdHJ1ZTtcclxuXHRcdFx0c2VsZi5ub2RlLmxvYWRpbmcgPSBmYWxzZTtcclxuXHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHRzZWxmLm5vZGUubWVhbiA9IG5ldyBUSFJFRS5WZWN0b3IzKC4uLmUuZGF0YS5tZWFuKTtcclxuXHJcblx0XHRcdEdsb2JhbC53b3JrZXJQb29sLnJldHVybldvcmtlcihXb3JrZXJNYW5hZ2VyLkxBU19ERUNPREVSLCB3b3JrZXIpO1xyXG5cdFx0fTtcclxuXHJcblx0XHR3b3JrZXIucG9zdE1lc3NhZ2UobWVzc2FnZSwgW21lc3NhZ2UuYnVmZmVyXSk7XHJcblx0fTtcclxufTtcclxuXHJcbmV4cG9ydCB7IExBU0xBWkxvYWRlciB9O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmltcG9ydCB7UE9DTG9hZGVyfSBmcm9tIFwiLi4vLi4vbG9hZGVycy9QT0NMb2FkZXIuanNcIjtcclxuaW1wb3J0IHtHbG9iYWx9IGZyb20gXCIuLi8uLi9HbG9iYWwuanNcIjtcclxuaW1wb3J0IHtQb2ludENsb3VkVHJlZSwgUG9pbnRDbG91ZFRyZWVOb2RlfSBmcm9tIFwiLi4vUG9pbnRDbG91ZFRyZWUuanNcIjtcclxuaW1wb3J0IHtYSFJGYWN0b3J5fSBmcm9tIFwiLi4vLi4vWEhSRmFjdG9yeS5qc1wiO1xyXG5cclxuY2xhc3MgUG9pbnRDbG91ZE9jdHJlZUdlb21ldHJ5XHJcbntcclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdFx0dGhpcy51cmwgPSBudWxsO1xyXG5cdFx0dGhpcy5vY3RyZWVEaXIgPSBudWxsO1xyXG5cdFx0dGhpcy5zcGFjaW5nID0gMDtcclxuXHRcdHRoaXMuYm91bmRpbmdCb3ggPSBudWxsO1xyXG5cdFx0dGhpcy5yb290ID0gbnVsbDtcclxuXHRcdHRoaXMubm9kZXMgPSBudWxsO1xyXG5cdFx0dGhpcy5wb2ludEF0dHJpYnV0ZXMgPSBudWxsO1xyXG5cdFx0dGhpcy5oaWVyYXJjaHlTdGVwU2l6ZSA9IC0xO1xyXG5cdFx0dGhpcy5sb2FkZXIgPSBudWxsO1xyXG5cdH1cclxufTtcclxuXHJcbmNsYXNzIFBvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeU5vZGUgZXh0ZW5kcyBQb2ludENsb3VkVHJlZU5vZGVcclxue1xyXG5cdGNvbnN0cnVjdG9yKG5hbWUsIHBjb0dlb21ldHJ5LCBib3VuZGluZ0JveClcclxuXHR7XHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuaWQgPSBQb2ludENsb3VkT2N0cmVlR2VvbWV0cnlOb2RlLklEQ291bnQrKztcclxuXHRcdHRoaXMubmFtZSA9IG5hbWU7XHJcblx0XHR0aGlzLmluZGV4ID0gcGFyc2VJbnQobmFtZS5jaGFyQXQobmFtZS5sZW5ndGggLSAxKSk7XHJcblx0XHR0aGlzLnBjb0dlb21ldHJ5ID0gcGNvR2VvbWV0cnk7XHJcblx0XHR0aGlzLmdlb21ldHJ5ID0gbnVsbDtcclxuXHRcdHRoaXMuYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveDtcclxuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBib3VuZGluZ0JveC5nZXRCb3VuZGluZ1NwaGVyZShuZXcgVEhSRUUuU3BoZXJlKCkpO1xyXG5cdFx0dGhpcy5jaGlsZHJlbiA9IHt9O1xyXG5cdFx0dGhpcy5udW1Qb2ludHMgPSAwO1xyXG5cdFx0dGhpcy5sZXZlbCA9IG51bGw7XHJcblx0XHR0aGlzLmxvYWRlZCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5vbmVUaW1lRGlzcG9zZUhhbmRsZXJzID0gW107XHJcblx0fVxyXG5cclxuXHRpc0dlb21ldHJ5Tm9kZSgpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRnZXRMZXZlbCgpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMubGV2ZWw7XHJcblx0fVxyXG5cclxuXHRpc1RyZWVOb2RlKClcclxuXHR7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRpc0xvYWRlZCgpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMubG9hZGVkO1xyXG5cdH1cclxuXHJcblx0Z2V0Qm91bmRpbmdTcGhlcmUoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmJvdW5kaW5nU3BoZXJlO1xyXG5cdH1cclxuXHJcblx0Z2V0Qm91bmRpbmdCb3goKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmJvdW5kaW5nQm94O1xyXG5cdH1cclxuXHJcblx0Z2V0Q2hpbGRyZW4oKVxyXG5cdHtcclxuXHRcdHZhciBjaGlsZHJlbiA9IFtdO1xyXG5cclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCA4OyBpKyspXHJcblx0XHR7XHJcblx0XHRcdGlmKHRoaXMuY2hpbGRyZW5baV0pXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRyZW5baV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGNoaWxkcmVuO1xyXG5cdH1cclxuXHJcblx0Z2V0VVJMKClcclxuXHR7XHJcblx0XHR2YXIgdXJsID0gXCJcIjtcclxuXHRcdHZhciB2ZXJzaW9uID0gdGhpcy5wY29HZW9tZXRyeS5sb2FkZXIudmVyc2lvbjtcclxuXHJcblx0XHRpZih2ZXJzaW9uLmVxdWFsT3JIaWdoZXIoXCIxLjVcIikpXHJcblx0XHR7XHJcblx0XHRcdHVybCA9IHRoaXMucGNvR2VvbWV0cnkub2N0cmVlRGlyICsgXCIvXCIgKyB0aGlzLmdldEhpZXJhcmNoeVBhdGgoKSArIFwiL1wiICsgdGhpcy5uYW1lO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZih2ZXJzaW9uLmVxdWFsT3JIaWdoZXIoXCIxLjRcIikpXHJcblx0XHR7XHJcblx0XHRcdHVybCA9IHRoaXMucGNvR2VvbWV0cnkub2N0cmVlRGlyICsgXCIvXCIgKyB0aGlzLm5hbWU7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKHZlcnNpb24udXBUbyhcIjEuM1wiKSlcclxuXHRcdHtcclxuXHRcdFx0dXJsID0gdGhpcy5wY29HZW9tZXRyeS5vY3RyZWVEaXIgKyBcIi9cIiArIHRoaXMubmFtZTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdXJsO1xyXG5cdH1cclxuXHJcblx0Z2V0SGllcmFyY2h5UGF0aCgpXHJcblx0e1xyXG5cdFx0dmFyIHBhdGggPSBcInIvXCI7XHJcblx0XHR2YXIgaGllcmFyY2h5U3RlcFNpemUgPSB0aGlzLnBjb0dlb21ldHJ5LmhpZXJhcmNoeVN0ZXBTaXplO1xyXG5cdFx0dmFyIGluZGljZXMgPSB0aGlzLm5hbWUuc3Vic3RyKDEpO1xyXG5cclxuXHRcdHZhciBudW1QYXJ0cyA9IE1hdGguZmxvb3IoaW5kaWNlcy5sZW5ndGggLyBoaWVyYXJjaHlTdGVwU2l6ZSk7XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbnVtUGFydHM7IGkrKylcclxuXHRcdHtcclxuXHRcdFx0cGF0aCArPSBpbmRpY2VzLnN1YnN0cihpICogaGllcmFyY2h5U3RlcFNpemUsIGhpZXJhcmNoeVN0ZXBTaXplKSArIFwiL1wiO1xyXG5cdFx0fVxyXG5cclxuXHRcdHBhdGggPSBwYXRoLnNsaWNlKDAsIC0xKTtcclxuXHJcblx0XHRyZXR1cm4gcGF0aDtcclxuXHR9XHJcblxyXG5cdGFkZENoaWxkKGNoaWxkKVxyXG5cdHtcclxuXHRcdHRoaXMuY2hpbGRyZW5bY2hpbGQuaW5kZXhdID0gY2hpbGQ7XHJcblx0XHRjaGlsZC5wYXJlbnQgPSB0aGlzO1xyXG5cdH1cclxuXHJcblx0bG9hZCgpXHJcblx0e1xyXG5cdFx0aWYodGhpcy5sb2FkaW5nID09PSB0cnVlIHx8IHRoaXMubG9hZGVkID09PSB0cnVlIHx8IEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmcgPj0gR2xvYmFsLm1heE5vZGVzTG9hZGluZylcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMubG9hZGluZyA9IHRydWU7XHJcblx0XHRHbG9iYWwubnVtTm9kZXNMb2FkaW5nKys7XHJcblxyXG5cdFx0dHJ5XHJcblx0XHR7XHJcblx0XHRcdGlmKHRoaXMucGNvR2VvbWV0cnkubG9hZGVyLnZlcnNpb24uZXF1YWxPckhpZ2hlcihcIjEuNVwiKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKCh0aGlzLmxldmVsICUgdGhpcy5wY29HZW9tZXRyeS5oaWVyYXJjaHlTdGVwU2l6ZSkgPT09IDAgJiYgdGhpcy5oYXNDaGlsZHJlbilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0aGlzLmxvYWRIaWVyYWNoeVRoZW5Qb2ludHMoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHRoaXMubG9hZFBvaW50cygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0aGlzLmxvYWRQb2ludHMoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Y2F0Y2goZSlcclxuXHRcdHtcclxuXHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKFwiUG90cmVlOiBFeGNlcHRpb24gdGhyb3duIGxvYWRpbmcgcG9pbnRzIGZpbGUuXCIsIGUpO1xyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdGxvYWRQb2ludHMoKVxyXG5cdHtcclxuXHRcdHRoaXMucGNvR2VvbWV0cnkubG9hZGVyLmxvYWQodGhpcyk7XHJcblx0fVxyXG5cclxuXHRsb2FkSGllcmFjaHlUaGVuUG9pbnRzKClcclxuXHR7XHJcblx0XHR2YXIgbm9kZSA9IHRoaXM7XHJcblxyXG5cdFx0dmFyIGNhbGxiYWNrID0gZnVuY3Rpb24obm9kZSwgaGJ1ZmZlcilcclxuXHRcdHtcclxuXHRcdFx0dmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoaGJ1ZmZlcik7XHJcblxyXG5cdFx0XHR2YXIgc3RhY2sgPSBbXTtcclxuXHRcdFx0dmFyIGNoaWxkcmVuID0gdmlldy5nZXRVaW50OCgwKTtcclxuXHRcdFx0dmFyIG51bVBvaW50cyA9IHZpZXcuZ2V0VWludDMyKDEsIHRydWUpO1xyXG5cdFx0XHRub2RlLm51bVBvaW50cyA9IG51bVBvaW50cztcclxuXHRcdFx0c3RhY2sucHVzaCh7Y2hpbGRyZW46IGNoaWxkcmVuLCBudW1Qb2ludHM6IG51bVBvaW50cywgbmFtZTogbm9kZS5uYW1lfSk7XHJcblxyXG5cdFx0XHR2YXIgZGVjb2RlZCA9IFtdO1xyXG5cdFx0XHR2YXIgb2Zmc2V0ID0gNTtcclxuXHJcblx0XHRcdHdoaWxlKHN0YWNrLmxlbmd0aCA+IDApXHJcblx0XHRcdHtcclxuXHRcdFx0XHR2YXIgc25vZGUgPSBzdGFjay5zaGlmdCgpO1xyXG5cdFx0XHRcdHZhciBtYXNrID0gMTtcclxuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgODsgaSsrKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGlmKChzbm9kZS5jaGlsZHJlbiAmIG1hc2spICE9PSAwKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHR2YXIgY2hpbGROYW1lID0gc25vZGUubmFtZSArIGk7XHJcblx0XHRcdFx0XHRcdHZhciBjaGlsZENoaWxkcmVuID0gdmlldy5nZXRVaW50OChvZmZzZXQpO1xyXG5cdFx0XHRcdFx0XHR2YXIgY2hpbGROdW1Qb2ludHMgPSB2aWV3LmdldFVpbnQzMihvZmZzZXQgKyAxLCB0cnVlKTtcclxuXHJcblx0XHRcdFx0XHRcdHN0YWNrLnB1c2goe2NoaWxkcmVuOiBjaGlsZENoaWxkcmVuLCBudW1Qb2ludHM6IGNoaWxkTnVtUG9pbnRzLCBuYW1lOiBjaGlsZE5hbWV9KTtcclxuXHRcdFx0XHRcdFx0ZGVjb2RlZC5wdXNoKHtjaGlsZHJlbjogY2hpbGRDaGlsZHJlbiwgbnVtUG9pbnRzOiBjaGlsZE51bVBvaW50cywgbmFtZTogY2hpbGROYW1lfSk7XHJcblxyXG5cdFx0XHRcdFx0XHRvZmZzZXQgKz0gNTtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRtYXNrID0gbWFzayAqIDI7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZihvZmZzZXQgPT09IGhidWZmZXIuYnl0ZUxlbmd0aClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBub2RlcyA9IHt9O1xyXG5cdFx0XHRub2Rlc1tub2RlLm5hbWVdID0gbm9kZTtcclxuXHRcdFx0dmFyIHBjbyA9IG5vZGUucGNvR2VvbWV0cnk7XHJcblxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVjb2RlZC5sZW5ndGg7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZhciBuYW1lID0gZGVjb2RlZFtpXS5uYW1lO1xyXG5cdFx0XHRcdHZhciBkZWNvZGVkTnVtUG9pbnRzID0gZGVjb2RlZFtpXS5udW1Qb2ludHM7XHJcblx0XHRcdFx0dmFyIGluZGV4ID0gcGFyc2VJbnQobmFtZS5jaGFyQXQobmFtZS5sZW5ndGggLSAxKSk7XHJcblx0XHRcdFx0dmFyIHBhcmVudE5hbWUgPSBuYW1lLnN1YnN0cmluZygwLCBuYW1lLmxlbmd0aCAtIDEpO1xyXG5cdFx0XHRcdHZhciBwYXJlbnROb2RlID0gbm9kZXNbcGFyZW50TmFtZV07XHJcblx0XHRcdFx0dmFyIGxldmVsID0gbmFtZS5sZW5ndGggLSAxO1xyXG5cdFx0XHRcdHZhciBib3VuZGluZ0JveCA9IFBPQ0xvYWRlci5jcmVhdGVDaGlsZEFBQkIocGFyZW50Tm9kZS5ib3VuZGluZ0JveCwgaW5kZXgpO1xyXG5cclxuXHRcdFx0XHR2YXIgY3VycmVudE5vZGUgPSBuZXcgUG9pbnRDbG91ZE9jdHJlZUdlb21ldHJ5Tm9kZShuYW1lLCBwY28sIGJvdW5kaW5nQm94KTtcclxuXHRcdFx0XHRjdXJyZW50Tm9kZS5sZXZlbCA9IGxldmVsO1xyXG5cdFx0XHRcdGN1cnJlbnROb2RlLm51bVBvaW50cyA9IGRlY29kZWROdW1Qb2ludHM7XHJcblx0XHRcdFx0Y3VycmVudE5vZGUuaGFzQ2hpbGRyZW4gPSBkZWNvZGVkW2ldLmNoaWxkcmVuID4gMDtcclxuXHRcdFx0XHRjdXJyZW50Tm9kZS5zcGFjaW5nID0gcGNvLnNwYWNpbmcgLyBNYXRoLnBvdygyLCBsZXZlbCk7XHJcblx0XHRcdFx0cGFyZW50Tm9kZS5hZGRDaGlsZChjdXJyZW50Tm9kZSk7XHJcblx0XHRcdFx0bm9kZXNbbmFtZV0gPSBjdXJyZW50Tm9kZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bm9kZS5sb2FkUG9pbnRzKCk7XHJcblx0XHR9O1xyXG5cdFx0XHJcblx0XHRpZigobm9kZS5sZXZlbCAlIG5vZGUucGNvR2VvbWV0cnkuaGllcmFyY2h5U3RlcFNpemUpID09PSAwKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgaHVybCA9IG5vZGUucGNvR2VvbWV0cnkub2N0cmVlRGlyICsgXCIvXCIgKyBub2RlLmdldEhpZXJhcmNoeVBhdGgoKSArIFwiL1wiICsgbm9kZS5uYW1lICsgXCIuaHJjXCI7XHJcblx0XHRcdHZhciB4aHIgPSBYSFJGYWN0b3J5LmNyZWF0ZVhNTEh0dHBSZXF1ZXN0KCk7XHJcblx0XHRcdHhoci5vcGVuKFwiR0VUXCIsIGh1cmwsIHRydWUpO1xyXG5cdFx0XHR4aHIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xyXG5cdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZShcInRleHQvcGxhaW47IGNoYXJzZXQ9eC11c2VyLWRlZmluZWRcIik7XHJcblx0XHRcdHhoci5vbmxvYWQgPSBmdW5jdGlvbihldmVudClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRyeVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGNhbGxiYWNrKG5vZGUsIHhoci5yZXNwb25zZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGNhdGNoKGUpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlBvdHJlZTogRXhjZXB0aW9uIHRocm93biBwYXJzaW5nIHBvaW50cy5cIiwgZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cdFx0XHR4aHIub25lcnJvciA9IGZ1bmN0aW9uKGV2ZW50KVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJQb3RyZWU6IEZhaWxlZCB0byBsb2FkIGZpbGUuXCIsIHhoci5zdGF0dXMsIGh1cmwsIGV2ZW50KTtcclxuXHRcdFx0fVxyXG5cdFx0XHR4aHIuc2VuZChudWxsKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldE51bVBvaW50cygpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMubnVtUG9pbnRzO1xyXG5cdH1cclxuXHJcblx0ZGlzcG9zZSgpXHJcblx0e1xyXG5cdFx0aWYodGhpcy5nZW9tZXRyeSAmJiB0aGlzLnBhcmVudCAhPSBudWxsKVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcclxuXHRcdFx0dGhpcy5nZW9tZXRyeSA9IG51bGw7XHJcblx0XHRcdHRoaXMubG9hZGVkID0gZmFsc2U7XHJcblxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5vbmVUaW1lRGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaSsrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIGhhbmRsZXIgPSB0aGlzLm9uZVRpbWVEaXNwb3NlSGFuZGxlcnNbaV07XHJcblx0XHRcdFx0aGFuZGxlcigpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMub25lVGltZURpc3Bvc2VIYW5kbGVycyA9IFtdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcbn1cclxuXHJcblBvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeU5vZGUuSURDb3VudCA9IDA7XHJcblxyXG5PYmplY3QuYXNzaWduKFBvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeU5vZGUucHJvdG90eXBlLCBUSFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlKTtcclxuXHJcbmV4cG9ydCB7UG9pbnRDbG91ZE9jdHJlZUdlb21ldHJ5LCBQb2ludENsb3VkT2N0cmVlR2VvbWV0cnlOb2RlfTsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmltcG9ydCB7QmluYXJ5TG9hZGVyfSBmcm9tIFwiLi9CaW5hcnlMb2FkZXIuanNcIjtcclxuaW1wb3J0IHtMQVNMQVpMb2FkZXJ9IGZyb20gXCIuL0xBU0xBWkxvYWRlci5qc1wiO1xyXG5pbXBvcnQge1BvaW50QXR0cmlidXRlcywgUG9pbnRBdHRyaWJ1dGV9IGZyb20gXCIuLi9Qb2ludEF0dHJpYnV0ZXMuanNcIjtcclxuaW1wb3J0IHtQb2ludENsb3VkT2N0cmVlR2VvbWV0cnksIFBvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeU5vZGV9IGZyb20gXCIuLi9wb2ludGNsb3VkL2dlb21ldHJpZXMvUG9pbnRDbG91ZE9jdHJlZUdlb21ldHJ5LmpzXCI7XHJcbmltcG9ydCB7VmVyc2lvblV0aWxzfSBmcm9tIFwiLi4vdXRpbHMvVmVyc2lvblV0aWxzLmpzXCI7XHJcbmltcG9ydCB7R2xvYmFsfSBmcm9tIFwiLi4vR2xvYmFsLmpzXCI7XHJcbmltcG9ydCB7WEhSRmFjdG9yeX0gZnJvbSBcIi4uL1hIUkZhY3RvcnkuanNcIjtcclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgTG9hZHMgbW5vIGZpbGVzIGFuZCByZXR1cm5zIGEgUG9pbnRjbG91ZE9jdHJlZVxyXG4gKiBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgbW5vIGJpbmFyeSBmaWxlIGZvcm1hdCwgcmVhZCBtbm9GaWxlRm9ybWF0LnR4dFxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hcmt1cyBTY2h1ZXR6XHJcbiAqL1xyXG5jbGFzcyBQT0NMb2FkZXJcclxue1xyXG5cdC8qKlxyXG5cdCAqIEByZXR1cm4gYSBwb2ludCBjbG91ZCBvY3RyZWUgd2l0aCB0aGUgcm9vdCBub2RlIGRhdGEgbG9hZGVkLlxyXG5cdCAqIGxvYWRpbmcgb2YgZGVzY2VuZGFudHMgaGFwcGVucyBhc3luY2hyb25vdXNseSB3aGVuIHRoZXlcInJlIG5lZWRlZFxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHVybFxyXG5cdCAqIEBwYXJhbSBsb2FkaW5nRmluaXNoZWRMaXN0ZW5lciBleGVjdXRlZCBhZnRlciBsb2FkaW5nIHRoZSBiaW5hcnkgaGFzIGJlZW4gZmluaXNoZWRcclxuXHQgKi9cclxuXHRzdGF0aWMgbG9hZCh1cmwsIGNhbGxiYWNrKVxyXG5cdHtcclxuXHRcdHZhciBwY28gPSBuZXcgUG9pbnRDbG91ZE9jdHJlZUdlb21ldHJ5KCk7XHJcblx0XHRwY28udXJsID0gdXJsO1xyXG5cdFx0XHJcblx0XHR2YXIgeGhyID0gWEhSRmFjdG9yeS5jcmVhdGVYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluXCIpO1xyXG5cdFx0eGhyLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcclxuXHRcdHhoci5vbmxvYWQgPSBmdW5jdGlvbigpXHJcblx0XHR7XHJcblx0XHRcdHZhciBkYXRhID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcclxuXHRcdFx0dmFyIHZlcnNpb24gPSBuZXcgVmVyc2lvblV0aWxzKGRhdGEudmVyc2lvbik7XHJcblxyXG5cdFx0XHQvL0Fzc3VtZSBkaXIgYXMgYWJzb2x1dGUgaWYgaXQgc3RhcnRzIHdpdGggaHR0cFxyXG5cdFx0XHRpZihkYXRhLm9jdHJlZURpci5pbmRleE9mKFwiaHR0cFwiKSA9PT0gMClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHBjby5vY3RyZWVEaXIgPSBkYXRhLm9jdHJlZURpcjtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRwY28ub2N0cmVlRGlyID0gdXJsICsgXCIvLi4vXCIgKyBkYXRhLm9jdHJlZURpcjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cGNvLnNwYWNpbmcgPSBkYXRhLnNwYWNpbmc7XHJcblx0XHRcdHBjby5oaWVyYXJjaHlTdGVwU2l6ZSA9IGRhdGEuaGllcmFyY2h5U3RlcFNpemU7XHJcblx0XHRcdHBjby5wb2ludEF0dHJpYnV0ZXMgPSBkYXRhLnBvaW50QXR0cmlidXRlcztcclxuXHJcblx0XHRcdHZhciBtaW4gPSBuZXcgVEhSRUUuVmVjdG9yMyhkYXRhLmJvdW5kaW5nQm94Lmx4LCBkYXRhLmJvdW5kaW5nQm94Lmx5LCBkYXRhLmJvdW5kaW5nQm94Lmx6KTtcclxuXHRcdFx0dmFyIG1heCA9IG5ldyBUSFJFRS5WZWN0b3IzKGRhdGEuYm91bmRpbmdCb3gudXgsIGRhdGEuYm91bmRpbmdCb3gudXksIGRhdGEuYm91bmRpbmdCb3gudXopO1xyXG5cdFx0XHR2YXIgYm91bmRpbmdCb3ggPSBuZXcgVEhSRUUuQm94MyhtaW4sIG1heCk7XHJcblx0XHRcdHZhciB0aWdodEJvdW5kaW5nQm94ID0gYm91bmRpbmdCb3guY2xvbmUoKTtcclxuXHJcblx0XHRcdGlmKGRhdGEudGlnaHRCb3VuZGluZ0JveClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRpZ2h0Qm91bmRpbmdCb3gubWluLmNvcHkobmV3IFRIUkVFLlZlY3RvcjMoZGF0YS50aWdodEJvdW5kaW5nQm94Lmx4LCBkYXRhLnRpZ2h0Qm91bmRpbmdCb3gubHksIGRhdGEudGlnaHRCb3VuZGluZ0JveC5seikpO1xyXG5cdFx0XHRcdHRpZ2h0Qm91bmRpbmdCb3gubWF4LmNvcHkobmV3IFRIUkVFLlZlY3RvcjMoZGF0YS50aWdodEJvdW5kaW5nQm94LnV4LCBkYXRhLnRpZ2h0Qm91bmRpbmdCb3gudXksIGRhdGEudGlnaHRCb3VuZGluZ0JveC51eikpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgb2Zmc2V0ID0gbWluLmNsb25lKCk7XHJcblxyXG5cdFx0XHRib3VuZGluZ0JveC5taW4uc3ViKG9mZnNldCk7XHJcblx0XHRcdGJvdW5kaW5nQm94Lm1heC5zdWIob2Zmc2V0KTtcclxuXHJcblx0XHRcdHRpZ2h0Qm91bmRpbmdCb3gubWluLnN1YihvZmZzZXQpO1xyXG5cdFx0XHR0aWdodEJvdW5kaW5nQm94Lm1heC5zdWIob2Zmc2V0KTtcclxuXHJcblx0XHRcdHBjby5wcm9qZWN0aW9uID0gZGF0YS5wcm9qZWN0aW9uO1xyXG5cdFx0XHRwY28uYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveDtcclxuXHRcdFx0cGNvLnRpZ2h0Qm91bmRpbmdCb3ggPSB0aWdodEJvdW5kaW5nQm94O1xyXG5cdFx0XHRwY28uYm91bmRpbmdTcGhlcmUgPSBib3VuZGluZ0JveC5nZXRCb3VuZGluZ1NwaGVyZShuZXcgVEhSRUUuU3BoZXJlKCkpO1xyXG5cdFx0XHRwY28udGlnaHRCb3VuZGluZ1NwaGVyZSA9IHRpZ2h0Qm91bmRpbmdCb3guZ2V0Qm91bmRpbmdTcGhlcmUobmV3IFRIUkVFLlNwaGVyZSgpKTtcclxuXHRcdFx0cGNvLm9mZnNldCA9IG9mZnNldDtcclxuXHJcblx0XHRcdC8vU2VsZWN0IHRoZSBhcHByb3BpYXRlIGxvYWRlclxyXG5cdFx0XHRpZihkYXRhLnBvaW50QXR0cmlidXRlcyA9PT0gXCJMQVNcIiB8fCBkYXRhLnBvaW50QXR0cmlidXRlcyA9PT0gXCJMQVpcIilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHBjby5sb2FkZXIgPSBuZXcgTEFTTEFaTG9hZGVyKGRhdGEudmVyc2lvbik7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cGNvLmxvYWRlciA9IG5ldyBCaW5hcnlMb2FkZXIoZGF0YS52ZXJzaW9uLCBib3VuZGluZ0JveCwgZGF0YS5zY2FsZSk7XHJcblx0XHRcdFx0cGNvLnBvaW50QXR0cmlidXRlcyA9IG5ldyBQb2ludEF0dHJpYnV0ZXMocGNvLnBvaW50QXR0cmlidXRlcyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBub2RlcyA9IHt9O1xyXG5cdFx0XHR2YXIgbmFtZSA9IFwiclwiO1xyXG5cclxuXHRcdFx0dmFyIHJvb3QgPSBuZXcgUG9pbnRDbG91ZE9jdHJlZUdlb21ldHJ5Tm9kZShuYW1lLCBwY28sIGJvdW5kaW5nQm94KTtcclxuXHRcdFx0cm9vdC5sZXZlbCA9IDA7XHJcblx0XHRcdHJvb3QuaGFzQ2hpbGRyZW4gPSB0cnVlO1xyXG5cdFx0XHRyb290LnNwYWNpbmcgPSBwY28uc3BhY2luZztcclxuXHRcdFx0cm9vdC5udW1Qb2ludHMgPSB2ZXJzaW9uLnVwVG8oXCIxLjVcIikgPyBkYXRhLmhpZXJhcmNoeVswXVsxXSA6IDA7XHJcblxyXG5cdFx0XHRwY28ucm9vdCA9IHJvb3Q7XHJcblx0XHRcdHBjby5yb290LmxvYWQoKTtcclxuXHRcdFx0bm9kZXNbbmFtZV0gPSByb290O1xyXG5cclxuXHRcdFx0Ly9Mb2FkIHJlbWFpbmluZyBoaWVyYXJjaHlcclxuXHRcdFx0aWYodmVyc2lvbi51cFRvKFwiMS40XCIpKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Zm9yKHZhciBpID0gMTsgaSA8IGRhdGEuaGllcmFyY2h5Lmxlbmd0aDsgaSsrKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciBuYW1lID0gZGF0YS5oaWVyYXJjaHlbaV1bMF07XHJcblx0XHRcdFx0XHR2YXIgbnVtUG9pbnRzID0gZGF0YS5oaWVyYXJjaHlbaV1bMV07XHJcblx0XHRcdFx0XHR2YXIgaW5kZXggPSBwYXJzZUludChuYW1lLmNoYXJBdChuYW1lLmxlbmd0aCAtIDEpKTtcclxuXHRcdFx0XHRcdHZhciBwYXJlbnROYW1lID0gbmFtZS5zdWJzdHJpbmcoMCwgbmFtZS5sZW5ndGggLSAxKTtcclxuXHRcdFx0XHRcdHZhciBwYXJlbnROb2RlID0gbm9kZXNbcGFyZW50TmFtZV07XHJcblx0XHRcdFx0XHR2YXIgbGV2ZWwgPSBuYW1lLmxlbmd0aCAtIDE7XHJcblx0XHRcdFx0XHR2YXIgYm91bmRpbmdCb3ggPSBQT0NMb2FkZXIuY3JlYXRlQ2hpbGRBQUJCKHBhcmVudE5vZGUuYm91bmRpbmdCb3gsIGluZGV4KTtcclxuXHJcblx0XHRcdFx0XHR2YXIgbm9kZSA9IG5ldyBQb2ludENsb3VkT2N0cmVlR2VvbWV0cnlOb2RlKG5hbWUsIHBjbywgYm91bmRpbmdCb3gpO1xyXG5cdFx0XHRcdFx0bm9kZS5sZXZlbCA9IGxldmVsO1xyXG5cdFx0XHRcdFx0bm9kZS5udW1Qb2ludHMgPSBudW1Qb2ludHM7XHJcblx0XHRcdFx0XHRub2RlLnNwYWNpbmcgPSBwY28uc3BhY2luZyAvIE1hdGgucG93KDIsIGxldmVsKTtcclxuXHRcdFx0XHRcdHBhcmVudE5vZGUuYWRkQ2hpbGQobm9kZSk7XHJcblx0XHRcdFx0XHRub2Rlc1tuYW1lXSA9IG5vZGU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHBjby5ub2RlcyA9IG5vZGVzO1xyXG5cclxuXHRcdFx0Y2FsbGJhY2socGNvKTtcclxuXHRcdH07XHJcblxyXG5cdFx0eGhyLm9uZXJyb3IgPSBmdW5jdGlvbihldmVudClcclxuXHRcdHtcclxuXHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIlBvdHJlZTogbG9hZGluZyBmaWxlIGZhaWxlZC5cIiwgdXJsLCBldmVudCk7XHJcblx0XHRcdGNhbGxiYWNrKCk7XHJcblx0XHR9O1xyXG5cclxuXHRcdHhoci5zZW5kKG51bGwpO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGxvYWRQb2ludEF0dHJpYnV0ZXMobW5vKVxyXG5cdHtcclxuXHRcdHZhciBmcGEgPSBtbm8ucG9pbnRBdHRyaWJ1dGVzO1xyXG5cdFx0dmFyIHBhID0gbmV3IFBvaW50QXR0cmlidXRlcygpO1xyXG5cclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBmcGEubGVuZ3RoOyBpKyspXHJcblx0XHR7XHJcblx0XHRcdHBhLmFkZChQb2ludEF0dHJpYnV0ZVtmcGFbaV1dKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcGE7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgY3JlYXRlQ2hpbGRBQUJCKGFhYmIsIGluZGV4KVxyXG5cdHtcclxuXHRcdHZhciBtaW4gPSBhYWJiLm1pbi5jbG9uZSgpO1xyXG5cdFx0dmFyIG1heCA9IGFhYmIubWF4LmNsb25lKCk7XHJcblx0XHR2YXIgc2l6ZSA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuc3ViVmVjdG9ycyhtYXgsIG1pbik7XHJcblxyXG5cdFx0aWYoKGluZGV4ICYgMGIwMDAxKSA+IDApXHJcblx0XHR7XHJcblx0XHRcdG1pbi56ICs9IHNpemUueiAvIDI7XHJcblx0XHR9XHJcblx0XHRlbHNlXHJcblx0XHR7XHJcblx0XHRcdG1heC56IC09IHNpemUueiAvIDI7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYoKGluZGV4ICYgMGIwMDEwKSA+IDApXHJcblx0XHR7XHJcblx0XHRcdG1pbi55ICs9IHNpemUueSAvIDI7XHJcblx0XHR9XHJcblx0XHRlbHNlXHJcblx0XHR7XHJcblx0XHRcdG1heC55IC09IHNpemUueSAvIDI7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYoKGluZGV4ICYgMGIwMTAwKSA+IDApXHJcblx0XHR7XHJcblx0XHRcdG1pbi54ICs9IHNpemUueCAvIDI7XHJcblx0XHR9XHJcblx0XHRlbHNlXHJcblx0XHR7XHJcblx0XHRcdG1heC54IC09IHNpemUueCAvIDI7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBUSFJFRS5Cb3gzKG1pbiwgbWF4KTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCB7UE9DTG9hZGVyfTsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmltcG9ydCB7R2xvYmFsfSBmcm9tIFwiLi4vLi4vR2xvYmFsLmpzXCI7XHJcbmltcG9ydCB7V29ya2VyTWFuYWdlcn0gZnJvbSBcIi4uLy4uL3V0aWxzL1dvcmtlck1hbmFnZXIuanNcIjtcclxuaW1wb3J0IHtYSFJGYWN0b3J5fSBmcm9tIFwiLi4vLi4vWEhSRmFjdG9yeS5qc1wiO1xyXG5cclxuY2xhc3MgRXB0QmluYXJ5TG9hZGVyXHJcbntcclxuXHRsb2FkKG5vZGUpXHJcblx0e1xyXG5cdFx0aWYobm9kZS5sb2FkZWQpIHJldHVybjtcclxuXHJcblx0XHR2YXIgdXJsID0gbm9kZS51cmwoKSArIFwiLmJpblwiO1xyXG5cdFx0XHJcblx0XHR2YXIgeGhyID0gWEhSRmFjdG9yeS5jcmVhdGVYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0eGhyLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcclxuXHRcdHhoci5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XHJcblx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZShcInRleHQvcGxhaW47IGNoYXJzZXQ9eC11c2VyLWRlZmluZWRcIik7XHJcblx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT5cclxuXHRcdHtcclxuXHRcdFx0aWYoeGhyLnJlYWR5U3RhdGUgPT09IDQpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpZih4aHIuc3RhdHVzID09PSAyMDApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIGJ1ZmZlciA9IHhoci5yZXNwb25zZTtcclxuXHRcdFx0XHRcdHRoaXMucGFyc2Uobm9kZSwgYnVmZmVyKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiRmFpbGVkIFwiICsgdXJsICsgXCI6IFwiICsgeGhyLnN0YXR1cyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdHRyeVxyXG5cdFx0e1xyXG5cdFx0XHR4aHIuc2VuZChudWxsKTtcclxuXHRcdH1cclxuXHRcdGNhdGNoIChlKVxyXG5cdFx0e1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIkZhaWxlZCByZXF1ZXN0OiBcIiArIGUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cGFyc2Uobm9kZSwgYnVmZmVyKVxyXG5cdHtcclxuXHRcdHZhciB3b3JrZXIgPSBHbG9iYWwud29ya2VyUG9vbC5nZXRXb3JrZXIoV29ya2VyTWFuYWdlci5FUFRfQklOQVJZX0RFQ09ERVIpO1xyXG5cclxuXHRcdHdvcmtlci5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgZyA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xyXG5cdFx0XHR2YXIgbnVtUG9pbnRzID0gZS5kYXRhLm51bVBvaW50cztcclxuXHJcblx0XHRcdHZhciBwb3NpdGlvbiA9IG5ldyBGbG9hdDMyQXJyYXkoZS5kYXRhLnBvc2l0aW9uKTtcclxuXHRcdFx0Zy5zZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9uLCAzKSk7XHJcblxyXG5cdFx0XHR2YXIgaW5kaWNlcyA9IG5ldyBVaW50OEFycmF5KGUuZGF0YS5pbmRpY2VzKTtcclxuXHRcdFx0Zy5zZXRBdHRyaWJ1dGUoXCJpbmRpY2VzXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoaW5kaWNlcywgNCkpO1xyXG5cclxuXHRcdFx0aWYoZS5kYXRhLmNvbG9yKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIGNvbG9yID0gbmV3IFVpbnQ4QXJyYXkoZS5kYXRhLmNvbG9yKTtcclxuXHRcdFx0XHRnLnNldEF0dHJpYnV0ZShcImNvbG9yXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoY29sb3IsIDQsIHRydWUpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZihlLmRhdGEuaW50ZW5zaXR5KVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIGludGVuc2l0eSA9IG5ldyBGbG9hdDMyQXJyYXkoZS5kYXRhLmludGVuc2l0eSk7XHJcblx0XHRcdFx0Zy5zZXRBdHRyaWJ1dGUoXCJpbnRlbnNpdHlcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShpbnRlbnNpdHksIDEpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZihlLmRhdGEuY2xhc3NpZmljYXRpb24pXHJcblx0XHRcdHtcclxuXHRcdFx0XHR2YXIgY2xhc3NpZmljYXRpb24gPSBuZXcgVWludDhBcnJheShlLmRhdGEuY2xhc3NpZmljYXRpb24pO1xyXG5cdFx0XHRcdGcuc2V0QXR0cmlidXRlKFwiY2xhc3NpZmljYXRpb25cIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShjbGFzc2lmaWNhdGlvbiwgMSkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKGUuZGF0YS5yZXR1cm5OdW1iZXIpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR2YXIgcmV0dXJuTnVtYmVyID0gbmV3IFVpbnQ4QXJyYXkoZS5kYXRhLnJldHVybk51bWJlcik7XHJcblx0XHRcdFx0Zy5zZXRBdHRyaWJ1dGUoXCJyZXR1cm5OdW1iZXJcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShyZXR1cm5OdW1iZXIsIDEpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZihlLmRhdGEubnVtYmVyT2ZSZXR1cm5zKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIG51bWJlck9mUmV0dXJucyA9IG5ldyBVaW50OEFycmF5KGUuZGF0YS5udW1iZXJPZlJldHVybnMpO1xyXG5cdFx0XHRcdGcuc2V0QXR0cmlidXRlKFwibnVtYmVyT2ZSZXR1cm5zXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobnVtYmVyT2ZSZXR1cm5zLCAxKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoZS5kYXRhLnBvaW50U291cmNlSWQpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR2YXIgcG9pbnRTb3VyY2VJZCA9IG5ldyBVaW50MTZBcnJheShlLmRhdGEucG9pbnRTb3VyY2VJZCk7XHJcblx0XHRcdFx0Zy5zZXRBdHRyaWJ1dGUoXCJwb2ludFNvdXJjZUlEXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocG9pbnRTb3VyY2VJZCwgMSkpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRnLmF0dHJpYnV0ZXMuaW5kaWNlcy5ub3JtYWxpemVkID0gdHJ1ZTtcclxuXHJcblx0XHRcdHZhciB0aWdodEJvdW5kaW5nQm94ID0gbmV3IFRIUkVFLkJveDMoXHJcblx0XHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoKS5mcm9tQXJyYXkoZS5kYXRhLnRpZ2h0Qm91bmRpbmdCb3gubWluKSxcclxuXHRcdFx0XHRuZXcgVEhSRUUuVmVjdG9yMygpLmZyb21BcnJheShlLmRhdGEudGlnaHRCb3VuZGluZ0JveC5tYXgpXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0XHRub2RlLmRvbmVMb2FkaW5nKGcsIHRpZ2h0Qm91bmRpbmdCb3gsIG51bVBvaW50cywgbmV3IFRIUkVFLlZlY3RvcjMoLi4uZS5kYXRhLm1lYW4pKTtcclxuXHJcblx0XHRcdEdsb2JhbC53b3JrZXJQb29sLnJldHVybldvcmtlcihXb3JrZXJNYW5hZ2VyLkVQVF9CSU5BUllfREVDT0RFUiwgd29ya2VyKTtcclxuXHRcdH07XHJcblxyXG5cdFx0dmFyIHRvQXJyYXkgPSAodikgPT4gW3YueCwgdi55LCB2LnpdO1xyXG5cdFx0dmFyIG1lc3NhZ2UgPSB7XHJcblx0XHRcdGJ1ZmZlcjogYnVmZmVyLFxyXG5cdFx0XHRzY2hlbWE6IG5vZGUuZXB0LnNjaGVtYSxcclxuXHRcdFx0c2NhbGU6IG5vZGUuZXB0LmVwdFNjYWxlLFxyXG5cdFx0XHRvZmZzZXQ6IG5vZGUuZXB0LmVwdE9mZnNldCxcclxuXHRcdFx0bWluczogdG9BcnJheShub2RlLmtleS5iLm1pbilcclxuXHRcdH07XHJcblxyXG5cdFx0d29ya2VyLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIFttZXNzYWdlLmJ1ZmZlcl0pO1xyXG5cdH1cclxufTtcclxuXHJcbmV4cG9ydCB7RXB0QmluYXJ5TG9hZGVyfTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5pbXBvcnQge0dsb2JhbH0gZnJvbSBcIi4uLy4uL0dsb2JhbC5qc1wiO1xyXG5pbXBvcnQge0xBU0ZpbGUsIExBU0RlY29kZXJ9IGZyb20gXCIuLi9MQVNMb2FkZXIuanNcIjtcclxuaW1wb3J0IHtXb3JrZXJNYW5hZ2VyfSBmcm9tIFwiLi4vLi4vdXRpbHMvV29ya2VyTWFuYWdlci5qc1wiO1xyXG5pbXBvcnQge1hIUkZhY3Rvcnl9IGZyb20gXCIuLi8uLi9YSFJGYWN0b3J5LmpzXCI7XHJcblxyXG4vKipcclxuICogbGFzbGF6IGNvZGUgdGFrZW4gYW5kIGFkYXB0ZWQgZnJvbSBwbGFzLmlvIGpzLWxhc2xhelxyXG4gKlx0aHR0cDovL3BsYXMuaW8vXHJcbiAqXHRodHRwczovL2dpdGh1Yi5jb20vdmVybWEvcGxhc2lvXHJcbiAqXHJcbiAqIFRoYW5rcyB0byBVZGF5IFZlcm1hIGFuZCBIb3dhcmQgQnV0bGVyXHJcbiAqXHJcbiAqL1xyXG5jbGFzcyBFcHRMYXN6aXBMb2FkZXJcclxue1xyXG5cdGxvYWQobm9kZSlcclxuXHR7XHJcblx0XHRpZihub2RlLmxvYWRlZClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciB1cmwgPSBub2RlLnVybCgpICsgXCIubGF6XCI7XHJcblxyXG5cdFx0dmFyIHhociA9IFhIUkZhY3RvcnkuY3JlYXRlWE1MSHR0cFJlcXVlc3QoKTtcclxuXHRcdHhoci5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XHJcblx0XHR4aHIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xyXG5cdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkXCIpO1xyXG5cdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+XHJcblx0XHR7XHJcblx0XHRcdGlmKHhoci5yZWFkeVN0YXRlID09PSA0KVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYoeGhyLnN0YXR1cyA9PT0gMjAwKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciBidWZmZXIgPSB4aHIucmVzcG9uc2U7XHJcblx0XHRcdFx0XHR0aGlzLnBhcnNlKG5vZGUsIGJ1ZmZlcik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIkZhaWxlZCBcIiArIHVybCArIFwiOiBcIiArIHhoci5zdGF0dXMpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHR4aHIuc2VuZChudWxsKTtcclxuXHR9XHJcblxyXG5cdHBhcnNlKG5vZGUsIGJ1ZmZlcilcclxuXHR7XHJcblx0XHR2YXIgbGYgPSBuZXcgTEFTRmlsZShidWZmZXIpO1xyXG5cdFx0dmFyIGhhbmRsZXIgPSBuZXcgRXB0TGF6QmF0Y2hlcihub2RlKTtcclxuXHJcblx0XHRsZi5vcGVuKClcclxuXHRcdC50aGVuKCgpID0+XHJcblx0XHR7XHJcblx0XHRcdGxmLmlzT3BlbiA9IHRydWU7XHJcblx0XHRcdHJldHVybiBsZi5nZXRIZWFkZXIoKTtcclxuXHRcdH0pXHJcblx0XHQudGhlbigoaGVhZGVyKSA9PlxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgaSA9IDA7XHJcblx0XHRcdHZhciBucCA9IGhlYWRlci5wb2ludHNDb3VudDtcclxuXHJcblx0XHRcdHZhciB0b0FycmF5ID0gKHYpID0+IFt2LngsIHYueSwgdi56XTtcclxuXHRcdFx0dmFyIG1pbnMgPSB0b0FycmF5KG5vZGUua2V5LmIubWluKTtcclxuXHRcdFx0dmFyIG1heHMgPSB0b0FycmF5KG5vZGUua2V5LmIubWF4KTtcclxuXHJcblx0XHRcdHZhciByZWFkID0gKCkgPT5cclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZhciBwID0gbGYucmVhZERhdGEoMTAwMDAwMCwgMCwgMSk7XHJcblx0XHRcdFx0cmV0dXJuIHAudGhlbihmdW5jdGlvbiAoZGF0YSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR2YXIgZCA9IG5ldyBMQVNEZWNvZGVyKFxyXG5cdFx0XHRcdFx0XHRcdGRhdGEuYnVmZmVyLFxyXG5cdFx0XHRcdFx0XHRcdGhlYWRlci5wb2ludHNGb3JtYXRJZCxcclxuXHRcdFx0XHRcdFx0XHRoZWFkZXIucG9pbnRzU3RydWN0U2l6ZSxcclxuXHRcdFx0XHRcdFx0XHRkYXRhLmNvdW50LFxyXG5cdFx0XHRcdFx0XHRcdGhlYWRlci5zY2FsZSxcclxuXHRcdFx0XHRcdFx0XHRoZWFkZXIub2Zmc2V0LFxyXG5cdFx0XHRcdFx0XHRcdG1pbnMsXHJcblx0XHRcdFx0XHRcdFx0bWF4cyk7XHJcblx0XHRcdFx0XHRkLmV4dHJhQnl0ZXMgPSBoZWFkZXIuZXh0cmFCeXRlcztcclxuXHRcdFx0XHRcdGQucG9pbnRzRm9ybWF0SWQgPSBoZWFkZXIucG9pbnRzRm9ybWF0SWQ7XHJcblx0XHRcdFx0XHRoYW5kbGVyLnB1c2goZCk7XHJcblxyXG5cdFx0XHRcdFx0aSArPSBkYXRhLmNvdW50O1xyXG5cclxuXHRcdFx0XHRcdGlmKGRhdGEuaGFzTW9yZURhdGEpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHJldHVybiByZWFkKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGhlYWRlci50b3RhbFJlYWQgPSBpO1xyXG5cdFx0XHRcdFx0XHRoZWFkZXIudmVyc2lvbkFzU3RyaW5nID0gbGYudmVyc2lvbkFzU3RyaW5nO1xyXG5cdFx0XHRcdFx0XHRoZWFkZXIuaXNDb21wcmVzc2VkID0gbGYuaXNDb21wcmVzc2VkO1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdHJldHVybiByZWFkKCk7XHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oKCkgPT4gbGYuY2xvc2UoKSlcclxuXHRcdC50aGVuKCgpID0+IGxmLmlzT3BlbiA9IGZhbHNlKVxyXG5cdFx0LmNhdGNoKChlcnIpID0+XHJcblx0XHR7XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiRXJyb3IgcmVhZGluZyBMQVo6XCIsIGVycik7XHJcblx0XHRcdGlmKGxmLmlzT3BlbilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGxmLmNsb3NlKCkudGhlbigoKSA9PlxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGxmLmlzT3BlbiA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0dGhyb3cgZXJyO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgdGhyb3cgZXJyO1xyXG5cdFx0fSk7XHJcblx0fVxyXG59O1xyXG5cclxuY2xhc3MgRXB0TGF6QmF0Y2hlclxyXG57XHJcblx0Y29uc3RydWN0b3Iobm9kZSlcclxuXHR7XHJcblx0XHR0aGlzLm5vZGUgPSBub2RlO1xyXG5cdH1cclxuXHJcblx0cHVzaChsYXMpXHJcblx0e1xyXG5cdFx0dmFyIHdvcmtlciA9IEdsb2JhbC53b3JrZXJQb29sLmdldFdvcmtlcihXb3JrZXJNYW5hZ2VyLkVQVF9MQVNfWklQX0RFQ09ERVIpO1xyXG5cclxuXHRcdHdvcmtlci5vbm1lc3NhZ2UgPSAoZSkgPT5cclxuXHRcdHtcclxuXHRcdFx0dmFyIGcgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTtcclxuXHRcdFx0dmFyIG51bVBvaW50cyA9IGxhcy5wb2ludHNDb3VudDtcclxuXHJcblx0XHRcdHZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KGUuZGF0YS5wb3NpdGlvbik7XHJcblx0XHRcdHZhciBjb2xvcnMgPSBuZXcgVWludDhBcnJheShlLmRhdGEuY29sb3IpO1xyXG5cclxuXHRcdFx0dmFyIGludGVuc2l0aWVzID0gbmV3IEZsb2F0MzJBcnJheShlLmRhdGEuaW50ZW5zaXR5KTtcclxuXHRcdFx0dmFyIGNsYXNzaWZpY2F0aW9ucyA9IG5ldyBVaW50OEFycmF5KGUuZGF0YS5jbGFzc2lmaWNhdGlvbik7XHJcblx0XHRcdHZhciByZXR1cm5OdW1iZXJzID0gbmV3IFVpbnQ4QXJyYXkoZS5kYXRhLnJldHVybk51bWJlcik7XHJcblx0XHRcdHZhciBudW1iZXJPZlJldHVybnMgPSBuZXcgVWludDhBcnJheShlLmRhdGEubnVtYmVyT2ZSZXR1cm5zKTtcclxuXHRcdFx0dmFyIHBvaW50U291cmNlSURzID0gbmV3IFVpbnQxNkFycmF5KGUuZGF0YS5wb2ludFNvdXJjZUlEKTtcclxuXHRcdFx0dmFyIGluZGljZXMgPSBuZXcgVWludDhBcnJheShlLmRhdGEuaW5kaWNlcyk7XHJcblxyXG5cdFx0XHRnLnNldEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25zLCAzKSk7XHJcblx0XHRcdGcuc2V0QXR0cmlidXRlKFwiY29sb3JcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShjb2xvcnMsIDQsIHRydWUpKTtcclxuXHRcdFx0Zy5zZXRBdHRyaWJ1dGUoXCJpbnRlbnNpdHlcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShpbnRlbnNpdGllcywgMSkpO1xyXG5cdFx0XHRnLnNldEF0dHJpYnV0ZShcImNsYXNzaWZpY2F0aW9uXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoY2xhc3NpZmljYXRpb25zLCAxKSk7XHJcblx0XHRcdGcuc2V0QXR0cmlidXRlKFwicmV0dXJuTnVtYmVyXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocmV0dXJuTnVtYmVycywgMSkpO1xyXG5cdFx0XHRnLnNldEF0dHJpYnV0ZShcIm51bWJlck9mUmV0dXJuc1wiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG51bWJlck9mUmV0dXJucywgMSkpO1xyXG5cdFx0XHRnLnNldEF0dHJpYnV0ZShcInBvaW50U291cmNlSURcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShwb2ludFNvdXJjZUlEcywgMSkpO1xyXG5cdFx0XHRnLnNldEF0dHJpYnV0ZShcImluZGljZXNcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShpbmRpY2VzLCA0KSk7XHJcblx0XHRcdGcuYXR0cmlidXRlcy5pbmRpY2VzLm5vcm1hbGl6ZWQgPSB0cnVlO1xyXG5cclxuXHRcdFx0dmFyIHRpZ2h0Qm91bmRpbmdCb3ggPSBuZXcgVEhSRUUuQm94MyhcclxuXHRcdFx0XHRuZXcgVEhSRUUuVmVjdG9yMygpLmZyb21BcnJheShlLmRhdGEudGlnaHRCb3VuZGluZ0JveC5taW4pLFxyXG5cdFx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KGUuZGF0YS50aWdodEJvdW5kaW5nQm94Lm1heClcclxuXHRcdFx0KTtcclxuXHJcblx0XHRcdHRoaXMubm9kZS5kb25lTG9hZGluZyhnLCB0aWdodEJvdW5kaW5nQm94LCBudW1Qb2ludHMsIG5ldyBUSFJFRS5WZWN0b3IzKC4uLmUuZGF0YS5tZWFuKSk7XHJcblxyXG5cdFx0XHRHbG9iYWwud29ya2VyUG9vbC5yZXR1cm5Xb3JrZXIoV29ya2VyTWFuYWdlci5FUFRfTEFTX1pJUF9ERUNPREVSLCB3b3JrZXIpO1xyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgbWVzc2FnZSA9IHtcclxuXHRcdFx0YnVmZmVyOiBsYXMuYXJyYXliLFxyXG5cdFx0XHRudW1Qb2ludHM6IGxhcy5wb2ludHNDb3VudCxcclxuXHRcdFx0cG9pbnRTaXplOiBsYXMucG9pbnRTaXplLFxyXG5cdFx0XHRwb2ludEZvcm1hdElEOiBsYXMucG9pbnRzRm9ybWF0SWQsXHJcblx0XHRcdHNjYWxlOiBsYXMuc2NhbGUsXHJcblx0XHRcdG9mZnNldDogbGFzLm9mZnNldCxcclxuXHRcdFx0bWluczogbGFzLm1pbnMsXHJcblx0XHRcdG1heHM6IGxhcy5tYXhzXHJcblx0XHR9O1xyXG5cclxuXHRcdHdvcmtlci5wb3N0TWVzc2FnZShtZXNzYWdlLCBbbWVzc2FnZS5idWZmZXJdKTtcclxuXHR9O1xyXG59O1xyXG5cclxuZXhwb3J0IHtFcHRMYXN6aXBMb2FkZXIsIEVwdExhekJhdGNoZXJ9O1xyXG4iLCJcclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxuaW1wb3J0IHtFcHRCaW5hcnlMb2FkZXJ9IGZyb20gXCIuLi8uLi9sb2FkZXJzL2VwdC9FcHRCaW5hcnlMb2FkZXJcIjtcclxuaW1wb3J0IHtFcHRMYXN6aXBMb2FkZXJ9IGZyb20gXCIuLi8uLi9sb2FkZXJzL2VwdC9FcHRMYXN6aXBMb2FkZXJcIjtcclxuaW1wb3J0IHtWZXJzaW9uVXRpbHN9IGZyb20gXCIuLi8uLi91dGlscy9WZXJzaW9uVXRpbHMuanNcIjtcclxuaW1wb3J0IHtQb2ludENsb3VkVHJlZU5vZGV9IGZyb20gXCIuLi9Qb2ludENsb3VkVHJlZS5qc1wiO1xyXG5pbXBvcnQge0dsb2JhbH0gZnJvbSBcIi4uLy4uL0dsb2JhbC5qc1wiO1xyXG5pbXBvcnQge1hIUkZhY3Rvcnl9IGZyb20gXCIuLi8uLi9YSFJGYWN0b3J5LmpzXCI7XHJcblxyXG5jbGFzcyBVdGlsc1xyXG57XHJcblx0c3RhdGljIHRvVmVjdG9yMyh2LCBvZmZzZXQpXHJcblx0e1xyXG5cdFx0cmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KHYsIG9mZnNldCB8fCAwKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyB0b0JveDMoYilcclxuXHR7XHJcblx0XHRyZXR1cm4gbmV3IFRIUkVFLkJveDMoVXRpbHMudG9WZWN0b3IzKGIpLCBVdGlscy50b1ZlY3RvcjMoYiwgMykpO1xyXG5cdH07XHJcblxyXG5cdHN0YXRpYyBmaW5kRGltKHNjaGVtYSwgbmFtZSlcclxuXHR7XHJcblx0XHR2YXIgZGltID0gc2NoZW1hLmZpbmQoKGRpbSkgPT4gZGltLm5hbWUgPT0gbmFtZSk7XHJcblx0XHRpZighZGltKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmluZCBcIiArIG5hbWUgKyBcIiBpbiBzY2hlbWFcIik7XHJcblx0XHRyZXR1cm4gZGltO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIHNwaGVyZUZyb20oYilcclxuXHR7XHJcblx0XHRyZXR1cm4gYi5nZXRCb3VuZGluZ1NwaGVyZShuZXcgVEhSRUUuU3BoZXJlKCkpO1xyXG5cdH1cclxufTtcclxuXHJcbmNsYXNzIFBvaW50Q2xvdWRFcHRHZW9tZXRyeVxyXG57XHJcblx0Y29uc3RydWN0b3IodXJsLCBpbmZvKVxyXG5cdHtcclxuXHRcdGxldCB2ZXJzaW9uID0gaW5mby52ZXJzaW9uO1xyXG5cdFx0bGV0IHNjaGVtYSA9IGluZm8uc2NoZW1hO1xyXG5cdFx0bGV0IGJvdW5kcyA9IGluZm8uYm91bmRzO1xyXG5cdFx0bGV0IGJvdW5kc0NvbmZvcm1pbmcgPSBpbmZvLmJvdW5kc0NvbmZvcm1pbmc7XHJcblxyXG5cdFx0bGV0IHh5eiA9IFtcclxuXHRcdFx0VXRpbHMuZmluZERpbShzY2hlbWEsIFwiWFwiKSxcclxuXHRcdFx0VXRpbHMuZmluZERpbShzY2hlbWEsIFwiWVwiKSxcclxuXHRcdFx0VXRpbHMuZmluZERpbShzY2hlbWEsIFwiWlwiKVxyXG5cdFx0XTtcclxuXHRcdGxldCBzY2FsZSA9IHh5ei5tYXAoKGQpID0+IGQuc2NhbGUgfHwgMSk7XHJcblx0XHRsZXQgb2Zmc2V0ID0geHl6Lm1hcCgoZCkgPT4gZC5vZmZzZXQgfHwgMCk7XHJcblxyXG5cdFx0dGhpcy5lcHRTY2FsZSA9IFV0aWxzLnRvVmVjdG9yMyhzY2FsZSk7XHJcblx0XHR0aGlzLmVwdE9mZnNldCA9IFV0aWxzLnRvVmVjdG9yMyhvZmZzZXQpO1xyXG5cclxuXHRcdHRoaXMudXJsID0gdXJsO1xyXG5cdFx0dGhpcy5pbmZvID0gaW5mbztcclxuXHRcdHRoaXMudHlwZSA9IFwiZXB0XCI7XHJcblxyXG5cdFx0dGhpcy5zY2hlbWEgPSBzY2hlbWE7XHJcblx0XHR0aGlzLnNwYW4gPSBpbmZvLnNwYW4gfHwgaW5mby50aWNrcztcclxuXHRcdHRoaXMuYm91bmRpbmdCb3ggPSBVdGlscy50b0JveDMoYm91bmRzKTtcclxuXHRcdHRoaXMudGlnaHRCb3VuZGluZ0JveCA9IFV0aWxzLnRvQm94Myhib3VuZHNDb25mb3JtaW5nKTtcclxuXHRcdHRoaXMub2Zmc2V0ID0gVXRpbHMudG9WZWN0b3IzKFswLCAwLCAwXSk7XHJcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gVXRpbHMuc3BoZXJlRnJvbSh0aGlzLmJvdW5kaW5nQm94KTtcclxuXHRcdHRoaXMudGlnaHRCb3VuZGluZ1NwaGVyZSA9IFV0aWxzLnNwaGVyZUZyb20odGhpcy50aWdodEJvdW5kaW5nQm94KTtcclxuXHRcdHRoaXMudmVyc2lvbiA9IG5ldyBWZXJzaW9uVXRpbHMoXCIxLjZcIik7XHJcblxyXG5cdFx0dGhpcy5wcm9qZWN0aW9uID0gbnVsbDtcclxuXHRcdHRoaXMuZmFsbGJhY2tQcm9qZWN0aW9uID0gbnVsbDtcclxuXHJcblx0XHRpZihpbmZvLnNycyAmJiBpbmZvLnNycy5ob3Jpem9udGFsKVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLnByb2plY3Rpb24gPSBpbmZvLnNycy5hdXRob3JpdHkgKyBcIjpcIiArIGluZm8uc3JzLmhvcml6b250YWw7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYoaW5mby5zcnMud2t0KVxyXG5cdFx0e1xyXG5cdFx0XHRpZighdGhpcy5wcm9qZWN0aW9uKSB0aGlzLnByb2plY3Rpb24gPSBpbmZvLnNycy53a3Q7XHJcblx0XHRcdGVsc2UgdGhpcy5mYWxsYmFja1Byb2plY3Rpb24gPSBpbmZvLnNycy53a3Q7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5wb2ludEF0dHJpYnV0ZXMgPSBcIkxBWlwiO1xyXG5cdFx0dGhpcy5zcGFjaW5nID1cclxuXHRcdFx0KHRoaXMuYm91bmRpbmdCb3gubWF4LnggLSB0aGlzLmJvdW5kaW5nQm94Lm1pbi54KSAvIHRoaXMuc3BhbjtcclxuXHJcblx0XHRsZXQgaGllcmFyY2h5VHlwZSA9IGluZm8uaGllcmFyY2h5VHlwZSB8fCBcImpzb25cIjtcclxuXHJcblx0XHRsZXQgZGF0YVR5cGUgPSBpbmZvLmRhdGFUeXBlIHx8IFwibGFzemlwXCI7XHJcblx0XHR0aGlzLmxvYWRlciA9IGRhdGFUeXBlID09IFwiYmluYXJ5XCIgPyBuZXcgRXB0QmluYXJ5TG9hZGVyKCkgOiBuZXcgRXB0TGFzemlwTG9hZGVyKCk7XHJcblx0fVxyXG59O1xyXG5cclxuY2xhc3MgRXB0S2V5XHJcbntcclxuXHRjb25zdHJ1Y3RvcihlcHQsIGIsIGQsIHgsIHksIHopXHJcblx0e1xyXG5cdFx0dGhpcy5lcHQgPSBlcHQ7XHJcblx0XHR0aGlzLmIgPSBiO1xyXG5cdFx0dGhpcy5kID0gZDtcclxuXHRcdHRoaXMueCA9IHggfHwgMDtcclxuXHRcdHRoaXMueSA9IHkgfHwgMDtcclxuXHRcdHRoaXMueiA9IHogfHwgMDtcclxuXHR9XHJcblxyXG5cdG5hbWUoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmQgKyBcIi1cIiArIHRoaXMueCArIFwiLVwiICsgdGhpcy55ICsgXCItXCIgKyB0aGlzLno7XHJcblx0fVxyXG5cclxuXHRzdGVwKGEsIGIsIGMpXHJcblx0e1xyXG5cdFx0bGV0IG1pbiA9IHRoaXMuYi5taW4uY2xvbmUoKTtcclxuXHRcdGxldCBtYXggPSB0aGlzLmIubWF4LmNsb25lKCk7XHJcblx0XHRsZXQgZHN0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKS5zdWJWZWN0b3JzKG1heCwgbWluKTtcclxuXHJcblx0XHRpZihhKSBtaW4ueCArPSBkc3QueCAvIDI7XHJcblx0XHRlbHNlIG1heC54IC09IGRzdC54IC8gMjtcclxuXHJcblx0XHRpZihiKSBtaW4ueSArPSBkc3QueSAvIDI7XHJcblx0XHRlbHNlIG1heC55IC09IGRzdC55IC8gMjtcclxuXHJcblx0XHRpZihjKSBtaW4ueiArPSBkc3QueiAvIDI7XHJcblx0XHRlbHNlIG1heC56IC09IGRzdC56IC8gMjtcclxuXHJcblx0XHRyZXR1cm4gbmV3IEVwdEtleShcclxuXHRcdFx0XHR0aGlzLmVwdCxcclxuXHRcdFx0XHRuZXcgVEhSRUUuQm94MyhtaW4sIG1heCksXHJcblx0XHRcdFx0dGhpcy5kICsgMSxcclxuXHRcdFx0XHR0aGlzLnggKiAyICsgYSxcclxuXHRcdFx0XHR0aGlzLnkgKiAyICsgYixcclxuXHRcdFx0XHR0aGlzLnogKiAyICsgYyk7XHJcblx0fVxyXG5cclxuXHRjaGlsZHJlbigpXHJcblx0e1xyXG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0Zm9yICh2YXIgYSA9IDA7IGEgPCAyOyArK2EpXHJcblx0XHR7XHJcblx0XHRcdGZvciAodmFyIGIgPSAwOyBiIDwgMjsgKytiKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Zm9yICh2YXIgYyA9IDA7IGMgPCAyOyArK2MpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIGFkZCA9IHRoaXMuc3RlcChhLCBiLCBjKS5uYW1lKCk7XHJcblx0XHRcdFx0XHRpZighcmVzdWx0LmluY2x1ZGVzKGFkZCkpIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoYWRkKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG59XHJcblxyXG5jbGFzcyBQb2ludENsb3VkRXB0R2VvbWV0cnlOb2RlIGV4dGVuZHMgUG9pbnRDbG91ZFRyZWVOb2RlXHJcbntcclxuXHRjb25zdHJ1Y3RvcihlcHQsIGIsIGQsIHgsIHksIHopIHtcclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5lcHQgPSBlcHQ7XHJcblx0XHR0aGlzLmtleSA9IG5ldyBFcHRLZXkoXHJcblx0XHRcdFx0dGhpcy5lcHQsXHJcblx0XHRcdFx0YiB8fCB0aGlzLmVwdC5ib3VuZGluZ0JveCxcclxuXHRcdFx0XHRkIHx8IDAsXHJcblx0XHRcdFx0eCxcclxuXHRcdFx0XHR5LFxyXG5cdFx0XHRcdHopO1xyXG5cclxuXHRcdHRoaXMuaWQgPSBQb2ludENsb3VkRXB0R2VvbWV0cnlOb2RlLklEQ291bnQrKztcclxuXHRcdHRoaXMuZ2VvbWV0cnkgPSBudWxsO1xyXG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IHRoaXMua2V5LmI7XHJcblx0XHR0aGlzLnRpZ2h0Qm91bmRpbmdCb3ggPSB0aGlzLmJvdW5kaW5nQm94O1xyXG5cdFx0dGhpcy5zcGFjaW5nID0gdGhpcy5lcHQuc3BhY2luZyAvIE1hdGgucG93KDIsIHRoaXMua2V5LmQpO1xyXG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IFV0aWxzLnNwaGVyZUZyb20odGhpcy5ib3VuZGluZ0JveCk7XHJcblxyXG5cdFx0Ly8gVGhlc2UgYXJlIHNldCBkdXJpbmcgaGllcmFyY2h5IGxvYWRpbmcuXHJcblx0XHR0aGlzLmhhc0NoaWxkcmVuID0gZmFsc2U7XHJcblx0XHR0aGlzLmNoaWxkcmVuID0geyB9O1xyXG5cdFx0dGhpcy5udW1Qb2ludHMgPSAtMTtcclxuXHJcblx0XHR0aGlzLmxldmVsID0gdGhpcy5rZXkuZDtcclxuXHRcdHRoaXMubG9hZGVkID0gZmFsc2U7XHJcblx0XHR0aGlzLmxvYWRpbmcgPSBmYWxzZTtcclxuXHRcdHRoaXMub25lVGltZURpc3Bvc2VIYW5kbGVycyA9IFtdO1xyXG5cclxuXHRcdGxldCBrID0gdGhpcy5rZXk7XHJcblx0XHR0aGlzLm5hbWUgPSB0aGlzLnRvUG90cmVlTmFtZShrLmQsIGsueCwgay55LCBrLnopO1xyXG5cdFx0dGhpcy5pbmRleCA9IHBhcnNlSW50KHRoaXMubmFtZS5jaGFyQXQodGhpcy5uYW1lLmxlbmd0aCAtIDEpKTtcclxuXHR9XHJcblxyXG5cdGlzR2VvbWV0cnlOb2RlKCl7cmV0dXJuIHRydWU7fVxyXG5cdGdldExldmVsKCl7cmV0dXJuIHRoaXMubGV2ZWw7fVxyXG5cdGlzVHJlZU5vZGUoKXtyZXR1cm4gZmFsc2U7fVxyXG5cdGlzTG9hZGVkKCl7cmV0dXJuIHRoaXMubG9hZGVkO31cclxuXHRnZXRCb3VuZGluZ1NwaGVyZSgpe3JldHVybiB0aGlzLmJvdW5kaW5nU3BoZXJlO31cclxuXHRnZXRCb3VuZGluZ0JveCgpe3JldHVybiB0aGlzLmJvdW5kaW5nQm94O31cclxuXHR1cmwoKXtyZXR1cm4gdGhpcy5lcHQudXJsICsgXCJlcHQtZGF0YS9cIiArIHRoaXMuZmlsZW5hbWUoKTt9XHJcblx0Z2V0TnVtUG9pbnRzKCl7cmV0dXJuIHRoaXMubnVtUG9pbnRzO31cclxuXHRmaWxlbmFtZSgpe3JldHVybiB0aGlzLmtleS5uYW1lKCk7fVxyXG5cclxuXHRnZXRDaGlsZHJlbigpXHJcblx0e1xyXG5cdFx0bGV0IGNoaWxkcmVuID0gW107XHJcblxyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCA4OyBpKyspIHtcclxuXHRcdFx0aWYodGhpcy5jaGlsZHJlbltpXSkge1xyXG5cdFx0XHRcdGNoaWxkcmVuLnB1c2godGhpcy5jaGlsZHJlbltpXSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gY2hpbGRyZW47XHJcblx0fVxyXG5cclxuXHRhZGRDaGlsZChjaGlsZClcclxuXHR7XHJcblx0XHR0aGlzLmNoaWxkcmVuW2NoaWxkLmluZGV4XSA9IGNoaWxkO1xyXG5cdFx0Y2hpbGQucGFyZW50ID0gdGhpcztcclxuXHR9XHJcblxyXG5cdGxvYWQoKVxyXG5cdHtcclxuXHRcdGlmKHRoaXMubG9hZGVkIHx8IHRoaXMubG9hZGluZyB8fCBHbG9iYWwubnVtTm9kZXNMb2FkaW5nID49IEdsb2JhbC5tYXhOb2Rlc0xvYWRpbmcpXHJcblx0XHR7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmxvYWRpbmcgPSB0cnVlO1xyXG5cdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZysrO1xyXG5cclxuXHRcdGlmKHRoaXMubnVtUG9pbnRzID09PSAtMSlcclxuXHRcdHtcclxuXHRcdFx0dGhpcy5sb2FkSGllcmFyY2h5KCk7XHJcblx0XHR9XHJcblx0XHR0aGlzLmxvYWRQb2ludHMoKTtcclxuXHR9XHJcblxyXG5cdGxvYWRQb2ludHMoKVxyXG5cdHtcclxuXHRcdHRoaXMuZXB0LmxvYWRlci5sb2FkKHRoaXMpO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgbG9hZEhpZXJhcmNoeSgpXHJcblx0e1xyXG5cdFx0bGV0IG5vZGVzID0geyB9O1xyXG5cdFx0bm9kZXNbdGhpcy5maWxlbmFtZSgpXSA9IHRoaXM7XHJcblx0XHR0aGlzLmhhc0NoaWxkcmVuID0gZmFsc2U7XHJcblxyXG5cdFx0bGV0IGVwdEhpZXJhcmNoeUZpbGUgPSBgJHt0aGlzLmVwdC51cmx9ZXB0LWhpZXJhcmNoeS8ke3RoaXMuZmlsZW5hbWUoKX0uanNvbmA7XHJcblxyXG5cdFx0bGV0IHJlc3BvbnNlID0gYXdhaXQgWEhSRmFjdG9yeS5mZXRjaChlcHRIaWVyYXJjaHlGaWxlKTtcclxuXHRcdGxldCBoaWVyID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG5cclxuXHRcdC8vIFNpbmNlIHdlIHdhbnQgdG8gdHJhdmVyc2UgdG9wLWRvd24sIGFuZCAxMCBjb21lc1xyXG5cdFx0Ly8gbGV4aWNvZ3JhcGhpY2FsbHkgYmVmb3JlIDkgKGZvciBleGFtcGxlKSwgZG8gYSBkZWVwIHNvcnQuXHJcblx0XHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKGhpZXIpLnNvcnQoKGEsIGIpID0+IHtcclxuXHRcdFx0bGV0IFtkYSwgeGEsIHlhLCB6YV0gPSBhLnNwbGl0KFwiLVwiKS5tYXAoKG4pID0+IHBhcnNlSW50KG4sIDEwKSk7XHJcblx0XHRcdGxldCBbZGIsIHhiLCB5YiwgemJdID0gYi5zcGxpdChcIi1cIikubWFwKChuKSA9PiBwYXJzZUludChuLCAxMCkpO1xyXG5cdFx0XHRpZihkYSA8IGRiKSByZXR1cm4gLTE7IGlmKGRhID4gZGIpIHJldHVybiAxO1xyXG5cdFx0XHRpZih4YSA8IHhiKSByZXR1cm4gLTE7IGlmKHhhID4geGIpIHJldHVybiAxO1xyXG5cdFx0XHRpZih5YSA8IHliKSByZXR1cm4gLTE7IGlmKHlhID4geWIpIHJldHVybiAxO1xyXG5cdFx0XHRpZih6YSA8IHpiKSByZXR1cm4gLTE7IGlmKHphID4gemIpIHJldHVybiAxO1xyXG5cdFx0XHRyZXR1cm4gMDtcclxuXHRcdH0pO1xyXG5cclxuXHRcdGtleXMuZm9yRWFjaCgodikgPT4ge1xyXG5cdFx0XHRsZXQgW2QsIHgsIHksIHpdID0gdi5zcGxpdChcIi1cIikubWFwKChuKSA9PiBwYXJzZUludChuLCAxMCkpO1xyXG5cdFx0XHRsZXQgYSA9IHggJiAxLCBiID0geSAmIDEsIGMgPSB6ICYgMTtcclxuXHRcdFx0bGV0IHBhcmVudE5hbWUgPVxyXG5cdFx0XHRcdChkIC0gMSkgKyBcIi1cIiArICh4ID4+IDEpICsgXCItXCIgKyAoeSA+PiAxKSArIFwiLVwiICsgKHogPj4gMSk7XHJcblxyXG5cdFx0XHRsZXQgcGFyZW50Tm9kZSA9IG5vZGVzW3BhcmVudE5hbWVdO1xyXG5cdFx0XHRpZighcGFyZW50Tm9kZSkgcmV0dXJuO1xyXG5cdFx0XHRwYXJlbnROb2RlLmhhc0NoaWxkcmVuID0gdHJ1ZTtcclxuXHJcblx0XHRcdGxldCBrZXkgPSBwYXJlbnROb2RlLmtleS5zdGVwKGEsIGIsIGMpO1xyXG5cclxuXHRcdFx0bGV0IG5vZGUgPSBuZXcgUG9pbnRDbG91ZEVwdEdlb21ldHJ5Tm9kZShcclxuXHRcdFx0XHRcdHRoaXMuZXB0LFxyXG5cdFx0XHRcdFx0a2V5LmIsXHJcblx0XHRcdFx0XHRrZXkuZCxcclxuXHRcdFx0XHRcdGtleS54LFxyXG5cdFx0XHRcdFx0a2V5LnksXHJcblx0XHRcdFx0XHRrZXkueik7XHJcblxyXG5cdFx0XHRub2RlLmxldmVsID0gZDtcclxuXHRcdFx0bm9kZS5udW1Qb2ludHMgPSBoaWVyW3ZdO1xyXG5cclxuXHRcdFx0cGFyZW50Tm9kZS5hZGRDaGlsZChub2RlKTtcclxuXHRcdFx0bm9kZXNba2V5Lm5hbWUoKV0gPSBub2RlO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRkb25lTG9hZGluZyhidWZmZXJHZW9tZXRyeSwgdGlnaHRCb3VuZGluZ0JveCwgbnAsIG1lYW4pXHJcblx0e1xyXG5cdFx0YnVmZmVyR2VvbWV0cnkuYm91bmRpbmdCb3ggPSB0aGlzLmJvdW5kaW5nQm94O1xyXG5cdFx0dGhpcy5nZW9tZXRyeSA9IGJ1ZmZlckdlb21ldHJ5O1xyXG5cdFx0dGhpcy50aWdodEJvdW5kaW5nQm94ID0gdGlnaHRCb3VuZGluZ0JveDtcclxuXHRcdHRoaXMubnVtUG9pbnRzID0gbnA7XHJcblx0XHR0aGlzLm1lYW4gPSBtZWFuO1xyXG5cdFx0dGhpcy5sb2FkZWQgPSB0cnVlO1xyXG5cdFx0dGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcblx0XHRHbG9iYWwubnVtTm9kZXNMb2FkaW5nLS07XHJcblx0fVxyXG5cclxuXHR0b1BvdHJlZU5hbWUoZCwgeCwgeSwgeilcclxuXHR7XHJcblx0XHR2YXIgbmFtZSA9IFwiclwiO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZDsgKytpKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgc2hpZnQgPSBkIC0gaSAtIDE7XHJcblx0XHRcdHZhciBtYXNrID0gMSA8PCBzaGlmdDtcclxuXHRcdFx0dmFyIHN0ZXAgPSAwO1xyXG5cclxuXHRcdFx0aWYoeCAmIG1hc2spIHN0ZXAgKz0gNDtcclxuXHRcdFx0aWYoeSAmIG1hc2spIHN0ZXAgKz0gMjtcclxuXHRcdFx0aWYoeiAmIG1hc2spIHN0ZXAgKz0gMTtcclxuXHJcblx0XHRcdG5hbWUgKz0gc3RlcDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbmFtZTtcclxuXHR9XHJcblxyXG5cdGRpc3Bvc2UoKVxyXG5cdHtcclxuXHRcdGlmKHRoaXMuZ2VvbWV0cnkgJiYgdGhpcy5wYXJlbnQgIT0gbnVsbClcclxuXHRcdHtcclxuXHRcdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcblx0XHRcdHRoaXMuZ2VvbWV0cnkgPSBudWxsO1xyXG5cdFx0XHR0aGlzLmxvYWRlZCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0Ly8gdGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6IFwiZGlzcG9zZVwiIH0gKTtcclxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9uZVRpbWVEaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBpKyspXHJcblx0XHRcdHtcclxuXHRcdFx0XHRsZXQgaGFuZGxlciA9IHRoaXMub25lVGltZURpc3Bvc2VIYW5kbGVyc1tpXTtcclxuXHRcdFx0XHRoYW5kbGVyKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHRoaXMub25lVGltZURpc3Bvc2VIYW5kbGVycyA9IFtdO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuUG9pbnRDbG91ZEVwdEdlb21ldHJ5Tm9kZS5JRENvdW50ID0gMDtcclxuXHJcbmV4cG9ydCB7UG9pbnRDbG91ZEVwdEdlb21ldHJ5LCBQb2ludENsb3VkRXB0R2VvbWV0cnlOb2RlLCBFcHRLZXl9O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7UG9pbnRDbG91ZEVwdEdlb21ldHJ5LCBQb2ludENsb3VkRXB0R2VvbWV0cnlOb2RlfSBmcm9tIFwiLi4vcG9pbnRjbG91ZC9nZW9tZXRyaWVzL1BvaW50Q2xvdWRFcHRHZW9tZXRyeS5qc1wiO1xyXG5pbXBvcnQgeyBYSFJGYWN0b3J5IH0gZnJvbSBcIi4uL1hIUkZhY3RvcnkuanNcIjtcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIENvbm5vciBNYW5uaW5nXHJcbiAqL1xyXG5jbGFzcyBFcHRMb2FkZXJcclxue1xyXG5cdHN0YXRpYyBhc3luYyBsb2FkKGZpbGUsIGNhbGxiYWNrKVxyXG5cdHtcclxuXHRcdHZhciByZXNwb25zZSA9IGF3YWl0IFhIUkZhY3RvcnkuZmV0Y2goZmlsZSk7XHJcblx0XHR2YXIganNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHRcdHZhciB1cmwgPSBmaWxlLnN1YnN0cigwLCBmaWxlLmxhc3RJbmRleE9mKFwiZXB0Lmpzb25cIikpO1xyXG5cclxuXHRcdHZhciBnZW9tZXRyeSA9IG5ldyBQb2ludENsb3VkRXB0R2VvbWV0cnkodXJsLCBqc29uKTtcclxuXHRcdHZhciByb290ID0gbmV3IFBvaW50Q2xvdWRFcHRHZW9tZXRyeU5vZGUoZ2VvbWV0cnkpO1xyXG5cdFx0Z2VvbWV0cnkucm9vdCA9IHJvb3Q7XHJcblx0XHRnZW9tZXRyeS5yb290LmxvYWQoKTtcclxuXHJcblx0XHRjYWxsYmFjayhnZW9tZXRyeSk7XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IHtFcHRMb2FkZXJ9O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuY2xhc3MgSGVscGVyVXRpbHNcclxue1xyXG5cdC8qKlxyXG5cdCAqIENyYWV0ZSBhIG5ldyBkYXRhIHRleHR1cmUgd2l0aCBhIHNvbGlkIGNvbG9yLlxyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZW5lcmF0ZURhdGFUZXh0dXJlKHdpZHRoLCBoZWlnaHQsIGNvbG9yKVxyXG5cdHtcclxuXHRcdHZhciBzaXplID0gd2lkdGggKiBoZWlnaHQ7XHJcblx0XHR2YXIgZGF0YSA9IG5ldyBVaW50OEFycmF5KDQgKiB3aWR0aCAqIGhlaWdodCk7XHJcblxyXG5cdFx0dmFyIHIgPSBNYXRoLmZsb29yKGNvbG9yLnIgKiAyNTUpO1xyXG5cdFx0dmFyIGcgPSBNYXRoLmZsb29yKGNvbG9yLmcgKiAyNTUpO1xyXG5cdFx0dmFyIGIgPSBNYXRoLmZsb29yKGNvbG9yLmIgKiAyNTUpO1xyXG5cclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzaXplOyBpKyspXHJcblx0XHR7XHJcblx0XHRcdGRhdGFbaSAqIDNdID0gcjtcclxuXHRcdFx0ZGF0YVtpICogMyArIDFdID0gZztcclxuXHRcdFx0ZGF0YVtpICogMyArIDJdID0gYjtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgdGV4dHVyZSA9IG5ldyBUSFJFRS5EYXRhVGV4dHVyZShkYXRhLCB3aWR0aCwgaGVpZ2h0LCBUSFJFRS5SR0JBRm9ybWF0KTtcclxuXHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cdFx0dGV4dHVyZS5tYWdGaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xyXG5cclxuXHRcdHJldHVybiB0ZXh0dXJlO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbXB1dGUgYSB0cmFuc2Zvcm1lZCBib3VkaW5nIGJveCBmcm9tIGFuIG9yaWdpbmFsIGJveCBhbmQgYSB0cmFuc2Zvcm0gbWF0cml4LlxyXG5cdCAqL1xyXG5cdHN0YXRpYyBjb21wdXRlVHJhbnNmb3JtZWRCb3VuZGluZ0JveChib3gsIHRyYW5zZm9ybSlcclxuXHR7XHJcblx0XHR2YXIgdmVydGljZXMgPSBbXHJcblx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKGJveC5taW4ueCwgYm94Lm1pbi55LCBib3gubWluLnopLmFwcGx5TWF0cml4NCh0cmFuc2Zvcm0pLFxyXG5cdFx0XHRuZXcgVEhSRUUuVmVjdG9yMyhib3gubWluLngsIGJveC5taW4ueSwgYm94Lm1pbi56KS5hcHBseU1hdHJpeDQodHJhbnNmb3JtKSxcclxuXHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoYm94Lm1heC54LCBib3gubWluLnksIGJveC5taW4ueikuYXBwbHlNYXRyaXg0KHRyYW5zZm9ybSksXHJcblx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKGJveC5taW4ueCwgYm94Lm1heC55LCBib3gubWluLnopLmFwcGx5TWF0cml4NCh0cmFuc2Zvcm0pLFxyXG5cdFx0XHRuZXcgVEhSRUUuVmVjdG9yMyhib3gubWluLngsIGJveC5taW4ueSwgYm94Lm1heC56KS5hcHBseU1hdHJpeDQodHJhbnNmb3JtKSxcclxuXHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoYm94Lm1pbi54LCBib3gubWF4LnksIGJveC5tYXgueikuYXBwbHlNYXRyaXg0KHRyYW5zZm9ybSksXHJcblx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKGJveC5tYXgueCwgYm94Lm1heC55LCBib3gubWluLnopLmFwcGx5TWF0cml4NCh0cmFuc2Zvcm0pLFxyXG5cdFx0XHRuZXcgVEhSRUUuVmVjdG9yMyhib3gubWF4LngsIGJveC5taW4ueSwgYm94Lm1heC56KS5hcHBseU1hdHJpeDQodHJhbnNmb3JtKSxcclxuXHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoYm94Lm1heC54LCBib3gubWF4LnksIGJveC5tYXgueikuYXBwbHlNYXRyaXg0KHRyYW5zZm9ybSlcclxuXHRcdF07XHJcblxyXG5cdFx0dmFyIGJvdW5kaW5nQm94ID0gbmV3IFRIUkVFLkJveDMoKTtcclxuXHRcdGJvdW5kaW5nQm94LnNldEZyb21Qb2ludHModmVydGljZXMpO1xyXG5cdFx0XHJcblx0XHRyZXR1cm4gYm91bmRpbmdCb3g7XHJcblx0fTtcclxufTtcclxuXHJcbmV4cG9ydCB7SGVscGVyVXRpbHN9OyIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxuLy9cclxuLy90byBnZXQgYSByZWFkeSB0byB1c2UgZ3JhZGllbnQgYXJyYXkgZnJvbSBhIGNocm9tYS5qcyBncmFkaWVudDpcclxuLy9odHRwOi8vZ2thLmdpdGh1Yi5pby9jaHJvbWEuanMvXHJcbi8vXHJcbi8vdmFyIHN0b3BzID0gW107XHJcbi8vZm9yKHZhciBpID0gMDsgaSA8PSAxMDsgaSsrKXtcclxuLy9cdHZhciByYW5nZSA9IGNocm9tYS5zY2FsZShbXCJ5ZWxsb3dcIiwgXCJuYXZ5XCJdKS5tb2RlKFwibGNoXCIpLmRvbWFpbihbMTAsMF0pKGkpLl9yZ2JcclxuLy9cdFx0LnNsaWNlKDAsIDMpXHJcbi8vXHRcdC5tYXAodiA9PiAodiAvIDI1NSkudG9GaXhlZCg0KSlcclxuLy9cdFx0LmpvaW4oXCIsIFwiKTtcclxuLy9cclxuLy9cdHZhciBsaW5lID0gYFske2kgLyAxMH0sIG5ldyBUSFJFRS5Db2xvcigke3JhbmdlfSldLGA7XHJcbi8vXHJcbi8vXHRzdG9wcy5wdXNoKGxpbmUpO1xyXG4vL31cclxuLy9zdG9wcy5qb2luKFwiXFxuXCIpO1xyXG5cclxuLy90byBnZXQgYSByZWFkeSB0byB1c2UgZ3JhZGllbnQgYXJyYXkgZnJvbSBtYXRwbG90bGliOlxyXG4vL2ltcG9ydCBtYXRwbG90bGliLnB5cGxvdCBhcyBwbHRcclxuLy9pbXBvcnQgbWF0cGxvdGxpYi5jb2xvcnMgYXMgY29sb3JzXHJcbi8vXHJcbi8vbm9ybSA9IGNvbG9ycy5Ob3JtYWxpemUodm1pbj0wLHZtYXg9MSlcclxuLy9jbWFwID0gcGx0LmNtLnZpcmlkaXNcclxuLy9cclxuLy9mb3IgaSBpbiByYW5nZSgwLDExKTpcclxuLy8gICB1ID0gaSAvIDEwXHJcbi8vICAgcmdiID0gY21hcChub3JtKHUpKVswOjNdXHJcbi8vICAgcmdiID0gW1wiezA6LjNmfVwiLmZvcm1hdCh2KSBmb3IgdiBpbiByZ2JdXHJcbi8vICAgcmdiID0gXCJbXCIgKyBzdHIodSkgKyBcIiwgbmV3IFRIUkVFLkNvbG9yKFwiICsgIFwiLCBcIi5qb2luKHJnYikgKyBcIildLFwiXHJcbi8vICAgcHJpbnQocmdiKVxyXG5cclxudmFyIEdyYWRpZW50cyA9IHtcclxuXHRSQUlOQk9XOiBbXHJcblx0XHRbMCwgbmV3IFRIUkVFLkNvbG9yKDAuMjc4LCAwLCAwLjcxNCldLFxyXG5cdFx0WzEgLyA2LCBuZXcgVEhSRUUuQ29sb3IoMCwgMCwgMSldLFxyXG5cdFx0WzIgLyA2LCBuZXcgVEhSRUUuQ29sb3IoMCwgMSwgMSldLFxyXG5cdFx0WzMgLyA2LCBuZXcgVEhSRUUuQ29sb3IoMCwgMSwgMCldLFxyXG5cdFx0WzQgLyA2LCBuZXcgVEhSRUUuQ29sb3IoMSwgMSwgMCldLFxyXG5cdFx0WzUgLyA2LCBuZXcgVEhSRUUuQ29sb3IoMSwgMC42NCwgMCldLFxyXG5cdFx0WzEsIG5ldyBUSFJFRS5Db2xvcigxLCAwLCAwKV1cclxuXHRdLFxyXG5cdC8vRnJvbSBjaHJvbWEgc3BlY3RyYWwgaHR0cDovL2drYS5naXRodWIuaW8vY2hyb21hLmpzL1xyXG5cdFNQRUNUUkFMOiBbXHJcblx0XHRbMCwgbmV3IFRIUkVFLkNvbG9yKDAuMzY4NiwgMC4zMDk4LCAwLjYzNTMpXSxcclxuXHRcdFswLjEsIG5ldyBUSFJFRS5Db2xvcigwLjE5NjEsIDAuNTMzMywgMC43NDEyKV0sXHJcblx0XHRbMC4yLCBuZXcgVEhSRUUuQ29sb3IoMC40MDAwLCAwLjc2MDgsIDAuNjQ3MSldLFxyXG5cdFx0WzAuMywgbmV3IFRIUkVFLkNvbG9yKDAuNjcwNiwgMC44NjY3LCAwLjY0MzEpXSxcclxuXHRcdFswLjQsIG5ldyBUSFJFRS5Db2xvcigwLjkwMjAsIDAuOTYwOCwgMC41OTYxKV0sXHJcblx0XHRbMC41LCBuZXcgVEhSRUUuQ29sb3IoMS4wMDAwLCAxLjAwMDAsIDAuNzQ5MCldLFxyXG5cdFx0WzAuNiwgbmV3IFRIUkVFLkNvbG9yKDAuOTk2MSwgMC44Nzg0LCAwLjU0NTEpXSxcclxuXHRcdFswLjcsIG5ldyBUSFJFRS5Db2xvcigwLjk5MjIsIDAuNjgyNCwgMC4zODA0KV0sXHJcblx0XHRbMC44LCBuZXcgVEhSRUUuQ29sb3IoMC45NTY5LCAwLjQyNzUsIDAuMjYyNyldLFxyXG5cdFx0WzAuOSwgbmV3IFRIUkVFLkNvbG9yKDAuODM1MywgMC4yNDMxLCAwLjMwOTgpXSxcclxuXHRcdFsxLCBuZXcgVEhSRUUuQ29sb3IoMC42MTk2LCAwLjAwMzksIDAuMjU4OCldXHJcblx0XSxcclxuXHRQTEFTTUE6IFtcclxuXHRcdFswLjAsIG5ldyBUSFJFRS5Db2xvcigwLjI0MSwgMC4wMTUsIDAuNjEwKV0sXHJcblx0XHRbMC4xLCBuZXcgVEhSRUUuQ29sb3IoMC4zODcsIDAuMDAxLCAwLjY1NCldLFxyXG5cdFx0WzAuMiwgbmV3IFRIUkVFLkNvbG9yKDAuNTI0LCAwLjAyNSwgMC42NTMpXSxcclxuXHRcdFswLjMsIG5ldyBUSFJFRS5Db2xvcigwLjY1MSwgMC4xMjUsIDAuNTk2KV0sXHJcblx0XHRbMC40LCBuZXcgVEhSRUUuQ29sb3IoMC43NTIsIDAuMjI3LCAwLjUxMyldLFxyXG5cdFx0WzAuNSwgbmV3IFRIUkVFLkNvbG9yKDAuODM3LCAwLjMyOSwgMC40MzEpXSxcclxuXHRcdFswLjYsIG5ldyBUSFJFRS5Db2xvcigwLjkwNywgMC40MzUsIDAuMzUzKV0sXHJcblx0XHRbMC43LCBuZXcgVEhSRUUuQ29sb3IoMC45NjMsIDAuNTU0LCAwLjI3MildLFxyXG5cdFx0WzAuOCwgbmV3IFRIUkVFLkNvbG9yKDAuOTkyLCAwLjY4MSwgMC4xOTUpXSxcclxuXHRcdFswLjksIG5ldyBUSFJFRS5Db2xvcigwLjk4NywgMC44MjIsIDAuMTQ0KV0sXHJcblx0XHRbMS4wLCBuZXcgVEhSRUUuQ29sb3IoMC45NDAsIDAuOTc1LCAwLjEzMSldXHJcblx0XSxcclxuXHRZRUxMT1dfR1JFRU46IFtcclxuXHRcdFswLCBuZXcgVEhSRUUuQ29sb3IoMC4xNjQ3LCAwLjI4MjQsIDAuMzQ1MSldLFxyXG5cdFx0WzAuMSwgbmV3IFRIUkVFLkNvbG9yKDAuMTMzOCwgMC4zNTU1LCAwLjQyMjcpXSxcclxuXHRcdFswLjIsIG5ldyBUSFJFRS5Db2xvcigwLjA2MTAsIDAuNDMxOSwgMC40ODY0KV0sXHJcblx0XHRbMC4zLCBuZXcgVEhSRUUuQ29sb3IoMC4wMDAwLCAwLjUwOTksIDAuNTMxOSldLFxyXG5cdFx0WzAuNCwgbmV3IFRIUkVFLkNvbG9yKDAuMDAwMCwgMC41ODgxLCAwLjU1NjkpXSxcclxuXHRcdFswLjUsIG5ldyBUSFJFRS5Db2xvcigwLjEzNzAsIDAuNjY1MCwgMC41NjE0KV0sXHJcblx0XHRbMC42LCBuZXcgVEhSRUUuQ29sb3IoMC4yOTA2LCAwLjczOTUsIDAuNTQ3NyldLFxyXG5cdFx0WzAuNywgbmV3IFRIUkVFLkNvbG9yKDAuNDQ1MywgMC44MDk5LCAwLjUyMDEpXSxcclxuXHRcdFswLjgsIG5ldyBUSFJFRS5Db2xvcigwLjYxMDIsIDAuODc0OCwgMC40ODUwKV0sXHJcblx0XHRbMC45LCBuZXcgVEhSRUUuQ29sb3IoMC43ODgzLCAwLjkzMjMsIDAuNDUxNCldLFxyXG5cdFx0WzEsIG5ldyBUSFJFRS5Db2xvcigwLjk4MDQsIDAuOTgwNCwgMC40MzE0KV1cclxuXHRdLFxyXG5cdFZJUklESVM6IFtcclxuXHRcdFswLjAsIG5ldyBUSFJFRS5Db2xvcigwLjI2NywgMC4wMDUsIDAuMzI5KV0sXHJcblx0XHRbMC4xLCBuZXcgVEhSRUUuQ29sb3IoMC4yODMsIDAuMTQxLCAwLjQ1OCldLFxyXG5cdFx0WzAuMiwgbmV3IFRIUkVFLkNvbG9yKDAuMjU0LCAwLjI2NSwgMC41MzApXSxcclxuXHRcdFswLjMsIG5ldyBUSFJFRS5Db2xvcigwLjIwNywgMC4zNzIsIDAuNTUzKV0sXHJcblx0XHRbMC40LCBuZXcgVEhSRUUuQ29sb3IoMC4xNjQsIDAuNDcxLCAwLjU1OCldLFxyXG5cdFx0WzAuNSwgbmV3IFRIUkVFLkNvbG9yKDAuMTI4LCAwLjU2NywgMC41NTEpXSxcclxuXHRcdFswLjYsIG5ldyBUSFJFRS5Db2xvcigwLjEzNSwgMC42NTksIDAuNTE4KV0sXHJcblx0XHRbMC43LCBuZXcgVEhSRUUuQ29sb3IoMC4yNjcsIDAuNzQ5LCAwLjQ0MSldLFxyXG5cdFx0WzAuOCwgbmV3IFRIUkVFLkNvbG9yKDAuNDc4LCAwLjgyMSwgMC4zMTgpXSxcclxuXHRcdFswLjksIG5ldyBUSFJFRS5Db2xvcigwLjc0MSwgMC44NzMsIDAuMTUwKV0sXHJcblx0XHRbMS4wLCBuZXcgVEhSRUUuQ29sb3IoMC45OTMsIDAuOTA2LCAwLjE0NCldXHJcblx0XSxcclxuXHRJTkZFUk5POiBbXHJcblx0XHRbMC4wLCBuZXcgVEhSRUUuQ29sb3IoMC4wNzcsIDAuMDQyLCAwLjIwNildLFxyXG5cdFx0WzAuMSwgbmV3IFRIUkVFLkNvbG9yKDAuMjI1LCAwLjAzNiwgMC4zODgpXSxcclxuXHRcdFswLjIsIG5ldyBUSFJFRS5Db2xvcigwLjM3MywgMC4wNzQsIDAuNDMyKV0sXHJcblx0XHRbMC4zLCBuZXcgVEhSRUUuQ29sb3IoMC41MjIsIDAuMTI4LCAwLjQyMCldLFxyXG5cdFx0WzAuNCwgbmV3IFRIUkVFLkNvbG9yKDAuNjY1LCAwLjE4MiwgMC4zNzApXSxcclxuXHRcdFswLjUsIG5ldyBUSFJFRS5Db2xvcigwLjc5NywgMC4yNTUsIDAuMjg3KV0sXHJcblx0XHRbMC42LCBuZXcgVEhSRUUuQ29sb3IoMC45MDIsIDAuMzY0LCAwLjE4NCldLFxyXG5cdFx0WzAuNywgbmV3IFRIUkVFLkNvbG9yKDAuOTY5LCAwLjUxNiwgMC4wNjMpXSxcclxuXHRcdFswLjgsIG5ldyBUSFJFRS5Db2xvcigwLjk4OCwgMC42ODMsIDAuMDcyKV0sXHJcblx0XHRbMC45LCBuZXcgVEhSRUUuQ29sb3IoMC45NjEsIDAuODU5LCAwLjI5OCldLFxyXG5cdFx0WzEuMCwgbmV3IFRIUkVFLkNvbG9yKDAuOTg4LCAwLjk5OCwgMC42NDUpXVxyXG5cdF0sXHJcblx0R1JBWVNDQUxFOiBbXHJcblx0XHRbMCwgbmV3IFRIUkVFLkNvbG9yKDAsIDAsIDApXSxcclxuXHRcdFsxLCBuZXcgVEhSRUUuQ29sb3IoMSwgMSwgMSldXHJcblx0XVxyXG59O1xyXG5cclxuZXhwb3J0IHtHcmFkaWVudHN9O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmNvbnN0IGdsc2wgPSBzdHJpbmdzID0+IHN0cmluZ3MucmF3WzBdO1xyXG5cclxudmFyIFNoYWRlcnMgPSB7fTtcclxuXHJcbi8vcG9pbnRjbG91ZC52c1xyXG5TaGFkZXJzLnZlcnRleCA9IGdsc2xgXHJcbnByZWNpc2lvbiBoaWdocCBmbG9hdDtcclxucHJlY2lzaW9uIGhpZ2hwIGludDtcclxuXHJcbiNkZWZpbmUgTUFYX0NMSVBfUE9MWUdPTlMgOFxyXG5cclxuYCArIFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbiArIGBcclxuYCArIFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4ICsgZ2xzbGBcclxuXHJcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xyXG5hdHRyaWJ1dGUgdmVjMyBjb2xvcjtcclxuYXR0cmlidXRlIGZsb2F0IGludGVuc2l0eTtcclxuYXR0cmlidXRlIGZsb2F0IGNsYXNzaWZpY2F0aW9uO1xyXG5hdHRyaWJ1dGUgZmxvYXQgcmV0dXJuTnVtYmVyO1xyXG5hdHRyaWJ1dGUgZmxvYXQgbnVtYmVyT2ZSZXR1cm5zO1xyXG5hdHRyaWJ1dGUgZmxvYXQgcG9pbnRTb3VyY2VJRDtcclxuYXR0cmlidXRlIHZlYzQgaW5kaWNlcztcclxuYXR0cmlidXRlIGZsb2F0IHNwYWNpbmc7XHJcblxyXG51bmlmb3JtIG1hdDQgbW9kZWxNYXRyaXg7XHJcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XHJcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xyXG51bmlmb3JtIG1hdDQgdmlld01hdHJpeDtcclxudW5pZm9ybSBtYXQ0IHVWaWV3SW52O1xyXG5cclxudW5pZm9ybSBmbG9hdCB1U2NyZWVuV2lkdGg7XHJcbnVuaWZvcm0gZmxvYXQgdVNjcmVlbkhlaWdodDtcclxudW5pZm9ybSBmbG9hdCBmb3Y7XHJcbnVuaWZvcm0gZmxvYXQgbmVhcjtcclxudW5pZm9ybSBmbG9hdCBmYXI7XHJcblxyXG51bmlmb3JtIGJvb2wgdURlYnVnO1xyXG5cclxudW5pZm9ybSBib29sIHVVc2VPcnRob2dyYXBoaWNDYW1lcmE7XHJcbnVuaWZvcm0gZmxvYXQgdU9ydGhvV2lkdGg7XHJcbnVuaWZvcm0gZmxvYXQgdU9ydGhvSGVpZ2h0O1xyXG5cclxuI2RlZmluZSBDTElQVEFTS19OT05FIDBcclxuI2RlZmluZSBDTElQVEFTS19ISUdITElHSFQgMVxyXG4jZGVmaW5lIENMSVBUQVNLX1NIT1dfSU5TSURFIDJcclxuI2RlZmluZSBDTElQVEFTS19TSE9XX09VVFNJREUgM1xyXG5cclxuI2RlZmluZSBDTElQTUVUSE9EX0lOU0lERV9BTlkgMFxyXG4jZGVmaW5lIENMSVBNRVRIT0RfSU5TSURFX0FMTCAxXHJcblxyXG51bmlmb3JtIGludCBjbGlwVGFzaztcclxudW5pZm9ybSBpbnQgY2xpcE1ldGhvZDtcclxuXHJcbiNpZiBkZWZpbmVkKG51bV9jbGlwYm94ZXMpICYmIG51bV9jbGlwYm94ZXMgPiAwXHJcblx0dW5pZm9ybSBtYXQ0IGNsaXBCb3hlc1tudW1fY2xpcGJveGVzXTtcclxuI2VuZGlmXHJcblxyXG4jaWYgZGVmaW5lZChudW1fY2xpcHNwaGVyZXMpICYmIG51bV9jbGlwc3BoZXJlcyA+IDBcclxuXHR1bmlmb3JtIG1hdDQgdUNsaXBTcGhlcmVzW251bV9jbGlwc3BoZXJlc107XHJcbiNlbmRpZlxyXG5cclxuI2lmIGRlZmluZWQobnVtX2NsaXBwb2x5Z29ucykgJiYgbnVtX2NsaXBwb2x5Z29ucyA+IDBcclxuXHR1bmlmb3JtIGludCB1Q2xpcFBvbHlnb25WQ291bnRbbnVtX2NsaXBwb2x5Z29uc107XHJcblx0dW5pZm9ybSB2ZWMzIHVDbGlwUG9seWdvblZlcnRpY2VzW251bV9jbGlwcG9seWdvbnMgKiA4XTtcclxuXHR1bmlmb3JtIG1hdDQgdUNsaXBQb2x5Z29uV1ZQW251bV9jbGlwcG9seWdvbnNdO1xyXG4jZW5kaWZcclxuXHJcbnVuaWZvcm0gZmxvYXQgc2l6ZTtcclxudW5pZm9ybSBmbG9hdCBtaW5TaXplO1xyXG51bmlmb3JtIGZsb2F0IG1heFNpemU7XHJcblxyXG51bmlmb3JtIGZsb2F0IHVQQ0luZGV4O1xyXG51bmlmb3JtIGZsb2F0IHVPY3RyZWVTcGFjaW5nO1xyXG51bmlmb3JtIGZsb2F0IHVOb2RlU3BhY2luZztcclxudW5pZm9ybSBmbG9hdCB1T2N0cmVlU2l6ZTtcclxudW5pZm9ybSB2ZWMzIHVCQlNpemU7XHJcbnVuaWZvcm0gZmxvYXQgdUxldmVsO1xyXG51bmlmb3JtIGZsb2F0IHVWTlN0YXJ0O1xyXG51bmlmb3JtIGJvb2wgdUlzTGVhZk5vZGU7XHJcblxyXG51bmlmb3JtIHZlYzMgdUNvbG9yO1xyXG51bmlmb3JtIGZsb2F0IHVPcGFjaXR5O1xyXG5cclxudW5pZm9ybSB2ZWMyIGVsZXZhdGlvblJhbmdlO1xyXG51bmlmb3JtIHZlYzIgaW50ZW5zaXR5UmFuZ2U7XHJcbnVuaWZvcm0gZmxvYXQgaW50ZW5zaXR5R2FtbWE7XHJcbnVuaWZvcm0gZmxvYXQgaW50ZW5zaXR5Q29udHJhc3Q7XHJcbnVuaWZvcm0gZmxvYXQgaW50ZW5zaXR5QnJpZ2h0bmVzcztcclxudW5pZm9ybSBmbG9hdCByZ2JHYW1tYTtcclxudW5pZm9ybSBmbG9hdCByZ2JDb250cmFzdDtcclxudW5pZm9ybSBmbG9hdCByZ2JCcmlnaHRuZXNzO1xyXG51bmlmb3JtIGZsb2F0IHVUcmFuc2l0aW9uO1xyXG51bmlmb3JtIGZsb2F0IHdSR0I7XHJcbnVuaWZvcm0gZmxvYXQgd0ludGVuc2l0eTtcclxudW5pZm9ybSBmbG9hdCB3RWxldmF0aW9uO1xyXG51bmlmb3JtIGZsb2F0IHdDbGFzc2lmaWNhdGlvbjtcclxudW5pZm9ybSBmbG9hdCB3UmV0dXJuTnVtYmVyO1xyXG51bmlmb3JtIGZsb2F0IHdTb3VyY2VJRDtcclxuXHJcbnVuaWZvcm0gdmVjMyB1U2hhZG93Q29sb3I7XHJcblxyXG51bmlmb3JtIHNhbXBsZXIyRCB2aXNpYmxlTm9kZXM7XHJcbnVuaWZvcm0gc2FtcGxlcjJEIGdyYWRpZW50O1xyXG51bmlmb3JtIHNhbXBsZXIyRCBjbGFzc2lmaWNhdGlvbkxVVDtcclxuXHJcbiNpZiBkZWZpbmVkKG51bV9zaGFkb3dtYXBzKSAmJiBudW1fc2hhZG93bWFwcyA+IDBcclxuXHR1bmlmb3JtIHNhbXBsZXIyRCB1U2hhZG93TWFwW251bV9zaGFkb3dtYXBzXTtcclxuXHR1bmlmb3JtIG1hdDQgdVNoYWRvd1dvcmxkVmlld1tudW1fc2hhZG93bWFwc107XHJcblx0dW5pZm9ybSBtYXQ0IHVTaGFkb3dQcm9qW251bV9zaGFkb3dtYXBzXTtcclxuI2VuZGlmXHJcblxyXG4jaWYgZGVmaW5lZCBudW1faGlkZGVuY2xhc3NpZmljYXRpb25zICYmIG51bV9oaWRkZW5jbGFzc2lmaWNhdGlvbnMgPiAwXHJcblx0dW5pZm9ybSBmbG9hdCBoaWRkZW5DbGFzc2lmaWNhdGlvbnNbbnVtX2hpZGRlbmNsYXNzaWZpY2F0aW9uc107XHJcbiNlbmRpZlxyXG5cclxuI2lmIGRlZmluZWQgbnVtX2hpZGRlbnBvaW50c291cmNlaWRzICYmIG51bV9oaWRkZW5wb2ludHNvdXJjZWlkcyA+IDBcclxuICB1bmlmb3JtIHNhbXBsZXIyRCBoaWRkZW5Qb2ludFNvdXJjZUlEcztcclxuI2VuZGlmXHJcblxyXG51bmlmb3JtIGZsb2F0IHNlbGVjdGVkUG9pbnRTb3VyY2VJRDtcclxudW5pZm9ybSB2ZWMzIHNlbGVjdGVkUG9pbnRTb3VyY2VJRENvbG9yO1xyXG5cclxudmFyeWluZyB2ZWMzIHZDb2xvcjtcclxudmFyeWluZyBmbG9hdCB2TG9nRGVwdGg7XHJcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xyXG52YXJ5aW5nIGZsb2F0IHZSYWRpdXM7XHJcbnZhcnlpbmcgZmxvYXQgdlBvaW50U2l6ZTtcclxuXHJcbmZsb2F0IHJvdW5kKGZsb2F0IG51bWJlcilcclxue1xyXG5cdHJldHVybiBmbG9vcihudW1iZXIgKyAwLjUpO1xyXG59XHJcblxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vL09DVFJFRVxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuI2lmIChkZWZpbmVkKGFkYXB0aXZlX3BvaW50X3NpemUpIHx8IGRlZmluZWQoY29sb3JfdHlwZV9sb2QpKSAmJiBkZWZpbmVkKHRyZWVfdHlwZV9vY3RyZWUpXHJcblxyXG5cdC8qKlxyXG5cdCAqIG51bWJlciBvZiAxLWJpdHMgdXAgdG8gaW5jbHVzaXZlIGluZGV4IHBvc2l0aW9uXHJcblx0ICogbnVtYmVyIGlzIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBhbiBpbnRlZ2VyIGluIHRoZSByYW5nZSAwLTI1NVxyXG5cdCAqL1xyXG5cdGludCBudW1iZXJPZk9uZXMoaW50IG51bWJlciwgaW50IGluZGV4KVxyXG5cdHtcclxuXHRcdGludCBudW1PbmVzID0gMDtcclxuXHRcdGludCB0bXAgPSAxMjg7XHJcblxyXG5cdFx0Zm9yKGludCBpID0gNzsgaSA+PSAwOyBpLS0pXHJcblx0XHR7XHJcblx0XHRcdGlmKG51bWJlciA+PSB0bXApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRudW1iZXIgPSBudW1iZXIgLSB0bXA7XHJcblxyXG5cdFx0XHRcdGlmKGkgPD0gaW5kZXgpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0bnVtT25lcysrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dG1wID0gdG1wIC8gMjtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbnVtT25lcztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIGNoZWNrcyB3aGV0aGVyIHRoZSBiaXQgYXQgaW5kZXggaXMgMVxyXG5cdCAqIG51bWJlciBpcyB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgYW4gaW50ZWdlciBpbiB0aGUgcmFuZ2UgMC0yNTVcclxuXHQgKi9cclxuXHRib29sIGlzQml0U2V0KGludCBudW1iZXIsIGludCBpbmRleClcclxuXHR7XHJcblx0XHQvL3dlaXJkIG11bHRpIGVsc2UgaWYgZHVlIHRvIGxhY2sgb2YgcHJvcGVyIGFycmF5LCBpbnQgYW5kIGJpdHdpc2Ugc3VwcG9ydCBpbiBXZWJHTCAxLjBcclxuXHRcdGludCBwb3dpID0gMTtcclxuXHJcblx0XHRpZihpbmRleCA9PSAwKVxyXG5cdFx0e1xyXG5cdFx0XHRwb3dpID0gMTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoaW5kZXggPT0gMSlcclxuXHRcdHtcclxuXHRcdFx0cG93aSA9IDI7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKGluZGV4ID09IDIpXHJcblx0XHR7XHJcblx0XHRcdHBvd2kgPSA0O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihpbmRleCA9PSAzKVxyXG5cdFx0e1xyXG5cdFx0XHRwb3dpID0gODtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoaW5kZXggPT0gNClcclxuXHRcdHtcclxuXHRcdFx0cG93aSA9IDE2O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihpbmRleCA9PSA1KVxyXG5cdFx0e1xyXG5cdFx0XHRwb3dpID0gMzI7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKGluZGV4ID09IDYpXHJcblx0XHR7XHJcblx0XHRcdHBvd2kgPSA2NDtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoaW5kZXggPT0gNylcclxuXHRcdHtcclxuXHRcdFx0cG93aSA9IDEyODtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGludCBuZHAgPSBudW1iZXIgLyBwb3dpO1xyXG5cclxuXHRcdHJldHVybiBtb2QoZmxvYXQobmRwKSwgMi4wKSAhPSAwLjA7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBmaW5kIHRoZSBMT0QgYXQgdGhlIHBvaW50IHBvc2l0aW9uXHJcblx0ICovXHJcblx0ZmxvYXQgZ2V0TE9EKClcclxuXHR7XHJcblx0XHR2ZWMzIG9mZnNldCA9IHZlYzMoMC4wLCAwLjAsIDAuMCk7XHJcblx0XHRpbnQgaU9mZnNldCA9IGludCh1Vk5TdGFydCk7XHJcblx0XHRmbG9hdCBkZXB0aCA9IHVMZXZlbDtcclxuXHJcblx0XHRmb3IoZmxvYXQgaSA9IDAuMDsgaSA8PSAzMC4wOyBpKyspXHJcblx0XHR7XHJcblx0XHRcdGZsb2F0IG5vZGVTaXplQXRMZXZlbCA9IHVPY3RyZWVTaXplIC8gcG93KDIuMCwgaSArIHVMZXZlbCArIDAuMCk7XHJcblxyXG5cdFx0XHR2ZWMzIGluZGV4M2QgPSAocG9zaXRpb24tb2Zmc2V0KSAvIG5vZGVTaXplQXRMZXZlbDtcclxuXHRcdFx0aW5kZXgzZCA9IGZsb29yKGluZGV4M2QgKyAwLjUpO1xyXG5cdFx0XHRpbnQgaW5kZXggPSBpbnQocm91bmQoNC4wICogaW5kZXgzZC54ICsgMi4wICogaW5kZXgzZC55ICsgaW5kZXgzZC56KSk7XHJcblxyXG5cdFx0XHR2ZWM0IHZhbHVlID0gdGV4dHVyZTJEKHZpc2libGVOb2RlcywgdmVjMihmbG9hdChpT2Zmc2V0KSAvIDIwNDguMCwgMC4wKSk7XHJcblx0XHRcdGludCBtYXNrID0gaW50KHJvdW5kKHZhbHVlLnIgKiAyNTUuMCkpO1xyXG5cclxuXHRcdFx0aWYoaXNCaXRTZXQobWFzaywgaW5kZXgpKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Ly90aGVyZSBhcmUgbW9yZSB2aXNpYmxlIGNoaWxkIG5vZGVzIGF0IHRoaXMgcG9zaXRpb25cclxuXHRcdFx0XHRpbnQgYWR2YW5jZUcgPSBpbnQocm91bmQodmFsdWUuZyAqIDI1NS4wKSkgKiAyNTY7XHJcblx0XHRcdFx0aW50IGFkdmFuY2VCID0gaW50KHJvdW5kKHZhbHVlLmIgKiAyNTUuMCkpO1xyXG5cdFx0XHRcdGludCBhZHZhbmNlQ2hpbGQgPSBudW1iZXJPZk9uZXMobWFzaywgaW5kZXggLSAxKTtcclxuXHRcdFx0XHRpbnQgYWR2YW5jZSA9IGFkdmFuY2VHICsgYWR2YW5jZUIgKyBhZHZhbmNlQ2hpbGQ7XHJcblxyXG5cdFx0XHRcdGlPZmZzZXQgPSBpT2Zmc2V0ICsgYWR2YW5jZTtcclxuXHJcblx0XHRcdFx0ZGVwdGgrKztcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvL25vIG1vcmUgdmlzaWJsZSBjaGlsZCBub2RlcyBhdCB0aGlzIHBvc2l0aW9uXHJcblx0XHRcdFx0cmV0dXJuIHZhbHVlLmEgKiAyNTUuMDtcclxuXHRcdFx0XHQvL3JldHVybiBkZXB0aDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0b2Zmc2V0ID0gb2Zmc2V0ICsgKHZlYzMoMS4wLCAxLjAsIDEuMCkgKiBub2RlU2l6ZUF0TGV2ZWwgKiAwLjUpICogaW5kZXgzZDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGVwdGg7XHJcblx0fVxyXG5cclxuXHRmbG9hdCBnZXRTcGFjaW5nKClcclxuXHR7XHJcblx0XHR2ZWMzIG9mZnNldCA9IHZlYzMoMC4wLCAwLjAsIDAuMCk7XHJcblx0XHRpbnQgaU9mZnNldCA9IGludCh1Vk5TdGFydCk7XHJcblx0XHRmbG9hdCBkZXB0aCA9IHVMZXZlbDtcclxuXHRcdGZsb2F0IHNwYWNpbmcgPSB1Tm9kZVNwYWNpbmc7XHJcblxyXG5cdFx0Zm9yKGZsb2F0IGkgPSAwLjA7IGkgPD0gMzAuMDsgaSsrKVxyXG5cdFx0e1xyXG5cdFx0XHRmbG9hdCBub2RlU2l6ZUF0TGV2ZWwgPSB1T2N0cmVlU2l6ZSAvIHBvdygyLjAsIGkgKyB1TGV2ZWwgKyAwLjApO1xyXG5cclxuXHRcdFx0dmVjMyBpbmRleDNkID0gKHBvc2l0aW9uLW9mZnNldCkgLyBub2RlU2l6ZUF0TGV2ZWw7XHJcblx0XHRcdGluZGV4M2QgPSBmbG9vcihpbmRleDNkICsgMC41KTtcclxuXHRcdFx0aW50IGluZGV4ID0gaW50KHJvdW5kKDQuMCAqIGluZGV4M2QueCArIDIuMCAqIGluZGV4M2QueSArIGluZGV4M2QueikpO1xyXG5cclxuXHRcdFx0dmVjNCB2YWx1ZSA9IHRleHR1cmUyRCh2aXNpYmxlTm9kZXMsIHZlYzIoZmxvYXQoaU9mZnNldCkgLyAyMDQ4LjAsIDAuMCkpO1xyXG5cdFx0XHRpbnQgbWFzayA9IGludChyb3VuZCh2YWx1ZS5yICogMjU1LjApKTtcclxuXHRcdFx0ZmxvYXQgc3BhY2luZ0ZhY3RvciA9IHZhbHVlLmE7XHJcblxyXG5cdFx0XHRpZihpID4gMC4wKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c3BhY2luZyA9IHNwYWNpbmcgLyAoMjU1LjAgKiBzcGFjaW5nRmFjdG9yKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYoaXNCaXRTZXQobWFzaywgaW5kZXgpKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Ly90aGVyZSBhcmUgbW9yZSB2aXNpYmxlIGNoaWxkIG5vZGVzIGF0IHRoaXMgcG9zaXRpb25cclxuXHRcdFx0XHRpbnQgYWR2YW5jZUcgPSBpbnQocm91bmQodmFsdWUuZyAqIDI1NS4wKSkgKiAyNTY7XHJcblx0XHRcdFx0aW50IGFkdmFuY2VCID0gaW50KHJvdW5kKHZhbHVlLmIgKiAyNTUuMCkpO1xyXG5cdFx0XHRcdGludCBhZHZhbmNlQ2hpbGQgPSBudW1iZXJPZk9uZXMobWFzaywgaW5kZXggLSAxKTtcclxuXHRcdFx0XHRpbnQgYWR2YW5jZSA9IGFkdmFuY2VHICsgYWR2YW5jZUIgKyBhZHZhbmNlQ2hpbGQ7XHJcblxyXG5cdFx0XHRcdGlPZmZzZXQgPSBpT2Zmc2V0ICsgYWR2YW5jZTtcclxuXHJcblx0XHRcdFx0ZGVwdGgrKztcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvL25vIG1vcmUgdmlzaWJsZSBjaGlsZCBub2RlcyBhdCB0aGlzIHBvc2l0aW9uXHJcblx0XHRcdFx0cmV0dXJuIHNwYWNpbmc7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdG9mZnNldCA9IG9mZnNldCArICh2ZWMzKDEuMCwgMS4wLCAxLjApICogbm9kZVNpemVBdExldmVsICogMC41KSAqIGluZGV4M2Q7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHNwYWNpbmc7XHJcblx0fVxyXG5cclxuXHRmbG9hdCBnZXRQb2ludFNpemVBdHRlbnVhdGlvbigpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHBvdygyLjAsIGdldExPRCgpKTtcclxuXHR9XHJcbiNlbmRpZlxyXG5cclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuLy9LRC1UUkVFXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiNpZiAoZGVmaW5lZChhZGFwdGl2ZV9wb2ludF9zaXplKSB8fCBkZWZpbmVkKGNvbG9yX3R5cGVfbG9kKSkgJiYgZGVmaW5lZCh0cmVlX3R5cGVfa2R0cmVlKVxyXG5cdGZsb2F0IGdldExPRCgpXHJcblx0e1xyXG5cdFx0dmVjMyBvZmZzZXQgPSB2ZWMzKDAuMCwgMC4wLCAwLjApO1xyXG5cdFx0ZmxvYXQgaU9mZnNldCA9IDAuMDtcclxuXHRcdGZsb2F0IGRlcHRoID0gMC4wO1xyXG5cclxuXHRcdHZlYzMgc2l6ZSA9IHVCQlNpemU7XHJcblx0XHR2ZWMzIHBvcyA9IHBvc2l0aW9uO1xyXG5cclxuXHRcdGZvcihmbG9hdCBpID0gMC4wOyBpIDw9IDEwMDAuMDsgaSsrKVxyXG5cdFx0e1xyXG5cdFx0XHR2ZWM0IHZhbHVlID0gdGV4dHVyZTJEKHZpc2libGVOb2RlcywgdmVjMihpT2Zmc2V0IC8gMjA0OC4wLCAwLjApKTtcclxuXHJcblx0XHRcdGludCBjaGlsZHJlbiA9IGludCh2YWx1ZS5yICogMjU1LjApO1xyXG5cdFx0XHRmbG9hdCBuZXh0ID0gdmFsdWUuZyAqIDI1NS4wO1xyXG5cdFx0XHRpbnQgc3BsaXQgPSBpbnQodmFsdWUuYiAqIDI1NS4wKTtcclxuXHJcblx0XHRcdGlmKG5leHQgPT0gMC4wKVxyXG5cdFx0XHR7XHJcblx0XHRcdCBcdHJldHVybiBkZXB0aDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmVjMyBzcGxpdHYgPSB2ZWMzKDAuMCwgMC4wLCAwLjApO1xyXG5cdFx0XHRpZihzcGxpdCA9PSAxKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c3BsaXR2LnggPSAxLjA7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZihzcGxpdCA9PSAyKVxyXG5cdFx0XHR7XHJcblx0XHRcdCBcdHNwbGl0di55ID0gMS4wO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoc3BsaXQgPT0gNClcclxuXHRcdFx0e1xyXG5cdFx0XHQgXHRzcGxpdHYueiA9IDEuMDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aU9mZnNldCA9IGlPZmZzZXQgKyBuZXh0O1xyXG5cclxuXHRcdFx0ZmxvYXQgZmFjdG9yID0gbGVuZ3RoKHBvcyAqIHNwbGl0diAvIHNpemUpO1xyXG5cclxuXHRcdFx0Ly9MZWZ0XHJcblx0XHRcdGlmKGZhY3RvciA8IDAuNSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKGNoaWxkcmVuID09IDAgfHwgY2hpbGRyZW4gPT0gMilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRyZXR1cm4gZGVwdGg7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdC8vUmlnaHRcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cG9zID0gcG9zIC0gc2l6ZSAqIHNwbGl0diAqIDAuNTtcclxuXHRcdFx0XHRpZihjaGlsZHJlbiA9PSAwIHx8IGNoaWxkcmVuID09IDEpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0cmV0dXJuIGRlcHRoO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZihjaGlsZHJlbiA9PSAzKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGlPZmZzZXQgPSBpT2Zmc2V0ICsgMS4wO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c2l6ZSA9IHNpemUgKiAoKDEuMCAtIChzcGxpdHYgKyAxLjApIC8gMi4wKSArIDAuNSk7XHJcblx0XHRcdGRlcHRoKys7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRlcHRoO1xyXG5cdH1cclxuXHJcblx0ZmxvYXQgZ2V0UG9pbnRTaXplQXR0ZW51YXRpb24oKVxyXG5cdHtcclxuXHRcdHJldHVybiAwLjUgKiBwb3coMS4zLCBnZXRMT0QoKSk7XHJcblx0fVxyXG4jZW5kaWZcclxuXHJcbi8vZm9ybXVsYSBhZGFwdGVkIGZyb206IGh0dHA6Ly93d3cuZGZzdHVkaW9zLmNvLnVrL2FydGljbGVzL3Byb2dyYW1taW5nL2ltYWdlLXByb2dyYW1taW5nLWFsZ29yaXRobXMvaW1hZ2UtcHJvY2Vzc2luZy1hbGdvcml0aG1zLXBhcnQtNS1jb250cmFzdC1hZGp1c3RtZW50L1xyXG5mbG9hdCBnZXRDb250cmFzdEZhY3RvcihmbG9hdCBjb250cmFzdClcclxue1xyXG5cdHJldHVybiAoMS4wMTU4NzMwMTU4NzMwMTU2ICogKGNvbnRyYXN0ICsgMS4wKSkgLyAoMS4wMTU4NzMwMTU4NzMwMTU2IC0gY29udHJhc3QpO1xyXG59XHJcblxyXG52ZWMzIGdldFJHQigpXHJcbntcclxuXHR2ZWMzIHJnYiA9IGNvbG9yO1xyXG5cclxuXHRyZ2IgPSBwb3cocmdiLCB2ZWMzKHJnYkdhbW1hKSk7XHJcblx0cmdiID0gcmdiICsgcmdiQnJpZ2h0bmVzcztcclxuXHRyZ2IgPSBjbGFtcChyZ2IsIDAuMCwgMS4wKTtcclxuXHJcblx0cmV0dXJuIHJnYjtcclxufVxyXG5cclxuZmxvYXQgZ2V0SW50ZW5zaXR5KClcclxue1xyXG5cdGZsb2F0IHcgPSAoaW50ZW5zaXR5IC0gaW50ZW5zaXR5UmFuZ2UueCkgLyAoaW50ZW5zaXR5UmFuZ2UueSAtIGludGVuc2l0eVJhbmdlLngpO1xyXG5cdHcgPSBwb3codywgaW50ZW5zaXR5R2FtbWEpO1xyXG5cdHcgPSB3ICsgaW50ZW5zaXR5QnJpZ2h0bmVzcztcclxuXHR3ID0gKHcgLSAwLjUpICogZ2V0Q29udHJhc3RGYWN0b3IoaW50ZW5zaXR5Q29udHJhc3QpICsgMC41O1xyXG5cdHcgPSBjbGFtcCh3LCAwLjAsIDEuMCk7XHJcblxyXG5cdHJldHVybiB3O1xyXG59XHJcblxyXG52ZWMzIGdldEVsZXZhdGlvbigpXHJcbntcclxuXHR2ZWM0IHdvcmxkID0gbW9kZWxNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XHJcblx0ZmxvYXQgdyA9ICh3b3JsZC56IC0gZWxldmF0aW9uUmFuZ2UueCkgLyAoZWxldmF0aW9uUmFuZ2UueSAtIGVsZXZhdGlvblJhbmdlLngpO1xyXG5cdHJldHVybiB0ZXh0dXJlMkQoZ3JhZGllbnQsIHZlYzIodywxLjAtdykpLnJnYjtcclxufVxyXG5cclxudmVjNCBnZXRDbGFzc2lmaWNhdGlvbigpXHJcbntcclxuXHR2ZWMyIHV2ID0gdmVjMihjbGFzc2lmaWNhdGlvbiAvIDI1NS4wLCAwLjUpO1xyXG5cdHJldHVybiB0ZXh0dXJlMkQoY2xhc3NpZmljYXRpb25MVVQsIHV2KTtcclxufVxyXG5cclxudmVjMyBnZXRSZXR1cm5OdW1iZXIoKVxyXG57XHJcblx0aWYobnVtYmVyT2ZSZXR1cm5zID09IDEuMClcclxuXHR7XHJcblx0XHRyZXR1cm4gdmVjMygxLjAsIDEuMCwgMC4wKTtcclxuXHR9XHJcblx0ZWxzZVxyXG5cdHtcclxuXHRcdGlmKHJldHVybk51bWJlciA9PSAxLjApXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiB2ZWMzKDEuMCwgMC4wLCAwLjApO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihyZXR1cm5OdW1iZXIgPT0gbnVtYmVyT2ZSZXR1cm5zKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gdmVjMygwLjAsIDAuMCwgMS4wKTtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIHZlYzMoMC4wLCAxLjAsIDAuMCk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG52ZWMzIGdldFNvdXJjZUlEKClcclxue1xyXG5cdGZsb2F0IHcgPSBtb2QocG9pbnRTb3VyY2VJRCwgMTAuMCkgLyAxMC4wO1xyXG5cdHJldHVybiB0ZXh0dXJlMkQoZ3JhZGllbnQsIHZlYzIodywxLjAgLSB3KSkucmdiO1xyXG59XHJcblxyXG52ZWMzIGdldENvbXBvc2l0ZUNvbG9yKClcclxue1xyXG5cdHZlYzMgYztcclxuXHRmbG9hdCB3O1xyXG5cclxuXHRjICs9IHdSR0IgKiBnZXRSR0IoKTtcclxuXHR3ICs9IHdSR0I7XHJcblxyXG5cdGMgKz0gd0ludGVuc2l0eSAqIGdldEludGVuc2l0eSgpICogdmVjMygxLjAsIDEuMCwgMS4wKTtcclxuXHR3ICs9IHdJbnRlbnNpdHk7XHJcblxyXG5cdGMgKz0gd0VsZXZhdGlvbiAqIGdldEVsZXZhdGlvbigpO1xyXG5cdHcgKz0gd0VsZXZhdGlvbjtcclxuXHJcblx0YyArPSB3UmV0dXJuTnVtYmVyICogZ2V0UmV0dXJuTnVtYmVyKCk7XHJcblx0dyArPSB3UmV0dXJuTnVtYmVyO1xyXG5cclxuXHRjICs9IHdTb3VyY2VJRCAqIGdldFNvdXJjZUlEKCk7XHJcblx0dyArPSB3U291cmNlSUQ7XHJcblxyXG5cdHZlYzQgY2wgPSB3Q2xhc3NpZmljYXRpb24gKiBnZXRDbGFzc2lmaWNhdGlvbigpO1xyXG4gIGMgKz0gY2wuYSAqIGNsLnJnYjtcclxuXHR3ICs9IHdDbGFzc2lmaWNhdGlvbiAqIGNsLmE7XHJcblxyXG5cdGMgPSBjIC8gdztcclxuXHJcblx0aWYodyA9PSAwLjApXHJcblx0e1xyXG5cdFx0Z2xfUG9zaXRpb24gPSB2ZWM0KDEwMC4wLCAxMDAuMCwgMTAwLjAsIDAuMCk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gYztcclxufVxyXG5cclxudmVjMyBnZXRDb2xvcigpXHJcbntcclxuXHR2ZWMzIGNvbG9yO1xyXG5cclxuXHQjaWZkZWYgc2VsZWN0aW9uX3R5cGVfY29sb3JcclxuXHRpZiAocG9pbnRTb3VyY2VJRCA9PSBzZWxlY3RlZFBvaW50U291cmNlSUQpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHNlbGVjdGVkUG9pbnRTb3VyY2VJRENvbG9yO1xyXG5cdH1cclxuXHQjZW5kaWZcclxuXHJcblx0I2lmZGVmIGNvbG9yX3R5cGVfcmdiXHJcblx0XHRjb2xvciA9IGdldFJHQigpO1xyXG5cdCNlbGlmIGRlZmluZWQgY29sb3JfdHlwZV9oZWlnaHRcclxuXHRcdGNvbG9yID0gZ2V0RWxldmF0aW9uKCk7XHJcblx0I2VsaWYgZGVmaW5lZCBjb2xvcl90eXBlX3JnYl9oZWlnaHRcclxuXHRcdHZlYzMgY0hlaWdodCA9IGdldEVsZXZhdGlvbigpO1xyXG5cdFx0Y29sb3IgPSAoMS4wIC0gdVRyYW5zaXRpb24pICogZ2V0UkdCKCkgKyB1VHJhbnNpdGlvbiAqIGNIZWlnaHQ7XHJcblx0I2VsaWYgZGVmaW5lZCBjb2xvcl90eXBlX2RlcHRoXHJcblx0XHRmbG9hdCBsaW5lYXJEZXB0aCA9IGdsX1Bvc2l0aW9uLnc7XHJcblx0XHRmbG9hdCBleHBEZXB0aCA9IChnbF9Qb3NpdGlvbi56IC8gZ2xfUG9zaXRpb24udykgKiAwLjUgKyAwLjU7XHJcblx0XHRjb2xvciA9IHZlYzMobGluZWFyRGVwdGgsIGV4cERlcHRoLCAwLjApO1xyXG5cdCNlbGlmIGRlZmluZWQgY29sb3JfdHlwZV9pbnRlbnNpdHlcclxuXHRcdGZsb2F0IHcgPSBnZXRJbnRlbnNpdHkoKTtcclxuXHRcdGNvbG9yID0gdmVjMyh3LCB3LCB3KTtcclxuXHQjZWxpZiBkZWZpbmVkIGNvbG9yX3R5cGVfaW50ZW5zaXR5X2dyYWRpZW50XHJcblx0XHRmbG9hdCB3ID0gZ2V0SW50ZW5zaXR5KCk7XHJcblx0XHRjb2xvciA9IHRleHR1cmUyRChncmFkaWVudCwgdmVjMih3LDEuMC13KSkucmdiO1xyXG5cdCNlbGlmIGRlZmluZWQgY29sb3JfdHlwZV9jb2xvclxyXG5cdFx0Y29sb3IgPSB1Q29sb3I7XHJcblx0I2VsaWYgZGVmaW5lZCBjb2xvcl90eXBlX2xvZFxyXG5cdFx0ZmxvYXQgZGVwdGggPSBnZXRMT0QoKTtcclxuXHRcdGZsb2F0IHcgPSBkZXB0aCAvIDEwLjA7XHJcblx0XHRjb2xvciA9IHRleHR1cmUyRChncmFkaWVudCwgdmVjMih3LDEuMC13KSkucmdiO1xyXG5cdCNlbGlmIGRlZmluZWQgY29sb3JfdHlwZV9wb2ludF9pbmRleFxyXG5cdFx0Y29sb3IgPSBpbmRpY2VzLnJnYjtcclxuXHQjZWxpZiBkZWZpbmVkIGNvbG9yX3R5cGVfY2xhc3NpZmljYXRpb25cclxuXHRcdHZlYzQgY2wgPSBnZXRDbGFzc2lmaWNhdGlvbigpO1xyXG5cdFx0Y29sb3IgPSBjbC5yZ2I7XHJcblx0I2VsaWYgZGVmaW5lZCBjb2xvcl90eXBlX3JldHVybl9udW1iZXJcclxuXHRcdGNvbG9yID0gZ2V0UmV0dXJuTnVtYmVyKCk7XHJcblx0I2VsaWYgZGVmaW5lZCBjb2xvcl90eXBlX3NvdXJjZVxyXG5cdFx0Y29sb3IgPSBnZXRTb3VyY2VJRCgpO1xyXG5cdCNlbGlmIGRlZmluZWQgY29sb3JfdHlwZV9ub3JtYWxcclxuXHRcdGNvbG9yID0gKG1vZGVsTWF0cml4ICogdmVjNChub3JtYWwsIDAuMCkpLnh5ejtcclxuXHQjZWxpZiBkZWZpbmVkIGNvbG9yX3R5cGVfcGhvbmdcclxuXHRcdGNvbG9yID0gY29sb3I7XHJcblx0I2VsaWYgZGVmaW5lZCBjb2xvcl90eXBlX2NvbXBvc2l0ZVxyXG5cdFx0Y29sb3IgPSBnZXRDb21wb3NpdGVDb2xvcigpO1xyXG5cdCNlbmRpZlxyXG5cclxuXHRpZiAocG9pbnRTb3VyY2VJRCA9PSBzZWxlY3RlZFBvaW50U291cmNlSUQpXHJcblx0e1xyXG5cdFx0Y29sb3JbMF0gPSBtaW4oY29sb3JbMF0gKyAwLjIsIDEuMCk7XHJcblx0XHRjb2xvclsxXSA9IG1pbihjb2xvclsxXSArIDAuMiwgMS4wKTtcclxuXHRcdGNvbG9yWzJdID0gbWluKGNvbG9yWzJdICsgMC4yLCAxLjApO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIGNvbG9yO1xyXG59XHJcblxyXG5mbG9hdCBnZXRQb2ludFNpemUoKVxyXG57XHJcblx0ZmxvYXQgcG9pbnRTaXplID0gMS4wO1xyXG5cclxuXHRmbG9hdCBzbG9wZSA9IHRhbihmb3YgLyAyLjApO1xyXG5cdGZsb2F0IHByb2pGYWN0b3IgPSAtMC41ICogdVNjcmVlbkhlaWdodCAvIChzbG9wZSAqIHZWaWV3UG9zaXRpb24ueik7XHJcblxyXG5cdGZsb2F0IHIgPSB1T2N0cmVlU3BhY2luZyAqIDEuNztcclxuXHR2UmFkaXVzID0gcjtcclxuXHJcblx0I2lmIGRlZmluZWQgZml4ZWRfcG9pbnRfc2l6ZVxyXG5cdFx0cG9pbnRTaXplID0gc2l6ZTtcclxuXHQjZWxpZiBkZWZpbmVkIGF0dGVudWF0ZWRfcG9pbnRfc2l6ZVxyXG5cdFx0aWYodVVzZU9ydGhvZ3JhcGhpY0NhbWVyYSlcclxuXHRcdHtcclxuXHRcdFx0cG9pbnRTaXplID0gc2l6ZTtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0cG9pbnRTaXplID0gc2l6ZSAqIHNwYWNpbmcgKiBwcm9qRmFjdG9yO1xyXG5cdFx0fVxyXG5cdCNlbGlmIGRlZmluZWQgYWRhcHRpdmVfcG9pbnRfc2l6ZVxyXG5cdFx0aWYodVVzZU9ydGhvZ3JhcGhpY0NhbWVyYSlcclxuXHRcdHtcclxuXHRcdFx0ZmxvYXQgd29ybGRTcGFjZVNpemUgPSAxLjAgKiBzaXplICogciAvIGdldFBvaW50U2l6ZUF0dGVudWF0aW9uKCk7XHJcblx0XHRcdHBvaW50U2l6ZSA9ICh3b3JsZFNwYWNlU2l6ZSAvIHVPcnRob1dpZHRoKSAqIHVTY3JlZW5XaWR0aDtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0aWYodUlzTGVhZk5vZGUgJiYgZmFsc2UpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRwb2ludFNpemUgPSBzaXplICogc3BhY2luZyAqIHByb2pGYWN0b3I7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZmxvYXQgd29ybGRTcGFjZVNpemUgPSAxLjAgKiBzaXplICogciAvIGdldFBvaW50U2l6ZUF0dGVudWF0aW9uKCk7XHJcblx0XHRcdFx0cG9pbnRTaXplID0gd29ybGRTcGFjZVNpemUgKiBwcm9qRmFjdG9yO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0I2VuZGlmXHJcblxyXG5cdHBvaW50U2l6ZSA9IG1heChtaW5TaXplLCBwb2ludFNpemUpO1xyXG5cdHBvaW50U2l6ZSA9IG1pbihtYXhTaXplLCBwb2ludFNpemUpO1xyXG5cclxuXHR2UmFkaXVzID0gcG9pbnRTaXplIC8gcHJvakZhY3RvcjtcclxuXHJcblx0cmV0dXJuIHBvaW50U2l6ZTtcclxufVxyXG5cclxuI2lmIGRlZmluZWQgbnVtX2NsaXBwb2x5Z29ucyAmJiBudW1fY2xpcHBvbHlnb25zID4gMFxyXG5cdGJvb2wgcG9pbnRJbkNsaXBQb2x5Z29uKHZlYzMgcG9pbnQsIGludCBwb2x5SWR4KVxyXG5cdHtcclxuXHRcdG1hdDQgd3ZwID0gdUNsaXBQb2x5Z29uV1ZQW3BvbHlJZHhdO1xyXG5cclxuXHRcdHZlYzQgcG9pbnROREMgPSB3dnAgKiB2ZWM0KHBvaW50LCAxLjApO1xyXG5cdFx0cG9pbnROREMueHkgPSBwb2ludE5EQy54eSAvIHBvaW50TkRDLnc7XHJcblxyXG5cdFx0aW50IGogPSB1Q2xpcFBvbHlnb25WQ291bnRbcG9seUlkeF0gLSAxO1xyXG5cdFx0Ym9vbCBjID0gZmFsc2U7XHJcblx0XHRmb3IoaW50IGkgPSAwOyBpIDwgODsgaSsrKVxyXG5cdFx0e1xyXG5cdFx0XHRpZihpID09IHVDbGlwUG9seWdvblZDb3VudFtwb2x5SWR4XSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2ZWMzIHZlcnRpID0gdUNsaXBQb2x5Z29uVmVydGljZXNbcG9seUlkeCAqIDggKyBpXTtcclxuXHRcdFx0dmVjMyB2ZXJ0aiA9IHVDbGlwUG9seWdvblZlcnRpY2VzW3BvbHlJZHggKiA4ICsgal07XHJcblxyXG5cdFx0XHRpZigoKHZlcnRpLnkgPiBwb2ludE5EQy55KSAhPSAodmVydGoueSA+IHBvaW50TkRDLnkpKSAmJiAocG9pbnROREMueCA8ICh2ZXJ0ai54LXZlcnRpLngpICogKHBvaW50TkRDLnktdmVydGkueSkgLyAodmVydGoueS12ZXJ0aS55KSArIHZlcnRpLngpKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0YyA9ICFjO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRqID0gaTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gYztcclxuXHR9XHJcbiNlbmRpZlxyXG5cclxudm9pZCBkb0NsaXBwaW5nKClcclxue1xyXG5cdCNpZiAhZGVmaW5lZCBjb2xvcl90eXBlX2NvbXBvc2l0ZVxyXG5cdFx0dmVjNCBjbCA9IGdldENsYXNzaWZpY2F0aW9uKCk7XHJcblx0XHRpZihjbC5hID09IDAuMClcclxuXHRcdHtcclxuXHRcdFx0Z2xfUG9zaXRpb24gPSB2ZWM0KDEwMC4wLCAxMDAuMCwgMTAwLjAsIDAuMCk7XHJcblxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0I2VuZGlmXHJcblxyXG5cdGludCBjbGlwVm9sdW1lc0NvdW50ID0gMDtcclxuXHRpbnQgaW5zaWRlQ291bnQgPSAwO1xyXG5cclxuXHQjaWYgZGVmaW5lZChudW1fY2xpcGJveGVzKSAmJiBudW1fY2xpcGJveGVzID4gMFxyXG5cdFx0Zm9yKGludCBpID0gMDsgaSA8IG51bV9jbGlwYm94ZXM7IGkrKylcclxuXHRcdHtcclxuXHRcdFx0dmVjNCBjbGlwUG9zaXRpb24gPSBjbGlwQm94ZXNbaV0gKiBtb2RlbE1hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcclxuXHRcdFx0Ym9vbCBpbnNpZGUgPSAtMC41IDw9IGNsaXBQb3NpdGlvbi54ICYmIGNsaXBQb3NpdGlvbi54IDw9IDAuNTtcclxuXHRcdFx0aW5zaWRlID0gaW5zaWRlICYmIC0wLjUgPD0gY2xpcFBvc2l0aW9uLnkgJiYgY2xpcFBvc2l0aW9uLnkgPD0gMC41O1xyXG5cdFx0XHRpbnNpZGUgPSBpbnNpZGUgJiYgLTAuNSA8PSBjbGlwUG9zaXRpb24ueiAmJiBjbGlwUG9zaXRpb24ueiA8PSAwLjU7XHJcblxyXG5cdFx0XHRpbnNpZGVDb3VudCA9IGluc2lkZUNvdW50ICsgKGluc2lkZSA/IDEgOiAwKTtcclxuXHRcdFx0Y2xpcFZvbHVtZXNDb3VudCsrO1xyXG5cdFx0fVxyXG5cdCNlbmRpZlxyXG5cclxuXHQjaWYgZGVmaW5lZChudW1fY2xpcHBvbHlnb25zKSAmJiBudW1fY2xpcHBvbHlnb25zID4gMFxyXG5cdFx0Zm9yKGludCBpID0gMDsgaSA8IG51bV9jbGlwcG9seWdvbnM7IGkrKylcclxuXHRcdHtcclxuXHRcdFx0Ym9vbCBpbnNpZGUgPSBwb2ludEluQ2xpcFBvbHlnb24ocG9zaXRpb24sIGkpO1xyXG5cclxuXHRcdFx0aW5zaWRlQ291bnQgPSBpbnNpZGVDb3VudCArIChpbnNpZGUgPyAxIDogMCk7XHJcblx0XHRcdGNsaXBWb2x1bWVzQ291bnQrKztcclxuXHRcdH1cclxuXHQjZW5kaWZcclxuXHJcblx0Ym9vbCBpbnNpZGVBbnkgPSBpbnNpZGVDb3VudCA+IDA7XHJcblx0Ym9vbCBpbnNpZGVBbGwgPSAoY2xpcFZvbHVtZXNDb3VudCA+IDApICYmIChjbGlwVm9sdW1lc0NvdW50ID09IGluc2lkZUNvdW50KTtcclxuXHJcblx0aWYoY2xpcE1ldGhvZCA9PSBDTElQTUVUSE9EX0lOU0lERV9BTlkpXHJcblx0e1xyXG5cdFx0aWYoaW5zaWRlQW55ICYmIGNsaXBUYXNrID09IENMSVBUQVNLX0hJR0hMSUdIVClcclxuXHRcdHtcclxuXHRcdFx0dkNvbG9yLnIgKz0gMC41O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZighaW5zaWRlQW55ICYmIGNsaXBUYXNrID09IENMSVBUQVNLX1NIT1dfSU5TSURFKVxyXG5cdFx0e1xyXG5cdFx0XHRnbF9Qb3NpdGlvbiA9IHZlYzQoMTAwLjAsIDEwMC4wLCAxMDAuMCwgMS4wKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoaW5zaWRlQW55ICYmIGNsaXBUYXNrID09IENMSVBUQVNLX1NIT1dfT1VUU0lERSlcclxuXHRcdHtcclxuXHRcdFx0Z2xfUG9zaXRpb24gPSB2ZWM0KDEwMC4wLCAxMDAuMCwgMTAwLjAsIDEuMCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdGVsc2UgaWYoY2xpcE1ldGhvZCA9PSBDTElQTUVUSE9EX0lOU0lERV9BTEwpXHJcblx0e1xyXG5cdFx0aWYoaW5zaWRlQWxsICYmIGNsaXBUYXNrID09IENMSVBUQVNLX0hJR0hMSUdIVClcclxuXHRcdHtcclxuXHRcdFx0dkNvbG9yLnIgKz0gMC41O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZighaW5zaWRlQWxsICYmIGNsaXBUYXNrID09IENMSVBUQVNLX1NIT1dfSU5TSURFKVxyXG5cdFx0e1xyXG5cdFx0XHRnbF9Qb3NpdGlvbiA9IHZlYzQoMTAwLjAsIDEwMC4wLCAxMDAuMCwgMS4wKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoaW5zaWRlQWxsICYmIGNsaXBUYXNrID09IENMSVBUQVNLX1NIT1dfT1VUU0lERSlcclxuXHRcdHtcclxuXHRcdFx0Z2xfUG9zaXRpb24gPSB2ZWM0KDEwMC4wLCAxMDAuMCwgMTAwLjAsIDEuMCk7XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5ib29sIGlzSGlkZGVuQ2xhc3NpZmljYXRpb24oKVxyXG57XHJcblx0I2lmIGRlZmluZWQgbnVtX2hpZGRlbmNsYXNzaWZpY2F0aW9ucyAmJiBudW1faGlkZGVuY2xhc3NpZmljYXRpb25zID4gMFxyXG5cdGZvciAoaW50IGkgPSAwOyBpIDwgbnVtX2hpZGRlbmNsYXNzaWZpY2F0aW9uczsgaSsrKVxyXG5cdHtcclxuXHRcdGlmIChjbGFzc2lmaWNhdGlvbiA9PSBoaWRkZW5DbGFzc2lmaWNhdGlvbnNbaV0pXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHQjZW5kaWZcclxuXHJcblx0cmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5ib29sIGlzSGlkZGVuUG9pbnRTb3VyY2VJRCgpXHJcbntcclxuXHQjaWYgZGVmaW5lZCBudW1faGlkZGVucG9pbnRzb3VyY2VpZHMgJiYgbnVtX2hpZGRlbnBvaW50c291cmNlaWRzID4gMFxyXG5cdGZsb2F0IHggPSBtb2QocG9pbnRTb3VyY2VJRCwgMjU2LjApO1xyXG5cdGZsb2F0IHkgPSBmbG9vcihwb2ludFNvdXJjZUlEIC8gMjU2LjApO1xyXG5cdHZlYzIgeHkgPSB2ZWMyKHggLyAyNTUuMCwgeSAvIDI1NS4wKTtcclxuXHRmbG9hdCByID0gdGV4dHVyZTJEKGhpZGRlblBvaW50U291cmNlSURzLCB4eSkucjtcclxuXHJcblx0cmV0dXJuIHIgPT0gMS4wO1xyXG5cdCNlbmRpZlxyXG5cclxuXHRyZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbnZvaWQgbWFpbigpXHJcbntcclxuXHRpZiAoaXNIaWRkZW5DbGFzc2lmaWNhdGlvbigpIHx8IGlzSGlkZGVuUG9pbnRTb3VyY2VJRCgpKVxyXG5cdHtcclxuXHRcdHJldHVybjsgLy8gTm90ZTogJ2Rpc2NhcmQnIG9ubHkgc3VwcG9ydGVkIGluIGZyYWdtZW50IHNoYWRlcnNcclxuXHR9XHJcblxyXG5cdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQocG9zaXRpb24sIDEuMCk7XHJcblx0dlZpZXdQb3NpdGlvbiA9IG12UG9zaXRpb24ueHl6O1xyXG5cdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XHJcblxyXG5cdHZMb2dEZXB0aCA9IGxvZzIoLW12UG9zaXRpb24ueik7XHJcblxyXG5cdC8vUE9JTlQgU0laRVxyXG5cdGZsb2F0IHBvaW50U2l6ZSA9IGdldFBvaW50U2l6ZSgpO1xyXG5cdGdsX1BvaW50U2l6ZSA9IHBvaW50U2l6ZTtcclxuXHR2UG9pbnRTaXplID0gcG9pbnRTaXplO1xyXG5cclxuXHRgICsgVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfdmVydGV4ICsgZ2xzbGBcclxuXHJcblx0Ly9DT0xPUlxyXG5cdHZDb2xvciA9IGdldENvbG9yKCk7XHJcblxyXG5cdCNpZiBkZWZpbmVkIGhxX2RlcHRoX3Bhc3NcclxuXHRcdGZsb2F0IG9yaWdpbmFsRGVwdGggPSBnbF9Qb3NpdGlvbi53O1xyXG5cdFx0ZmxvYXQgYWRqdXN0ZWREZXB0aCA9IG9yaWdpbmFsRGVwdGggKyAyLjAgKiB2UmFkaXVzO1xyXG5cdFx0ZmxvYXQgYWRqdXN0ID0gYWRqdXN0ZWREZXB0aCAvIG9yaWdpbmFsRGVwdGg7XHJcblxyXG5cdFx0bXZQb3NpdGlvbi54eXogPSBtdlBvc2l0aW9uLnh5eiAqIGFkanVzdDtcclxuXHRcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XHJcblx0I2VuZGlmXHJcblxyXG5cdC8vQ0xJUFBJTkdcclxuXHRkb0NsaXBwaW5nKCk7XHJcblxyXG5cdCNpZiBkZWZpbmVkIG51bV9jbGlwc3BoZXJlcyAmJiBudW1fY2xpcHNwaGVyZXMgPiAwXHJcblx0XHRmb3IoaW50IGkgPSAwOyBpIDwgbnVtX2NsaXBzcGhlcmVzOyBpKyspXHJcblx0XHR7XHJcblx0XHRcdHZlYzQgc3BoZXJlTG9jYWwgPSB1Q2xpcFNwaGVyZXNbaV0gKiBtdlBvc2l0aW9uO1xyXG5cclxuXHRcdFx0ZmxvYXQgZGlzdGFuY2UgPSBsZW5ndGgoc3BoZXJlTG9jYWwueHl6KTtcclxuXHJcblx0XHRcdGlmKGRpc3RhbmNlIDwgMS4wKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZmxvYXQgdyA9IGRpc3RhbmNlO1xyXG5cdFx0XHRcdHZlYzMgY0dyYWRpZW50ID0gdGV4dHVyZTJEKGdyYWRpZW50LCB2ZWMyKHcsIDEuMCAtIHcpKS5yZ2I7XHJcblxyXG5cdFx0XHRcdHZDb2xvciA9IGNHcmFkaWVudDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdCNlbmRpZlxyXG5cclxuXHQjaWYgZGVmaW5lZCBudW1fc2hhZG93bWFwcyAmJiBudW1fc2hhZG93bWFwcyA+IDBcclxuXHJcblx0XHRjb25zdCBmbG9hdCBzbV9uZWFyID0gMC4xO1xyXG5cdFx0Y29uc3QgZmxvYXQgc21fZmFyID0gMTAwMDAuMDtcclxuXHJcblx0XHRmb3IoaW50IGkgPSAwOyBpIDwgbnVtX3NoYWRvd21hcHM7IGkrKylcclxuXHRcdHtcclxuXHRcdFx0dmVjMyB2aWV3UG9zID0gKHVTaGFkb3dXb3JsZFZpZXdbaV0gKiB2ZWM0KHBvc2l0aW9uLCAxLjApKS54eXo7XHJcblx0XHRcdGZsb2F0IGRpc3RhbmNlVG9MaWdodCA9IGFicyh2aWV3UG9zLnopO1xyXG5cclxuXHRcdFx0dmVjNCBwcm9qUG9zID0gdVNoYWRvd1Byb2pbaV0gKiB1U2hhZG93V29ybGRWaWV3W2ldICogdmVjNChwb3NpdGlvbiwgMSk7XHJcblx0XHRcdHZlYzMgbmMgPSBwcm9qUG9zLnh5eiAvIHByb2pQb3MudztcclxuXHJcblx0XHRcdGZsb2F0IHUgPSBuYy54ICogMC41ICsgMC41O1xyXG5cdFx0XHRmbG9hdCB2ID0gbmMueSAqIDAuNSArIDAuNTtcclxuXHJcblx0XHRcdHZlYzIgc2FtcGxlU3RlcCA9IHZlYzIoMS4wIC8gKDIuMCoxMDI0LjApLCAxLjAgLyAoMi4wKjEwMjQuMCkpICogMS41O1xyXG5cdFx0XHR2ZWMyIHNhbXBsZUxvY2F0aW9uc1s5XTtcclxuXHJcblx0XHRcdHNhbXBsZUxvY2F0aW9uc1swXSA9IHZlYzIoMC4wLCAwLjApO1xyXG5cdFx0XHRzYW1wbGVMb2NhdGlvbnNbMV0gPSBzYW1wbGVTdGVwO1xyXG5cdFx0XHRzYW1wbGVMb2NhdGlvbnNbMl0gPSAtc2FtcGxlU3RlcDtcclxuXHRcdFx0c2FtcGxlTG9jYXRpb25zWzNdID0gdmVjMihzYW1wbGVTdGVwLngsIC1zYW1wbGVTdGVwLnkpO1xyXG5cdFx0XHRzYW1wbGVMb2NhdGlvbnNbNF0gPSB2ZWMyKC1zYW1wbGVTdGVwLngsIHNhbXBsZVN0ZXAueSk7XHJcblx0XHRcdHNhbXBsZUxvY2F0aW9uc1s1XSA9IHZlYzIoMC4wLCBzYW1wbGVTdGVwLnkpO1xyXG5cdFx0XHRzYW1wbGVMb2NhdGlvbnNbNl0gPSB2ZWMyKDAuMCwgLXNhbXBsZVN0ZXAueSk7XHJcblx0XHRcdHNhbXBsZUxvY2F0aW9uc1s3XSA9IHZlYzIoc2FtcGxlU3RlcC54LCAwLjApO1xyXG5cdFx0XHRzYW1wbGVMb2NhdGlvbnNbOF0gPSB2ZWMyKC1zYW1wbGVTdGVwLngsIDAuMCk7XHJcblxyXG5cdFx0XHRmbG9hdCB2aXNpYmxlU2FtcGxlcyA9IDAuMDtcclxuXHRcdFx0ZmxvYXQgbnVtU2FtcGxlcyA9IDAuMDtcclxuXHJcblx0XHRcdGZsb2F0IGJpYXMgPSB2UmFkaXVzICogMi4wO1xyXG5cclxuXHRcdFx0Zm9yKGludCBqID0gMDsgaiA8IDk7IGorKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZlYzQgZGVwdGhNYXBWYWx1ZSA9IHRleHR1cmUyRCh1U2hhZG93TWFwW2ldLCB2ZWMyKHUsIHYpICsgc2FtcGxlTG9jYXRpb25zW2pdKTtcclxuXHJcblx0XHRcdFx0ZmxvYXQgbGluZWFyRGVwdGhGcm9tU00gPSBkZXB0aE1hcFZhbHVlLnggKyBiaWFzO1xyXG5cdFx0XHRcdGZsb2F0IGxpbmVhckRlcHRoRnJvbVZpZXdlciA9IGRpc3RhbmNlVG9MaWdodDtcclxuXHJcblx0XHRcdFx0aWYobGluZWFyRGVwdGhGcm9tU00gPiBsaW5lYXJEZXB0aEZyb21WaWV3ZXIpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmlzaWJsZVNhbXBsZXMgKz0gMS4wO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0bnVtU2FtcGxlcyArPSAxLjA7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZsb2F0IHZpc2liaWxpdHkgPSB2aXNpYmxlU2FtcGxlcyAvIG51bVNhbXBsZXM7XHJcblxyXG5cdFx0XHRpZih1IDwgMC4wIHx8IHUgPiAxLjAgfHwgdiA8IDAuMCB8fCB2ID4gMS4wIHx8IG5jLnggPCAtMS4wIHx8IG5jLnggPiAxLjAgfHwgbmMueSA8IC0xLjAgfHwgbmMueSA+IDEuMCB8fCBuYy56IDwgLTEuMCB8fCBuYy56ID4gMS4wKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Ly92Q29sb3IgPSB2ZWMzKDAuMCwgMC4wLCAwLjIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZDb2xvciA9IHZDb2xvciAqIHZpc2liaWxpdHkgKyB2Q29sb3IgKiB1U2hhZG93Q29sb3IgKiAoMS4wIC0gdmlzaWJpbGl0eSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0I2VuZGlmXHJcbn1gO1xyXG5cclxuLy9cInBvaW50Y2xvdWQuZnNcIlxyXG5TaGFkZXJzLmZyYWdtZW50ID0gZ2xzbGBcclxuXHJcbiNpZiBkZWZpbmVkIFVTRV9MT0dERVBUSEJVRl9FWFQgfHwgZGVmaW5lZCBwYXJhYm9sb2lkX3BvaW50X3NoYXBlXHJcblx0I2V4dGVuc2lvbiBHTF9FWFRfZnJhZ19kZXB0aCA6IGVuYWJsZVxyXG4jZW5kaWZcclxuXHJcbnByZWNpc2lvbiBoaWdocCBmbG9hdDtcclxucHJlY2lzaW9uIGhpZ2hwIGludDtcclxuXHJcbmAgKyBUSFJFRS5TaGFkZXJDaHVuay5jb21tb24gKyBgXHJcbmAgKyBUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50ICsgZ2xzbGBcclxuXHJcbnVuaWZvcm0gbWF0NCB2aWV3TWF0cml4O1xyXG51bmlmb3JtIG1hdDQgdVZpZXdJbnY7XHJcbnVuaWZvcm0gbWF0NCB1UHJvakludjtcclxudW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uO1xyXG5cclxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XHJcbnVuaWZvcm0gZmxvYXQgdU9wYWNpdHk7XHJcblxyXG51bmlmb3JtIGZsb2F0IGJsZW5kSGFyZG5lc3M7XHJcbnVuaWZvcm0gZmxvYXQgYmxlbmREZXB0aFN1cHBsZW1lbnQ7XHJcbnVuaWZvcm0gZmxvYXQgZm92O1xyXG51bmlmb3JtIGZsb2F0IHVTcGFjaW5nO1xyXG51bmlmb3JtIGZsb2F0IG5lYXI7XHJcbnVuaWZvcm0gZmxvYXQgZmFyO1xyXG51bmlmb3JtIGZsb2F0IHVQQ0luZGV4O1xyXG51bmlmb3JtIGZsb2F0IHVTY3JlZW5XaWR0aDtcclxudW5pZm9ybSBmbG9hdCB1U2NyZWVuSGVpZ2h0O1xyXG5cclxudmFyeWluZyB2ZWMzIHZDb2xvcjtcclxudmFyeWluZyBmbG9hdCB2TG9nRGVwdGg7XHJcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xyXG52YXJ5aW5nIGZsb2F0IHZSYWRpdXM7XHJcbnZhcnlpbmcgZmxvYXQgdlBvaW50U2l6ZTtcclxudmFyeWluZyB2ZWMzIHZQb3NpdGlvbjtcclxuXHJcbnZvaWQgbWFpbigpXHJcbntcclxuXHR2ZWMzIGNvbG9yID0gdkNvbG9yO1xyXG5cdGZsb2F0IGRlcHRoID0gZ2xfRnJhZ0Nvb3JkLno7XHJcblxyXG5cdCNpZiBkZWZpbmVkIGNpcmNsZV9wb2ludF9zaGFwZSB8fCBkZWZpbmVkIHBhcmFib2xvaWRfcG9pbnRfc2hhcGVcclxuXHRcdGZsb2F0IHUgPSAoMi4wICogZ2xfUG9pbnRDb29yZC54KSAtIDEuMDtcclxuXHRcdGZsb2F0IHYgPSAoMi4wICogZ2xfUG9pbnRDb29yZC55KSAtIDEuMDtcclxuXHQjZW5kaWZcclxuXHJcblx0I2lmIGRlZmluZWQgY2lyY2xlX3BvaW50X3NoYXBlXHJcblx0XHRmbG9hdCBjYyA9ICh1KnUpICsgKHYqdik7XHJcblx0XHRpZihjYyA+IDEuMClcclxuXHRcdHtcclxuXHRcdFx0ZGlzY2FyZDtcclxuXHRcdH1cclxuXHQjZW5kaWZcclxuXHJcblx0I2lmIGRlZmluZWQgY29sb3JfdHlwZV9wb2ludF9pbmRleFxyXG5cdFx0Z2xfRnJhZ0NvbG9yID0gdmVjNChjb2xvciwgdVBDSW5kZXggLyAyNTUuMCk7XHJcblx0I2Vsc2VcclxuXHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQoY29sb3IsIHVPcGFjaXR5KTtcclxuXHQjZW5kaWZcclxuXHJcblx0I2lmIGRlZmluZWQgcGFyYWJvbG9pZF9wb2ludF9zaGFwZVxyXG5cdFx0ZmxvYXQgd2kgPSAtKCB1KnUgKyB2KnYpO1xyXG5cdFx0dmVjNCBwb3MgPSB2ZWM0KHZWaWV3UG9zaXRpb24sIDEuMCk7XHJcblx0XHRwb3MueiArPSB3aSAqIHZSYWRpdXM7XHJcblx0XHRmbG9hdCBsaW5lYXJEZXB0aCA9IC1wb3MuejtcclxuXHRcdHBvcyA9IHByb2plY3Rpb25NYXRyaXggKiBwb3M7XHJcblx0XHRwb3MgPSBwb3MgLyBwb3MudztcclxuXHRcdGZsb2F0IGV4cERlcHRoID0gcG9zLno7XHJcblx0XHRkZXB0aCA9IChwb3MueiArIDEuMCkgLyAyLjA7XHJcblxyXG5cdFx0Z2xfRnJhZ0RlcHRoRVhUID0gZGVwdGg7XHJcblxyXG5cdFx0I2lmIGRlZmluZWQgY29sb3JfdHlwZV9kZXB0aFxyXG5cdFx0XHRjb2xvci5yID0gbGluZWFyRGVwdGg7XHJcblx0XHRcdGNvbG9yLmcgPSBleHBEZXB0aDtcclxuXHRcdCNlbmRpZlxyXG5cdCNlbmRpZlxyXG5cclxuXHRgICsgVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQgKyBnbHNsYFxyXG5cclxuXHQjaWYgZGVmaW5lZCB3ZWlnaHRlZF9zcGxhdHNcclxuXHRcdGZsb2F0IGRpc3RhbmNlID0gMi4wICogbGVuZ3RoKGdsX1BvaW50Q29vcmQueHkgLSAwLjUpO1xyXG5cdFx0ZmxvYXQgd2VpZ2h0ID0gbWF4KDAuMCwgMS4wIC0gZGlzdGFuY2UpO1xyXG5cdFx0d2VpZ2h0ID0gcG93KHdlaWdodCwgMS41KTtcclxuXHJcblx0XHRnbF9GcmFnQ29sb3IuYSA9IHdlaWdodDtcclxuXHRcdGdsX0ZyYWdDb2xvci54eXogPSBnbF9GcmFnQ29sb3IueHl6ICogd2VpZ2h0O1xyXG5cdCNlbmRpZlxyXG59YDtcclxuXHJcbmV4cG9ydCB7IFNoYWRlcnMgfTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5pbXBvcnQgeyBIZWxwZXJVdGlscyB9IGZyb20gXCIuLi8uLi91dGlscy9IZWxwZXJVdGlscy5qc1wiO1xyXG5pbXBvcnQgeyBHcmFkaWVudHMgfSBmcm9tIFwiLi4vLi4vR3JhZGllbnRzLmpzXCI7XHJcbmltcG9ydCB7IFNoYWRlcnMgfSBmcm9tIFwiLi4vLi4vU2hhZGVycy5qc1wiO1xyXG5pbXBvcnQgeyBUcmVlVHlwZSwgUG9pbnRDb2xvclR5cGUsIFBvaW50U2l6ZVR5cGUsIFBvaW50U2hhcGUsIENsYXNzaWZpY2F0aW9uLCBQb2ludFNlbGVjdGlvblR5cGUgfSBmcm9tIFwiLi4vLi4vUG90cmVlLmpzXCI7XHJcblxyXG5jbGFzcyBQb2ludENsb3VkTWF0ZXJpYWwgZXh0ZW5kcyBUSFJFRS5SYXdTaGFkZXJNYXRlcmlhbCB7XHJcblx0Y29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMudmlzaWJsZU5vZGVzVGV4dHVyZSA9IEhlbHBlclV0aWxzLmdlbmVyYXRlRGF0YVRleHR1cmUoMjA0OCwgMSwgbmV3IFRIUkVFLkNvbG9yKDB4ZmZmZmZmKSk7XHJcblx0XHR0aGlzLnZpc2libGVOb2Rlc1RleHR1cmUubWluRmlsdGVyID0gVEhSRUUuTmVhcmVzdEZpbHRlcjtcclxuXHRcdHRoaXMudmlzaWJsZU5vZGVzVGV4dHVyZS5tYWdGaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xyXG5cclxuXHRcdHZhciBnZXRWYWxpZCA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcblx0XHRcdGlmIChhICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRyZXR1cm4gYTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gYjtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgcG9pbnRTaXplID0gZ2V0VmFsaWQocGFyYW1ldGVycy5zaXplLCAxLjApO1xyXG5cdFx0dmFyIG1pblNpemUgPSBnZXRWYWxpZChwYXJhbWV0ZXJzLm1pblNpemUsIDIuMCk7XHJcblx0XHR2YXIgbWF4U2l6ZSA9IGdldFZhbGlkKHBhcmFtZXRlcnMubWF4U2l6ZSwgNTAuMCk7XHJcblx0XHR2YXIgdHJlZVR5cGUgPSBnZXRWYWxpZChwYXJhbWV0ZXJzLnRyZWVUeXBlLCBUcmVlVHlwZS5PQ1RSRUUpO1xyXG5cclxuXHRcdHRoaXMuX3BvaW50U2l6ZVR5cGUgPSBQb2ludFNpemVUeXBlLkZJWEVEO1xyXG5cdFx0dGhpcy5fc2hhcGUgPSBQb2ludFNoYXBlLlNRVUFSRTtcclxuXHRcdHRoaXMuX3BvaW50Q29sb3JUeXBlID0gUG9pbnRDb2xvclR5cGUuUkdCO1xyXG5cdFx0dGhpcy5fdXNlQ2xpcEJveCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5fd2VpZ2h0ZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMuX2dyYWRpZW50ID0gR3JhZGllbnRzLlNQRUNUUkFMO1xyXG5cdFx0dGhpcy5fdHJlZVR5cGUgPSB0cmVlVHlwZTtcclxuXHRcdHRoaXMuX3VzZUVETCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5fc25hcEVuYWJsZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMuX251bVNuYXBzaG90cyA9IDA7XHJcblx0XHR0aGlzLl9kZWZhdWx0SW50ZW5zaXR5UmFuZ2VDaGFuZ2VkID0gZmFsc2U7XHJcblx0XHR0aGlzLl9kZWZhdWx0RWxldmF0aW9uUmFuZ2VDaGFuZ2VkID0gZmFsc2U7XHJcblx0XHR0aGlzLl9wb2ludFNlbGVjdGlvblR5cGUgPSBQb2ludFNlbGVjdGlvblR5cGUuQlJJR0hUTkVTUztcclxuXHJcblx0XHR0aGlzLmNsaXBCb3hlcyA9IFtdO1xyXG5cdFx0dGhpcy5jbGlwUG9seWdvbnMgPSBbXTtcclxuXHJcblx0XHR0aGlzLmdyYWRpZW50VGV4dHVyZSA9IFBvaW50Q2xvdWRNYXRlcmlhbC5nZW5lcmF0ZUdyYWRpZW50VGV4dHVyZSh0aGlzLl9ncmFkaWVudCk7XHJcblx0XHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xyXG5cdFx0dGhpcy5mb2cgPSBmYWxzZTtcclxuXHRcdHRoaXMuZGVmaW5lcyA9IG5ldyBNYXAoKTtcclxuXHJcblx0XHR0aGlzLmF0dHJpYnV0ZXMgPVxyXG5cdFx0e1xyXG5cdFx0XHRwb3NpdGlvbjogeyB0eXBlOiAnZnYnLCB2YWx1ZTogW10gfSxcclxuXHRcdFx0Y29sb3I6IHsgdHlwZTogJ2Z2JywgdmFsdWU6IFtdIH0sXHJcblx0XHRcdG5vcm1hbDogeyB0eXBlOiAnZnYnLCB2YWx1ZTogW10gfSxcclxuXHRcdFx0aW50ZW5zaXR5OiB7IHR5cGU6ICdmJywgdmFsdWU6IFtdIH0sXHJcblx0XHRcdGNsYXNzaWZpY2F0aW9uOiB7IHR5cGU6ICdmJywgdmFsdWU6IFtdIH0sXHJcblx0XHRcdHJldHVybk51bWJlcjogeyB0eXBlOiAnZicsIHZhbHVlOiBbXSB9LFxyXG5cdFx0XHRudW1iZXJPZlJldHVybnM6IHsgdHlwZTogJ2YnLCB2YWx1ZTogW10gfSxcclxuXHRcdFx0cG9pbnRTb3VyY2VJRDogeyB0eXBlOiAnZicsIHZhbHVlOiBbXSB9LFxyXG5cdFx0XHRpbmRpY2VzOiB7IHR5cGU6ICdmdicsIHZhbHVlOiBbXSB9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIE5vdGU6IERvbid0IGZvcmdldCB0byB1cGRhdGUgR3JvdXAucmVuZGVyT2N0cmVlLCB0aGVzZSBhcmUgbm90IHRyYW5zZmVycmVkIHRvIHRoZSBzaGFkZXIgYXV0b21hdGljYWxseSFcclxuXHRcdHRoaXMudW5pZm9ybXMgPVxyXG5cdFx0e1xyXG5cdFx0XHRsZXZlbDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAuMCB9LFxyXG5cdFx0XHR2blN0YXJ0OiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMC4wIH0sXHJcblx0XHRcdHNwYWNpbmc6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAxLjAgfSxcclxuXHRcdFx0YmxlbmRIYXJkbmVzczogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDIuMCB9LFxyXG5cdFx0XHRibGVuZERlcHRoU3VwcGxlbWVudDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAuMCB9LFxyXG5cdFx0XHRmb3Y6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAxLjAgfSxcclxuXHRcdFx0c2NyZWVuV2lkdGg6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAxLjAgfSxcclxuXHRcdFx0c2NyZWVuSGVpZ2h0OiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMS4wIH0sXHJcblx0XHRcdG5lYXI6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwLjEgfSxcclxuXHRcdFx0ZmFyOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMS4wIH0sXHJcblx0XHRcdHVDb2xvcjogeyB0eXBlOiBcImNcIiwgdmFsdWU6IG5ldyBUSFJFRS5Db2xvcigweGZmZmZmZikgfSxcclxuXHRcdFx0dU9wYWNpdHk6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAxLjAgfSxcclxuXHRcdFx0c2l6ZTogeyB0eXBlOiBcImZcIiwgdmFsdWU6IHBvaW50U2l6ZSB9LFxyXG5cdFx0XHRtaW5TaXplOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogbWluU2l6ZSB9LFxyXG5cdFx0XHRtYXhTaXplOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogbWF4U2l6ZSB9LFxyXG5cdFx0XHRvY3RyZWVTaXplOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMCB9LFxyXG5cdFx0XHRiYlNpemU6IHsgdHlwZTogXCJmdlwiLCB2YWx1ZTogWzAsIDAsIDBdIH0sXHJcblx0XHRcdGVsZXZhdGlvblJhbmdlOiB7IHR5cGU6IFwiMmZ2XCIsIHZhbHVlOiBbMCwgMF0gfSxcclxuXHJcblx0XHRcdGNsaXBCb3hDb3VudDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAgfSxcclxuXHRcdFx0Ly9jbGlwU3BoZXJlQ291bnQ6IHt0eXBlOiBcImZcIiwgdmFsdWU6IDB9LFxyXG5cdFx0XHRjbGlwUG9seWdvbkNvdW50OiB7IHR5cGU6IFwiaVwiLCB2YWx1ZTogMCB9LFxyXG5cdFx0XHRjbGlwQm94ZXM6IHsgdHlwZTogXCJNYXRyaXg0ZnZcIiwgdmFsdWU6IFtdIH0sXHJcblx0XHRcdC8vY2xpcFNwaGVyZXM6IHt0eXBlOiBcIk1hdHJpeDRmdlwiLCB2YWx1ZTogW119LFxyXG5cdFx0XHRjbGlwUG9seWdvbnM6IHsgdHlwZTogXCIzZnZcIiwgdmFsdWU6IFtdIH0sXHJcblx0XHRcdGNsaXBQb2x5Z29uVkNvdW50OiB7IHR5cGU6IFwiaXZcIiwgdmFsdWU6IFtdIH0sXHJcblx0XHRcdGNsaXBQb2x5Z29uVlA6IHsgdHlwZTogXCJNYXRyaXg0ZnZcIiwgdmFsdWU6IFtdIH0sXHJcblxyXG5cdFx0XHR2aXNpYmxlTm9kZXM6IHsgdHlwZTogXCJ0XCIsIHZhbHVlOiB0aGlzLnZpc2libGVOb2Rlc1RleHR1cmUgfSxcclxuXHRcdFx0cGNJbmRleDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAgfSxcclxuXHRcdFx0Z3JhZGllbnQ6IHsgdHlwZTogXCJ0XCIsIHZhbHVlOiB0aGlzLmdyYWRpZW50VGV4dHVyZSB9LFxyXG5cdFx0XHRjbGFzc2lmaWNhdGlvbkxVVDogeyB0eXBlOiBcInRcIiwgdmFsdWU6IHRoaXMuY2xhc3NpZmljYXRpb25UZXh0dXJlIH0sXHJcblx0XHRcdHVIUURlcHRoTWFwOiB7IHR5cGU6IFwidFwiLCB2YWx1ZTogbnVsbCB9LFxyXG5cdFx0XHR0b01vZGVsOiB7IHR5cGU6IFwiTWF0cml4NGZcIiwgdmFsdWU6IFtdIH0sXHJcblx0XHRcdGRpZmZ1c2U6IHsgdHlwZTogXCJmdlwiLCB2YWx1ZTogWzEsIDEsIDFdIH0sXHJcblx0XHRcdHRyYW5zaXRpb246IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwLjUgfSxcclxuXHRcdFx0aW50ZW5zaXR5UmFuZ2U6IHsgdHlwZTogXCJmdlwiLCB2YWx1ZTogWzAsIDY1MDAwXSB9LFxyXG5cdFx0XHRpbnRlbnNpdHlHYW1tYTogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDEgfSxcclxuXHRcdFx0aW50ZW5zaXR5Q29udHJhc3Q6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwIH0sXHJcblx0XHRcdGludGVuc2l0eUJyaWdodG5lc3M6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwIH0sXHJcblx0XHRcdHJnYkdhbW1hOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMSB9LFxyXG5cdFx0XHRyZ2JDb250cmFzdDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAgfSxcclxuXHRcdFx0cmdiQnJpZ2h0bmVzczogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAgfSxcclxuXHRcdFx0d1JHQjogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAuNSB9LFxyXG5cdFx0XHR3SW50ZW5zaXR5OiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMCB9LFxyXG5cdFx0XHR3RWxldmF0aW9uOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMCB9LFxyXG5cdFx0XHR3Q2xhc3NpZmljYXRpb246IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwIH0sXHJcblx0XHRcdHdSZXR1cm5OdW1iZXI6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwIH0sXHJcblx0XHRcdHdTb3VyY2VJRDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAgfSxcclxuXHRcdFx0dXNlT3J0aG9ncmFwaGljQ2FtZXJhOiB7IHR5cGU6IFwiYlwiLCB2YWx1ZTogZmFsc2UgfSxcclxuXHRcdFx0Y2xpcFRhc2s6IHsgdHlwZTogXCJpXCIsIHZhbHVlOiAxIH0sXHJcblx0XHRcdGNsaXBNZXRob2Q6IHsgdHlwZTogXCJpXCIsIHZhbHVlOiAxIH0sXHJcblx0XHRcdHVTbmFwc2hvdDogeyB0eXBlOiBcInR2XCIsIHZhbHVlOiBbXSB9LFxyXG5cdFx0XHR1U25hcHNob3REZXB0aDogeyB0eXBlOiBcInR2XCIsIHZhbHVlOiBbXSB9LFxyXG5cdFx0XHR1U25hcFZpZXc6IHsgdHlwZTogXCJNYXRyaXg0ZnZcIiwgdmFsdWU6IFtdIH0sXHJcblx0XHRcdHVTbmFwUHJvajogeyB0eXBlOiBcIk1hdHJpeDRmdlwiLCB2YWx1ZTogW10gfSxcclxuXHRcdFx0dVNuYXBQcm9qSW52OiB7IHR5cGU6IFwiTWF0cml4NGZ2XCIsIHZhbHVlOiBbXSB9LFxyXG5cdFx0XHR1U25hcFZpZXdJbnY6IHsgdHlwZTogXCJNYXRyaXg0ZnZcIiwgdmFsdWU6IFtdIH0sXHJcblx0XHRcdHVTaGFkb3dDb2xvcjogeyB0eXBlOiBcIjNmdlwiLCB2YWx1ZTogWzAsIDAsIDBdIH0sXHJcblxyXG5cdFx0XHR1RmlsdGVyUmV0dXJuTnVtYmVyUmFuZ2U6IHsgdHlwZTogXCJmdlwiLCB2YWx1ZTogWzAsIDddIH0sXHJcblx0XHRcdHVGaWx0ZXJOdW1iZXJPZlJldHVybnNSYW5nZTogeyB0eXBlOiBcImZ2XCIsIHZhbHVlOiBbMCwgN10gfSxcclxuXHRcdFx0dUZpbHRlckdQU1RpbWVDbGlwUmFuZ2U6IHsgdHlwZTogXCJmdlwiLCB2YWx1ZTogWzAsIDddIH0sXHJcblxyXG5cdFx0XHRoaWRkZW5DbGFzc2lmaWNhdGlvbnM6IHsgdHlwZTogXCJmdlwiLCB2YWx1ZTogW10gfSxcclxuXHRcdFx0aGlkZGVuUG9pbnRTb3VyY2VJRHM6IHsgdHlwZTogXCJ0XCIsIHZhbHVlOiBudWxsIH0sXHJcblx0XHRcdHNlbGVjdGVkUG9pbnRTb3VyY2VJRDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IC0xIH0sXHJcblx0XHRcdHNlbGVjdGVkUG9pbnRTb3VyY2VJRENvbG9yOiB7IHR5cGU6IFwiM2Z2XCIsIHZhbHVlOiBuZXcgVEhSRUUuQ29sb3IoMC4xMCwgMC42MSwgMC43OCkgfSxcclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy5oaWRkZW5Qb2ludFNvdXJjZUlEcyA9IFtdO1xyXG5cclxuXHRcdHRoaXMuY2xhc3NpZmljYXRpb24gPSBDbGFzc2lmaWNhdGlvbi5ERUZBVUxUO1xyXG5cdFx0dGhpcy5kZWZhdWx0QXR0cmlidXRlVmFsdWVzLm5vcm1hbCA9IFswLCAwLCAwXTtcclxuXHRcdHRoaXMuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcy5jbGFzc2lmaWNhdGlvbiA9IFswLCAwLCAwXTtcclxuXHRcdHRoaXMuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcy5pbmRpY2VzID0gWzAsIDAsIDAsIDBdO1xyXG5cclxuXHRcdHZhciBkZWZpbmVzID0gdGhpcy5nZXREZWZpbmVzKCk7XHJcblx0XHR0aGlzLnZlcnRleFNoYWRlciA9IGRlZmluZXMgKyBTaGFkZXJzLnZlcnRleDtcclxuXHRcdHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBkZWZpbmVzICsgU2hhZGVycy5mcmFnbWVudDtcclxuXHRcdHRoaXMudmVydGV4Q29sb3JzID0gVEhSRUUuVmVydGV4Q29sb3JzO1xyXG5cdH1cclxuXHJcblx0c2V0RGVmaW5lKGtleSwgdmFsdWUpIHtcclxuXHRcdGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsKSB7XHJcblx0XHRcdGlmICh0aGlzLmRlZmluZXMuZ2V0KGtleSkgIT09IHZhbHVlKSB7XHJcblx0XHRcdFx0dGhpcy5kZWZpbmVzLnNldChrZXksIHZhbHVlKTtcclxuXHRcdFx0XHR0aGlzLnVwZGF0ZVNoYWRlclNvdXJjZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0dGhpcy5yZW1vdmVEZWZpbmUoa2V5KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJlbW92ZURlZmluZShrZXkpIHtcclxuXHRcdHRoaXMuZGVmaW5lcy5kZWxldGUoa2V5KTtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZVNoYWRlclNvdXJjZSgpIHtcclxuXHRcdHZhciBkZWZpbmVzID0gdGhpcy5nZXREZWZpbmVzKCk7XHJcblx0XHR0aGlzLnZlcnRleFNoYWRlciA9IGRlZmluZXMgKyBTaGFkZXJzLnZlcnRleDtcclxuXHRcdHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBkZWZpbmVzICsgU2hhZGVycy5mcmFnbWVudDtcclxuXHJcblx0XHRpZiAodGhpcy5vcGFjaXR5ID09PSAxLjApIHtcclxuXHRcdFx0dGhpcy5ibGVuZGluZyA9IFRIUkVFLk5vQmxlbmRpbmc7XHJcblx0XHRcdHRoaXMudHJhbnNwYXJlbnQgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5kZXB0aFRlc3QgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLmRlcHRoV3JpdGUgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLmRlcHRoRnVuYyA9IFRIUkVFLkxlc3NFcXVhbERlcHRoO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodGhpcy5vcGFjaXR5IDwgMS4wICYmICF0aGlzLnVzZUVETCkge1xyXG5cdFx0XHR0aGlzLmJsZW5kaW5nID0gVEhSRUUuQWRkaXRpdmVCbGVuZGluZztcclxuXHRcdFx0dGhpcy50cmFuc3BhcmVudCA9IHRydWU7XHJcblx0XHRcdHRoaXMuZGVwdGhUZXN0ID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuZGVwdGhXcml0ZSA9IHRydWU7XHJcblx0XHRcdHRoaXMuZGVwdGhGdW5jID0gVEhSRUUuQWx3YXlzRGVwdGg7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMud2VpZ2h0ZWQpIHtcclxuXHRcdFx0dGhpcy5ibGVuZGluZyA9IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmc7XHJcblx0XHRcdHRoaXMudHJhbnNwYXJlbnQgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLmRlcHRoVGVzdCA9IHRydWU7XHJcblx0XHRcdHRoaXMuZGVwdGhXcml0ZSA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cdH1cclxuXHJcblx0b25CZWZvcmVDb21waWxlKHNoYWRlciwgcmVuZGVyZXIpIHtcclxuXHRcdGlmIChyZW5kZXJlci5jYXBhYmlsaXRpZXMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcikge1xyXG5cdFx0XHR2YXIgZGVmaW5lID0gXCIjZGVmaW5lIFVTRV9MT0dERVBUSEJVRlxcbiNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGX0VYVFxcbiNkZWZpbmUgRVBTSUxPTiAxZS02XFxuXCI7XHJcblx0XHRcdHNoYWRlci5mcmFnbWVudFNoYWRlciA9IGRlZmluZSArIHNoYWRlci5mcmFnbWVudFNoYWRlcjtcclxuXHRcdFx0c2hhZGVyLnZlcnRleFNoYWRlciA9IGRlZmluZSArIHNoYWRlci52ZXJ0ZXhTaGFkZXI7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXREZWZpbmVzKCkge1xyXG5cdFx0dmFyIGRlZmluZXMgPSBbXTtcclxuXHJcblx0XHRpZiAodGhpcy5wb2ludFNpemVUeXBlID09PSBQb2ludFNpemVUeXBlLkZJWEVEKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgZml4ZWRfcG9pbnRfc2l6ZVwiKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHRoaXMucG9pbnRTaXplVHlwZSA9PT0gUG9pbnRTaXplVHlwZS5BVFRFTlVBVEVEKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgYXR0ZW51YXRlZF9wb2ludF9zaXplXCIpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodGhpcy5wb2ludFNpemVUeXBlID09PSBQb2ludFNpemVUeXBlLkFEQVBUSVZFKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgYWRhcHRpdmVfcG9pbnRfc2l6ZVwiKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5zaGFwZSA9PT0gUG9pbnRTaGFwZS5TUVVBUkUpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBzcXVhcmVfcG9pbnRfc2hhcGVcIik7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0aGlzLnNoYXBlID09PSBQb2ludFNoYXBlLkNJUkNMRSkge1xyXG5cdFx0XHRkZWZpbmVzLnB1c2goXCIjZGVmaW5lIGNpcmNsZV9wb2ludF9zaGFwZVwiKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHRoaXMuc2hhcGUgPT09IFBvaW50U2hhcGUuUEFSQUJPTE9JRCkge1xyXG5cdFx0XHRkZWZpbmVzLnB1c2goXCIjZGVmaW5lIHBhcmFib2xvaWRfcG9pbnRfc2hhcGVcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuX3VzZUVETCkge1xyXG5cdFx0XHRkZWZpbmVzLnB1c2goXCIjZGVmaW5lIHVzZV9lZGxcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuX3NuYXBFbmFibGVkKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgc25hcF9lbmFibGVkXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSA9PT0gUG9pbnRDb2xvclR5cGUuUkdCKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgY29sb3JfdHlwZV9yZ2JcIik7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSA9PT0gUG9pbnRDb2xvclR5cGUuQ09MT1IpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX2NvbG9yXCIpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodGhpcy5fcG9pbnRDb2xvclR5cGUgPT09IFBvaW50Q29sb3JUeXBlLkRFUFRIKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgY29sb3JfdHlwZV9kZXB0aFwiKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHRoaXMuX3BvaW50Q29sb3JUeXBlID09PSBQb2ludENvbG9yVHlwZS5IRUlHSFQpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX2hlaWdodFwiKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHRoaXMuX3BvaW50Q29sb3JUeXBlID09PSBQb2ludENvbG9yVHlwZS5JTlRFTlNJVFkpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX2ludGVuc2l0eVwiKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHRoaXMuX3BvaW50Q29sb3JUeXBlID09PSBQb2ludENvbG9yVHlwZS5JTlRFTlNJVFlfR1JBRElFTlQpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX2ludGVuc2l0eV9ncmFkaWVudFwiKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHRoaXMuX3BvaW50Q29sb3JUeXBlID09PSBQb2ludENvbG9yVHlwZS5MT0QpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX2xvZFwiKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHRoaXMuX3BvaW50Q29sb3JUeXBlID09PSBQb2ludENvbG9yVHlwZS5QT0lOVF9JTkRFWCkge1xyXG5cdFx0XHRkZWZpbmVzLnB1c2goXCIjZGVmaW5lIGNvbG9yX3R5cGVfcG9pbnRfaW5kZXhcIik7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSA9PT0gUG9pbnRDb2xvclR5cGUuQ0xBU1NJRklDQVRJT04pIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX2NsYXNzaWZpY2F0aW9uXCIpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodGhpcy5fcG9pbnRDb2xvclR5cGUgPT09IFBvaW50Q29sb3JUeXBlLlJFVFVSTl9OVU1CRVIpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX3JldHVybl9udW1iZXJcIik7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSA9PT0gUG9pbnRDb2xvclR5cGUuU09VUkNFKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgY29sb3JfdHlwZV9zb3VyY2VcIik7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSA9PT0gUG9pbnRDb2xvclR5cGUuTk9STUFMKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgY29sb3JfdHlwZV9ub3JtYWxcIik7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSA9PT0gUG9pbnRDb2xvclR5cGUuUEhPTkcpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX3Bob25nXCIpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodGhpcy5fcG9pbnRDb2xvclR5cGUgPT09IFBvaW50Q29sb3JUeXBlLlJHQl9IRUlHSFQpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX3JnYl9oZWlnaHRcIik7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSA9PT0gUG9pbnRDb2xvclR5cGUuQ09NUE9TSVRFKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgY29sb3JfdHlwZV9jb21wb3NpdGVcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuX3RyZWVUeXBlID09PSBUcmVlVHlwZS5PQ1RSRUUpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSB0cmVlX3R5cGVfb2N0cmVlXCIpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodGhpcy5fdHJlZVR5cGUgPT09IFRyZWVUeXBlLktEVFJFRSkge1xyXG5cdFx0XHRkZWZpbmVzLnB1c2goXCIjZGVmaW5lIHRyZWVfdHlwZV9rZHRyZWVcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMud2VpZ2h0ZWQpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSB3ZWlnaHRlZF9zcGxhdHNcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuaGlkZGVuQ2xhc3NpZmljYXRpb25zLmxlbmd0aCkge1xyXG5cdFx0XHRkZWZpbmVzLnB1c2goYCNkZWZpbmUgbnVtX2hpZGRlbmNsYXNzaWZpY2F0aW9ucyAke3RoaXMuaGlkZGVuQ2xhc3NpZmljYXRpb25zLmxlbmd0aH1gKTtcclxuXHRcdH1cclxuXHRcdGlmICh0aGlzLmhpZGRlblBvaW50U291cmNlSURzLmxlbmd0aCkge1xyXG5cdFx0XHRkZWZpbmVzLnB1c2goYCNkZWZpbmUgbnVtX2hpZGRlbnBvaW50c291cmNlaWRzICR7dGhpcy5oaWRkZW5Qb2ludFNvdXJjZUlEcy5sZW5ndGh9YCk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMucG9pbnRTZWxlY3Rpb25UeXBlID09PSBQb2ludFNlbGVjdGlvblR5cGUuQ09MT1IpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBzZWxlY3Rpb25fdHlwZV9jb2xvclwiKTtcclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKHZhciBba2V5LCB2YWx1ZV0gb2YgdGhpcy5kZWZpbmVzKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaCh2YWx1ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRlZmluZXMuam9pbihcIlxcblwiKTtcclxuXHR9XHJcblxyXG5cdHNldENsaXBCb3hlcyhjbGlwQm94ZXMpIHtcclxuXHRcdGlmICghY2xpcEJveGVzKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZG9VcGRhdGUgPSAodGhpcy5jbGlwQm94ZXMubGVuZ3RoICE9PSBjbGlwQm94ZXMubGVuZ3RoKSAmJiAoY2xpcEJveGVzLmxlbmd0aCA9PT0gMCB8fCB0aGlzLmNsaXBCb3hlcy5sZW5ndGggPT09IDApO1xyXG5cdFx0dGhpcy51bmlmb3Jtcy5jbGlwQm94Q291bnQudmFsdWUgPSB0aGlzLmNsaXBCb3hlcy5sZW5ndGg7XHJcblx0XHR0aGlzLmNsaXBCb3hlcyA9IGNsaXBCb3hlcztcclxuXHJcblx0XHRpZiAoZG9VcGRhdGUpIHtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnVuaWZvcm1zLmNsaXBCb3hlcy52YWx1ZSA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5jbGlwQm94ZXMubGVuZ3RoICogMTYpO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jbGlwQm94ZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGJveCA9IGNsaXBCb3hlc1tpXTtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy5jbGlwQm94ZXMudmFsdWUuc2V0KGJveC5pbnZlcnNlLmVsZW1lbnRzLCAxNiAqIGkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy51bmlmb3Jtcy5jbGlwQm94ZXMudmFsdWUubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0aWYgKE51bWJlci5pc05hTih0aGlzLnVuaWZvcm1zLmNsaXBCb3hlcy52YWx1ZVtpXSkpIHtcclxuXHRcdFx0XHR0aGlzLnVuaWZvcm1zLmNsaXBCb3hlcy52YWx1ZVtpXSA9IEluZmluaXR5O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzZXRDbGlwUG9seWdvbnMoY2xpcFBvbHlnb25zLCBtYXhQb2x5Z29uVmVydGljZXMpIHtcclxuXHRcdGlmICghY2xpcFBvbHlnb25zKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHRoaXMuY2xpcFBvbHlnb25zID0gY2xpcFBvbHlnb25zO1xyXG5cdFx0dmFyIGRvVXBkYXRlID0gKHRoaXMuY2xpcFBvbHlnb25zLmxlbmd0aCAhPT0gY2xpcFBvbHlnb25zLmxlbmd0aCk7XHJcblx0XHRpZiAoZG9VcGRhdGUpIHtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCBncmFkaWVudCgpIHtcclxuXHRcdHJldHVybiB0aGlzLl9ncmFkaWVudDtcclxuXHR9XHJcblxyXG5cdHNldCBncmFkaWVudCh2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMuX2dyYWRpZW50ICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLl9ncmFkaWVudCA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLmdyYWRpZW50VGV4dHVyZSA9IFBvaW50Q2xvdWRNYXRlcmlhbC5nZW5lcmF0ZUdyYWRpZW50VGV4dHVyZSh0aGlzLl9ncmFkaWVudCk7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuZ3JhZGllbnQudmFsdWUgPSB0aGlzLmdyYWRpZW50VGV4dHVyZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCB1c2VPcnRob2dyYXBoaWNDYW1lcmEoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy51c2VPcnRob2dyYXBoaWNDYW1lcmEudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgdXNlT3J0aG9ncmFwaGljQ2FtZXJhKHZhbHVlKSB7XHJcblx0XHRpZiAodGhpcy51bmlmb3Jtcy51c2VPcnRob2dyYXBoaWNDYW1lcmEudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMudXNlT3J0aG9ncmFwaGljQ2FtZXJhLnZhbHVlID0gdmFsdWU7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgY2xhc3NpZmljYXRpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5fY2xhc3NpZmljYXRpb247XHJcblx0fVxyXG5cclxuXHRzZXQgY2xhc3NpZmljYXRpb24odmFsdWUpIHtcclxuXHRcdHZhciBjb3B5ID0ge307XHJcblx0XHRmb3IgKHZhciBrZXkgb2YgT2JqZWN0LmtleXModmFsdWUpKSB7XHJcblx0XHRcdGNvcHlba2V5XSA9IHZhbHVlW2tleV0uY2xvbmUoKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgaXNFcXVhbCA9IGZhbHNlO1xyXG5cdFx0aWYgKHRoaXMuX2NsYXNzaWZpY2F0aW9uID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0aXNFcXVhbCA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdGlzRXF1YWwgPSBPYmplY3Qua2V5cyhjb3B5KS5sZW5ndGggPT09IE9iamVjdC5rZXlzKHRoaXMuX2NsYXNzaWZpY2F0aW9uKS5sZW5ndGg7XHJcblx0XHRcdGZvciAodmFyIGtleSBvZiBPYmplY3Qua2V5cyhjb3B5KSkge1xyXG5cdFx0XHRcdGlzRXF1YWwgPSBpc0VxdWFsICYmIHRoaXMuX2NsYXNzaWZpY2F0aW9uW2tleV0gIT09IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRpc0VxdWFsID0gaXNFcXVhbCAmJiBjb3B5W2tleV0uZXF1YWxzKHRoaXMuX2NsYXNzaWZpY2F0aW9uW2tleV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCFpc0VxdWFsKSB7XHJcblx0XHRcdHRoaXMuX2NsYXNzaWZpY2F0aW9uID0gY29weTtcclxuXHRcdFx0dGhpcy5yZWNvbXB1dGVDbGFzc2lmaWNhdGlvbigpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmVjb21wdXRlQ2xhc3NpZmljYXRpb24oKSB7XHJcblx0XHR0aGlzLmNsYXNzaWZpY2F0aW9uVGV4dHVyZSA9IFBvaW50Q2xvdWRNYXRlcmlhbC5nZW5lcmF0ZUNsYXNzaWZpY2F0aW9uVGV4dHVyZSh0aGlzLl9jbGFzc2lmaWNhdGlvbik7XHJcblx0XHR0aGlzLnVuaWZvcm1zLmNsYXNzaWZpY2F0aW9uTFVULnZhbHVlID0gdGhpcy5jbGFzc2lmaWNhdGlvblRleHR1cmU7XHJcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0fSk7XHJcblx0fVxyXG5cclxuXHRnZXQgaGlkZGVuQ2xhc3NpZmljYXRpb25zKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMuaGlkZGVuQ2xhc3NpZmljYXRpb25zLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IGhpZGRlbkNsYXNzaWZpY2F0aW9ucyh2YWx1ZSkge1xyXG5cdFx0dmFsdWUgPSB0aGlzLmdldERpc3RpbmN0RlYodmFsdWUpO1xyXG5cdFx0aWYgKEpTT04uc3RyaW5naWZ5KHZhbHVlKSAhPT0gSlNPTi5zdHJpbmdpZnkodGhpcy51bmlmb3Jtcy5oaWRkZW5DbGFzc2lmaWNhdGlvbnMudmFsdWUpKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuaGlkZGVuQ2xhc3NpZmljYXRpb25zLnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMudXBkYXRlU2hhZGVyU291cmNlKCk7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCh7XHJcblx0XHRcdFx0dHlwZTogXCJtYXRlcmlhbF9wcm9wZXJ0eV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IGhpZGRlblBvaW50U291cmNlSURzVGV4dHVyZSgpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLmhpZGRlblBvaW50U291cmNlSURzLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0Z2V0IGhpZGRlblBvaW50U291cmNlSURzKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX2hpZGRlblBvaW50U291cmNlSURzO1xyXG5cdH1cclxuXHJcblx0c2V0IGhpZGRlblBvaW50U291cmNlSURzKHZhbHVlKSB7XHJcblx0XHR2YWx1ZSA9IHRoaXMuZ2V0RGlzdGluY3RGVih2YWx1ZSk7XHJcblx0XHRpZiAoSlNPTi5zdHJpbmdpZnkodmFsdWUpICE9PSBKU09OLnN0cmluZ2lmeSh0aGlzLl9oaWRkZW5Qb2ludFNvdXJjZUlEcykpIHtcclxuXHRcdFx0dGhpcy5faGlkZGVuUG9pbnRTb3VyY2VJRHMgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy5yZWNvbXB1dGVIaWRkZW5Qb2ludFNvdXJjZUlEcygpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0RGlzdGluY3RGVih2YWx1ZSkge1xyXG5cdFx0cmV0dXJuIFsuLi5uZXcgU2V0KHZhbHVlKV0uc29ydCgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogV2ViR0wgZmxvYXRbXSBpcyBvbmx5IGd1YXJhbnRlZWQgdG8gc3VwcG9ydCAxLDAyNCB2YWx1ZXMsIGJleW9uZCB3aGljaCBpdCBjYW4gY3Jhc2gsXHJcblx0ICogc28gd2UgdXBsb2FkIGhpZGRlblBvaW50U291cmNlSURzIGFzIGEgMjU2eDI1NiB0ZXh0dXJlLCB3aGVyZSBlYWNoIHBpeGVsIHJlcHJlc2VudHNcclxuXHQgKiB0aGUgc3RhdGUgb2YgdGhlIDY1LDUzNiBhdmFpbGFibGUgcG9pbnRTb3VyY2VJZHMgKHRoZSBtYXggYWxsb3dlZCBieSBMQVMvUG90cmVlKVxyXG5cdCAqL1xyXG5cdHJlY29tcHV0ZUhpZGRlblBvaW50U291cmNlSURzKCkge1xyXG5cclxuXHRcdGNvbnN0IGhpZGRlblBvaW50U291cmNlSURzID0gdGhpcy5oaWRkZW5Qb2ludFNvdXJjZUlEcztcclxuXHRcdGNvbnN0IHdpZHRoID0gMjU2O1xyXG5cdFx0Y29uc3QgaGVpZ2h0ID0gMjU2O1xyXG5cdFx0Y29uc3Qgc2l6ZSA9IHdpZHRoICogaGVpZ2h0O1xyXG5cdFx0Y29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KDMgKiBzaXplKTtcclxuXHJcblx0XHRoaWRkZW5Qb2ludFNvdXJjZUlEcy5mb3JFYWNoKGlkID0+IHtcclxuXHRcdFx0Y29uc3QgbiA9IGlkICogMztcclxuXHRcdFx0ZGF0YVtuXSA9IDI1NTsgLy8gMjU1IGhlcmUgPT4gdGV4dHVyZTJkKC4uLikuciA9PSAxLjAgaW4gR0xTTFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Y29uc3QgdGV4dHVyZSA9IG5ldyBUSFJFRS5EYXRhVGV4dHVyZShkYXRhLCB3aWR0aCwgaGVpZ2h0LCBUSFJFRS5SR0JGb3JtYXQpO1xyXG5cdFx0dGV4dHVyZS5tYWdGaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xyXG5cdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy51bmlmb3Jtcy5oaWRkZW5Qb2ludFNvdXJjZUlEcy52YWx1ZSA9IHRleHR1cmU7XHJcblxyXG5cdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCh7XHJcblx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0Z2V0IHNlbGVjdGVkUG9pbnRTb3VyY2VJRCgpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLnNlbGVjdGVkUG9pbnRTb3VyY2VJRC52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBzZWxlY3RlZFBvaW50U291cmNlSUQodmFsdWUpIHtcclxuXHRcdGlmICh2YWx1ZSAhPT0gdGhpcy51bmlmb3Jtcy5zZWxlY3RlZFBvaW50U291cmNlSUQudmFsdWUpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy5zZWxlY3RlZFBvaW50U291cmNlSUQudmFsdWUgPSB2YWx1ZSB8fCAtMTtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KHtcclxuXHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgc2VsZWN0ZWRQb2ludFNvdXJjZUlEQ29sb3IoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5zZWxlY3RlZFBvaW50U291cmNlSURDb2xvci52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBzZWxlY3RlZFBvaW50U291cmNlSURDb2xvcih2YWx1ZSkge1xyXG5cdFx0aWYgKHZhbHVlICE9PSB0aGlzLnVuaWZvcm1zLnNlbGVjdGVkUG9pbnRTb3VyY2VJRENvbG9yLnZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuc2VsZWN0ZWRQb2ludFNvdXJjZUlEQ29sb3IudmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KHtcclxuXHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgbnVtU25hcHNob3RzKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX251bVNuYXBzaG90cztcclxuXHR9XHJcblxyXG5cdHNldCBudW1TbmFwc2hvdHModmFsdWUpIHtcclxuXHRcdHRoaXMuX251bVNuYXBzaG90cyA9IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0Z2V0IHNuYXBFbmFibGVkKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3NuYXBFbmFibGVkO1xyXG5cdH1cclxuXHJcblx0c2V0IHNuYXBFbmFibGVkKHZhbHVlKSB7XHJcblx0XHRpZiAodGhpcy5fc25hcEVuYWJsZWQgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMuX3NuYXBFbmFibGVkID0gdmFsdWU7XHJcblx0XHRcdHRoaXMudXBkYXRlU2hhZGVyU291cmNlKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgc3BhY2luZygpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLnNwYWNpbmcudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgc3BhY2luZyh2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMuc3BhY2luZy52YWx1ZSAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy5zcGFjaW5nLnZhbHVlID0gdmFsdWU7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgdXNlQ2xpcEJveCgpIHtcclxuXHRcdHJldHVybiB0aGlzLl91c2VDbGlwQm94O1xyXG5cdH1cclxuXHJcblx0c2V0IHVzZUNsaXBCb3godmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLl91c2VDbGlwQm94ICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLl91c2VDbGlwQm94ID0gdmFsdWU7XHJcblx0XHRcdHRoaXMudXBkYXRlU2hhZGVyU291cmNlKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgY2xpcFRhc2soKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5jbGlwVGFzay52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBjbGlwVGFzayhtb2RlKSB7XHJcblx0XHR0aGlzLnVuaWZvcm1zLmNsaXBUYXNrLnZhbHVlID0gbW9kZTtcclxuXHR9XHJcblxyXG5cdGdldCBjbGlwTWV0aG9kKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMuY2xpcE1ldGhvZC52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBjbGlwTWV0aG9kKG1vZGUpIHtcclxuXHRcdHRoaXMudW5pZm9ybXMuY2xpcE1ldGhvZC52YWx1ZSA9IG1vZGU7XHJcblx0fVxyXG5cclxuXHRnZXQgd2VpZ2h0ZWQoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5fd2VpZ2h0ZWQ7XHJcblx0fVxyXG5cclxuXHRzZXQgd2VpZ2h0ZWQodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLl93ZWlnaHRlZCAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy5fd2VpZ2h0ZWQgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCBmb3YoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5mb3YudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgZm92KHZhbHVlKSB7XHJcblx0XHRpZiAodGhpcy51bmlmb3Jtcy5mb3YudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuZm92LnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMudXBkYXRlU2hhZGVyU291cmNlKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgc2NyZWVuV2lkdGgoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5zY3JlZW5XaWR0aC52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBzY3JlZW5XaWR0aCh2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMuc2NyZWVuV2lkdGgudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuc2NyZWVuV2lkdGgudmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCBzY3JlZW5IZWlnaHQoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5zY3JlZW5IZWlnaHQudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgc2NyZWVuSGVpZ2h0KHZhbHVlKSB7XHJcblx0XHRpZiAodGhpcy51bmlmb3Jtcy5zY3JlZW5IZWlnaHQudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuc2NyZWVuSGVpZ2h0LnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMudXBkYXRlU2hhZGVyU291cmNlKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgbmVhcigpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLm5lYXIudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgbmVhcih2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMubmVhci52YWx1ZSAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy5uZWFyLnZhbHVlID0gdmFsdWU7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgZmFyKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMuZmFyLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IGZhcih2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMuZmFyLnZhbHVlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLnVuaWZvcm1zLmZhci52YWx1ZSA9IHZhbHVlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IG9wYWNpdHkoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy51T3BhY2l0eS52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBvcGFjaXR5KHZhbHVlKSB7XHJcblx0XHRpZiAodGhpcy51bmlmb3JtcyAmJiB0aGlzLnVuaWZvcm1zLnVPcGFjaXR5KSB7XHJcblx0XHRcdGlmICh0aGlzLnVuaWZvcm1zLnVPcGFjaXR5LnZhbHVlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHRcdHRoaXMudW5pZm9ybXMudU9wYWNpdHkudmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0XHR0aGlzLnVwZGF0ZVNoYWRlclNvdXJjZSgpO1xyXG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0dHlwZTogXCJvcGFjaXR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgcG9pbnRDb2xvclR5cGUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5fcG9pbnRDb2xvclR5cGU7XHJcblx0fVxyXG5cclxuXHRzZXQgcG9pbnRDb2xvclR5cGUodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy5fcG9pbnRDb2xvclR5cGUgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwicG9pbnRfY29sb3JfdHlwZV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgcG9pbnRTaXplVHlwZSgpIHtcclxuXHRcdHJldHVybiB0aGlzLl9wb2ludFNpemVUeXBlO1xyXG5cdH1cclxuXHJcblx0c2V0IHBvaW50U2l6ZVR5cGUodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLl9wb2ludFNpemVUeXBlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLl9wb2ludFNpemVUeXBlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMudXBkYXRlU2hhZGVyU291cmNlKCk7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcInBvaW50X3NpemVfdHlwZV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgdXNlRURMKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3VzZUVETDtcclxuXHR9XHJcblxyXG5cdHNldCB1c2VFREwodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLl91c2VFREwgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMuX3VzZUVETCA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLnVwZGF0ZVNoYWRlclNvdXJjZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IGNvbG9yKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMudUNvbG9yLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IGNvbG9yKHZhbHVlKSB7XHJcblx0XHRpZiAoIXRoaXMudW5pZm9ybXMudUNvbG9yLnZhbHVlLmVxdWFscyh2YWx1ZSkpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy51Q29sb3IudmFsdWUuY29weSh2YWx1ZSk7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcImNvbG9yX2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogXCJtYXRlcmlhbF9wcm9wZXJ0eV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCBzaGFwZSgpIHtcclxuXHRcdHJldHVybiB0aGlzLl9zaGFwZTtcclxuXHR9XHJcblxyXG5cdHNldCBzaGFwZSh2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMuX3NoYXBlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLl9zaGFwZSA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLnVwZGF0ZVNoYWRlclNvdXJjZSgpO1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogXCJwb2ludF9zaGFwZV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgdHJlZVR5cGUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5fdHJlZVR5cGU7XHJcblx0fVxyXG5cclxuXHRzZXQgdHJlZVR5cGUodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLl90cmVlVHlwZSAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy5fdHJlZVR5cGUgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCBiYlNpemUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5iYlNpemUudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgYmJTaXplKHZhbHVlKSB7XHJcblx0XHR0aGlzLnVuaWZvcm1zLmJiU2l6ZS52YWx1ZSA9IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0Z2V0IHNpemUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5zaXplLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IHNpemUodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLnVuaWZvcm1zLnNpemUudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuc2l6ZS52YWx1ZSA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogXCJwb2ludF9zaXplX2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogXCJtYXRlcmlhbF9wcm9wZXJ0eV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCBlbGV2YXRpb25SYW5nZSgpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLmVsZXZhdGlvblJhbmdlLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IGVsZXZhdGlvblJhbmdlKHZhbHVlKSB7XHJcblx0XHR2YXIgY2hhbmdlZCA9IHRoaXMudW5pZm9ybXMuZWxldmF0aW9uUmFuZ2UudmFsdWVbMF0gIT09IHZhbHVlWzBdIHx8XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuZWxldmF0aW9uUmFuZ2UudmFsdWVbMV0gIT09IHZhbHVlWzFdO1xyXG5cdFx0aWYgKGNoYW5nZWQpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy5lbGV2YXRpb25SYW5nZS52YWx1ZSA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLl9kZWZhdWx0RWxldmF0aW9uUmFuZ2VDaGFuZ2VkID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgaGVpZ2h0TWluKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMuZWxldmF0aW9uUmFuZ2UudmFsdWVbMF07XHJcblx0fVxyXG5cclxuXHRzZXQgaGVpZ2h0TWluKHZhbHVlKSB7XHJcblx0XHR0aGlzLmVsZXZhdGlvblJhbmdlID0gW3ZhbHVlLCB0aGlzLmVsZXZhdGlvblJhbmdlWzFdXTtcclxuXHR9XHJcblxyXG5cdGdldCBoZWlnaHRNYXgoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5lbGV2YXRpb25SYW5nZS52YWx1ZVsxXTtcclxuXHR9XHJcblxyXG5cdHNldCBoZWlnaHRNYXgodmFsdWUpIHtcclxuXHRcdHRoaXMuZWxldmF0aW9uUmFuZ2UgPSBbdGhpcy5lbGV2YXRpb25SYW5nZVswXSwgdmFsdWVdO1xyXG5cdH1cclxuXHJcblx0Z2V0IHRyYW5zaXRpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy50cmFuc2l0aW9uLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IHRyYW5zaXRpb24odmFsdWUpIHtcclxuXHRcdHRoaXMudW5pZm9ybXMudHJhbnNpdGlvbi52YWx1ZSA9IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0Z2V0IGludGVuc2l0eVJhbmdlKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMuaW50ZW5zaXR5UmFuZ2UudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgaW50ZW5zaXR5UmFuZ2UodmFsdWUpIHtcclxuXHRcdGlmICghKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkgJiYgdmFsdWUubGVuZ3RoID09PSAyKSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHZhbHVlWzBdID09PSB0aGlzLnVuaWZvcm1zLmludGVuc2l0eVJhbmdlLnZhbHVlWzBdICYmIHZhbHVlWzFdID09PSB0aGlzLnVuaWZvcm1zLmludGVuc2l0eVJhbmdlLnZhbHVlWzFdKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnVuaWZvcm1zLmludGVuc2l0eVJhbmdlLnZhbHVlID0gdmFsdWU7XHJcblx0XHR0aGlzLl9kZWZhdWx0SW50ZW5zaXR5UmFuZ2VDaGFuZ2VkID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0fSk7XHJcblx0fVxyXG5cclxuXHRnZXQgaW50ZW5zaXR5R2FtbWEoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5pbnRlbnNpdHlHYW1tYS52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBpbnRlbnNpdHlHYW1tYSh2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMuaW50ZW5zaXR5R2FtbWEudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuaW50ZW5zaXR5R2FtbWEudmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgaW50ZW5zaXR5Q29udHJhc3QoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5pbnRlbnNpdHlDb250cmFzdC52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBpbnRlbnNpdHlDb250cmFzdCh2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMuaW50ZW5zaXR5Q29udHJhc3QudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuaW50ZW5zaXR5Q29udHJhc3QudmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgaW50ZW5zaXR5QnJpZ2h0bmVzcygpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLmludGVuc2l0eUJyaWdodG5lc3MudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgaW50ZW5zaXR5QnJpZ2h0bmVzcyh2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMuaW50ZW5zaXR5QnJpZ2h0bmVzcy52YWx1ZSAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy5pbnRlbnNpdHlCcmlnaHRuZXNzLnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IHJnYkdhbW1hKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMucmdiR2FtbWEudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgcmdiR2FtbWEodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLnVuaWZvcm1zLnJnYkdhbW1hLnZhbHVlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLnVuaWZvcm1zLnJnYkdhbW1hLnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IHJnYkNvbnRyYXN0KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMucmdiQ29udHJhc3QudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgcmdiQ29udHJhc3QodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLnVuaWZvcm1zLnJnYkNvbnRyYXN0LnZhbHVlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLnVuaWZvcm1zLnJnYkNvbnRyYXN0LnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IHJnYkJyaWdodG5lc3MoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5yZ2JCcmlnaHRuZXNzLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IHJnYkJyaWdodG5lc3ModmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLnVuaWZvcm1zLnJnYkJyaWdodG5lc3MudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMucmdiQnJpZ2h0bmVzcy52YWx1ZSA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogXCJtYXRlcmlhbF9wcm9wZXJ0eV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCB3ZWlnaHRSR0IoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy53UkdCLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IHdlaWdodFJHQih2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMud1JHQi52YWx1ZSAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy53UkdCLnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IHdlaWdodEludGVuc2l0eSgpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLndJbnRlbnNpdHkudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgd2VpZ2h0SW50ZW5zaXR5KHZhbHVlKSB7XHJcblx0XHRpZiAodGhpcy51bmlmb3Jtcy53SW50ZW5zaXR5LnZhbHVlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLnVuaWZvcm1zLndJbnRlbnNpdHkudmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgd2VpZ2h0RWxldmF0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMud0VsZXZhdGlvbi52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCB3ZWlnaHRFbGV2YXRpb24odmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLnVuaWZvcm1zLndFbGV2YXRpb24udmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMud0VsZXZhdGlvbi52YWx1ZSA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogXCJtYXRlcmlhbF9wcm9wZXJ0eV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCB3ZWlnaHRDbGFzc2lmaWNhdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLndDbGFzc2lmaWNhdGlvbi52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCB3ZWlnaHRDbGFzc2lmaWNhdGlvbih2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMud0NsYXNzaWZpY2F0aW9uLnZhbHVlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLnVuaWZvcm1zLndDbGFzc2lmaWNhdGlvbi52YWx1ZSA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogXCJtYXRlcmlhbF9wcm9wZXJ0eV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCB3ZWlnaHRSZXR1cm5OdW1iZXIoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy53UmV0dXJuTnVtYmVyLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IHdlaWdodFJldHVybk51bWJlcih2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMud1JldHVybk51bWJlci52YWx1ZSAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy53UmV0dXJuTnVtYmVyLnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IHdlaWdodFNvdXJjZUlEKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMud1NvdXJjZUlELnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IHdlaWdodFNvdXJjZUlEKHZhbHVlKSB7XHJcblx0XHRpZiAodGhpcy51bmlmb3Jtcy53U291cmNlSUQudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMud1NvdXJjZUlELnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0c3RhdGljIGdlbmVyYXRlR3JhZGllbnRUZXh0dXJlKGdyYWRpZW50KSB7XHJcblx0XHR2YXIgc2l6ZSA9IDY0O1xyXG5cclxuXHRcdC8vQ3JlYXRlIGNhbnZhc1xyXG5cdFx0dmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcblx0XHRjYW52YXMud2lkdGggPSBzaXplO1xyXG5cdFx0Y2FudmFzLmhlaWdodCA9IHNpemU7XHJcblxyXG5cdFx0Ly9HZXQgY29udGV4dFxyXG5cdFx0dmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG5cclxuXHRcdC8vRHJhdyBncmFkaWVudFxyXG5cdFx0Y29udGV4dC5yZWN0KDAsIDAsIHNpemUsIHNpemUpO1xyXG5cdFx0dmFyIGN0eEdyYWRpZW50ID0gY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCBzaXplLCBzaXplKTtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZ3JhZGllbnQubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIHN0ZXAgPSBncmFkaWVudFtpXTtcclxuXHRcdFx0Y3R4R3JhZGllbnQuYWRkQ29sb3JTdG9wKHN0ZXBbMF0sIFwiI1wiICsgc3RlcFsxXS5nZXRIZXhTdHJpbmcoKSk7XHJcblx0XHR9XHJcblx0XHRjb250ZXh0LmZpbGxTdHlsZSA9IGN0eEdyYWRpZW50O1xyXG5cdFx0Y29udGV4dC5maWxsKCk7XHJcblxyXG5cdFx0dmFyIHRleHR1cmUgPSBuZXcgVEhSRUUuQ2FudmFzVGV4dHVyZShjYW52YXMpO1xyXG5cdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLkxpbmVhckZpbHRlcjtcclxuXHJcblx0XHRyZXR1cm4gdGV4dHVyZTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZW5lcmF0ZUNsYXNzaWZpY2F0aW9uVGV4dHVyZShjbGFzc2lmaWNhdGlvbikge1xyXG5cdFx0dmFyIHdpZHRoID0gMjU2O1xyXG5cdFx0dmFyIGhlaWdodCA9IDI1NjtcclxuXHRcdHZhciBzaXplID0gd2lkdGggKiBoZWlnaHQ7XHJcblx0XHR2YXIgZGF0YSA9IG5ldyBVaW50OEFycmF5KDQgKiBzaXplKTtcclxuXHRcdGZvciAodmFyIHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xyXG5cdFx0XHRmb3IgKHZhciB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XHJcblx0XHRcdFx0dmFyIGkgPSB4ICsgd2lkdGggKiB5O1xyXG5cclxuXHRcdFx0XHR2YXIgY29sb3I7XHJcblx0XHRcdFx0aWYgKGNsYXNzaWZpY2F0aW9uW3hdKSB7XHJcblx0XHRcdFx0XHRjb2xvciA9IGNsYXNzaWZpY2F0aW9uW3hdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmIChjbGFzc2lmaWNhdGlvblt4ICUgMzJdKSB7XHJcblx0XHRcdFx0XHRjb2xvciA9IGNsYXNzaWZpY2F0aW9uW3ggJSAzMl07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0Y29sb3IgPSBjbGFzc2lmaWNhdGlvbi5ERUZBVUxUO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRkYXRhWzQgKiBpICsgMF0gPSAyNTUgKiBjb2xvci54O1xyXG5cdFx0XHRcdGRhdGFbNCAqIGkgKyAxXSA9IDI1NSAqIGNvbG9yLnk7XHJcblx0XHRcdFx0ZGF0YVs0ICogaSArIDJdID0gMjU1ICogY29sb3IuejtcclxuXHRcdFx0XHRkYXRhWzQgKiBpICsgM10gPSAyNTUgKiBjb2xvci53O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHR2YXIgdGV4dHVyZSA9IG5ldyBUSFJFRS5EYXRhVGV4dHVyZShkYXRhLCB3aWR0aCwgaGVpZ2h0LCBUSFJFRS5SR0JBRm9ybWF0KTtcclxuXHRcdHRleHR1cmUubWFnRmlsdGVyID0gVEhSRUUuTmVhcmVzdEZpbHRlcjtcclxuXHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdHJldHVybiB0ZXh0dXJlO1xyXG5cdH1cclxuXHJcblx0ZGlzYWJsZUV2ZW50cygpIHtcclxuXHRcdGlmICh0aGlzLl9oaWRkZW5MaXN0ZW5lcnMgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR0aGlzLl9oaWRkZW5MaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XHJcblx0XHRcdHRoaXMuX2xpc3RlbmVycyA9IHt9O1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZW5hYmxlRXZlbnRzKCkge1xyXG5cdFx0dGhpcy5fbGlzdGVuZXJzID0gdGhpcy5faGlkZGVuTGlzdGVuZXJzO1xyXG5cdFx0dGhpcy5faGlkZGVuTGlzdGVuZXJzID0gdW5kZWZpbmVkO1xyXG5cdH1cclxuXHJcblx0Y29weUZyb20oZnJvbSkge1xyXG5cdFx0Zm9yICh2YXIgbmFtZSBvZiB0aGlzLnVuaWZvcm1zKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXNbbmFtZV0udmFsdWUgPSBmcm9tLnVuaWZvcm1zW25hbWVdLnZhbHVlO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbmV4cG9ydCB7IFBvaW50Q2xvdWRNYXRlcmlhbCB9O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmltcG9ydCB7IFBvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeU5vZGUgfSBmcm9tIFwiLi9nZW9tZXRyaWVzL1BvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeS5qc1wiO1xyXG5pbXBvcnQgeyBIZWxwZXJVdGlscyB9IGZyb20gXCIuLi91dGlscy9IZWxwZXJVdGlscy5qc1wiO1xyXG5pbXBvcnQgeyBQb2ludENsb3VkVHJlZSwgUG9pbnRDbG91ZFRyZWVOb2RlIH0gZnJvbSBcIi4vUG9pbnRDbG91ZFRyZWUuanNcIjtcclxuaW1wb3J0IHsgUG9pbnRDbG91ZE1hdGVyaWFsIH0gZnJvbSBcIi4vbWF0ZXJpYWxzL1BvaW50Q2xvdWRNYXRlcmlhbC5qc1wiO1xyXG5pbXBvcnQgeyBQb2ludENvbG9yVHlwZSwgQ2xpcFRhc2sgfSBmcm9tIFwiLi4vUG90cmVlLmpzXCI7XHJcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gXCIuLi9HbG9iYWwuanNcIjtcclxuXHJcbmNsYXNzIFBvaW50Q2xvdWRPY3RyZWVOb2RlIGV4dGVuZHMgUG9pbnRDbG91ZFRyZWVOb2RlIHtcclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5jaGlsZHJlbiA9IHt9O1xyXG5cdFx0dGhpcy5zY2VuZU5vZGUgPSBudWxsO1xyXG5cdFx0dGhpcy5vY3RyZWUgPSBudWxsO1xyXG5cdH1cclxuXHJcblx0Z2V0TnVtUG9pbnRzKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2VvbWV0cnlOb2RlLm51bVBvaW50cztcclxuXHR9XHJcblxyXG5cdGlzTG9hZGVkKCkge1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRpc1RyZWVOb2RlKCkge1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRpc0dlb21ldHJ5Tm9kZSgpIHtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdGdldExldmVsKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2VvbWV0cnlOb2RlLmxldmVsO1xyXG5cdH1cclxuXHJcblx0Z2V0Qm91bmRpbmdTcGhlcmUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5nZW9tZXRyeU5vZGUuYm91bmRpbmdTcGhlcmU7XHJcblx0fVxyXG5cclxuXHRnZXRCb3VuZGluZ0JveCgpIHtcclxuXHRcdHJldHVybiB0aGlzLmdlb21ldHJ5Tm9kZS5ib3VuZGluZ0JveDtcclxuXHR9XHJcblxyXG5cdGdldENoaWxkcmVuKCkge1xyXG5cdFx0dmFyIGNoaWxkcmVuID0gW107XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcclxuXHRcdFx0aWYgKHRoaXMuY2hpbGRyZW5baV0pIHtcclxuXHRcdFx0XHRjaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRyZW5baV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGNoaWxkcmVuO1xyXG5cdH1cclxuXHJcblx0Z2V0UG9pbnRzSW5Cb3goYm94Tm9kZSkge1xyXG5cclxuXHRcdGlmICghdGhpcy5zY2VuZU5vZGUpIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGJ1ZmZlciA9IHRoaXMuZ2VvbWV0cnlOb2RlLmJ1ZmZlcjtcclxuXHJcblx0XHR2YXIgcG9zT2Zmc2V0ID0gYnVmZmVyLm9mZnNldChcInBvc2l0aW9uXCIpO1xyXG5cdFx0dmFyIHN0cmlkZSA9IGJ1ZmZlci5zdHJpZGU7XHJcblx0XHR2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIuZGF0YSk7XHJcblxyXG5cdFx0dmFyIHdvcmxkVG9Cb3ggPSBuZXcgVEhSRUUuTWF0cml4NCgpLmdldEludmVyc2UoYm94Tm9kZS5tYXRyaXhXb3JsZCk7XHJcblx0XHR2YXIgb2JqZWN0VG9Cb3ggPSBuZXcgVEhSRUUuTWF0cml4NCgpLm11bHRpcGx5TWF0cmljZXMod29ybGRUb0JveCwgdGhpcy5zY2VuZU5vZGUubWF0cml4V29ybGQpO1xyXG5cclxuXHRcdHZhciBpbkJveCA9IFtdO1xyXG5cclxuXHRcdHZhciBwb3MgPSBuZXcgVEhSRUUuVmVjdG9yNCgpO1xyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXIubnVtRWxlbWVudHM7IGkrKykge1xyXG5cdFx0XHR2YXIgeCA9IHZpZXcuZ2V0RmxvYXQzMihpICogc3RyaWRlICsgcG9zT2Zmc2V0ICsgMCwgdHJ1ZSk7XHJcblx0XHRcdHZhciB5ID0gdmlldy5nZXRGbG9hdDMyKGkgKiBzdHJpZGUgKyBwb3NPZmZzZXQgKyA0LCB0cnVlKTtcclxuXHRcdFx0dmFyIHogPSB2aWV3LmdldEZsb2F0MzIoaSAqIHN0cmlkZSArIHBvc09mZnNldCArIDgsIHRydWUpO1xyXG5cclxuXHRcdFx0cG9zLnNldCh4LCB5LCB6LCAxKTtcclxuXHRcdFx0cG9zLmFwcGx5TWF0cml4NChvYmplY3RUb0JveCk7XHJcblxyXG5cdFx0XHRpZiAoLTAuNSA8IHBvcy54ICYmIHBvcy54IDwgMC41KSB7XHJcblx0XHRcdFx0aWYgKC0wLjUgPCBwb3MueSAmJiBwb3MueSA8IDAuNSkge1xyXG5cdFx0XHRcdFx0aWYgKC0wLjUgPCBwb3MueiAmJiBwb3MueiA8IDAuNSkge1xyXG5cdFx0XHRcdFx0XHRwb3Muc2V0KHgsIHksIHosIDEpLmFwcGx5TWF0cml4NCh0aGlzLnNjZW5lTm9kZS5tYXRyaXhXb3JsZCk7XHJcblx0XHRcdFx0XHRcdGluQm94LnB1c2gobmV3IFRIUkVFLlZlY3RvcjMocG9zLngsIHBvcy55LCBwb3MueikpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBpbkJveDtcclxuXHR9XHJcblxyXG5cdGdldCBuYW1lKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2VvbWV0cnlOb2RlLm5hbWU7XHJcblx0fVxyXG59O1xyXG5cclxuY2xhc3MgUG9pbnRDbG91ZE9jdHJlZSBleHRlbmRzIFBvaW50Q2xvdWRUcmVlIHtcclxuXHRjb25zdHJ1Y3RvcihnZW9tZXRyeSwgbWF0ZXJpYWwpIHtcclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5wb2ludEJ1ZGdldCA9IEluZmluaXR5O1xyXG5cdFx0dGhpcy5wY29HZW9tZXRyeSA9IGdlb21ldHJ5O1xyXG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IHRoaXMucGNvR2VvbWV0cnkuYm91bmRpbmdCb3g7XHJcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gdGhpcy5ib3VuZGluZ0JveC5nZXRCb3VuZGluZ1NwaGVyZShuZXcgVEhSRUUuU3BoZXJlKCkpO1xyXG5cdFx0dGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsIHx8IG5ldyBQb2ludENsb3VkTWF0ZXJpYWwoKTtcclxuXHRcdHRoaXMudmlzaWJsZVBvaW50c1RhcmdldCA9IDIgKiAxMDAwICogMTAwMDtcclxuXHRcdHRoaXMubWluaW11bU5vZGVQaXhlbFNpemUgPSAxNTA7XHJcblx0XHR0aGlzLmxldmVsID0gMDtcclxuXHRcdHRoaXMucG9zaXRpb24uY29weShnZW9tZXRyeS5vZmZzZXQpO1xyXG5cdFx0dGhpcy51cGRhdGVNYXRyaXgoKTtcclxuXHJcblx0XHR0aGlzLnNob3dCb3VuZGluZ0JveCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5ib3VuZGluZ0JveE5vZGVzID0gW107XHJcblx0XHR0aGlzLmxvYWRRdWV1ZSA9IFtdO1xyXG5cdFx0dGhpcy52aXNpYmxlQm91bmRzID0gbmV3IFRIUkVFLkJveDMoKTtcclxuXHRcdHRoaXMudmlzaWJsZU5vZGVzID0gW107XHJcblx0XHR0aGlzLnZpc2libGVHZW9tZXRyeSA9IFtdO1xyXG5cdFx0dGhpcy5nZW5lcmF0ZURFTSA9IGZhbHNlO1xyXG5cdFx0dGhpcy5wcm9maWxlUmVxdWVzdHMgPSBbXTtcclxuXHRcdHRoaXMubmFtZSA9IFwiXCI7XHJcblxyXG5cdFx0dGhpcy50ZW1wVmVjdG9yMyA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcblxyXG5cdFx0dmFyIGJveCA9IFt0aGlzLnBjb0dlb21ldHJ5LnRpZ2h0Qm91bmRpbmdCb3gsIHRoaXMuZ2V0Qm91bmRpbmdCb3hXb3JsZCgpXS5maW5kKHYgPT4gdiAhPT0gdW5kZWZpbmVkKTtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKHRydWUpO1xyXG5cdFx0Ym94ID0gSGVscGVyVXRpbHMuY29tcHV0ZVRyYW5zZm9ybWVkQm91bmRpbmdCb3goYm94LCB0aGlzLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHR2YXIgYk1pbiA9IGJveC5taW4uejtcclxuXHRcdHZhciBiTWF4ID0gYm94Lm1heC56O1xyXG5cdFx0dGhpcy5tYXRlcmlhbC5oZWlnaHRNaW4gPSBiTWluO1xyXG5cdFx0dGhpcy5tYXRlcmlhbC5oZWlnaHRNYXggPSBiTWF4O1xyXG5cclxuXHRcdC8vVE9ETyA8cmVhZCBwcm9qZWN0aW9uIGZyb20gZmlsZSBpbnN0ZWFkPlxyXG5cdFx0dGhpcy5wcm9qZWN0aW9uID0gZ2VvbWV0cnkucHJvamVjdGlvbjtcclxuXHJcblx0XHR0aGlzLnJvb3QgPSB0aGlzLnBjb0dlb21ldHJ5LnJvb3Q7XHJcblx0fVxyXG5cclxuXHRzZXROYW1lKG5hbWUpIHtcclxuXHRcdGlmICh0aGlzLm5hbWUgIT09IG5hbWUpIHtcclxuXHRcdFx0dGhpcy5uYW1lID0gbmFtZTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibmFtZV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHRuYW1lOiBuYW1lLFxyXG5cdFx0XHRcdFx0cG9pbnRjbG91ZDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0TmFtZSgpIHtcclxuXHRcdHJldHVybiB0aGlzLm5hbWU7XHJcblx0fVxyXG5cclxuXHR0b1RyZWVOb2RlKGdlb21ldHJ5Tm9kZSwgcGFyZW50KSB7XHJcblx0XHR2YXIgbm9kZSA9IG5ldyBQb2ludENsb3VkT2N0cmVlTm9kZSgpO1xyXG5cclxuXHRcdHZhciBzY2VuZU5vZGUgPSBuZXcgVEhSRUUuUG9pbnRzKGdlb21ldHJ5Tm9kZS5nZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCk7XHJcblx0XHRzY2VuZU5vZGUubmFtZSA9IGdlb21ldHJ5Tm9kZS5uYW1lO1xyXG5cdFx0c2NlbmVOb2RlLnBvc2l0aW9uLmNvcHkoZ2VvbWV0cnlOb2RlLmJvdW5kaW5nQm94Lm1pbik7XHJcblx0XHRzY2VuZU5vZGUuZnJ1c3R1bUN1bGxlZCA9IHRydWU7XHJcblx0XHRzY2VuZU5vZGUub25CZWZvcmVSZW5kZXIgPSAoX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXApID0+IHtcclxuXHRcdFx0aWYgKG1hdGVyaWFsLnByb2dyYW0pIHtcclxuXHRcdFx0XHRfdGhpcy5nZXRDb250ZXh0KCkudXNlUHJvZ3JhbShtYXRlcmlhbC5wcm9ncmFtLnByb2dyYW0pO1xyXG5cclxuXHRcdFx0XHRpZiAobWF0ZXJpYWwucHJvZ3JhbS5nZXRVbmlmb3JtcygpLm1hcC5sZXZlbCkge1xyXG5cdFx0XHRcdFx0dmFyIGxldmVsID0gZ2VvbWV0cnlOb2RlLmdldExldmVsKCk7XHJcblx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtcy5sZXZlbC52YWx1ZSA9IGxldmVsO1xyXG5cdFx0XHRcdFx0bWF0ZXJpYWwucHJvZ3JhbS5nZXRVbmlmb3JtcygpLm1hcC5sZXZlbC5zZXRWYWx1ZShfdGhpcy5nZXRDb250ZXh0KCksIGxldmVsKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICh0aGlzLnZpc2libGVOb2RlVGV4dHVyZU9mZnNldHMgJiYgbWF0ZXJpYWwucHJvZ3JhbS5nZXRVbmlmb3JtcygpLm1hcC52blN0YXJ0KSB7XHJcblx0XHRcdFx0XHR2YXIgdm5TdGFydCA9IHRoaXMudmlzaWJsZU5vZGVUZXh0dXJlT2Zmc2V0cy5nZXQobm9kZSk7XHJcblx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtcy52blN0YXJ0LnZhbHVlID0gdm5TdGFydDtcclxuXHRcdFx0XHRcdG1hdGVyaWFsLnByb2dyYW0uZ2V0VW5pZm9ybXMoKS5tYXAudm5TdGFydC5zZXRWYWx1ZShfdGhpcy5nZXRDb250ZXh0KCksIHZuU3RhcnQpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKG1hdGVyaWFsLnByb2dyYW0uZ2V0VW5pZm9ybXMoKS5tYXAucGNJbmRleCkge1xyXG5cdFx0XHRcdFx0dmFyIGkgPSBub2RlLnBjSW5kZXggPyBub2RlLnBjSW5kZXggOiB0aGlzLnZpc2libGVOb2Rlcy5pbmRleE9mKG5vZGUpO1xyXG5cdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXMucGNJbmRleC52YWx1ZSA9IGk7XHJcblx0XHRcdFx0XHRtYXRlcmlhbC5wcm9ncmFtLmdldFVuaWZvcm1zKCkubWFwLnBjSW5kZXguc2V0VmFsdWUoX3RoaXMuZ2V0Q29udGV4dCgpLCBpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0bm9kZS5nZW9tZXRyeU5vZGUgPSBnZW9tZXRyeU5vZGU7XHJcblx0XHRub2RlLnNjZW5lTm9kZSA9IHNjZW5lTm9kZTtcclxuXHRcdG5vZGUucG9pbnRjbG91ZCA9IHRoaXM7XHJcblx0XHRub2RlLmNoaWxkcmVuID0ge307XHJcblx0XHRmb3IgKHZhciBrZXkgaW4gZ2VvbWV0cnlOb2RlLmNoaWxkcmVuKSB7XHJcblx0XHRcdG5vZGUuY2hpbGRyZW5ba2V5XSA9IGdlb21ldHJ5Tm9kZS5jaGlsZHJlbltrZXldO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghcGFyZW50KSB7XHJcblx0XHRcdHRoaXMucm9vdCA9IG5vZGU7XHJcblx0XHRcdHRoaXMuYWRkKHNjZW5lTm9kZSk7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0dmFyIGNoaWxkSW5kZXggPSBwYXJzZUludChnZW9tZXRyeU5vZGUubmFtZVtnZW9tZXRyeU5vZGUubmFtZS5sZW5ndGggLSAxXSk7XHJcblx0XHRcdHBhcmVudC5zY2VuZU5vZGUuYWRkKHNjZW5lTm9kZSk7XHJcblx0XHRcdHBhcmVudC5jaGlsZHJlbltjaGlsZEluZGV4XSA9IG5vZGU7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGRpc3Bvc2VMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0dmFyIGNoaWxkSW5kZXggPSBwYXJzZUludChnZW9tZXRyeU5vZGUubmFtZVtnZW9tZXRyeU5vZGUubmFtZS5sZW5ndGggLSAxXSk7XHJcblx0XHRcdHBhcmVudC5zY2VuZU5vZGUucmVtb3ZlKG5vZGUuc2NlbmVOb2RlKTtcclxuXHRcdFx0cGFyZW50LmNoaWxkcmVuW2NoaWxkSW5kZXhdID0gZ2VvbWV0cnlOb2RlO1xyXG5cdFx0fTtcclxuXHRcdGdlb21ldHJ5Tm9kZS5vbmVUaW1lRGlzcG9zZUhhbmRsZXJzLnB1c2goZGlzcG9zZUxpc3RlbmVyKTtcclxuXHJcblx0XHRyZXR1cm4gbm9kZTtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZVZpc2libGVCb3VuZHMoKSB7XHJcblx0XHR2YXIgbGVhZk5vZGVzID0gW107XHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudmlzaWJsZU5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBub2RlID0gdGhpcy52aXNpYmxlTm9kZXNbaV07XHJcblx0XHRcdHZhciBpc0xlYWYgPSB0cnVlO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XHJcblx0XHRcdFx0dmFyIGNoaWxkID0gbm9kZS5jaGlsZHJlbltqXTtcclxuXHRcdFx0XHRpZiAoY2hpbGQgaW5zdGFuY2VvZiBQb2ludENsb3VkT2N0cmVlTm9kZSkge1xyXG5cdFx0XHRcdFx0aXNMZWFmID0gaXNMZWFmICYmICFjaGlsZC5zY2VuZU5vZGUudmlzaWJsZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZiAoY2hpbGQgaW5zdGFuY2VvZiBQb2ludENsb3VkT2N0cmVlR2VvbWV0cnlOb2RlKSB7XHJcblx0XHRcdFx0XHRpc0xlYWYgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKGlzTGVhZikge1xyXG5cdFx0XHRcdGxlYWZOb2Rlcy5wdXNoKG5vZGUpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy52aXNpYmxlQm91bmRzLm1pbiA9IG5ldyBUSFJFRS5WZWN0b3IzKEluZmluaXR5LCBJbmZpbml0eSwgSW5maW5pdHkpO1xyXG5cdFx0dGhpcy52aXNpYmxlQm91bmRzLm1heCA9IG5ldyBUSFJFRS5WZWN0b3IzKC1JbmZpbml0eSwgLUluZmluaXR5LCAtSW5maW5pdHkpO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGVhZk5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBub2RlID0gbGVhZk5vZGVzW2ldO1xyXG5cdFx0XHR0aGlzLnZpc2libGVCb3VuZHMuZXhwYW5kQnlQb2ludChub2RlLmdldEJvdW5kaW5nQm94KCkubWluKTtcclxuXHRcdFx0dGhpcy52aXNpYmxlQm91bmRzLmV4cGFuZEJ5UG9pbnQobm9kZS5nZXRCb3VuZGluZ0JveCgpLm1heCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHR1cGRhdGVNYXRlcmlhbChtYXRlcmlhbCwgdmlzaWJsZU5vZGVzLCBjYW1lcmEsIHJlbmRlcmVyKSB7XHJcblx0XHRtYXRlcmlhbC5mb3YgPSBjYW1lcmEuZm92ICogKE1hdGguUEkgLyAxODApO1xyXG5cdFx0bWF0ZXJpYWwuc2NyZWVuV2lkdGggPSByZW5kZXJlci5kb21FbGVtZW50LmNsaWVudFdpZHRoO1xyXG5cdFx0bWF0ZXJpYWwuc2NyZWVuSGVpZ2h0ID0gcmVuZGVyZXIuZG9tRWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcblx0XHRtYXRlcmlhbC5zcGFjaW5nID0gdGhpcy5wY29HZW9tZXRyeS5zcGFjaW5nICogTWF0aC5tYXgodGhpcy5zY2FsZS54LCB0aGlzLnNjYWxlLnksIHRoaXMuc2NhbGUueik7XHJcblx0XHRtYXRlcmlhbC5uZWFyID0gY2FtZXJhLm5lYXI7XHJcblx0XHRtYXRlcmlhbC5mYXIgPSBjYW1lcmEuZmFyO1xyXG5cdFx0bWF0ZXJpYWwudW5pZm9ybXMub2N0cmVlU2l6ZS52YWx1ZSA9IHRoaXMucGNvR2VvbWV0cnkuYm91bmRpbmdCb3guZ2V0U2l6ZShuZXcgVEhSRUUuVmVjdG9yMygpKS54O1xyXG5cdH1cclxuXHJcblx0Y29tcHV0ZVZpc2liaWxpdHlUZXh0dXJlRGF0YShub2RlcywgY2FtZXJhKSB7XHJcblx0XHRpZiAoR2xvYmFsLm1lYXN1cmVUaW1pbmdzKSB7XHJcblx0XHRcdHBlcmZvcm1hbmNlLm1hcmsoXCJjb21wdXRlVmlzaWJpbGl0eVRleHR1cmVEYXRhLXN0YXJ0XCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkobm9kZXMubGVuZ3RoICogNCk7XHJcblx0XHR2YXIgdmlzaWJsZU5vZGVUZXh0dXJlT2Zmc2V0cyA9IG5ldyBNYXAoKTtcclxuXHJcblx0XHQvL2NvcHkgYXJyYXlcclxuXHRcdG5vZGVzID0gbm9kZXMuc2xpY2UoKTtcclxuXHJcblx0XHQvL3NvcnQgYnkgbGV2ZWwgYW5kIGluZGV4LCBlLmcuIHIsIHIwLCByMywgcjQsIHIwMSwgcjA3LCByMzAsIC4uLlxyXG5cdFx0dmFyIHNvcnQgPSBmdW5jdGlvbiAoYSwgYikge1xyXG5cdFx0XHR2YXIgbmEgPSBhLmdlb21ldHJ5Tm9kZS5uYW1lO1xyXG5cdFx0XHR2YXIgbmIgPSBiLmdlb21ldHJ5Tm9kZS5uYW1lO1xyXG5cdFx0XHRpZiAobmEubGVuZ3RoICE9PSBuYi5sZW5ndGgpIHJldHVybiBuYS5sZW5ndGggLSBuYi5sZW5ndGg7XHJcblx0XHRcdGlmIChuYSA8IG5iKSByZXR1cm4gLTE7XHJcblx0XHRcdGlmIChuYSA+IG5iKSByZXR1cm4gMTtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9O1xyXG5cdFx0bm9kZXMuc29ydChzb3J0KTtcclxuXHJcblx0XHQvL2NvZGUgc2FtcGxlIHRha2VuIGZyb20gdGhyZWUuanMgc3JjL21hdGgvUmF5LmpzXHJcblx0XHR2YXIgdjEgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG5cdFx0dmFyIGludGVyc2VjdFNwaGVyZUJhY2sgPSAocmF5LCBzcGhlcmUpID0+IHtcclxuXHRcdFx0djEuc3ViVmVjdG9ycyhzcGhlcmUuY2VudGVyLCByYXkub3JpZ2luKTtcclxuXHRcdFx0dmFyIHRjYSA9IHYxLmRvdChyYXkuZGlyZWN0aW9uKTtcclxuXHRcdFx0dmFyIGQyID0gdjEuZG90KHYxKSAtIHRjYSAqIHRjYTtcclxuXHRcdFx0dmFyIHJhZGl1czIgPSBzcGhlcmUucmFkaXVzICogc3BoZXJlLnJhZGl1cztcclxuXHJcblx0XHRcdGlmIChkMiA+IHJhZGl1czIpIHtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIHRoYyA9IE1hdGguc3FydChyYWRpdXMyIC0gZDIpO1xyXG5cclxuXHRcdFx0Ly90MSA9IHNlY29uZCBpbnRlcnNlY3QgcG9pbnQgLSBleGl0IHBvaW50IG9uIGJhY2sgb2Ygc3BoZXJlXHJcblx0XHRcdHZhciB0MSA9IHRjYSArIHRoYztcclxuXHJcblx0XHRcdGlmICh0MSA8IDApIHtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHQxO1xyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgbG9kUmFuZ2VzID0gbmV3IE1hcCgpO1xyXG5cdFx0dmFyIGxlYWZOb2RlTG9kUmFuZ2VzID0gbmV3IE1hcCgpO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIG5vZGUgPSBub2Rlc1tpXTtcclxuXHJcblx0XHRcdHZpc2libGVOb2RlVGV4dHVyZU9mZnNldHMuc2V0KG5vZGUsIGkpO1xyXG5cclxuXHRcdFx0dmFyIGNoaWxkcmVuID0gW107XHJcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgODsgaisrKSB7XHJcblx0XHRcdFx0dmFyIGNoaWxkID0gbm9kZS5jaGlsZHJlbltqXTtcclxuXHJcblx0XHRcdFx0aWYgKGNoaWxkICYmIGNoaWxkLmNvbnN0cnVjdG9yID09PSBQb2ludENsb3VkT2N0cmVlTm9kZSAmJiBub2Rlcy5pbmNsdWRlcyhjaGlsZCwgaSkpIHtcclxuXHRcdFx0XHRcdGNoaWxkcmVuLnB1c2goY2hpbGQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIHNwYWNpbmcgPSBub2RlLmdlb21ldHJ5Tm9kZS5lc3RpbWF0ZWRTcGFjaW5nO1xyXG5cdFx0XHR2YXIgaXNMZWFmTm9kZTtcclxuXHJcblx0XHRcdGRhdGFbaSAqIDQgKyAwXSA9IDA7XHJcblx0XHRcdGRhdGFbaSAqIDQgKyAxXSA9IDA7XHJcblx0XHRcdGRhdGFbaSAqIDQgKyAyXSA9IDA7XHJcblx0XHRcdGRhdGFbaSAqIDQgKyAzXSA9IG5vZGUuZ2V0TGV2ZWwoKTtcclxuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjaGlsZHJlbi5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdHZhciBjaGlsZCA9IGNoaWxkcmVuW2pdO1xyXG5cdFx0XHRcdHZhciBpbmRleCA9IHBhcnNlSW50KGNoaWxkLmdlb21ldHJ5Tm9kZS5uYW1lLnN1YnN0cigtMSkpO1xyXG5cdFx0XHRcdGRhdGFbaSAqIDQgKyAwXSArPSBNYXRoLnBvdygyLCBpbmRleCk7XHJcblxyXG5cdFx0XHRcdGlmIChqID09PSAwKSB7XHJcblx0XHRcdFx0XHR2YXIgdkFycmF5SW5kZXggPSBub2Rlcy5pbmRleE9mKGNoaWxkLCBpKTtcclxuXHJcblx0XHRcdFx0XHRkYXRhW2kgKiA0ICsgMV0gPSAodkFycmF5SW5kZXggLSBpKSA+PiA4O1xyXG5cdFx0XHRcdFx0ZGF0YVtpICogNCArIDJdID0gKHZBcnJheUluZGV4IC0gaSkgJSAyNTY7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvL1RPRE8gcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uXHJcblx0XHRcdC8vZm9yIHNvbWUgcmVhc29uLCB0aGlzIHBhcnQgY2FuIGJlIGV4dHJlbWVseSBzbG93IGluIGNocm9tZSBkdXJpbmcgYSBkZWJ1Z2dpbmcgc2Vzc2lvbiwgYnV0IG5vdCBkdXJpbmcgcHJvZmlsaW5nXHJcblx0XHRcdHZhciBiQm94ID0gbm9kZS5nZXRCb3VuZGluZ0JveCgpLmNsb25lKCk7XHJcblx0XHRcdC8vYkJveC5hcHBseU1hdHJpeDQobm9kZS5zY2VuZU5vZGUubWF0cml4V29ybGQpO1xyXG5cdFx0XHQvL2JCb3guYXBwbHlNYXRyaXg0KGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UpO1xyXG5cdFx0XHR2YXIgYlNwaGVyZSA9IGJCb3guZ2V0Qm91bmRpbmdTcGhlcmUobmV3IFRIUkVFLlNwaGVyZSgpKTtcclxuXHRcdFx0YlNwaGVyZS5hcHBseU1hdHJpeDQobm9kZS5zY2VuZU5vZGUubWF0cml4V29ybGQpO1xyXG5cdFx0XHRiU3BoZXJlLmFwcGx5TWF0cml4NChjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlKTtcclxuXHJcblx0XHRcdHZhciByYXkgPSBuZXcgVEhSRUUuUmF5KGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhLmdldFdvcmxkRGlyZWN0aW9uKHRoaXMudGVtcFZlY3RvcjMpKTtcclxuXHRcdFx0dmFyIGRpc3RhbmNlID0gaW50ZXJzZWN0U3BoZXJlQmFjayhyYXksIGJTcGhlcmUpO1xyXG5cdFx0XHR2YXIgZGlzdGFuY2UyID0gYlNwaGVyZS5jZW50ZXIuZGlzdGFuY2VUbyhjYW1lcmEucG9zaXRpb24pICsgYlNwaGVyZS5yYWRpdXM7XHJcblx0XHRcdGlmIChkaXN0YW5jZSA9PT0gbnVsbCkge1xyXG5cdFx0XHRcdGRpc3RhbmNlID0gZGlzdGFuY2UyO1xyXG5cdFx0XHR9XHJcblx0XHRcdGRpc3RhbmNlID0gTWF0aC5tYXgoZGlzdGFuY2UsIGRpc3RhbmNlMik7XHJcblxyXG5cdFx0XHRpZiAoIWxvZFJhbmdlcy5oYXMobm9kZS5nZXRMZXZlbCgpKSkge1xyXG5cdFx0XHRcdGxvZFJhbmdlcy5zZXQobm9kZS5nZXRMZXZlbCgpLCBkaXN0YW5jZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0dmFyIHByZXZEaXN0YW5jZSA9IGxvZFJhbmdlcy5nZXQobm9kZS5nZXRMZXZlbCgpKTtcclxuXHRcdFx0XHR2YXIgbmV3RGlzdGFuY2UgPSBNYXRoLm1heChwcmV2RGlzdGFuY2UsIGRpc3RhbmNlKTtcclxuXHRcdFx0XHRsb2RSYW5nZXMuc2V0KG5vZGUuZ2V0TGV2ZWwoKSwgbmV3RGlzdGFuY2UpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIW5vZGUuZ2VvbWV0cnlOb2RlLmhhc0NoaWxkcmVuKSB7XHJcblx0XHRcdFx0dmFyIHZhbHVlID0ge1xyXG5cdFx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxyXG5cdFx0XHRcdFx0aTogaVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0bGVhZk5vZGVMb2RSYW5nZXMuc2V0KG5vZGUsIHZhbHVlKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAodmFyIFtub2RlLCB2YWx1ZV0gb2YgbGVhZk5vZGVMb2RSYW5nZXMpIHtcclxuXHRcdFx0dmFyIGxldmVsID0gbm9kZS5nZXRMZXZlbCgpO1xyXG5cdFx0XHR2YXIgZGlzdGFuY2UgPSB2YWx1ZS5kaXN0YW5jZTtcclxuXHRcdFx0dmFyIGkgPSB2YWx1ZS5pO1xyXG5cclxuXHRcdFx0aWYgKGxldmVsIDwgNCkge1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvciAodmFyIFtsb2QsIHJhbmdlXSBvZiBsb2RSYW5nZXMpIHtcclxuXHRcdFx0XHRpZiAoZGlzdGFuY2UgPCByYW5nZSAqIDEuMikge1xyXG5cdFx0XHRcdFx0ZGF0YVtpICogNCArIDNdID0gbG9kO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChHbG9iYWwubWVhc3VyZVRpbWluZ3MpIHtcclxuXHRcdFx0cGVyZm9ybWFuY2UubWFyayhcImNvbXB1dGVWaXNpYmlsaXR5VGV4dHVyZURhdGEtZW5kXCIpO1xyXG5cdFx0XHRwZXJmb3JtYW5jZS5tZWFzdXJlKFwicmVuZGVyLmNvbXB1dGVWaXNpYmlsaXR5VGV4dHVyZURhdGFcIiwgXCJjb21wdXRlVmlzaWJpbGl0eVRleHR1cmVEYXRhLXN0YXJ0XCIsIFwiY29tcHV0ZVZpc2liaWxpdHlUZXh0dXJlRGF0YS1lbmRcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0ZGF0YTogZGF0YSxcclxuXHRcdFx0b2Zmc2V0czogdmlzaWJsZU5vZGVUZXh0dXJlT2Zmc2V0c1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdG5vZGVJbnRlcnNlY3RzUHJvZmlsZShub2RlLCBwcm9maWxlKSB7XHJcblx0XHR2YXIgYmJXb3JsZCA9IG5vZGUuYm91bmRpbmdCb3guY2xvbmUoKS5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCk7XHJcblx0XHR2YXIgYnNXb3JsZCA9IGJiV29ybGQuZ2V0Qm91bmRpbmdTcGhlcmUobmV3IFRIUkVFLlNwaGVyZSgpKTtcclxuXHJcblx0XHR2YXIgaW50ZXJzZWN0cyA9IGZhbHNlO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcHJvZmlsZS5wb2ludHMubGVuZ3RoIC0gMTsgaSsrKSB7XHJcblxyXG5cdFx0XHR2YXIgc3RhcnQgPSBuZXcgVEhSRUUuVmVjdG9yMyhwcm9maWxlLnBvaW50c1tpICsgMF0ueCwgcHJvZmlsZS5wb2ludHNbaSArIDBdLnksIGJzV29ybGQuY2VudGVyLnopO1xyXG5cdFx0XHR2YXIgZW5kID0gbmV3IFRIUkVFLlZlY3RvcjMocHJvZmlsZS5wb2ludHNbaSArIDFdLngsIHByb2ZpbGUucG9pbnRzW2kgKyAxXS55LCBic1dvcmxkLmNlbnRlci56KTtcclxuXHJcblx0XHRcdHZhciBjbG9zZXN0ID0gbmV3IFRIUkVFLkxpbmUzKHN0YXJ0LCBlbmQpLmNsb3Nlc3RQb2ludFRvUG9pbnQoYnNXb3JsZC5jZW50ZXIsIHRydWUpO1xyXG5cdFx0XHR2YXIgZGlzdGFuY2UgPSBjbG9zZXN0LmRpc3RhbmNlVG8oYnNXb3JsZC5jZW50ZXIpO1xyXG5cclxuXHRcdFx0aW50ZXJzZWN0cyA9IGludGVyc2VjdHMgfHwgKGRpc3RhbmNlIDwgKGJzV29ybGQucmFkaXVzICsgcHJvZmlsZS53aWR0aCkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBpbnRlcnNlY3RzO1xyXG5cdH1cclxuXHJcblx0bm9kZXNPblJheShub2RlcywgcmF5KSB7XHJcblx0XHR2YXIgbm9kZXNPblJheSA9IFtdO1xyXG5cclxuXHRcdHZhciBfcmF5ID0gcmF5LmNsb25lKCk7XHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBub2RlID0gbm9kZXNbaV07XHJcblx0XHRcdC8vdmFyIGludmVyc2VXb3JsZCA9IG5ldyBUSFJFRS5NYXRyaXg0KCkuZ2V0SW52ZXJzZShub2RlLm1hdHJpeFdvcmxkKTtcclxuXHRcdFx0Ly92YXIgc3BoZXJlID0gbm9kZS5nZXRCb3VuZGluZ1NwaGVyZShuZXcgVEhSRUUuU3BoZXJlKCkpLmNsb25lKCkuYXBwbHlNYXRyaXg0KG5vZGUuc2NlbmVOb2RlLm1hdHJpeFdvcmxkKTtcclxuXHRcdFx0dmFyIHNwaGVyZSA9IG5vZGUuZ2V0Qm91bmRpbmdTcGhlcmUobmV3IFRIUkVFLlNwaGVyZSgpKS5jbG9uZSgpLmFwcGx5TWF0cml4NCh0aGlzLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRcdGlmIChfcmF5LmludGVyc2VjdHNTcGhlcmUoc3BoZXJlKSkge1xyXG5cdFx0XHRcdG5vZGVzT25SYXkucHVzaChub2RlKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBub2Rlc09uUmF5O1xyXG5cdH1cclxuXHJcblx0dXBkYXRlTWF0cml4V29ybGQoZm9yY2UpIHtcclxuXHRcdGlmICh0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPT09IHRydWUpIHRoaXMudXBkYXRlTWF0cml4KCk7XHJcblxyXG5cdFx0aWYgKHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9PT0gdHJ1ZSB8fCBmb3JjZSA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRpZiAoIXRoaXMucGFyZW50KSB7XHJcblx0XHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5jb3B5KHRoaXMubWF0cml4KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXModGhpcy5wYXJlbnQubWF0cml4V29ybGQsIHRoaXMubWF0cml4KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdFx0XHRmb3JjZSA9IHRydWU7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRoaWRlRGVzY2VuZGFudHMob2JqZWN0KSB7XHJcblx0XHR2YXIgc3RhY2sgPSBbXTtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBjaGlsZCA9IG9iamVjdC5jaGlsZHJlbltpXTtcclxuXHRcdFx0aWYgKGNoaWxkLnZpc2libGUpIHtcclxuXHRcdFx0XHRzdGFjay5wdXNoKGNoaWxkKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XHJcblx0XHRcdHZhciBvYmplY3QgPSBzdGFjay5zaGlmdCgpO1xyXG5cclxuXHRcdFx0b2JqZWN0LnZpc2libGUgPSBmYWxzZTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIGNoaWxkID0gb2JqZWN0LmNoaWxkcmVuW2ldO1xyXG5cdFx0XHRcdGlmIChjaGlsZC52aXNpYmxlKSB7XHJcblx0XHRcdFx0XHRzdGFjay5wdXNoKGNoaWxkKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdG1vdmVUb09yaWdpbigpIHtcclxuXHRcdHRoaXMucG9zaXRpb24uc2V0KDAsIDAsIDApO1xyXG5cdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCh0cnVlKTtcclxuXHRcdHZhciBib3ggPSB0aGlzLmJvdW5kaW5nQm94O1xyXG5cdFx0dmFyIHRyYW5zZm9ybSA9IHRoaXMubWF0cml4V29ybGQ7XHJcblx0XHR2YXIgdEJveCA9IEhlbHBlclV0aWxzLmNvbXB1dGVUcmFuc2Zvcm1lZEJvdW5kaW5nQm94KGJveCwgdHJhbnNmb3JtKTtcclxuXHJcblx0XHR0aGlzLnBvc2l0aW9uLnNldCgwLCAwLCAwKS5zdWIodEJveC5nZXRDZW50ZXIobmV3IFRIUkVFLlZlY3RvcjMoKSkpO1xyXG5cdH07XHJcblxyXG5cdG1vdmVUb0dyb3VuZFBsYW5lKCkge1xyXG5cdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCh0cnVlKTtcclxuXHRcdHZhciBib3ggPSB0aGlzLmJvdW5kaW5nQm94O1xyXG5cdFx0dmFyIHRyYW5zZm9ybSA9IHRoaXMubWF0cml4V29ybGQ7XHJcblx0XHR2YXIgdEJveCA9IEhlbHBlclV0aWxzLmNvbXB1dGVUcmFuc2Zvcm1lZEJvdW5kaW5nQm94KGJveCwgdHJhbnNmb3JtKTtcclxuXHRcdHRoaXMucG9zaXRpb24ueSArPSAtdEJveC5taW4ueTtcclxuXHR9O1xyXG5cclxuXHRnZXRCb3VuZGluZ0JveFdvcmxkKCkge1xyXG5cdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCh0cnVlKTtcclxuXHRcdHZhciBib3ggPSB0aGlzLmJvdW5kaW5nQm94O1xyXG5cdFx0dmFyIHRyYW5zZm9ybSA9IHRoaXMubWF0cml4V29ybGQ7XHJcblx0XHR2YXIgdEJveCA9IEhlbHBlclV0aWxzLmNvbXB1dGVUcmFuc2Zvcm1lZEJvdW5kaW5nQm94KGJveCwgdHJhbnNmb3JtKTtcclxuXHJcblx0XHRyZXR1cm4gdEJveDtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiByZXR1cm5zIHBvaW50cyBpbnNpZGUgdGhlIHByb2ZpbGUgcG9pbnRzXHJcblx0ICpcclxuXHQgKiBtYXhEZXB0aDpcdFx0c2VhcmNoIHBvaW50cyB1cCB0byB0aGUgZ2l2ZW4gb2N0cmVlIGRlcHRoXHJcblx0ICpcclxuXHQgKlxyXG5cdCAqIFRoZSByZXR1cm4gdmFsdWUgaXMgYW4gYXJyYXkgd2l0aCBhbGwgc2VnbWVudHMgb2YgdGhlIHByb2ZpbGUgcGF0aFxyXG5cdCAqICB2YXIgc2VnbWVudCA9IHtcclxuXHQgKiBcdFx0c3RhcnQ6IFx0VEhSRUUuVmVjdG9yMyxcclxuXHQgKiBcdFx0ZW5kOiBcdFRIUkVFLlZlY3RvcjMsXHJcblx0ICogXHRcdHBvaW50czoge31cclxuXHQgKiBcdFx0cHJvamVjdDogZnVuY3Rpb24oKVxyXG5cdCAqICB9O1xyXG5cdCAqXHJcblx0ICogVGhlIHByb2plY3QoKSBmdW5jdGlvbiBpbnNpZGUgZWFjaCBzZWdtZW50IGNhbiBiZSB1c2VkIHRvIHRyYW5zZm9ybVxyXG5cdCAqIHRoYXQgc2VnbWVudHMgcG9pbnQgY29vcmRpbmF0ZXMgdG8gbGluZSB1cCBhbG9uZyB0aGUgeC1heGlzLlxyXG5cdCAqXHJcblx0ICpcclxuXHQgKi9cclxuXHRnZXRQb2ludHNJblByb2ZpbGUocHJvZmlsZSwgbWF4RGVwdGgsIGNhbGxiYWNrKSB7XHJcblx0XHRpZiAoY2FsbGJhY2spIHtcclxuXHRcdFx0Ly92YXIgcmVxdWVzdCA9IG5ldyBQb3RyZWUuUHJvZmlsZVJlcXVlc3QodGhpcywgcHJvZmlsZSwgbWF4RGVwdGgsIGNhbGxiYWNrKTtcclxuXHRcdFx0Ly90aGlzLnByb2ZpbGVSZXF1ZXN0cy5wdXNoKHJlcXVlc3QpO1xyXG5cdFx0XHQvL3JldHVybiByZXF1ZXN0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBwb2ludHMgPSB7XHJcblx0XHRcdHNlZ21lbnRzOiBbXSxcclxuXHRcdFx0Ym91bmRpbmdCb3g6IG5ldyBUSFJFRS5Cb3gzKCksXHJcblx0XHRcdHByb2plY3RlZEJvdW5kaW5nQm94OiBuZXcgVEhSRUUuQm94MigpXHJcblx0XHR9O1xyXG5cclxuXHRcdC8vZXZhbHVhdGUgc2VnbWVudHNcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcHJvZmlsZS5wb2ludHMubGVuZ3RoIC0gMTsgaSsrKSB7XHJcblx0XHRcdHZhciBzdGFydCA9IHByb2ZpbGUucG9pbnRzW2ldO1xyXG5cdFx0XHR2YXIgZW5kID0gcHJvZmlsZS5wb2ludHNbaSArIDFdO1xyXG5cdFx0XHR2YXIgcHMgPSB0aGlzLmdldFByb2ZpbGUoc3RhcnQsIGVuZCwgcHJvZmlsZS53aWR0aCwgbWF4RGVwdGgpO1xyXG5cclxuXHRcdFx0dmFyIHNlZ21lbnQgPSB7XHJcblx0XHRcdFx0c3RhcnQ6IHN0YXJ0LFxyXG5cdFx0XHRcdGVuZDogZW5kLFxyXG5cdFx0XHRcdHBvaW50czogcHMsXHJcblx0XHRcdFx0cHJvamVjdDogbnVsbFxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0cG9pbnRzLnNlZ21lbnRzLnB1c2goc2VnbWVudCk7XHJcblxyXG5cdFx0XHRwb2ludHMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludChwcy5ib3VuZGluZ0JveC5taW4pO1xyXG5cdFx0XHRwb2ludHMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludChwcy5ib3VuZGluZ0JveC5tYXgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vYWRkIHByb2plY3Rpb24gZnVuY3Rpb25zIHRvIHRoZSBzZWdtZW50c1xyXG5cdFx0dmFyIG1pbGVhZ2UgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMuc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIHNlZ21lbnQgPSBwb2ludHMuc2VnbWVudHNbaV07XHJcblx0XHRcdHZhciBzdGFydCA9IHNlZ21lbnQuc3RhcnQ7XHJcblx0XHRcdHZhciBlbmQgPSBzZWdtZW50LmVuZDtcclxuXHJcblx0XHRcdHZhciBwcm9qZWN0ID0gKGZ1bmN0aW9uIChfc3RhcnQsIF9lbmQsIF9taWxlYWdlLCBfYm91bmRpbmdCb3gpIHtcclxuXHRcdFx0XHR2YXIgc3RhcnQgPSBfc3RhcnQ7XHJcblx0XHRcdFx0dmFyIGVuZCA9IF9lbmQ7XHJcblx0XHRcdFx0dmFyIG1pbGVhZ2UgPSBfbWlsZWFnZTtcclxuXHRcdFx0XHR2YXIgYm91bmRpbmdCb3ggPSBfYm91bmRpbmdCb3g7XHJcblxyXG5cdFx0XHRcdHZhciB4QXhpcyA9IG5ldyBUSFJFRS5WZWN0b3IzKDEsIDAsIDApO1xyXG5cdFx0XHRcdHZhciBkaXIgPSBuZXcgVEhSRUUuVmVjdG9yMygpLnN1YlZlY3RvcnMoZW5kLCBzdGFydCk7XHJcblx0XHRcdFx0ZGlyLnkgPSAwO1xyXG5cdFx0XHRcdGRpci5ub3JtYWxpemUoKTtcclxuXHRcdFx0XHR2YXIgYWxwaGEgPSBNYXRoLmFjb3MoeEF4aXMuZG90KGRpcikpO1xyXG5cdFx0XHRcdGlmIChkaXIueiA+IDApIHtcclxuXHRcdFx0XHRcdGFscGhhID0gLWFscGhhO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChwb3NpdGlvbikge1xyXG5cdFx0XHRcdFx0dmFyIHRvT3JpZ2luID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oLXN0YXJ0LngsIC1ib3VuZGluZ0JveC5taW4ueSwgLXN0YXJ0LnopO1xyXG5cdFx0XHRcdFx0dmFyIGFsaWduV2l0aFggPSBuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblkoLWFscGhhKTtcclxuXHRcdFx0XHRcdHZhciBhcHBseU1pbGVhZ2UgPSBuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbihtaWxlYWdlLngsIDAsIDApO1xyXG5cclxuXHRcdFx0XHRcdHZhciBwb3MgPSBwb3NpdGlvbi5jbG9uZSgpO1xyXG5cdFx0XHRcdFx0cG9zLmFwcGx5TWF0cml4NCh0b09yaWdpbik7XHJcblx0XHRcdFx0XHRwb3MuYXBwbHlNYXRyaXg0KGFsaWduV2l0aFgpO1xyXG5cdFx0XHRcdFx0cG9zLmFwcGx5TWF0cml4NChhcHBseU1pbGVhZ2UpO1xyXG5cclxuXHRcdFx0XHRcdHJldHVybiBwb3M7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fShzdGFydCwgZW5kLCBtaWxlYWdlLmNsb25lKCksIHBvaW50cy5ib3VuZGluZ0JveC5jbG9uZSgpKSk7XHJcblxyXG5cdFx0XHRzZWdtZW50LnByb2plY3QgPSBwcm9qZWN0O1xyXG5cclxuXHRcdFx0bWlsZWFnZS54ICs9IG5ldyBUSFJFRS5WZWN0b3IzKHN0YXJ0LngsIDAsIHN0YXJ0LnopLmRpc3RhbmNlVG8obmV3IFRIUkVFLlZlY3RvcjMoZW5kLngsIDAsIGVuZC56KSk7XHJcblx0XHRcdG1pbGVhZ2UueSArPSBlbmQueSAtIHN0YXJ0Lnk7XHJcblx0XHR9XHJcblxyXG5cdFx0cG9pbnRzLnByb2plY3RlZEJvdW5kaW5nQm94Lm1pbi54ID0gMDtcclxuXHRcdHBvaW50cy5wcm9qZWN0ZWRCb3VuZGluZ0JveC5taW4ueSA9IHBvaW50cy5ib3VuZGluZ0JveC5taW4ueTtcclxuXHRcdHBvaW50cy5wcm9qZWN0ZWRCb3VuZGluZ0JveC5tYXgueCA9IG1pbGVhZ2UueDtcclxuXHRcdHBvaW50cy5wcm9qZWN0ZWRCb3VuZGluZ0JveC5tYXgueSA9IHBvaW50cy5ib3VuZGluZ0JveC5tYXgueTtcclxuXHJcblx0XHRyZXR1cm4gcG9pbnRzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogcmV0dXJucyBwb2ludHMgaW5zaWRlIHRoZSBnaXZlbiBwcm9maWxlIGJvdW5kcy5cclxuXHQgKlxyXG5cdCAqIHN0YXJ0OlxyXG5cdCAqIGVuZDpcclxuXHQgKiB3aWR0aDpcclxuXHQgKiBkZXB0aDpcdFx0c2VhcmNoIHBvaW50cyB1cCB0byB0aGUgZ2l2ZW4gb2N0cmVlIGRlcHRoXHJcblx0ICogY2FsbGJhY2s6XHRpZiBzcGVjaWZpZWQsIHBvaW50cyBhcmUgbG9hZGVkIGJlZm9yZSBzZWFyY2hpbmdcclxuXHQgKlxyXG5cdCAqXHJcblx0ICovXHJcblx0Z2V0UHJvZmlsZShzdGFydCwgZW5kLCB3aWR0aCwgZGVwdGgsIGNhbGxiYWNrKSB7XHJcblx0XHQvL3ZhciByZXF1ZXN0ID0gbmV3IFBvdHJlZS5Qcm9maWxlUmVxdWVzdChzdGFydCwgZW5kLCB3aWR0aCwgZGVwdGgsIGNhbGxiYWNrKTtcclxuXHRcdC8vdGhpcy5wcm9maWxlUmVxdWVzdHMucHVzaChyZXF1ZXN0KTtcclxuXHR9O1xyXG5cclxuXHRnZXRWaXNpYmxlRXh0ZW50KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudmlzaWJsZUJvdW5kcy5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICpcclxuXHQgKlxyXG5cdCAqXHJcblx0ICogcGFyYW1zLnBpY2tXaW5kb3dTaXplOlx0TG9vayBmb3IgcG9pbnRzIGluc2lkZSBhIHBpeGVsIHdpbmRvdyBvZiB0aGlzIHNpemUuXHJcblx0ICogXHRcdFx0XHRcdFx0XHRVc2Ugb2RkIHZhbHVlczogMSwgMywgNSwgLi4uXHJcblx0ICpcclxuXHQgKlxyXG5cdCAqIFRPRE86IG9ubHkgZHJhdyBwaXhlbHMgdGhhdCBhcmUgYWN0dWFsbHkgcmVhZCB3aXRoIHJlYWRQaXhlbHMoKS5cclxuXHQgKlxyXG5cdCAqL1xyXG5cdHBpY2sodmlld2VyLCBjYW1lcmEsIHJheSwgcGFyYW1zID0ge30pIHtcclxuXHJcblx0XHR2YXIgcmVuZGVyZXIgPSB2aWV3ZXIucmVuZGVyZXI7XHJcblx0XHR2YXIgcFJlbmRlcmVyID0gdmlld2VyLnBSZW5kZXJlcjtcclxuXHJcblx0XHRwZXJmb3JtYW5jZS5tYXJrKFwicGljay1zdGFydFwiKTtcclxuXHJcblx0XHR2YXIgZ2V0VmFsID0gKGEsIGIpID0+IGEgIT09IHVuZGVmaW5lZCA/IGEgOiBiO1xyXG5cclxuXHRcdHZhciBwaWNrV2luZG93U2l6ZSA9IGdldFZhbChwYXJhbXMucGlja1dpbmRvd1NpemUsIDE3KTtcclxuXHRcdHZhciBwaWNrT3V0c2lkZUNsaXBSZWdpb24gPSBnZXRWYWwocGFyYW1zLnBpY2tPdXRzaWRlQ2xpcFJlZ2lvbiwgZmFsc2UpO1xyXG5cclxuXHRcdHZhciBzaXplID0gcmVuZGVyZXIuZ2V0U2l6ZShuZXcgVEhSRUUuVmVjdG9yMygpKTtcclxuXHJcblx0XHR2YXIgd2lkdGggPSBNYXRoLmNlaWwoZ2V0VmFsKHBhcmFtcy53aWR0aCwgc2l6ZS53aWR0aCkpO1xyXG5cdFx0dmFyIGhlaWdodCA9IE1hdGguY2VpbChnZXRWYWwocGFyYW1zLmhlaWdodCwgc2l6ZS5oZWlnaHQpKTtcclxuXHJcblx0XHR2YXIgcG9pbnRTaXplVHlwZSA9IGdldFZhbChwYXJhbXMucG9pbnRTaXplVHlwZSwgdGhpcy5tYXRlcmlhbC5wb2ludFNpemVUeXBlKTtcclxuXHRcdHZhciBwb2ludFNpemUgPSBnZXRWYWwocGFyYW1zLnBvaW50U2l6ZSwgdGhpcy5tYXRlcmlhbC5zaXplKTtcclxuXHJcblx0XHR2YXIgbm9kZXMgPSB0aGlzLm5vZGVzT25SYXkodGhpcy52aXNpYmxlTm9kZXMsIHJheSk7XHJcblxyXG5cdFx0aWYgKG5vZGVzLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIXRoaXMucGlja1N0YXRlKSB7XHJcblx0XHRcdHZhciBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG5cclxuXHRcdFx0dmFyIG1hdGVyaWFsID0gbmV3IFBvaW50Q2xvdWRNYXRlcmlhbCgpO1xyXG5cdFx0XHRtYXRlcmlhbC5wb2ludENvbG9yVHlwZSA9IFBvaW50Q29sb3JUeXBlLlBPSU5UX0lOREVYO1xyXG5cclxuXHRcdFx0dmFyIHJlbmRlclRhcmdldCA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlclRhcmdldChcclxuXHRcdFx0XHQxLCAxLFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdG1pbkZpbHRlcjogVEhSRUUuTGluZWFyRmlsdGVyLFxyXG5cdFx0XHRcdFx0bWFnRmlsdGVyOiBUSFJFRS5OZWFyZXN0RmlsdGVyLFxyXG5cdFx0XHRcdFx0Zm9ybWF0OiBUSFJFRS5SR0JBRm9ybWF0XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0dGhpcy5waWNrU3RhdGUgPSB7XHJcblx0XHRcdFx0cmVuZGVyVGFyZ2V0OiByZW5kZXJUYXJnZXQsXHJcblx0XHRcdFx0bWF0ZXJpYWw6IG1hdGVyaWFsLFxyXG5cdFx0XHRcdHNjZW5lOiBzY2VuZVxyXG5cdFx0XHR9O1xyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgcGlja1N0YXRlID0gdGhpcy5waWNrU3RhdGU7XHJcblx0XHR2YXIgcGlja01hdGVyaWFsID0gcGlja1N0YXRlLm1hdGVyaWFsO1xyXG5cclxuXHRcdC8vVXBkYXRlIHBpY2sgbWF0ZXJpYWxcclxuXHRcdHBpY2tNYXRlcmlhbC5wb2ludFNpemVUeXBlID0gcG9pbnRTaXplVHlwZTtcclxuXHRcdHBpY2tNYXRlcmlhbC5zaGFwZSA9IHRoaXMubWF0ZXJpYWwuc2hhcGU7XHJcblxyXG5cdFx0cGlja01hdGVyaWFsLnNpemUgPSBwb2ludFNpemU7XHJcblx0XHRwaWNrTWF0ZXJpYWwudW5pZm9ybXMubWluU2l6ZS52YWx1ZSA9IHRoaXMubWF0ZXJpYWwudW5pZm9ybXMubWluU2l6ZS52YWx1ZTtcclxuXHRcdHBpY2tNYXRlcmlhbC51bmlmb3Jtcy5tYXhTaXplLnZhbHVlID0gdGhpcy5tYXRlcmlhbC51bmlmb3Jtcy5tYXhTaXplLnZhbHVlO1xyXG5cdFx0cGlja01hdGVyaWFsLmNsYXNzaWZpY2F0aW9uID0gdGhpcy5tYXRlcmlhbC5jbGFzc2lmaWNhdGlvbjtcclxuXHRcdGlmIChwYXJhbXMucGlja0NsaXBwZWQpIHtcclxuXHRcdFx0cGlja01hdGVyaWFsLmNsaXBCb3hlcyA9IHRoaXMubWF0ZXJpYWwuY2xpcEJveGVzO1xyXG5cdFx0XHRpZiAodGhpcy5tYXRlcmlhbC5jbGlwVGFzayA9PT0gQ2xpcFRhc2suSElHSExJR0hUKSB7XHJcblx0XHRcdFx0cGlja01hdGVyaWFsLmNsaXBUYXNrID0gQ2xpcFRhc2suTk9ORTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRwaWNrTWF0ZXJpYWwuY2xpcFRhc2sgPSB0aGlzLm1hdGVyaWFsLmNsaXBUYXNrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0cGlja01hdGVyaWFsLmNsaXBCb3hlcyA9IFtdO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudXBkYXRlTWF0ZXJpYWwocGlja01hdGVyaWFsLCBub2RlcywgY2FtZXJhLCByZW5kZXJlcik7XHJcblxyXG5cdFx0cGlja1N0YXRlLnJlbmRlclRhcmdldC5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xyXG5cclxuXHRcdHZhciBwaXhlbFBvcyA9IG5ldyBUSFJFRS5WZWN0b3IyKHBhcmFtcy54LCBwYXJhbXMueSk7XHJcblxyXG5cdFx0dmFyIGdsID0gcmVuZGVyZXIuZ2V0Q29udGV4dCgpO1xyXG5cdFx0Z2wuZW5hYmxlKGdsLlNDSVNTT1JfVEVTVCk7XHJcblx0XHRnbC5zY2lzc29yKHBhcnNlSW50KHBpeGVsUG9zLnggLSAocGlja1dpbmRvd1NpemUgLSAxKSAvIDIpLCBwYXJzZUludChwaXhlbFBvcy55IC0gKHBpY2tXaW5kb3dTaXplIC0gMSkgLyAyKSwgcGFyc2VJbnQocGlja1dpbmRvd1NpemUpLCBwYXJzZUludChwaWNrV2luZG93U2l6ZSkpO1xyXG5cclxuXHRcdHJlbmRlcmVyLnN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0VGVzdChwaWNrTWF0ZXJpYWwuZGVwdGhUZXN0KTtcclxuXHRcdHJlbmRlcmVyLnN0YXRlLmJ1ZmZlcnMuZGVwdGguc2V0TWFzayhwaWNrTWF0ZXJpYWwuZGVwdGhXcml0ZSk7XHJcblx0XHRyZW5kZXJlci5zdGF0ZS5zZXRCbGVuZGluZyhUSFJFRS5Ob0JsZW5kaW5nKTtcclxuXHJcblx0XHQvL1JlbmRlclxyXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KHBpY2tTdGF0ZS5yZW5kZXJUYXJnZXQpO1xyXG5cdFx0Z2wuY2xlYXJDb2xvcigwLCAwLCAwLCAwKTtcclxuXHRcdHJlbmRlcmVyLmNsZWFyVGFyZ2V0KHBpY2tTdGF0ZS5yZW5kZXJUYXJnZXQsIHRydWUsIHRydWUsIHRydWUpO1xyXG5cclxuXHRcdHZhciB0bXAgPSB0aGlzLm1hdGVyaWFsO1xyXG5cdFx0dGhpcy5tYXRlcmlhbCA9IHBpY2tNYXRlcmlhbDtcclxuXHJcblx0XHRwUmVuZGVyZXIucmVuZGVyT2N0cmVlKHRoaXMsIG5vZGVzLCBjYW1lcmEsIHBpY2tTdGF0ZS5yZW5kZXJUYXJnZXQpO1xyXG5cclxuXHRcdHRoaXMubWF0ZXJpYWwgPSB0bXA7XHJcblxyXG5cdFx0dmFyIGNsYW1wID0gKG51bWJlciwgbWluLCBtYXgpID0+IE1hdGgubWluKE1hdGgubWF4KG1pbiwgbnVtYmVyKSwgbWF4KTtcclxuXHJcblx0XHR2YXIgeCA9IHBhcnNlSW50KGNsYW1wKHBpeGVsUG9zLnggLSAocGlja1dpbmRvd1NpemUgLSAxKSAvIDIsIDAsIHdpZHRoKSk7XHJcblx0XHR2YXIgeSA9IHBhcnNlSW50KGNsYW1wKHBpeGVsUG9zLnkgLSAocGlja1dpbmRvd1NpemUgLSAxKSAvIDIsIDAsIGhlaWdodCkpO1xyXG5cdFx0dmFyIHcgPSBwYXJzZUludChNYXRoLm1pbih4ICsgcGlja1dpbmRvd1NpemUsIHdpZHRoKSAtIHgpO1xyXG5cdFx0dmFyIGggPSBwYXJzZUludChNYXRoLm1pbih5ICsgcGlja1dpbmRvd1NpemUsIGhlaWdodCkgLSB5KTtcclxuXHJcblx0XHR2YXIgcGl4ZWxDb3VudCA9IHcgKiBoO1xyXG5cdFx0dmFyIGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KDQgKiBwaXhlbENvdW50KTtcclxuXHJcblx0XHRnbC5yZWFkUGl4ZWxzKHgsIHksIHBpY2tXaW5kb3dTaXplLCBwaWNrV2luZG93U2l6ZSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgYnVmZmVyKTtcclxuXHJcblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQobnVsbCk7XHJcblx0XHRyZW5kZXJlci5yZXNldEdMU3RhdGUoKTtcclxuXHRcdHJlbmRlcmVyLnNldFNjaXNzb3JUZXN0KGZhbHNlKTtcclxuXHRcdGdsLmRpc2FibGUoZ2wuU0NJU1NPUl9URVNUKTtcclxuXHJcblx0XHR2YXIgcGl4ZWxzID0gYnVmZmVyO1xyXG5cdFx0dmFyIGlidWZmZXIgPSBuZXcgVWludDMyQXJyYXkoYnVmZmVyLmJ1ZmZlcik7XHJcblxyXG5cdFx0Ly9maW5kIGNsb3Nlc3QgaGl0IGluc2lkZSBwaXhlbFdpbmRvdyBib3VuZGFyaWVzXHJcblx0XHR2YXIgbWluID0gTnVtYmVyLk1BWF9WQUxVRTtcclxuXHRcdHZhciBoaXRzID0gW107XHJcblxyXG5cdFx0Zm9yICh2YXIgdSA9IDA7IHUgPCBwaWNrV2luZG93U2l6ZTsgdSsrKSB7XHJcblx0XHRcdGZvciAodmFyIHYgPSAwOyB2IDwgcGlja1dpbmRvd1NpemU7IHYrKykge1xyXG5cdFx0XHRcdHZhciBvZmZzZXQgPSAodSArIHYgKiBwaWNrV2luZG93U2l6ZSk7XHJcblx0XHRcdFx0dmFyIGRpc3RhbmNlID0gTWF0aC5wb3codSAtIChwaWNrV2luZG93U2l6ZSAtIDEpIC8gMiwgMikgKyBNYXRoLnBvdyh2IC0gKHBpY2tXaW5kb3dTaXplIC0gMSkgLyAyLCAyKTtcclxuXHJcblx0XHRcdFx0dmFyIHBjSW5kZXggPSBwaXhlbHNbNCAqIG9mZnNldCArIDNdO1xyXG5cdFx0XHRcdHBpeGVsc1s0ICogb2Zmc2V0ICsgM10gPSAwO1xyXG5cdFx0XHRcdHZhciBwSW5kZXggPSBpYnVmZmVyW29mZnNldF07XHJcblxyXG5cdFx0XHRcdGlmICghKHBjSW5kZXggPT09IDAgJiYgcEluZGV4ID09PSAwKSAmJiAocGNJbmRleCAhPT0gdW5kZWZpbmVkKSAmJiAocEluZGV4ICE9PSB1bmRlZmluZWQpKSB7XHJcblx0XHRcdFx0XHR2YXIgaGl0ID0ge1xyXG5cdFx0XHRcdFx0XHRwSW5kZXg6IHBJbmRleCxcclxuXHRcdFx0XHRcdFx0cGNJbmRleDogcGNJbmRleCxcclxuXHRcdFx0XHRcdFx0ZGlzdGFuY2VUb0NlbnRlcjogZGlzdGFuY2VcclxuXHRcdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdFx0aWYgKHBhcmFtcy5hbGwpIHtcclxuXHRcdFx0XHRcdFx0aGl0cy5wdXNoKGhpdCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0aWYgKGhpdHMubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChkaXN0YW5jZSA8IGhpdHNbMF0uZGlzdGFuY2VUb0NlbnRlcikge1xyXG5cdFx0XHRcdFx0XHRcdFx0aGl0c1swXSA9IGhpdDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0aGl0cy5wdXNoKGhpdCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKHZhciBoaXQgb2YgaGl0cykge1xyXG5cdFx0XHR2YXIgcG9pbnQgPSB7fTtcclxuXHJcblx0XHRcdGlmICghbm9kZXNbaGl0LnBjSW5kZXhdKSB7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBub2RlID0gbm9kZXNbaGl0LnBjSW5kZXhdO1xyXG5cdFx0XHR2YXIgcGMgPSBub2RlLnNjZW5lTm9kZTtcclxuXHRcdFx0dmFyIGdlb21ldHJ5ID0gbm9kZS5nZW9tZXRyeU5vZGUuZ2VvbWV0cnk7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBhdHRyaWJ1dGVOYW1lIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMpIHtcclxuXHRcdFx0XHR2YXIgYXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTtcclxuXHJcblx0XHRcdFx0aWYgKGF0dHJpYnV0ZU5hbWUgPT09IFwicG9zaXRpb25cIikge1xyXG5cdFx0XHRcdFx0dmFyIHggPSBhdHRyaWJ1dGUuYXJyYXlbMyAqIGhpdC5wSW5kZXggKyAwXTtcclxuXHRcdFx0XHRcdHZhciB5ID0gYXR0cmlidXRlLmFycmF5WzMgKiBoaXQucEluZGV4ICsgMV07XHJcblx0XHRcdFx0XHR2YXIgeiA9IGF0dHJpYnV0ZS5hcnJheVszICogaGl0LnBJbmRleCArIDJdO1xyXG5cclxuXHRcdFx0XHRcdHZhciBwb3NpdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKHgsIHksIHopO1xyXG5cdFx0XHRcdFx0cG9zaXRpb24uYXBwbHlNYXRyaXg0KHBjLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRcdFx0XHRwb2ludFthdHRyaWJ1dGVOYW1lXSA9IHBvc2l0aW9uO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0LypcclxuXHRcdFx0XHRlbHNlIGlmKGF0dHJpYnV0ZU5hbWUgPT09IFwiaW5kaWNlc1wiKVxyXG5cdFx0XHRcdHtcclxuXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHQvL2lmICh2YWx1ZXMuaXRlbVNpemUgPT09IDEpIHtcclxuXHRcdFx0XHRcdC8vXHRwb2ludFthdHRyaWJ1dGUubmFtZV0gPSB2YWx1ZXMuYXJyYXlbaGl0LnBJbmRleF07XHJcblx0XHRcdFx0XHQvL30gZWxzZSB7XHJcblx0XHRcdFx0XHQvL1x0dmFyIHZhbHVlID0gW107XHJcblx0XHRcdFx0XHQvL1x0Zm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZXMuaXRlbVNpemU7IGorKykge1xyXG5cdFx0XHRcdFx0Ly9cdFx0dmFsdWUucHVzaCh2YWx1ZXMuYXJyYXlbdmFsdWVzLml0ZW1TaXplICogaGl0LnBJbmRleCArIGpdKTtcclxuXHRcdFx0XHRcdC8vXHR9XHJcblx0XHRcdFx0XHQvL1x0cG9pbnRbYXR0cmlidXRlLm5hbWVdID0gdmFsdWU7XHJcblx0XHRcdFx0XHQvL31cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ki9cclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGhpdC5wb2ludCA9IHBvaW50O1xyXG5cdFx0fVxyXG5cclxuXHRcdHBlcmZvcm1hbmNlLm1hcmsoXCJwaWNrLWVuZFwiKTtcclxuXHRcdHBlcmZvcm1hbmNlLm1lYXN1cmUoXCJwaWNrXCIsIFwicGljay1zdGFydFwiLCBcInBpY2stZW5kXCIpO1xyXG5cclxuXHRcdGlmIChwYXJhbXMuYWxsKSB7XHJcblx0XHRcdHJldHVybiBoaXRzLm1hcChoaXQgPT4gaGl0LnBvaW50KTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRpZiAoaGl0cy5sZW5ndGggPT09IDApIHtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gaGl0c1swXS5wb2ludDtcclxuXHRcdFx0XHQvL3ZhciBzb3J0ZWQgPSBoaXRzLnNvcnQoKGEsIGIpID0+IGEuZGlzdGFuY2VUb0NlbnRlciAtIGIuZGlzdGFuY2VUb0NlbnRlcik7XHJcblx0XHRcdFx0Ly9yZXR1cm4gc29ydGVkWzBdLnBvaW50O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdH07XHJcblxyXG5cdCpnZXRGaXR0ZWRCb3hHZW4oYm94Tm9kZSkge1xyXG5cdFx0dmFyIHNocmlua2VkTG9jYWxCb3VuZHMgPSBuZXcgVEhSRUUuQm94MygpO1xyXG5cdFx0dmFyIHdvcmxkVG9Cb3ggPSBuZXcgVEhSRUUuTWF0cml4NCgpLmdldEludmVyc2UoYm94Tm9kZS5tYXRyaXhXb3JsZCk7XHJcblxyXG5cdFx0Zm9yICh2YXIgbm9kZSBvZiB0aGlzLnZpc2libGVOb2Rlcykge1xyXG5cdFx0XHRpZiAoIW5vZGUuc2NlbmVOb2RlKSB7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBidWZmZXIgPSBub2RlLmdlb21ldHJ5Tm9kZS5idWZmZXI7XHJcblxyXG5cdFx0XHR2YXIgcG9zT2Zmc2V0ID0gYnVmZmVyLm9mZnNldChcInBvc2l0aW9uXCIpO1xyXG5cdFx0XHR2YXIgc3RyaWRlID0gYnVmZmVyLnN0cmlkZTtcclxuXHRcdFx0dmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLmRhdGEpO1xyXG5cclxuXHRcdFx0dmFyIG9iamVjdFRvQm94ID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5tdWx0aXBseU1hdHJpY2VzKHdvcmxkVG9Cb3gsIG5vZGUuc2NlbmVOb2RlLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRcdHZhciBwb3MgPSBuZXcgVEhSRUUuVmVjdG9yNCgpO1xyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlci5udW1FbGVtZW50czsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIHggPSB2aWV3LmdldEZsb2F0MzIoaSAqIHN0cmlkZSArIHBvc09mZnNldCArIDAsIHRydWUpO1xyXG5cdFx0XHRcdHZhciB5ID0gdmlldy5nZXRGbG9hdDMyKGkgKiBzdHJpZGUgKyBwb3NPZmZzZXQgKyA0LCB0cnVlKTtcclxuXHRcdFx0XHR2YXIgeiA9IHZpZXcuZ2V0RmxvYXQzMihpICogc3RyaWRlICsgcG9zT2Zmc2V0ICsgOCwgdHJ1ZSk7XHJcblxyXG5cdFx0XHRcdHBvcy5zZXQoeCwgeSwgeiwgMSk7XHJcblx0XHRcdFx0cG9zLmFwcGx5TWF0cml4NChvYmplY3RUb0JveCk7XHJcblxyXG5cdFx0XHRcdGlmICgtMC41IDwgcG9zLnggJiYgcG9zLnggPCAwLjUpIHtcclxuXHRcdFx0XHRcdGlmICgtMC41IDwgcG9zLnkgJiYgcG9zLnkgPCAwLjUpIHtcclxuXHRcdFx0XHRcdFx0aWYgKC0wLjUgPCBwb3MueiAmJiBwb3MueiA8IDAuNSkge1xyXG5cdFx0XHRcdFx0XHRcdHNocmlua2VkTG9jYWxCb3VuZHMuZXhwYW5kQnlQb2ludChwb3MpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR5aWVsZDtcclxuXHRcdH1cclxuXHJcblxyXG5cdFx0dmFyIGZpdHRlZFBvc2l0aW9uID0gc2hyaW5rZWRMb2NhbEJvdW5kcy5nZXRDZW50ZXIobmV3IFRIUkVFLlZlY3RvcjMoKSkuYXBwbHlNYXRyaXg0KGJveE5vZGUubWF0cml4V29ybGQpO1xyXG5cclxuXHRcdHZhciBmaXR0ZWQgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuXHRcdGZpdHRlZC5wb3NpdGlvbi5jb3B5KGZpdHRlZFBvc2l0aW9uKTtcclxuXHRcdGZpdHRlZC5zY2FsZS5jb3B5KGJveE5vZGUuc2NhbGUpO1xyXG5cdFx0Zml0dGVkLnJvdGF0aW9uLmNvcHkoYm94Tm9kZS5yb3RhdGlvbik7XHJcblxyXG5cdFx0dmFyIGRzID0gbmV3IFRIUkVFLlZlY3RvcjMoKS5zdWJWZWN0b3JzKHNocmlua2VkTG9jYWxCb3VuZHMubWF4LCBzaHJpbmtlZExvY2FsQm91bmRzLm1pbik7XHJcblx0XHRmaXR0ZWQuc2NhbGUubXVsdGlwbHkoZHMpO1xyXG5cclxuXHRcdHlpZWxkIGZpdHRlZDtcclxuXHR9XHJcblxyXG5cdGdldEZpdHRlZEJveChib3hOb2RlLCBtYXhMZXZlbCA9IEluZmluaXR5KSB7XHJcblx0XHR2YXIgc2hyaW5rZWRMb2NhbEJvdW5kcyA9IG5ldyBUSFJFRS5Cb3gzKCk7XHJcblx0XHR2YXIgd29ybGRUb0JveCA9IG5ldyBUSFJFRS5NYXRyaXg0KCkuZ2V0SW52ZXJzZShib3hOb2RlLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRmb3IgKHZhciBub2RlIG9mIHRoaXMudmlzaWJsZU5vZGVzKSB7XHJcblx0XHRcdGlmICghbm9kZS5zY2VuZU5vZGUgfHwgbm9kZS5nZXRMZXZlbCgpID4gbWF4TGV2ZWwpIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIGJ1ZmZlciA9IG5vZGUuZ2VvbWV0cnlOb2RlLmJ1ZmZlcjtcclxuXHJcblx0XHRcdHZhciBwb3NPZmZzZXQgPSBidWZmZXIub2Zmc2V0KFwicG9zaXRpb25cIik7XHJcblx0XHRcdHZhciBzdHJpZGUgPSBidWZmZXIuc3RyaWRlO1xyXG5cdFx0XHR2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIuZGF0YSk7XHJcblxyXG5cdFx0XHR2YXIgb2JqZWN0VG9Cb3ggPSBuZXcgVEhSRUUuTWF0cml4NCgpLm11bHRpcGx5TWF0cmljZXMod29ybGRUb0JveCwgbm9kZS5zY2VuZU5vZGUubWF0cml4V29ybGQpO1xyXG5cclxuXHRcdFx0dmFyIHBvcyA9IG5ldyBUSFJFRS5WZWN0b3I0KCk7XHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyLm51bUVsZW1lbnRzOyBpKyspIHtcclxuXHRcdFx0XHR2YXIgeCA9IHZpZXcuZ2V0RmxvYXQzMihpICogc3RyaWRlICsgcG9zT2Zmc2V0ICsgMCwgdHJ1ZSk7XHJcblx0XHRcdFx0dmFyIHkgPSB2aWV3LmdldEZsb2F0MzIoaSAqIHN0cmlkZSArIHBvc09mZnNldCArIDQsIHRydWUpO1xyXG5cdFx0XHRcdHZhciB6ID0gdmlldy5nZXRGbG9hdDMyKGkgKiBzdHJpZGUgKyBwb3NPZmZzZXQgKyA4LCB0cnVlKTtcclxuXHJcblx0XHRcdFx0cG9zLnNldCh4LCB5LCB6LCAxKTtcclxuXHRcdFx0XHRwb3MuYXBwbHlNYXRyaXg0KG9iamVjdFRvQm94KTtcclxuXHJcblx0XHRcdFx0aWYgKC0wLjUgPCBwb3MueCAmJiBwb3MueCA8IDAuNSkge1xyXG5cdFx0XHRcdFx0aWYgKC0wLjUgPCBwb3MueSAmJiBwb3MueSA8IDAuNSkge1xyXG5cdFx0XHRcdFx0XHRpZiAoLTAuNSA8IHBvcy56ICYmIHBvcy56IDwgMC41KSB7XHJcblx0XHRcdFx0XHRcdFx0c2hyaW5rZWRMb2NhbEJvdW5kcy5leHBhbmRCeVBvaW50KHBvcyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZml0dGVkUG9zaXRpb24gPSBzaHJpbmtlZExvY2FsQm91bmRzLmdldENlbnRlcihuZXcgVEhSRUUuVmVjdG9yMygpKS5hcHBseU1hdHJpeDQoYm94Tm9kZS5tYXRyaXhXb3JsZCk7XHJcblxyXG5cdFx0dmFyIGZpdHRlZCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xyXG5cdFx0Zml0dGVkLnBvc2l0aW9uLmNvcHkoZml0dGVkUG9zaXRpb24pO1xyXG5cdFx0Zml0dGVkLnNjYWxlLmNvcHkoYm94Tm9kZS5zY2FsZSk7XHJcblx0XHRmaXR0ZWQucm90YXRpb24uY29weShib3hOb2RlLnJvdGF0aW9uKTtcclxuXHJcblx0XHR2YXIgZHMgPSBuZXcgVEhSRUUuVmVjdG9yMygpLnN1YlZlY3RvcnMoc2hyaW5rZWRMb2NhbEJvdW5kcy5tYXgsIHNocmlua2VkTG9jYWxCb3VuZHMubWluKTtcclxuXHRcdGZpdHRlZC5zY2FsZS5tdWx0aXBseShkcyk7XHJcblxyXG5cdFx0cmV0dXJuIGZpdHRlZDtcclxuXHR9XHJcblxyXG5cdGdldCBwcm9ncmVzcygpIHtcclxuXHRcdHJldHVybiB0aGlzLnZpc2libGVOb2Rlcy5sZW5ndGggLyB0aGlzLnZpc2libGVHZW9tZXRyeS5sZW5ndGg7XHJcblx0fVxyXG5cclxuXHRmaW5kKG5hbWUpIHtcclxuXHRcdHZhciBub2RlID0gbnVsbDtcclxuXHRcdGZvciAodmFyIGNoYXIgb2YgbmFtZSkge1xyXG5cdFx0XHRpZiAoY2hhciA9PT0gXCJyXCIpIHtcclxuXHRcdFx0XHRub2RlID0gdGhpcy5yb290O1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdG5vZGUgPSBub2RlLmNoaWxkcmVuW2NoYXJdO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5vZGU7XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IHsgUG9pbnRDbG91ZE9jdHJlZSwgUG9pbnRDbG91ZE9jdHJlZU5vZGUgfTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5pbXBvcnQge0hlbHBlclV0aWxzfSBmcm9tIFwiLi4vdXRpbHMvSGVscGVyVXRpbHMuanNcIjtcclxuaW1wb3J0IHtQb2ludENsb3VkVHJlZSwgUG9pbnRDbG91ZFRyZWVOb2RlfSBmcm9tIFwiLi9Qb2ludENsb3VkVHJlZS5qc1wiO1xyXG5pbXBvcnQge1BvaW50Q29sb3JUeXBlLCBDbGlwVGFza30gZnJvbSBcIi4uL1BvdHJlZS5qc1wiO1xyXG5pbXBvcnQge0dsb2JhbH0gZnJvbSBcIi4uL0dsb2JhbC5qc1wiO1xyXG5pbXBvcnQge1BvaW50Q2xvdWRNYXRlcmlhbH0gZnJvbSBcIi4vbWF0ZXJpYWxzL1BvaW50Q2xvdWRNYXRlcmlhbC5qc1wiO1xyXG5pbXBvcnQge1RyZWVUeXBlLCBQb2ludFNpemVUeXBlfSBmcm9tIFwiLi4vUG90cmVlLmpzXCI7XHJcblxyXG5jbGFzcyBQb2ludENsb3VkQXJlbmE0RE5vZGUgZXh0ZW5kcyBQb2ludENsb3VkVHJlZU5vZGVcclxue1xyXG5cdGNvbnN0cnVjdG9yKClcclxuXHR7XHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMubGVmdCA9IG51bGw7XHJcblx0XHR0aGlzLnJpZ2h0ID0gbnVsbDtcclxuXHRcdHRoaXMuc2NlbmVOb2RlID0gbnVsbDtcclxuXHRcdHRoaXMua2R0cmVlID0gbnVsbDtcclxuXHR9XHJcblxyXG5cdGdldE51bVBvaW50cygpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2VvbWV0cnlOb2RlLm51bVBvaW50cztcclxuXHR9XHJcblxyXG5cdGlzTG9hZGVkKClcclxuXHR7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdGlzVHJlZU5vZGUoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHJcblx0aXNHZW9tZXRyeU5vZGUoKVxyXG5cdHtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdGdldExldmVsKClcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5nZW9tZXRyeU5vZGUubGV2ZWw7XHJcblx0fVxyXG5cclxuXHRnZXRCb3VuZGluZ1NwaGVyZSgpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2VvbWV0cnlOb2RlLmJvdW5kaW5nU3BoZXJlO1xyXG5cdH1cclxuXHJcblx0Z2V0Qm91bmRpbmdCb3goKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmdlb21ldHJ5Tm9kZS5ib3VuZGluZ0JveDtcclxuXHR9XHJcblxyXG5cdHRvVHJlZU5vZGUoY2hpbGQpXHJcblx0e1xyXG5cdFx0dmFyIGdlb21ldHJ5Tm9kZSA9IG51bGw7XHJcblxyXG5cdFx0aWYodGhpcy5sZWZ0ID09PSBjaGlsZClcclxuXHRcdHtcclxuXHRcdFx0Z2VvbWV0cnlOb2RlID0gdGhpcy5sZWZ0O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZih0aGlzLnJpZ2h0ID09PSBjaGlsZClcclxuXHRcdHtcclxuXHRcdFx0Z2VvbWV0cnlOb2RlID0gdGhpcy5yaWdodDtcclxuXHRcdH1cclxuXHJcblx0XHRpZighZ2VvbWV0cnlOb2RlLmxvYWRlZClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBub2RlID0gbmV3IFBvaW50Q2xvdWRBcmVuYTRETm9kZSgpO1xyXG5cdFx0dmFyIHNjZW5lTm9kZSA9IFRIUkVFLlBvaW50Q2xvdWQoZ2VvbWV0cnlOb2RlLmdlb21ldHJ5LCB0aGlzLmtkdHJlZS5tYXRlcmlhbCk7XHJcblx0XHRzY2VuZU5vZGUudmlzaWJsZSA9IGZhbHNlO1xyXG5cclxuXHRcdG5vZGUua2R0cmVlID0gdGhpcy5rZHRyZWU7XHJcblx0XHRub2RlLmdlb21ldHJ5Tm9kZSA9IGdlb21ldHJ5Tm9kZTtcclxuXHRcdG5vZGUuc2NlbmVOb2RlID0gc2NlbmVOb2RlO1xyXG5cdFx0bm9kZS5wYXJlbnQgPSB0aGlzO1xyXG5cdFx0bm9kZS5sZWZ0ID0gdGhpcy5nZW9tZXRyeU5vZGUubGVmdDtcclxuXHRcdG5vZGUucmlnaHQgPSB0aGlzLmdlb21ldHJ5Tm9kZS5yaWdodDtcclxuXHR9XHJcblxyXG5cdGdldENoaWxkcmVuKClcclxuXHR7XHJcblx0XHR2YXIgY2hpbGRyZW4gPSBbXTtcclxuXHJcblx0XHRpZih0aGlzLmxlZnQpXHJcblx0XHR7XHJcblx0XHRcdGNoaWxkcmVuLnB1c2godGhpcy5sZWZ0KTtcclxuXHRcdH1cclxuXHJcblx0XHRpZih0aGlzLnJpZ2h0KVxyXG5cdFx0e1xyXG5cdFx0XHRjaGlsZHJlbi5wdXNoKHRoaXMucmlnaHQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBjaGlsZHJlbjtcclxuXHR9XHJcbn07XHJcblxyXG5jbGFzcyBQb2ludENsb3VkQXJlbmE0RCBleHRlbmRzIFBvaW50Q2xvdWRUcmVlXHJcbntcclxuXHRjb25zdHJ1Y3RvcihnZW9tZXRyeSlcclxuXHR7XHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMucm9vdCA9IG51bGw7XHJcblx0XHRpZihnZW9tZXRyeS5yb290KVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLnJvb3QgPSBnZW9tZXRyeS5yb290O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHRnZW9tZXRyeS5hZGRFdmVudExpc3RlbmVyKFwiaGllcmFyY2h5X2xvYWRlZFwiLCAoKSA9PlxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dGhpcy5yb290ID0gZ2VvbWV0cnkucm9vdDtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy52aXNpYmxlUG9pbnRzVGFyZ2V0ID0gMiAqIDEwMDAgKiAxMDAwO1xyXG5cdFx0dGhpcy5taW5pbXVtTm9kZVBpeGVsU2l6ZSA9IDE1MDtcclxuXHJcblx0XHR0aGlzLnBvc2l0aW9uLnN1YihnZW9tZXRyeS5vZmZzZXQpO1xyXG5cdFx0dGhpcy51cGRhdGVNYXRyaXgoKTtcclxuXHJcblx0XHR0aGlzLm51bVZpc2libGVOb2RlcyA9IDA7XHJcblx0XHR0aGlzLm51bVZpc2libGVQb2ludHMgPSAwO1xyXG5cclxuXHRcdHRoaXMuYm91bmRpbmdCb3hOb2RlcyA9IFtdO1xyXG5cdFx0dGhpcy5sb2FkUXVldWUgPSBbXTtcclxuXHRcdHRoaXMudmlzaWJsZU5vZGVzID0gW107XHJcblxyXG5cdFx0dGhpcy5wY29HZW9tZXRyeSA9IGdlb21ldHJ5O1xyXG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IHRoaXMucGNvR2VvbWV0cnkuYm91bmRpbmdCb3g7XHJcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gdGhpcy5wY29HZW9tZXRyeS5ib3VuZGluZ1NwaGVyZTtcclxuXHRcdHRoaXMubWF0ZXJpYWwgPSBuZXcgUG9pbnRDbG91ZE1hdGVyaWFsKFxyXG5cdFx0e1xyXG5cdFx0XHR2ZXJ0ZXhDb2xvcnM6IFRIUkVFLlZlcnRleENvbG9ycyxcclxuXHRcdFx0c2l6ZTogMC4wNSxcclxuXHRcdFx0dHJlZVR5cGU6IFRyZWVUeXBlLktEVFJFRVxyXG5cdFx0fSk7XHJcblx0XHR0aGlzLm1hdGVyaWFsLnNpemVUeXBlID0gUG9pbnRTaXplVHlwZS5BVFRFTlVBVEVEO1xyXG5cdFx0dGhpcy5tYXRlcmlhbC5zaXplID0gMC4wNTtcclxuXHRcdHRoaXMucHJvZmlsZVJlcXVlc3RzID0gW107XHJcblx0XHR0aGlzLm5hbWUgPSBcIlwiO1xyXG5cdH1cclxuXHJcblx0Z2V0Qm91bmRpbmdCb3hXb3JsZCgpXHJcblx0e1xyXG5cdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCh0cnVlKTtcclxuXHRcdHZhciBib3ggPSB0aGlzLmJvdW5kaW5nQm94O1xyXG5cdFx0dmFyIHRyYW5zZm9ybSA9IHRoaXMubWF0cml4V29ybGQ7XHJcblx0XHR2YXIgdEJveCA9IEhlbHBlclV0aWxzLmNvbXB1dGVUcmFuc2Zvcm1lZEJvdW5kaW5nQm94KGJveCwgdHJhbnNmb3JtKTtcclxuXHJcblx0XHRyZXR1cm4gdEJveDtcclxuXHR9O1xyXG5cclxuXHRzZXROYW1lKG5hbWUpXHJcblx0e1xyXG5cdFx0aWYodGhpcy5uYW1lICE9PSBuYW1lKVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0eXBlOiBcIm5hbWVfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdG5hbWU6IG5hbWUsXHJcblx0XHRcdFx0cG9pbnRjbG91ZDogdGhpc1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldE5hbWUoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLm5hbWU7XHJcblx0fVxyXG5cclxuXHRnZXRMZXZlbCgpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMubGV2ZWw7XHJcblx0fVxyXG5cclxuXHR0b1RyZWVOb2RlKGdlb21ldHJ5Tm9kZSwgcGFyZW50KVxyXG5cdHtcclxuXHRcdHZhciBub2RlID0gbmV3IFBvaW50Q2xvdWRBcmVuYTRETm9kZSgpO1xyXG5cclxuXHRcdHZhciBzY2VuZU5vZGUgPSBuZXcgVEhSRUUuUG9pbnRzKGdlb21ldHJ5Tm9kZS5nZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCk7XHJcblx0XHRzY2VuZU5vZGUuZnJ1c3R1bUN1bGxlZCA9IHRydWU7XHJcblx0XHRzY2VuZU5vZGUub25CZWZvcmVSZW5kZXIgPSAoX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXApID0+XHJcblx0XHR7XHJcblx0XHRcdGlmKG1hdGVyaWFsLnByb2dyYW0pXHJcblx0XHRcdHtcclxuXHRcdFx0XHRfdGhpcy5nZXRDb250ZXh0KCkudXNlUHJvZ3JhbShtYXRlcmlhbC5wcm9ncmFtLnByb2dyYW0pO1xyXG5cclxuXHRcdFx0XHRpZihtYXRlcmlhbC5wcm9ncmFtLmdldFVuaWZvcm1zKCkubWFwLmxldmVsKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciBsZXZlbCA9IGdlb21ldHJ5Tm9kZS5nZXRMZXZlbCgpO1xyXG5cdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXMubGV2ZWwudmFsdWUgPSBsZXZlbDtcclxuXHRcdFx0XHRcdG1hdGVyaWFsLnByb2dyYW0uZ2V0VW5pZm9ybXMoKS5tYXAubGV2ZWwuc2V0VmFsdWUoX3RoaXMuZ2V0Q29udGV4dCgpLCBsZXZlbCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZih0aGlzLnZpc2libGVOb2RlVGV4dHVyZU9mZnNldHMgJiYgbWF0ZXJpYWwucHJvZ3JhbS5nZXRVbmlmb3JtcygpLm1hcC52blN0YXJ0KVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciB2blN0YXJ0ID0gdGhpcy52aXNpYmxlTm9kZVRleHR1cmVPZmZzZXRzLmdldChub2RlKTtcclxuXHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zLnZuU3RhcnQudmFsdWUgPSB2blN0YXJ0O1xyXG5cdFx0XHRcdFx0bWF0ZXJpYWwucHJvZ3JhbS5nZXRVbmlmb3JtcygpLm1hcC52blN0YXJ0LnNldFZhbHVlKF90aGlzLmdldENvbnRleHQoKSwgdm5TdGFydCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZihtYXRlcmlhbC5wcm9ncmFtLmdldFVuaWZvcm1zKCkubWFwLnBjSW5kZXgpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIGkgPSBub2RlLnBjSW5kZXggPyBub2RlLnBjSW5kZXggOiB0aGlzLnZpc2libGVOb2Rlcy5pbmRleE9mKG5vZGUpO1xyXG5cdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXMucGNJbmRleC52YWx1ZSA9IGk7XHJcblx0XHRcdFx0XHRtYXRlcmlhbC5wcm9ncmFtLmdldFVuaWZvcm1zKCkubWFwLnBjSW5kZXguc2V0VmFsdWUoX3RoaXMuZ2V0Q29udGV4dCgpLCBpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0bm9kZS5nZW9tZXRyeU5vZGUgPSBnZW9tZXRyeU5vZGU7XHJcblx0XHRub2RlLnNjZW5lTm9kZSA9IHNjZW5lTm9kZTtcclxuXHRcdG5vZGUucG9pbnRjbG91ZCA9IHRoaXM7XHJcblx0XHRub2RlLmxlZnQgPSBnZW9tZXRyeU5vZGUubGVmdDtcclxuXHRcdG5vZGUucmlnaHQgPSBnZW9tZXRyeU5vZGUucmlnaHQ7XHJcblxyXG5cdFx0aWYoIXBhcmVudClcclxuXHRcdHtcclxuXHRcdFx0dGhpcy5yb290ID0gbm9kZTtcclxuXHRcdFx0dGhpcy5hZGQoc2NlbmVOb2RlKTtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0cGFyZW50LnNjZW5lTm9kZS5hZGQoc2NlbmVOb2RlKTtcclxuXHJcblx0XHRcdGlmKHBhcmVudC5sZWZ0ID09PSBnZW9tZXRyeU5vZGUpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRwYXJlbnQubGVmdCA9IG5vZGU7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZihwYXJlbnQucmlnaHQgPT09IGdlb21ldHJ5Tm9kZSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHBhcmVudC5yaWdodCA9IG5vZGU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZGlzcG9zZUxpc3RlbmVyID0gZnVuY3Rpb24oKVxyXG5cdFx0e1xyXG5cdFx0XHRwYXJlbnQuc2NlbmVOb2RlLnJlbW92ZShub2RlLnNjZW5lTm9kZSk7XHJcblxyXG5cdFx0XHRpZihwYXJlbnQubGVmdCA9PT0gbm9kZSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHBhcmVudC5sZWZ0ID0gZ2VvbWV0cnlOb2RlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYocGFyZW50LnJpZ2h0ID09PSBub2RlKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cGFyZW50LnJpZ2h0ID0gZ2VvbWV0cnlOb2RlO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFx0Z2VvbWV0cnlOb2RlLm9uZVRpbWVEaXNwb3NlSGFuZGxlcnMucHVzaChkaXNwb3NlTGlzdGVuZXIpO1xyXG5cclxuXHRcdHJldHVybiBub2RlO1xyXG5cdH1cclxuXHJcblx0dXBkYXRlTWF0ZXJpYWwobWF0ZXJpYWwsIHZpc2libGVOb2RlcywgY2FtZXJhLCByZW5kZXJlcilcclxuXHR7XHJcblx0XHRtYXRlcmlhbC5mb3YgPSBjYW1lcmEuZm92ICogKE1hdGguUEkgLyAxODApO1xyXG5cdFx0bWF0ZXJpYWwuc2NyZWVuV2lkdGggPSByZW5kZXJlci5kb21FbGVtZW50LmNsaWVudFdpZHRoO1xyXG5cdFx0bWF0ZXJpYWwuc2NyZWVuSGVpZ2h0ID0gcmVuZGVyZXIuZG9tRWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcblx0XHRtYXRlcmlhbC5zcGFjaW5nID0gdGhpcy5wY29HZW9tZXRyeS5zcGFjaW5nO1xyXG5cdFx0bWF0ZXJpYWwubmVhciA9IGNhbWVyYS5uZWFyO1xyXG5cdFx0bWF0ZXJpYWwuZmFyID0gY2FtZXJhLmZhcjtcclxuXHJcblx0XHQvL3JlZHVjZSBzaGFkZXIgc291cmNlIHVwZGF0ZXMgYnkgc2V0dGluZyBtYXhMZXZlbCBzbGlnaHRseSBoaWdoZXIgdGhhbiBhY3R1YWxseSBuZWNlc3NhcnlcclxuXHRcdGlmKHRoaXMubWF4TGV2ZWwgPiBtYXRlcmlhbC5sZXZlbHMpXHJcblx0XHR7XHJcblx0XHRcdG1hdGVyaWFsLmxldmVscyA9IHRoaXMubWF4TGV2ZWwgKyAyO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vbWF0ZXJpYWwudW5pZm9ybXMub2N0cmVlU2l6ZS52YWx1ZSA9IHRoaXMuYm91bmRpbmdCb3guc2l6ZSgpLng7XHJcblx0XHR2YXIgYmJTaXplID0gdGhpcy5ib3VuZGluZ0JveC5nZXRTaXplKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG5cdFx0bWF0ZXJpYWwuYmJTaXplID0gW2JiU2l6ZS54LCBiYlNpemUueSwgYmJTaXplLnpdO1xyXG5cdH1cclxuXHJcblx0dXBkYXRlVmlzaWJsZUJvdW5kcygpXHJcblx0e1xyXG5cclxuXHR9XHJcblxyXG5cdGhpZGVEZXNjZW5kYW50cyhvYmplY3QpXHJcblx0e1xyXG5cdFx0dmFyIHN0YWNrID0gW107XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgb2JqZWN0LmNoaWxkcmVuLmxlbmd0aDsgaSsrKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgY2hpbGQgPSBvYmplY3QuY2hpbGRyZW5baV07XHJcblx0XHRcdGlmKGNoaWxkLnZpc2libGUpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzdGFjay5wdXNoKGNoaWxkKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHdoaWxlKHN0YWNrLmxlbmd0aCA+IDApXHJcblx0XHR7XHJcblx0XHRcdHZhciBjaGlsZCA9IHN0YWNrLnNoaWZ0KCk7XHJcblxyXG5cdFx0XHRjaGlsZC52aXNpYmxlID0gZmFsc2U7XHJcblx0XHRcdGlmKGNoaWxkLmJvdW5kaW5nQm94Tm9kZSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNoaWxkLmJvdW5kaW5nQm94Tm9kZS52aXNpYmxlID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBjaGlsZC5jaGlsZHJlbi5sZW5ndGg7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZhciBjaGlsZE9mQ2hpbGQgPSBjaGlsZC5jaGlsZHJlbltpXTtcclxuXHRcdFx0XHRpZihjaGlsZE9mQ2hpbGQudmlzaWJsZSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzdGFjay5wdXNoKGNoaWxkT2ZDaGlsZCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHR1cGRhdGVNYXRyaXhXb3JsZChmb3JjZSlcclxuXHR7XHJcblx0XHQvL25vZGUubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyggbm9kZS5wYXJlbnQubWF0cml4V29ybGQsIG5vZGUubWF0cml4ICk7XHJcblxyXG5cdFx0aWYodGhpcy5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlKSB0aGlzLnVwZGF0ZU1hdHJpeCgpO1xyXG5cclxuXHRcdGlmKHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9PT0gdHJ1ZSB8fCBmb3JjZSA9PT0gdHJ1ZSlcclxuXHRcdHtcclxuXHRcdFx0aWYodGhpcy5wYXJlbnQgPT09IHVuZGVmaW5lZClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRoaXMubWF0cml4V29ybGQuY29weSh0aGlzLm1hdHJpeCk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5tdWx0aXBseU1hdHJpY2VzKHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkLCB0aGlzLm1hdHJpeCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuXHRcdFx0Zm9yY2UgPSB0cnVlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0bm9kZXNPblJheShub2RlcywgcmF5KVxyXG5cdHtcclxuXHRcdHZhciBub2Rlc09uUmF5ID0gW107XHJcblxyXG5cdFx0dmFyIF9yYXkgPSByYXkuY2xvbmUoKTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKylcclxuXHRcdHtcclxuXHRcdFx0dmFyIG5vZGUgPSBub2Rlc1tpXTtcclxuXHRcdFx0dmFyIHNwaGVyZSA9IG5vZGUuZ2V0Qm91bmRpbmdTcGhlcmUobmV3IFRIUkVFLlNwaGVyZSgpKS5jbG9uZSgpLmFwcGx5TWF0cml4NChub2RlLnNjZW5lTm9kZS5tYXRyaXhXb3JsZCk7XHJcblx0XHRcdC8vVE9ETyBVbnVzZWQ6IHZhciBib3ggPSBub2RlLmdldEJvdW5kaW5nQm94KCkuY2xvbmUoKS5hcHBseU1hdHJpeDQobm9kZS5zY2VuZU5vZGUubWF0cml4V29ybGQpO1xyXG5cclxuXHRcdFx0aWYoX3JheS5pbnRlcnNlY3RzU3BoZXJlKHNwaGVyZSkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRub2Rlc09uUmF5LnB1c2gobm9kZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly9pZihfcmF5LmlzSW50ZXJzZWN0aW9uQm94KGJveCkpe1xyXG5cdFx0XHQvL1x0bm9kZXNPblJheS5wdXNoKG5vZGUpO1xyXG5cdFx0XHQvL31cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbm9kZXNPblJheTtcclxuXHR9XHJcblxyXG5cdHBpY2sodmlld2VyLCBjYW1lcmEsIHJheSwgcGFyYW1zID0ge30pXHJcblx0e1xyXG5cclxuXHRcdHZhciByZW5kZXJlciA9IHZpZXdlci5yZW5kZXJlcjtcclxuXHRcdHZhciBwUmVuZGVyZXIgPSB2aWV3ZXIucFJlbmRlcmVyO1xyXG5cclxuXHRcdHBlcmZvcm1hbmNlLm1hcmsoXCJwaWNrLXN0YXJ0XCIpO1xyXG5cclxuXHRcdHZhciBnZXRWYWwgPSAoYSwgYikgPT4gYSAhPT0gdW5kZWZpbmVkID8gYSA6IGI7XHJcblxyXG5cdFx0dmFyIHBpY2tXaW5kb3dTaXplID0gZ2V0VmFsKHBhcmFtcy5waWNrV2luZG93U2l6ZSwgMTcpO1xyXG5cdFx0dmFyIHBpY2tPdXRzaWRlQ2xpcFJlZ2lvbiA9IGdldFZhbChwYXJhbXMucGlja091dHNpZGVDbGlwUmVnaW9uLCBmYWxzZSk7XHJcblxyXG5cdFx0dmFyIHNpemUgPSByZW5kZXJlci5nZXRTaXplKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG5cclxuXHRcdHZhciB3aWR0aCA9IE1hdGguY2VpbChnZXRWYWwocGFyYW1zLndpZHRoLCBzaXplLndpZHRoKSk7XHJcblx0XHR2YXIgaGVpZ2h0ID0gTWF0aC5jZWlsKGdldFZhbChwYXJhbXMuaGVpZ2h0LCBzaXplLmhlaWdodCkpO1xyXG5cclxuXHRcdHZhciBwb2ludFNpemVUeXBlID0gZ2V0VmFsKHBhcmFtcy5wb2ludFNpemVUeXBlLCB0aGlzLm1hdGVyaWFsLnBvaW50U2l6ZVR5cGUpO1xyXG5cdFx0dmFyIHBvaW50U2l6ZSA9IGdldFZhbChwYXJhbXMucG9pbnRTaXplLCB0aGlzLm1hdGVyaWFsLnNpemUpO1xyXG5cclxuXHRcdHZhciBub2RlcyA9IHRoaXMubm9kZXNPblJheSh0aGlzLnZpc2libGVOb2RlcywgcmF5KTtcclxuXHJcblx0XHRpZihub2Rlcy5sZW5ndGggPT09IDApXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmKCF0aGlzLnBpY2tTdGF0ZSlcclxuXHRcdHtcclxuXHRcdFx0dmFyIHNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XHJcblxyXG5cdFx0XHR2YXIgbWF0ZXJpYWwgPSBuZXcgUG9pbnRDbG91ZE1hdGVyaWFsKCk7XHJcblx0XHRcdG1hdGVyaWFsLnBvaW50Q29sb3JUeXBlID0gUG9pbnRDb2xvclR5cGUuUE9JTlRfSU5ERVg7XHJcblxyXG5cdFx0XHR2YXIgcmVuZGVyVGFyZ2V0ID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyVGFyZ2V0KFxyXG5cdFx0XHRcdDEsIDEsXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0bWluRmlsdGVyOiBUSFJFRS5MaW5lYXJGaWx0ZXIsXHJcblx0XHRcdFx0XHRtYWdGaWx0ZXI6IFRIUkVFLk5lYXJlc3RGaWx0ZXIsXHJcblx0XHRcdFx0XHRmb3JtYXQ6IFRIUkVFLlJHQkFGb3JtYXRcclxuXHRcdFx0XHR9XHJcblx0XHRcdCk7XHJcblxyXG5cdFx0XHR0aGlzLnBpY2tTdGF0ZSA9IHtcclxuXHRcdFx0XHRyZW5kZXJUYXJnZXQ6IHJlbmRlclRhcmdldCxcclxuXHRcdFx0XHRtYXRlcmlhbDogbWF0ZXJpYWwsXHJcblx0XHRcdFx0c2NlbmU6IHNjZW5lXHJcblx0XHRcdH07XHJcblx0XHR9O1xyXG5cclxuXHRcdHZhciBwaWNrU3RhdGUgPSB0aGlzLnBpY2tTdGF0ZTtcclxuXHRcdHZhciBwaWNrTWF0ZXJpYWwgPSBwaWNrU3RhdGUubWF0ZXJpYWw7XHJcblx0XHRwaWNrTWF0ZXJpYWwucG9pbnRTaXplVHlwZSA9IHBvaW50U2l6ZVR5cGU7XHJcblx0XHRwaWNrTWF0ZXJpYWwuc2hhcGUgPSB0aGlzLm1hdGVyaWFsLnNoYXBlO1xyXG5cclxuXHRcdHBpY2tNYXRlcmlhbC5zaXplID0gcG9pbnRTaXplO1xyXG5cdFx0cGlja01hdGVyaWFsLnVuaWZvcm1zLm1pblNpemUudmFsdWUgPSB0aGlzLm1hdGVyaWFsLnVuaWZvcm1zLm1pblNpemUudmFsdWU7XHJcblx0XHRwaWNrTWF0ZXJpYWwudW5pZm9ybXMubWF4U2l6ZS52YWx1ZSA9IHRoaXMubWF0ZXJpYWwudW5pZm9ybXMubWF4U2l6ZS52YWx1ZTtcclxuXHRcdHBpY2tNYXRlcmlhbC5jbGFzc2lmaWNhdGlvbiA9IHRoaXMubWF0ZXJpYWwuY2xhc3NpZmljYXRpb247XHJcblx0XHRpZihwYXJhbXMucGlja0NsaXBwZWQpXHJcblx0XHR7XHJcblx0XHRcdHBpY2tNYXRlcmlhbC5jbGlwQm94ZXMgPSB0aGlzLm1hdGVyaWFsLmNsaXBCb3hlcztcclxuXHRcdFx0aWYodGhpcy5tYXRlcmlhbC5jbGlwVGFzayA9PT0gQ2xpcFRhc2suSElHSExJR0hUKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cGlja01hdGVyaWFsLmNsaXBUYXNrID0gQ2xpcFRhc2suTk9ORTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRwaWNrTWF0ZXJpYWwuY2xpcFRhc2sgPSB0aGlzLm1hdGVyaWFsLmNsaXBUYXNrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlXHJcblx0XHR7XHJcblx0XHRcdHBpY2tNYXRlcmlhbC5jbGlwQm94ZXMgPSBbXTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnVwZGF0ZU1hdGVyaWFsKHBpY2tNYXRlcmlhbCwgbm9kZXMsIGNhbWVyYSwgcmVuZGVyZXIpO1xyXG5cclxuXHRcdHBpY2tTdGF0ZS5yZW5kZXJUYXJnZXQuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcclxuXHJcblx0XHR2YXIgcGl4ZWxQb3MgPSBuZXcgVEhSRUUuVmVjdG9yMihwYXJhbXMueCwgcGFyYW1zLnkpO1xyXG5cclxuXHRcdHZhciBnbCA9IHJlbmRlcmVyLmdldENvbnRleHQoKTtcclxuXHRcdGdsLmVuYWJsZShnbC5TQ0lTU09SX1RFU1QpO1xyXG5cdFx0Z2wuc2Npc3NvcihwYXJzZUludChwaXhlbFBvcy54IC0gKHBpY2tXaW5kb3dTaXplIC0gMSkgLyAyKSwgcGFyc2VJbnQocGl4ZWxQb3MueSAtIChwaWNrV2luZG93U2l6ZSAtIDEpIC8gMiksIHBhcnNlSW50KHBpY2tXaW5kb3dTaXplKSwgcGFyc2VJbnQocGlja1dpbmRvd1NpemUpKTtcclxuXHJcblx0XHRyZW5kZXJlci5zdGF0ZS5idWZmZXJzLmRlcHRoLnNldFRlc3QocGlja01hdGVyaWFsLmRlcHRoVGVzdCk7XHJcblx0XHRyZW5kZXJlci5zdGF0ZS5idWZmZXJzLmRlcHRoLnNldE1hc2socGlja01hdGVyaWFsLmRlcHRoV3JpdGUpO1xyXG5cdFx0cmVuZGVyZXIuc3RhdGUuc2V0QmxlbmRpbmcoVEhSRUUuTm9CbGVuZGluZyk7XHJcblxyXG5cdFx0cmVuZGVyZXIuY2xlYXJUYXJnZXQocGlja1N0YXRlLnJlbmRlclRhcmdldCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XHJcblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQocGlja1N0YXRlLnJlbmRlclRhcmdldCk7XHJcblx0XHRcclxuXHRcdGdsLmNsZWFyQ29sb3IoMCwgMCwgMCwgMCk7XHJcblx0XHRyZW5kZXJlci5jbGVhclRhcmdldChwaWNrU3RhdGUucmVuZGVyVGFyZ2V0LCB0cnVlLCB0cnVlLCB0cnVlKTtcclxuXHJcblx0XHR2YXIgdG1wID0gdGhpcy5tYXRlcmlhbDtcclxuXHRcdHRoaXMubWF0ZXJpYWwgPSBwaWNrTWF0ZXJpYWw7XHJcblxyXG5cdFx0cFJlbmRlcmVyLnJlbmRlck9jdHJlZSh0aGlzLCBub2RlcywgY2FtZXJhLCBwaWNrU3RhdGUucmVuZGVyVGFyZ2V0KTtcclxuXHJcblx0XHR0aGlzLm1hdGVyaWFsID0gdG1wO1xyXG5cclxuXHRcdHZhciBjbGFtcCA9IChudW1iZXIsIG1pbiwgbWF4KSA9PiBNYXRoLm1pbihNYXRoLm1heChtaW4sIG51bWJlciksIG1heCk7XHJcblxyXG5cdFx0dmFyIHggPSBwYXJzZUludChjbGFtcChwaXhlbFBvcy54IC0gKHBpY2tXaW5kb3dTaXplIC0gMSkgLyAyLCAwLCB3aWR0aCkpO1xyXG5cdFx0dmFyIHkgPSBwYXJzZUludChjbGFtcChwaXhlbFBvcy55IC0gKHBpY2tXaW5kb3dTaXplIC0gMSkgLyAyLCAwLCBoZWlnaHQpKTtcclxuXHRcdHZhciB3ID0gcGFyc2VJbnQoTWF0aC5taW4oeCArIHBpY2tXaW5kb3dTaXplLCB3aWR0aCkgLSB4KTtcclxuXHRcdHZhciBoID0gcGFyc2VJbnQoTWF0aC5taW4oeSArIHBpY2tXaW5kb3dTaXplLCBoZWlnaHQpIC0geSk7XHJcblxyXG5cdFx0dmFyIHBpeGVsQ291bnQgPSB3ICogaDtcclxuXHRcdHZhciBidWZmZXIgPSBuZXcgVWludDhBcnJheSg0ICogcGl4ZWxDb3VudCk7XHJcblxyXG5cdFx0Z2wucmVhZFBpeGVscyh4LCB5LCBwaWNrV2luZG93U2l6ZSwgcGlja1dpbmRvd1NpemUsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIGJ1ZmZlcik7XHJcblxyXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KG51bGwpO1xyXG5cdFx0cmVuZGVyZXIucmVzZXRHTFN0YXRlKCk7XHJcblx0XHRyZW5kZXJlci5zZXRTY2lzc29yVGVzdChmYWxzZSk7XHJcblx0XHRnbC5kaXNhYmxlKGdsLlNDSVNTT1JfVEVTVCk7XHJcblxyXG5cdFx0dmFyIHBpeGVscyA9IGJ1ZmZlcjtcclxuXHRcdHZhciBpYnVmZmVyID0gbmV3IFVpbnQzMkFycmF5KGJ1ZmZlci5idWZmZXIpO1xyXG5cclxuXHRcdC8vZmluZCBjbG9zZXN0IGhpdCBpbnNpZGUgcGl4ZWxXaW5kb3cgYm91bmRhcmllc1xyXG5cdFx0dmFyIG1pbiA9IE51bWJlci5NQVhfVkFMVUU7XHJcblx0XHR2YXIgaGl0cyA9IFtdO1xyXG5cdFx0Zm9yKHZhciB1ID0gMDsgdSA8IHBpY2tXaW5kb3dTaXplOyB1KyspXHJcblx0XHR7XHJcblx0XHRcdGZvcih2YXIgdiA9IDA7IHYgPCBwaWNrV2luZG93U2l6ZTsgdisrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIG9mZnNldCA9ICh1ICsgdiAqIHBpY2tXaW5kb3dTaXplKTtcclxuXHRcdFx0XHR2YXIgZGlzdGFuY2UgPSBNYXRoLnBvdyh1IC0gKHBpY2tXaW5kb3dTaXplIC0gMSkgLyAyLCAyKSArIE1hdGgucG93KHYgLSAocGlja1dpbmRvd1NpemUgLSAxKSAvIDIsIDIpO1xyXG5cclxuXHRcdFx0XHR2YXIgcGNJbmRleCA9IHBpeGVsc1s0ICogb2Zmc2V0ICsgM107XHJcblx0XHRcdFx0cGl4ZWxzWzQgKiBvZmZzZXQgKyAzXSA9IDA7XHJcblx0XHRcdFx0dmFyIHBJbmRleCA9IGlidWZmZXJbb2Zmc2V0XTtcclxuXHJcblx0XHRcdFx0aWYoIShwY0luZGV4ID09PSAwICYmIHBJbmRleCA9PT0gMCkgJiYgKHBjSW5kZXggIT09IHVuZGVmaW5lZCkgJiYgKHBJbmRleCAhPT0gdW5kZWZpbmVkKSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR2YXIgaGl0ID0ge1xyXG5cdFx0XHRcdFx0XHRwSW5kZXg6IHBJbmRleCxcclxuXHRcdFx0XHRcdFx0cGNJbmRleDogcGNJbmRleCxcclxuXHRcdFx0XHRcdFx0ZGlzdGFuY2VUb0NlbnRlcjogZGlzdGFuY2VcclxuXHRcdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdFx0aWYocGFyYW1zLmFsbClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0aGl0cy5wdXNoKGhpdCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGlmKGhpdHMubGVuZ3RoID4gMClcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdGlmKGRpc3RhbmNlIDwgaGl0c1swXS5kaXN0YW5jZVRvQ2VudGVyKVxyXG5cdFx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRcdGhpdHNbMF0gPSBoaXQ7XHJcblx0XHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdGhpdHMucHVzaChoaXQpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGZvcih2YXIgaGl0IG9mIGhpdHMpXHJcblx0XHR7XHJcblx0XHRcdHZhciBwb2ludCA9IHt9O1xyXG5cclxuXHRcdFx0aWYoIW5vZGVzW2hpdC5wY0luZGV4XSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgbm9kZSA9IG5vZGVzW2hpdC5wY0luZGV4XTtcclxuXHRcdFx0dmFyIHBjID0gbm9kZS5zY2VuZU5vZGU7XHJcblx0XHRcdHZhciBnZW9tZXRyeSA9IG5vZGUuZ2VvbWV0cnlOb2RlLmdlb21ldHJ5O1xyXG5cclxuXHRcdFx0Zm9yKHZhciBhdHRyaWJ1dGVOYW1lIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR2YXIgYXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTtcclxuXHJcblx0XHRcdFx0aWYoYXR0cmlidXRlTmFtZSA9PT0gXCJwb3NpdGlvblwiKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciB4ID0gYXR0cmlidXRlLmFycmF5WzMgKiBoaXQucEluZGV4ICsgMF07XHJcblx0XHRcdFx0XHR2YXIgeSA9IGF0dHJpYnV0ZS5hcnJheVszICogaGl0LnBJbmRleCArIDFdO1xyXG5cdFx0XHRcdFx0dmFyIHogPSBhdHRyaWJ1dGUuYXJyYXlbMyAqIGhpdC5wSW5kZXggKyAyXTtcclxuXHJcblx0XHRcdFx0XHR2YXIgcG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMyh4LCB5LCB6KTtcclxuXHRcdFx0XHRcdHBvc2l0aW9uLmFwcGx5TWF0cml4NChwYy5tYXRyaXhXb3JsZCk7XHJcblxyXG5cdFx0XHRcdFx0cG9pbnRbYXR0cmlidXRlTmFtZV0gPSBwb3NpdGlvbjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRoaXQucG9pbnQgPSBwb2ludDtcclxuXHRcdH1cclxuXHJcblx0XHRwZXJmb3JtYW5jZS5tYXJrKFwicGljay1lbmRcIik7XHJcblx0XHRwZXJmb3JtYW5jZS5tZWFzdXJlKFwicGlja1wiLCBcInBpY2stc3RhcnRcIiwgXCJwaWNrLWVuZFwiKTtcclxuXHJcblx0XHRpZihwYXJhbXMuYWxsKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gaGl0cy5tYXAoaGl0ID0+IGhpdC5wb2ludCk7XHJcblx0XHR9XHJcblx0XHRlbHNlXHJcblx0XHR7XHJcblx0XHRcdGlmKGhpdHMubGVuZ3RoID09PSAwKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmV0dXJuIGhpdHNbMF0ucG9pbnQ7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGNvbXB1dGVWaXNpYmlsaXR5VGV4dHVyZURhdGEobm9kZXMpXHJcblx0e1xyXG5cdFx0aWYoR2xvYmFsLm1lYXN1cmVUaW1pbmdzKVxyXG5cdFx0e1xyXG5cdFx0XHRwZXJmb3JtYW5jZS5tYXJrKFwiY29tcHV0ZVZpc2liaWxpdHlUZXh0dXJlRGF0YS1zdGFydFwiKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZGF0YSA9IG5ldyBVaW50OEFycmF5KG5vZGVzLmxlbmd0aCAqIDMpO1xyXG5cdFx0dmFyIHZpc2libGVOb2RlVGV4dHVyZU9mZnNldHMgPSBuZXcgTWFwKCk7XHJcblxyXG5cdFx0Ly9jb3B5IGFycmF5XHJcblx0XHRub2RlcyA9IG5vZGVzLnNsaWNlKCk7XHJcblxyXG5cdFx0Ly9zb3J0IGJ5IGxldmVsIGFuZCBudW1iZXJcclxuXHRcdHZhciBzb3J0ID0gZnVuY3Rpb24oYSwgYilcclxuXHRcdHtcclxuXHRcdFx0dmFyIGxhID0gYS5nZW9tZXRyeU5vZGUubGV2ZWw7XHJcblx0XHRcdHZhciBsYiA9IGIuZ2VvbWV0cnlOb2RlLmxldmVsO1xyXG5cdFx0XHR2YXIgbmEgPSBhLmdlb21ldHJ5Tm9kZS5udW1iZXI7XHJcblx0XHRcdHZhciBuYiA9IGIuZ2VvbWV0cnlOb2RlLm51bWJlcjtcclxuXHRcdFx0aWYobGEgIT09IGxiKSByZXR1cm4gbGEgLSBsYjtcclxuXHRcdFx0aWYobmEgPCBuYikgcmV0dXJuIC0xO1xyXG5cdFx0XHRpZihuYSA+IG5iKSByZXR1cm4gMTtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9O1xyXG5cdFx0bm9kZXMuc29ydChzb3J0KTtcclxuXHJcblx0XHR2YXIgdmlzaWJsZU5vZGVOYW1lcyA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKVxyXG5cdFx0e1xyXG5cdFx0XHR2aXNpYmxlTm9kZU5hbWVzLnB1c2gobm9kZXNbaV0uZ2VvbWV0cnlOb2RlLm51bWJlcik7XHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgbm9kZSA9IG5vZGVzW2ldO1xyXG5cclxuXHRcdFx0dmlzaWJsZU5vZGVUZXh0dXJlT2Zmc2V0cy5zZXQobm9kZSwgaSk7XHJcblxyXG5cdFx0XHR2YXIgYjEgPSAwOyAvL2NoaWxkcmVuXHJcblx0XHRcdHZhciBiMiA9IDA7IC8vb2Zmc2V0IHRvIGZpcnN0IGNoaWxkXHJcblx0XHRcdHZhciBiMyA9IDA7IC8vc3BsaXRcclxuXHJcblx0XHRcdGlmKG5vZGUuZ2VvbWV0cnlOb2RlLmxlZnQgJiYgdmlzaWJsZU5vZGVOYW1lcy5pbmRleE9mKG5vZGUuZ2VvbWV0cnlOb2RlLmxlZnQubnVtYmVyKSA+IDApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRiMSArPSAxO1xyXG5cdFx0XHRcdGIyID0gdmlzaWJsZU5vZGVOYW1lcy5pbmRleE9mKG5vZGUuZ2VvbWV0cnlOb2RlLmxlZnQubnVtYmVyKSAtIGk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYobm9kZS5nZW9tZXRyeU5vZGUucmlnaHQgJiYgdmlzaWJsZU5vZGVOYW1lcy5pbmRleE9mKG5vZGUuZ2VvbWV0cnlOb2RlLnJpZ2h0Lm51bWJlcikgPiAwKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0YjEgKz0gMjtcclxuXHRcdFx0XHRiMiA9IChiMiA9PT0gMCkgPyB2aXNpYmxlTm9kZU5hbWVzLmluZGV4T2Yobm9kZS5nZW9tZXRyeU5vZGUucmlnaHQubnVtYmVyKSAtIGkgOiBiMjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYobm9kZS5nZW9tZXRyeU5vZGUuc3BsaXQgPT09IFwiWFwiKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0YjMgPSAxO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYobm9kZS5nZW9tZXRyeU5vZGUuc3BsaXQgPT09IFwiWVwiKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0YjMgPSAyO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYobm9kZS5nZW9tZXRyeU5vZGUuc3BsaXQgPT09IFwiWlwiKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0YjMgPSA0O1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRkYXRhW2kgKiAzICsgMF0gPSBiMTtcclxuXHRcdFx0ZGF0YVtpICogMyArIDFdID0gYjI7XHJcblx0XHRcdGRhdGFbaSAqIDMgKyAyXSA9IGIzO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmKEdsb2JhbC5tZWFzdXJlVGltaW5ncylcclxuXHRcdHtcclxuXHRcdFx0cGVyZm9ybWFuY2UubWFyayhcImNvbXB1dGVWaXNpYmlsaXR5VGV4dHVyZURhdGEtZW5kXCIpO1xyXG5cdFx0XHRwZXJmb3JtYW5jZS5tZWFzdXJlKFwicmVuZGVyLmNvbXB1dGVWaXNpYmlsaXR5VGV4dHVyZURhdGFcIiwgXCJjb21wdXRlVmlzaWJpbGl0eVRleHR1cmVEYXRhLXN0YXJ0XCIsIFwiY29tcHV0ZVZpc2liaWxpdHlUZXh0dXJlRGF0YS1lbmRcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0ZGF0YTogZGF0YSxcclxuXHRcdFx0b2Zmc2V0czogdmlzaWJsZU5vZGVUZXh0dXJlT2Zmc2V0c1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdGdldCBwcm9ncmVzcygpXHJcblx0e1xyXG5cdFx0aWYodGhpcy5wY29HZW9tZXRyeS5yb290KVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gR2xvYmFsLm51bU5vZGVzTG9hZGluZyA+IDAgPyAwIDogMTtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IHtQb2ludENsb3VkQXJlbmE0RCwgUG9pbnRDbG91ZEFyZW5hNEROb2RlfTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5pbXBvcnQge1BvaW50QXR0cmlidXRlcywgUG9pbnRBdHRyaWJ1dGV9IGZyb20gXCIuLi8uLi9Qb2ludEF0dHJpYnV0ZXMuanNcIjtcclxuaW1wb3J0IHtHbG9iYWx9IGZyb20gXCIuLi8uLi9HbG9iYWwuanNcIjtcclxuaW1wb3J0IHtYSFJGYWN0b3J5fSBmcm9tIFwiLi4vLi4vWEhSRmFjdG9yeS5qc1wiO1xyXG5cclxuY2xhc3MgUG9pbnRDbG91ZEFyZW5hNERHZW9tZXRyeU5vZGVcclxue1xyXG5cdGNvbnN0cnVjdG9yKClcclxuXHR7XHJcblx0XHR0aGlzLmxlZnQgPSBudWxsO1xyXG5cdFx0dGhpcy5yaWdodCA9IG51bGw7XHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcclxuXHRcdHRoaXMubnVtYmVyID0gbnVsbDtcclxuXHRcdHRoaXMucGNvR2VvbWV0cnkgPSBudWxsO1xyXG5cdFx0dGhpcy5sb2FkZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMubnVtUG9pbnRzID0gMDtcclxuXHRcdHRoaXMubGV2ZWwgPSAwO1xyXG5cdFx0dGhpcy5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0dGhpcy5vbmVUaW1lRGlzcG9zZUhhbmRsZXJzID0gW107XHJcblx0fVxyXG5cclxuXHRpc0dlb21ldHJ5Tm9kZSgpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRpc1RyZWVOb2RlKClcclxuXHR7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRpc0xvYWRlZCgpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMubG9hZGVkO1xyXG5cdH1cclxuXHJcblx0Z2V0Qm91bmRpbmdTcGhlcmUoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmJvdW5kaW5nU3BoZXJlO1xyXG5cdH1cclxuXHJcblx0Z2V0Qm91bmRpbmdCb3goKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmJvdW5kaW5nQm94O1xyXG5cdH1cclxuXHJcblx0Z2V0Q2hpbGRyZW4oKVxyXG5cdHtcclxuXHRcdHZhciBjaGlsZHJlbiA9IFtdO1xyXG5cclxuXHRcdGlmKHRoaXMubGVmdClcclxuXHRcdHtcclxuXHRcdFx0Y2hpbGRyZW4ucHVzaCh0aGlzLmxlZnQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmKHRoaXMucmlnaHQpXHJcblx0XHR7XHJcblx0XHRcdGNoaWxkcmVuLnB1c2godGhpcy5yaWdodCk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGNoaWxkcmVuO1xyXG5cdH1cclxuXHJcblx0Z2V0TGV2ZWwoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmxldmVsO1xyXG5cdH1cclxuXHJcblx0bG9hZCgpXHJcblx0e1xyXG5cdFx0aWYodGhpcy5sb2FkZWQgfHwgdGhpcy5sb2FkaW5nKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYoR2xvYmFsLm51bU5vZGVzTG9hZGluZyA+PSBHbG9iYWwubWF4Tm9kZXNMb2FkaW5nKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5sb2FkaW5nID0gdHJ1ZTtcclxuXHJcblx0XHRHbG9iYWwubnVtTm9kZXNMb2FkaW5nKys7XHJcblxyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0dmFyIHVybCA9IHRoaXMucGNvR2VvbWV0cnkudXJsICsgXCI/bm9kZT1cIiArIHRoaXMubnVtYmVyO1xyXG5cdFx0XHJcblx0XHR2YXIgeGhyID0gWEhSRmFjdG9yeS5jcmVhdGVYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluXCIpO1xyXG5cdFx0eGhyLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcclxuXHRcdHhoci5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XHJcblx0XHR4aHIub25sb2FkID0gZnVuY3Rpb24oKVxyXG5cdFx0e1xyXG5cdFx0XHR0cnlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZhciBidWZmZXIgPSB4aHIucmVzcG9uc2U7XHJcblx0XHRcdFx0dmFyIHNvdXJjZVZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcclxuXHRcdFx0XHR2YXIgbnVtUG9pbnRzID0gYnVmZmVyLmJ5dGVMZW5ndGggLyAxNztcclxuXHRcdFx0XHR2YXIgYnl0ZXNQZXJQb2ludCA9IDI4O1xyXG5cclxuXHRcdFx0XHR2YXIgZGF0YSA9IG5ldyBBcnJheUJ1ZmZlcihudW1Qb2ludHMgKiBieXRlc1BlclBvaW50KTtcclxuXHRcdFx0XHR2YXIgdGFyZ2V0VmlldyA9IG5ldyBEYXRhVmlldyhkYXRhKTtcclxuXHJcblx0XHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBbXHJcblx0XHRcdFx0XHRQb2ludEF0dHJpYnV0ZS5QT1NJVElPTl9DQVJURVNJQU4sXHJcblx0XHRcdFx0XHRQb2ludEF0dHJpYnV0ZS5SR0JBX1BBQ0tFRCxcclxuXHRcdFx0XHRcdFBvaW50QXR0cmlidXRlLklOVEVOU0lUWSxcclxuXHRcdFx0XHRcdFBvaW50QXR0cmlidXRlLkNMQVNTSUZJQ0FUSU9OLFxyXG5cdFx0XHRcdF07XHJcblxyXG5cdFx0XHRcdHZhciBwb3NpdGlvbiA9IG5ldyBGbG9hdDMyQXJyYXkobnVtUG9pbnRzICogMyk7XHJcblx0XHRcdFx0dmFyIGNvbG9yID0gbmV3IFVpbnQ4QXJyYXkobnVtUG9pbnRzICogNCk7XHJcblx0XHRcdFx0dmFyIGludGVuc2l0aWVzID0gbmV3IEZsb2F0MzJBcnJheShudW1Qb2ludHMpO1xyXG5cdFx0XHRcdHZhciBjbGFzc2lmaWNhdGlvbnMgPSBuZXcgVWludDhBcnJheShudW1Qb2ludHMpO1xyXG5cdFx0XHRcdHZhciBpbmRpY2VzID0gbmV3IEFycmF5QnVmZmVyKG51bVBvaW50cyAqIDQpO1xyXG5cdFx0XHRcdHZhciB1MzJJbmRpY2VzID0gbmV3IFVpbnQzMkFycmF5KGluZGljZXMpO1xyXG5cclxuXHRcdFx0XHR2YXIgdGlnaHRCb3VuZGluZ0JveCA9IG5ldyBUSFJFRS5Cb3gzKCk7XHJcblxyXG5cdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBudW1Qb2ludHM7IGkrKylcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR2YXIgeCA9IHNvdXJjZVZpZXcuZ2V0RmxvYXQzMihpICogMTcgKyAwLCB0cnVlKSArIHNlbGYuYm91bmRpbmdCb3gubWluLng7XHJcblx0XHRcdFx0XHR2YXIgeSA9IHNvdXJjZVZpZXcuZ2V0RmxvYXQzMihpICogMTcgKyA0LCB0cnVlKSArIHNlbGYuYm91bmRpbmdCb3gubWluLnk7XHJcblx0XHRcdFx0XHR2YXIgeiA9IHNvdXJjZVZpZXcuZ2V0RmxvYXQzMihpICogMTcgKyA4LCB0cnVlKSArIHNlbGYuYm91bmRpbmdCb3gubWluLno7XHJcblxyXG5cdFx0XHRcdFx0dmFyIHIgPSBzb3VyY2VWaWV3LmdldFVpbnQ4KGkgKiAxNyArIDEyLCB0cnVlKTtcclxuXHRcdFx0XHRcdHZhciBnID0gc291cmNlVmlldy5nZXRVaW50OChpICogMTcgKyAxMywgdHJ1ZSk7XHJcblx0XHRcdFx0XHR2YXIgYiA9IHNvdXJjZVZpZXcuZ2V0VWludDgoaSAqIDE3ICsgMTQsIHRydWUpO1xyXG5cclxuXHRcdFx0XHRcdHZhciBpbnRlbnNpdHkgPSBzb3VyY2VWaWV3LmdldFVpbnQ4KGkgKiAxNyArIDE1LCB0cnVlKTtcclxuXHJcblx0XHRcdFx0XHR2YXIgY2xhc3NpZmljYXRpb24gPSBzb3VyY2VWaWV3LmdldFVpbnQ4KGkgKiAxNyArIDE2LCB0cnVlKTtcclxuXHJcblx0XHRcdFx0XHR0aWdodEJvdW5kaW5nQm94LmV4cGFuZEJ5UG9pbnQobmV3IFRIUkVFLlZlY3RvcjMoeCwgeSwgeikpO1xyXG5cclxuXHRcdFx0XHRcdHBvc2l0aW9uW2kgKiAzICsgMF0gPSB4O1xyXG5cdFx0XHRcdFx0cG9zaXRpb25baSAqIDMgKyAxXSA9IHk7XHJcblx0XHRcdFx0XHRwb3NpdGlvbltpICogMyArIDJdID0gejtcclxuXHJcblx0XHRcdFx0XHRjb2xvcltpICogNCArIDBdID0gcjtcclxuXHRcdFx0XHRcdGNvbG9yW2kgKiA0ICsgMV0gPSBnO1xyXG5cdFx0XHRcdFx0Y29sb3JbaSAqIDQgKyAyXSA9IGI7XHJcblx0XHRcdFx0XHRjb2xvcltpICogNCArIDNdID0gMjU1O1xyXG5cclxuXHRcdFx0XHRcdGludGVuc2l0aWVzW2ldID0gaW50ZW5zaXR5O1xyXG5cdFx0XHRcdFx0Y2xhc3NpZmljYXRpb25zW2ldID0gY2xhc3NpZmljYXRpb247XHJcblxyXG5cdFx0XHRcdFx0dTMySW5kaWNlc1tpXSA9IGk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTtcclxuXHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9uLCAzKSk7XHJcblx0XHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwiY29sb3JcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShjb2xvciwgNCwgdHJ1ZSkpO1xyXG5cdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcImludGVuc2l0eVwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGludGVuc2l0aWVzLCAxKSk7XHJcblx0XHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwiY2xhc3NpZmljYXRpb25cIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShjbGFzc2lmaWNhdGlvbnMsIDEpKTtcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR2YXIgYnVmZmVyQXR0cmlidXRlID0gbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgVWludDhBcnJheShpbmRpY2VzKSwgNCwgdHJ1ZSk7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJpbmRpY2VzXCIsIGJ1ZmZlckF0dHJpYnV0ZSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRzZWxmLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XHJcblx0XHRcdFx0c2VsZi5udW1Qb2ludHMgPSBudW1Qb2ludHM7XHJcblx0XHRcdFx0c2VsZi5sb2FkZWQgPSB0cnVlO1xyXG5cdFx0XHRcdHNlbGYubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0XHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmctLTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjYXRjaChlKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlBvdHJlZTogRXhjZXB0aW9uIHRocm93biBwYXJzaW5nIHBvaW50cy5cIiwgZSk7XHJcblx0XHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fTtcclxuXHRcdHhoci5vbmVycm9yID0gZnVuY3Rpb24oKVxyXG5cdFx0e1xyXG5cdFx0XHRHbG9iYWwubnVtTm9kZXNMb2FkaW5nLS07XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiUG90cmVlOiBGYWlsZWQgdG8gbG9hZCBmaWxlLCBcIiArIHhoci5zdGF0dXMgKyBcIiwgZmlsZTogXCIgKyB1cmwpO1xyXG5cdFx0fTtcclxuXHRcdHhoci5zZW5kKG51bGwpO1xyXG5cdH1cclxuXHJcblx0ZGlzcG9zZSgpXHJcblx0e1xyXG5cdFx0aWYodGhpcy5nZW9tZXRyeSAmJiB0aGlzLnBhcmVudCAhPSBudWxsKVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcclxuXHRcdFx0dGhpcy5nZW9tZXRyeSA9IG51bGw7XHJcblx0XHRcdHRoaXMubG9hZGVkID0gZmFsc2U7XHJcblxyXG5cdFx0XHQvL3RoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiBcImRpc3Bvc2VcIiB9ICk7XHJcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLm9uZVRpbWVEaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBpKyspXHJcblx0XHRcdHtcclxuXHRcdFx0XHR2YXIgaGFuZGxlciA9IHRoaXMub25lVGltZURpc3Bvc2VIYW5kbGVyc1tpXTtcclxuXHRcdFx0XHRoYW5kbGVyKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5vbmVUaW1lRGlzcG9zZUhhbmRsZXJzID0gW107XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXROdW1Qb2ludHMoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLm51bVBvaW50cztcclxuXHR9XHJcbn07XHJcblxyXG5jbGFzcyBQb2ludENsb3VkQXJlbmE0REdlb21ldHJ5IGV4dGVuZHMgVEhSRUUuRXZlbnREaXNwYXRjaGVyXHJcbntcclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLm51bVBvaW50cyA9IDA7XHJcblx0XHR0aGlzLnZlcnNpb24gPSAwO1xyXG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IG51bGw7XHJcblx0XHR0aGlzLm51bU5vZGVzID0gMDtcclxuXHRcdHRoaXMubmFtZSA9IG51bGw7XHJcblx0XHR0aGlzLnByb3ZpZGVyID0gbnVsbDtcclxuXHRcdHRoaXMudXJsID0gbnVsbDtcclxuXHRcdHRoaXMucm9vdCA9IG51bGw7XHJcblx0XHR0aGlzLmxldmVscyA9IDA7XHJcblx0XHR0aGlzLl9zcGFjaW5nID0gbnVsbDtcclxuXHRcdHRoaXMucG9pbnRBdHRyaWJ1dGVzID0gbmV3IFBvaW50QXR0cmlidXRlcyhbXHJcblx0XHRcdFwiUE9TSVRJT05fQ0FSVEVTSUFOXCIsXHJcblx0XHRcdFwiQ09MT1JfUEFDS0VEXCJcclxuXHRcdF0pO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGxvYWQodXJsLCBjYWxsYmFjaylcclxuXHR7XHJcblx0XHR2YXIgeGhyID0gWEhSRmFjdG9yeS5jcmVhdGVYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluXCIpO1xyXG5cdFx0eGhyLm9wZW4oXCJHRVRcIiwgdXJsICsgXCI/aW5mb1wiLCB0cnVlKTtcclxuXHJcblx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKVxyXG5cdFx0e1xyXG5cdFx0XHR0cnlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKHhoci5yZWFkeVN0YXRlID09PSA0ICYmIHhoci5zdGF0dXMgPT09IDIwMClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR2YXIgcmVzcG9uc2UgPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xyXG5cclxuXHRcdFx0XHRcdHZhciBnZW9tZXRyeSA9IG5ldyBQb2ludENsb3VkQXJlbmE0REdlb21ldHJ5KCk7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS51cmwgPSB1cmw7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5uYW1lID0gcmVzcG9uc2UuTmFtZTtcclxuXHRcdFx0XHRcdGdlb21ldHJ5LnByb3ZpZGVyID0gcmVzcG9uc2UuUHJvdmlkZXI7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5udW1Ob2RlcyA9IHJlc3BvbnNlLk5vZGVzO1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkubnVtUG9pbnRzID0gcmVzcG9uc2UuUG9pbnRzO1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkudmVyc2lvbiA9IHJlc3BvbnNlLlZlcnNpb247XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5ib3VuZGluZ0JveCA9IG5ldyBUSFJFRS5Cb3gzKFxyXG5cdFx0XHRcdFx0XHRuZXcgVEhSRUUuVmVjdG9yMygpLmZyb21BcnJheShyZXNwb25zZS5Cb3VuZGluZ0JveC5zbGljZSgwLCAzKSksXHJcblx0XHRcdFx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KHJlc3BvbnNlLkJvdW5kaW5nQm94LnNsaWNlKDMsIDYpKVxyXG5cdFx0XHRcdFx0KTtcclxuXHRcdFx0XHRcdGlmKHJlc3BvbnNlLlNwYWNpbmcpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGdlb21ldHJ5LnNwYWNpbmcgPSByZXNwb25zZS5TcGFjaW5nO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHZhciBvZmZzZXQgPSBnZW9tZXRyeS5ib3VuZGluZ0JveC5taW4uY2xvbmUoKS5tdWx0aXBseVNjYWxhcigtMSk7XHJcblxyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuYm91bmRpbmdCb3gubWluLmFkZChvZmZzZXQpO1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuYm91bmRpbmdCb3gubWF4LmFkZChvZmZzZXQpO1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkub2Zmc2V0ID0gb2Zmc2V0O1xyXG5cclxuXHRcdFx0XHRcdHZhciBjZW50ZXIgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuYm91bmRpbmdCb3guZ2V0Q2VudGVyKGNlbnRlcik7XHJcblx0XHRcdFx0XHR2YXIgcmFkaXVzID0gZ2VvbWV0cnkuYm91bmRpbmdCb3guZ2V0U2l6ZShuZXcgVEhSRUUuVmVjdG9yMygpKS5sZW5ndGgoKSAvIDI7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9IG5ldyBUSFJFRS5TcGhlcmUoY2VudGVyLCByYWRpdXMpO1xyXG5cclxuXHRcdFx0XHRcdGdlb21ldHJ5LmxvYWRIaWVyYXJjaHkoKTtcclxuXHJcblx0XHRcdFx0XHRjYWxsYmFjayhnZW9tZXRyeSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYoeGhyLnJlYWR5U3RhdGUgPT09IDQpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Y2FsbGJhY2sobnVsbCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGNhdGNoKGUpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKGUubWVzc2FnZSk7XHJcblx0XHRcdFx0Y2FsbGJhY2sobnVsbCk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0eGhyLnNlbmQobnVsbCk7XHJcblx0fTtcclxuXHJcblx0bG9hZEhpZXJhcmNoeSgpXHJcblx0e1xyXG5cdFx0dmFyIHVybCA9IHRoaXMudXJsICsgXCI/dHJlZVwiO1xyXG5cdFx0XHJcblx0XHR2YXIgeGhyID0gWEhSRmFjdG9yeS5jcmVhdGVYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluXCIpO1xyXG5cdFx0eGhyLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcclxuXHRcdHhoci5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XHJcblxyXG5cdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+XHJcblx0XHR7XHJcblx0XHRcdGlmKCEoeGhyLnJlYWR5U3RhdGUgPT09IDQgJiYgeGhyLnN0YXR1cyA9PT0gMjAwKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIGJ1ZmZlciA9IHhoci5yZXNwb25zZTtcclxuXHRcdFx0dmFyIG51bU5vZGVzID0gYnVmZmVyLmJ5dGVMZW5ndGggLyAzO1xyXG5cdFx0XHR2YXIgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xyXG5cdFx0XHR2YXIgc3RhY2sgPSBbXTtcclxuXHRcdFx0dmFyIHJvb3QgPSBudWxsO1xyXG5cclxuXHRcdFx0dmFyIGxldmVscyA9IDA7XHJcblxyXG5cdFx0XHQvL1RPRE8gRGVidWc6IHZhciBzdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG5cdFx0XHQvL3JlYWQgaGllcmFyY2h5XHJcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBudW1Ob2RlczsgaSsrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIG1hc2sgPSB2aWV3LmdldFVpbnQ4KGkgKiAzICsgMCwgdHJ1ZSk7XHJcblxyXG5cdFx0XHRcdHZhciBoYXNMZWZ0ID0gKG1hc2sgJiAxKSA+IDA7XHJcblx0XHRcdFx0dmFyIGhhc1JpZ2h0ID0gKG1hc2sgJiAyKSA+IDA7XHJcblx0XHRcdFx0dmFyIHNwbGl0WCA9IChtYXNrICYgNCkgPiAwO1xyXG5cdFx0XHRcdHZhciBzcGxpdFkgPSAobWFzayAmIDgpID4gMDtcclxuXHRcdFx0XHR2YXIgc3BsaXRaID0gKG1hc2sgJiAxNikgPiAwO1xyXG5cdFx0XHRcdHZhciBzcGxpdCA9IG51bGw7XHJcblx0XHRcdFx0aWYoc3BsaXRYKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHNwbGl0ID0gXCJYXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYoc3BsaXRZKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHNwbGl0ID0gXCJZXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmKHNwbGl0WilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzcGxpdCA9IFwiWlwiO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dmFyIG5vZGUgPSBuZXcgUG9pbnRDbG91ZEFyZW5hNERHZW9tZXRyeU5vZGUoKTtcclxuXHRcdFx0XHRub2RlLmhhc0xlZnQgPSBoYXNMZWZ0O1xyXG5cdFx0XHRcdG5vZGUuaGFzUmlnaHQgPSBoYXNSaWdodDtcclxuXHRcdFx0XHRub2RlLnNwbGl0ID0gc3BsaXQ7XHJcblx0XHRcdFx0bm9kZS5pc0xlYWYgPSAhaGFzTGVmdCAmJiAhaGFzUmlnaHQ7XHJcblx0XHRcdFx0bm9kZS5udW1iZXIgPSBpO1xyXG5cdFx0XHRcdG5vZGUubGVmdCA9IG51bGw7XHJcblx0XHRcdFx0bm9kZS5yaWdodCA9IG51bGw7XHJcblx0XHRcdFx0bm9kZS5wY29HZW9tZXRyeSA9IHRoaXM7XHJcblx0XHRcdFx0bm9kZS5sZXZlbCA9IHN0YWNrLmxlbmd0aDtcclxuXHRcdFx0XHRsZXZlbHMgPSBNYXRoLm1heChsZXZlbHMsIG5vZGUubGV2ZWwpO1xyXG5cclxuXHRcdFx0XHRcclxuXHJcblx0XHRcdFx0aWYoc3RhY2subGVuZ3RoID4gMClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR2YXIgcGFyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XHJcblx0XHRcdFx0XHRub2RlLmJvdW5kaW5nQm94ID0gcGFyZW50LmJvdW5kaW5nQm94LmNsb25lKCk7XHJcblx0XHRcdFx0XHR2YXIgcGFyZW50QkJTaXplID0gcGFyZW50LmJvdW5kaW5nQm94LmdldFNpemUobmV3IFRIUkVFLlZlY3RvcjMoKSk7XHJcblxyXG5cdFx0XHRcdFx0aWYocGFyZW50Lmhhc0xlZnQgJiYgIXBhcmVudC5sZWZ0KVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRwYXJlbnQubGVmdCA9IG5vZGU7XHJcblx0XHRcdFx0XHRcdHBhcmVudC5jaGlsZHJlbi5wdXNoKG5vZGUpO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYocGFyZW50LnNwbGl0ID09PSBcIlhcIilcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdG5vZGUuYm91bmRpbmdCb3gubWF4LnggPSBub2RlLmJvdW5kaW5nQm94Lm1pbi54ICsgcGFyZW50QkJTaXplLnggLyAyO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGVsc2UgaWYocGFyZW50LnNwbGl0ID09PSBcIllcIilcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdG5vZGUuYm91bmRpbmdCb3gubWF4LnkgPSBub2RlLmJvdW5kaW5nQm94Lm1pbi55ICsgcGFyZW50QkJTaXplLnkgLyAyO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGVsc2UgaWYocGFyZW50LnNwbGl0ID09PSBcIlpcIilcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdG5vZGUuYm91bmRpbmdCb3gubWF4LnogPSBub2RlLmJvdW5kaW5nQm94Lm1pbi56ICsgcGFyZW50QkJTaXplLnogLyAyO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0dmFyIGNlbnRlciA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcblx0XHRcdFx0XHRcdG5vZGUuYm91bmRpbmdCb3guZ2V0Q2VudGVyKGNlbnRlcik7XHJcblx0XHRcdFx0XHRcdHZhciByYWRpdXMgPSBub2RlLmJvdW5kaW5nQm94LmdldFNpemUobmV3IFRIUkVFLlZlY3RvcjMoKSkubGVuZ3RoKCkgLyAyO1xyXG5cdFx0XHRcdFx0XHRub2RlLmJvdW5kaW5nU3BoZXJlID0gbmV3IFRIUkVFLlNwaGVyZShjZW50ZXIsIHJhZGl1cyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHBhcmVudC5yaWdodCA9IG5vZGU7XHJcblx0XHRcdFx0XHRcdHBhcmVudC5jaGlsZHJlbi5wdXNoKG5vZGUpO1xyXG5cclxuXHRcdFx0XHRcdFx0aWYocGFyZW50LnNwbGl0ID09PSBcIlhcIilcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdG5vZGUuYm91bmRpbmdCb3gubWluLnggPSBub2RlLmJvdW5kaW5nQm94Lm1pbi54ICsgcGFyZW50QkJTaXplLnggLyAyO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGVsc2UgaWYocGFyZW50LnNwbGl0ID09PSBcIllcIilcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdG5vZGUuYm91bmRpbmdCb3gubWluLnkgPSBub2RlLmJvdW5kaW5nQm94Lm1pbi55ICsgcGFyZW50QkJTaXplLnkgLyAyO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGVsc2UgaWYocGFyZW50LnNwbGl0ID09PSBcIlpcIilcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdG5vZGUuYm91bmRpbmdCb3gubWluLnogPSBub2RlLmJvdW5kaW5nQm94Lm1pbi56ICsgcGFyZW50QkJTaXplLnogLyAyO1xyXG5cdFx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgY2VudGVyID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHRcdFx0XHRcdFx0bm9kZS5ib3VuZGluZ0JveC5nZXRDZW50ZXIoY2VudGVyKTtcclxuXHRcdFx0XHRcdFx0dmFyIHJhZGl1cyA9IG5vZGUuYm91bmRpbmdCb3guZ2V0U2l6ZShuZXcgVEhSRUUuVmVjdG9yMygpKS5sZW5ndGgoKSAvIDI7XHJcblx0XHRcdFx0XHRcdG5vZGUuYm91bmRpbmdTcGhlcmUgPSBuZXcgVEhSRUUuU3BoZXJlKGNlbnRlciwgcmFkaXVzKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHJvb3QgPSBub2RlO1xyXG5cdFx0XHRcdFx0cm9vdC5ib3VuZGluZ0JveCA9IHRoaXMuYm91bmRpbmdCb3guY2xvbmUoKTtcclxuXHJcblx0XHRcdFx0XHR2YXIgY2VudGVyID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHRcdFx0XHRcdHJvb3QuYm91bmRpbmdCb3guZ2V0Q2VudGVyKGNlbnRlcik7XHJcblx0XHRcdFx0XHR2YXIgcmFkaXVzID0gcm9vdC5ib3VuZGluZ0JveC5nZXRTaXplKG5ldyBUSFJFRS5WZWN0b3IzKCkpLmxlbmd0aCgpIC8gMjtcclxuXHRcdFx0XHRcdHJvb3QuYm91bmRpbmdTcGhlcmUgPSBuZXcgVEhSRUUuU3BoZXJlKGNlbnRlciwgcmFkaXVzKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHZhciBiYlNpemUgPSBub2RlLmJvdW5kaW5nQm94LmdldFNpemUobmV3IFRIUkVFLlZlY3RvcjMoKSk7XHJcblx0XHRcdFx0bm9kZS5zcGFjaW5nID0gKChiYlNpemUueCArIGJiU2l6ZS55ICsgYmJTaXplLnopIC8gMykgLyA3NTtcclxuXHRcdFx0XHRub2RlLmVzdGltYXRlZFNwYWNpbmcgPSBub2RlLnNwYWNpbmc7XHJcblxyXG5cdFx0XHRcdHN0YWNrLnB1c2gobm9kZSk7XHJcblxyXG5cdFx0XHRcdGlmKG5vZGUuaXNMZWFmKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciBkb25lID0gZmFsc2U7XHJcblx0XHRcdFx0XHR3aGlsZSghZG9uZSAmJiBzdGFjay5sZW5ndGggPiAwKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRzdGFjay5wb3AoKTtcclxuXHJcblx0XHRcdFx0XHRcdHZhciB0b3AgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcclxuXHJcblx0XHRcdFx0XHRcdGRvbmUgPSBzdGFjay5sZW5ndGggPiAwICYmIHRvcC5oYXNSaWdodCAmJiB0b3AucmlnaHQgPT0gbnVsbDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMucm9vdCA9IHJvb3Q7XHJcblx0XHRcdHRoaXMubGV2ZWxzID0gbGV2ZWxzO1xyXG5cclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dHlwZTogXCJoaWVyYXJjaHlfbG9hZGVkXCJcclxuXHRcdFx0fSk7XHJcblx0XHR9O1xyXG5cclxuXHRcdHhoci5zZW5kKG51bGwpO1xyXG5cdH07XHJcblxyXG5cdGdldCBzcGFjaW5nKClcclxuXHR7XHJcblx0XHRpZih0aGlzLl9zcGFjaW5nKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5fc3BhY2luZztcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYodGhpcy5yb290KVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5yb290LnNwYWNpbmc7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzZXQgc3BhY2luZyh2YWx1ZSlcclxuXHR7XHJcblx0XHR0aGlzLl9zcGFjaW5nID0gdmFsdWU7XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IHtQb2ludENsb3VkQXJlbmE0REdlb21ldHJ5LCBQb2ludENsb3VkQXJlbmE0REdlb21ldHJ5Tm9kZX07XHJcbiIsIi8qXHJcbioqIEJpbmFyeSBIZWFwIGltcGxlbWVudGF0aW9uIGluIEphdmFzY3JpcHRcclxuKiogRnJvbTogaHR0cDovL2Vsb3F1ZW50amF2YXNjcmlwdC5uZXQvMXN0X2VkaXRpb24vYXBwZW5kaXgyLmh0bWx0XHJcbioqXHJcbioqIENvcHlyaWdodCAoYykgMjAwNyBNYXJpam4gSGF2ZXJiZWtlLCBsYXN0IG1vZGlmaWVkIG9uIE5vdmVtYmVyIDI4IDIwMTMuXHJcbioqXHJcbioqIExpY2Vuc2VkIHVuZGVyIGEgQ3JlYXRpdmUgQ29tbW9ucyBhdHRyaWJ1dGlvbi1ub25jb21tZXJjaWFsIGxpY2Vuc2UuIFxyXG4qKiBBbGwgY29kZSBpbiB0aGlzIGJvb2sgbWF5IGFsc28gYmUgY29uc2lkZXJlZCBsaWNlbnNlZCB1bmRlciBhbiBNSVQgbGljZW5zZS5cclxuKi9cclxuXHJcbmZ1bmN0aW9uIEJpbmFyeUhlYXAoc2NvcmVGdW5jdGlvbilcclxue1xyXG5cdHRoaXMuY29udGVudCA9IFtdO1xyXG5cdHRoaXMuc2NvcmVGdW5jdGlvbiA9IHNjb3JlRnVuY3Rpb247XHJcbn1cclxuXHJcbkJpbmFyeUhlYXAucHJvdG90eXBlID1cclxue1xyXG5cdHB1c2g6IGZ1bmN0aW9uKGVsZW1lbnQpXHJcblx0e1xyXG5cdFx0Ly8gQWRkIHRoZSBuZXcgZWxlbWVudCB0byB0aGUgZW5kIG9mIHRoZSBhcnJheS5cclxuXHRcdHRoaXMuY29udGVudC5wdXNoKGVsZW1lbnQpO1xyXG5cdFx0Ly8gQWxsb3cgaXQgdG8gYnViYmxlIHVwLlxyXG5cdFx0dGhpcy5idWJibGVVcCh0aGlzLmNvbnRlbnQubGVuZ3RoIC0gMSk7XHJcblx0fSxcclxuXHJcblx0cG9wOiBmdW5jdGlvbigpXHJcblx0e1xyXG5cdFx0Ly8gU3RvcmUgdGhlIGZpcnN0IGVsZW1lbnQgc28gd2UgY2FuIHJldHVybiBpdCBsYXRlci5cclxuXHRcdHZhciByZXN1bHQgPSB0aGlzLmNvbnRlbnRbMF07XHJcblx0XHQvLyBHZXQgdGhlIGVsZW1lbnQgYXQgdGhlIGVuZCBvZiB0aGUgYXJyYXkuXHJcblx0XHR2YXIgZW5kID0gdGhpcy5jb250ZW50LnBvcCgpO1xyXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGFueSBlbGVtZW50cyBsZWZ0LCBwdXQgdGhlIGVuZCBlbGVtZW50IGF0IHRoZVxyXG5cdFx0Ly8gc3RhcnQsIGFuZCBsZXQgaXQgc2luayBkb3duLlxyXG5cdFx0aWYodGhpcy5jb250ZW50Lmxlbmd0aCA+IDApXHJcblx0XHR7XHJcblx0XHRcdHRoaXMuY29udGVudFswXSA9IGVuZDtcclxuXHRcdFx0dGhpcy5zaW5rRG93bigwKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fSxcclxuXHJcblx0cmVtb3ZlOiBmdW5jdGlvbihub2RlKVxyXG5cdHtcclxuXHRcdHZhciBsZW5ndGggPSB0aGlzLmNvbnRlbnQubGVuZ3RoO1xyXG5cdFx0Ly8gVG8gcmVtb3ZlIGEgdmFsdWUsIHdlIG11c3Qgc2VhcmNoIHRocm91Z2ggdGhlIGFycmF5IHRvIGZpbmRcclxuXHRcdC8vIGl0LlxyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxyXG5cdFx0e1xyXG5cdFx0XHRpZih0aGlzLmNvbnRlbnRbaV0gIT0gbm9kZSkgY29udGludWU7XHJcblx0XHRcdC8vIFdoZW4gaXQgaXMgZm91bmQsIHRoZSBwcm9jZXNzIHNlZW4gaW4gJ3BvcCcgaXMgcmVwZWF0ZWRcclxuXHRcdFx0Ly8gdG8gZmlsbCB1cCB0aGUgaG9sZS5cclxuXHRcdFx0dmFyIGVuZCA9IHRoaXMuY29udGVudC5wb3AoKTtcclxuXHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgd2UgcG9wcGVkIHdhcyB0aGUgb25lIHdlIG5lZWRlZCB0byByZW1vdmUsXHJcblx0XHRcdC8vIHdlJ3JlIGRvbmUuXHJcblx0XHRcdGlmKGkgPT0gbGVuZ3RoIC0gMSkgYnJlYWs7XHJcblx0XHRcdC8vIE90aGVyd2lzZSwgd2UgcmVwbGFjZSB0aGUgcmVtb3ZlZCBlbGVtZW50IHdpdGggdGhlIHBvcHBlZFxyXG5cdFx0XHQvLyBvbmUsIGFuZCBhbGxvdyBpdCB0byBmbG9hdCB1cCBvciBzaW5rIGRvd24gYXMgYXBwcm9wcmlhdGUuXHJcblx0XHRcdHRoaXMuY29udGVudFtpXSA9IGVuZDtcclxuXHRcdFx0dGhpcy5idWJibGVVcChpKTtcclxuXHRcdFx0dGhpcy5zaW5rRG93bihpKTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0c2l6ZTogZnVuY3Rpb24oKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmNvbnRlbnQubGVuZ3RoO1xyXG5cdH0sXHJcblxyXG5cdGJ1YmJsZVVwOiBmdW5jdGlvbihuKVxyXG5cdHtcclxuXHRcdC8vIEZldGNoIHRoZSBlbGVtZW50IHRoYXQgaGFzIHRvIGJlIG1vdmVkLlxyXG5cdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmNvbnRlbnRbbl0sIHNjb3JlID0gdGhpcy5zY29yZUZ1bmN0aW9uKGVsZW1lbnQpO1xyXG5cdFx0Ly8gV2hlbiBhdCAwLCBhbiBlbGVtZW50IGNhbiBub3QgZ28gdXAgYW55IGZ1cnRoZXIuXHJcblx0XHR3aGlsZShuID4gMClcclxuXHRcdHtcclxuXHRcdFx0Ly8gQ29tcHV0ZSB0aGUgcGFyZW50IGVsZW1lbnQncyBpbmRleCwgYW5kIGZldGNoIGl0LlxyXG5cdFx0XHR2YXIgcGFyZW50TiA9IE1hdGguZmxvb3IoKG4gKyAxKSAvIDIpIC0gMSxcclxuXHRcdFx0cGFyZW50ID0gdGhpcy5jb250ZW50W3BhcmVudE5dO1xyXG5cdFx0XHQvLyBJZiB0aGUgcGFyZW50IGhhcyBhIGxlc3NlciBzY29yZSwgdGhpbmdzIGFyZSBpbiBvcmRlciBhbmQgd2VcclxuXHRcdFx0Ly8gYXJlIGRvbmUuXHJcblx0XHRcdGlmKHNjb3JlID49IHRoaXMuc2NvcmVGdW5jdGlvbihwYXJlbnQpKVxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBzd2FwIHRoZSBwYXJlbnQgd2l0aCB0aGUgY3VycmVudCBlbGVtZW50IGFuZFxyXG5cdFx0XHQvLyBjb250aW51ZS5cclxuXHRcdFx0dGhpcy5jb250ZW50W3BhcmVudE5dID0gZWxlbWVudDtcclxuXHRcdFx0dGhpcy5jb250ZW50W25dID0gcGFyZW50O1xyXG5cdFx0XHRuID0gcGFyZW50TjtcclxuXHRcdH1cclxuXHR9LFxyXG5cclxuXHRzaW5rRG93bjogZnVuY3Rpb24obilcclxuXHR7XHJcblx0XHQvLyBMb29rIHVwIHRoZSB0YXJnZXQgZWxlbWVudCBhbmQgaXRzIHNjb3JlLlxyXG5cdFx0dmFyIGxlbmd0aCA9IHRoaXMuY29udGVudC5sZW5ndGgsXHJcblx0XHRlbGVtZW50ID0gdGhpcy5jb250ZW50W25dLFxyXG5cdFx0ZWxlbVNjb3JlID0gdGhpcy5zY29yZUZ1bmN0aW9uKGVsZW1lbnQpO1xyXG5cclxuXHRcdHdoaWxlKHRydWUpXHJcblx0XHR7XHJcblx0XHRcdC8vIENvbXB1dGUgdGhlIGluZGljZXMgb2YgdGhlIGNoaWxkIGVsZW1lbnRzLlxyXG5cdFx0XHR2YXIgY2hpbGQyTiA9IChuICsgMSkgKiAyLCBjaGlsZDFOID0gY2hpbGQyTiAtIDE7XHJcblx0XHRcdC8vIFRoaXMgaXMgdXNlZCB0byBzdG9yZSB0aGUgbmV3IHBvc2l0aW9uIG9mIHRoZSBlbGVtZW50LFxyXG5cdFx0XHQvLyBpZiBhbnkuXHJcblx0XHRcdHZhciBzd2FwID0gbnVsbDtcclxuXHRcdFx0Ly8gSWYgdGhlIGZpcnN0IGNoaWxkIGV4aXN0cyAoaXMgaW5zaWRlIHRoZSBhcnJheSkuLi5cclxuXHRcdFx0aWYoY2hpbGQxTiA8IGxlbmd0aClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8vIExvb2sgaXQgdXAgYW5kIGNvbXB1dGUgaXRzIHNjb3JlLlxyXG5cdFx0XHRcdHZhciBjaGlsZDEgPSB0aGlzLmNvbnRlbnRbY2hpbGQxTl0sXHJcblx0XHRcdFx0Y2hpbGQxU2NvcmUgPSB0aGlzLnNjb3JlRnVuY3Rpb24oY2hpbGQxKTtcclxuXHRcdFx0XHQvLyBJZiB0aGUgc2NvcmUgaXMgbGVzcyB0aGFuIG91ciBlbGVtZW50J3MsIHdlIG5lZWQgdG8gc3dhcC5cclxuXHRcdFx0XHRpZihjaGlsZDFTY29yZSA8IGVsZW1TY29yZSlcclxuXHRcdFx0XHRcdHN3YXAgPSBjaGlsZDFOO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIERvIHRoZSBzYW1lIGNoZWNrcyBmb3IgdGhlIG90aGVyIGNoaWxkLlxyXG5cdFx0XHRpZihjaGlsZDJOIDwgbGVuZ3RoKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIGNoaWxkMiA9IHRoaXMuY29udGVudFtjaGlsZDJOXSxcclxuXHRcdFx0XHRjaGlsZDJTY29yZSA9IHRoaXMuc2NvcmVGdW5jdGlvbihjaGlsZDIpO1xyXG5cdFx0XHRcdGlmKGNoaWxkMlNjb3JlIDwgKHN3YXAgPT0gbnVsbCA/IGVsZW1TY29yZSA6IGNoaWxkMVNjb3JlKSlcclxuXHRcdFx0XHRcdHN3YXAgPSBjaGlsZDJOO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBObyBuZWVkIHRvIHN3YXAgZnVydGhlciwgd2UgYXJlIGRvbmUuXHJcblx0XHRcdGlmKHN3YXAgPT0gbnVsbCkgYnJlYWs7XHJcblxyXG5cdFx0XHQvLyBPdGhlcndpc2UsIHN3YXAgYW5kIGNvbnRpbnVlLlxyXG5cdFx0XHR0aGlzLmNvbnRlbnRbbl0gPSB0aGlzLmNvbnRlbnRbc3dhcF07XHJcblx0XHRcdHRoaXMuY29udGVudFtzd2FwXSA9IGVsZW1lbnQ7XHJcblx0XHRcdG4gPSBzd2FwO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbmV4cG9ydCB7QmluYXJ5SGVhcH07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxuaW1wb3J0IHsgR3JleWhvdW5kTG9hZGVyIH0gZnJvbSBcIi4vbG9hZGVycy9HcmV5aG91bmRMb2FkZXIuanNcIjtcclxuaW1wb3J0IHsgUE9DTG9hZGVyIH0gZnJvbSBcIi4vbG9hZGVycy9QT0NMb2FkZXIuanNcIjtcclxuaW1wb3J0IHsgRXB0TG9hZGVyIH0gZnJvbSBcIi4vbG9hZGVycy9FcHRMb2FkZXIuanNcIjtcclxuaW1wb3J0IHsgUG9pbnRDbG91ZE9jdHJlZSB9IGZyb20gXCIuL3BvaW50Y2xvdWQvUG9pbnRDbG91ZE9jdHJlZS5qc1wiO1xyXG5pbXBvcnQgeyBQb2ludENsb3VkQXJlbmE0RCB9IGZyb20gXCIuL3BvaW50Y2xvdWQvUG9pbnRDbG91ZEFyZW5hNEQuanNcIjtcclxuaW1wb3J0IHsgUG9pbnRDbG91ZEFyZW5hNERHZW9tZXRyeSB9IGZyb20gXCIuL3BvaW50Y2xvdWQvZ2VvbWV0cmllcy9Qb2ludENsb3VkQXJlbmE0REdlb21ldHJ5LmpzXCI7XHJcbmltcG9ydCB7IEJpbmFyeUhlYXAgfSBmcm9tIFwiLi9saWIvQmluYXJ5SGVhcC5qc1wiO1xyXG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tIFwiLi9HbG9iYWwuanNcIjtcclxuXHJcbnZhciBBdHRyaWJ1dGVMb2NhdGlvbnMgPVxyXG57XHJcbiAgcG9zaXRpb246IDAsXHJcbiAgY29sb3I6IDEsXHJcbiAgaW50ZW5zaXR5OiAyLFxyXG4gIGNsYXNzaWZpY2F0aW9uOiAzLFxyXG4gIHJldHVybk51bWJlcjogNCxcclxuICBudW1iZXJPZlJldHVybnM6IDUsXHJcbiAgcG9pbnRTb3VyY2VJRDogNixcclxuICBpbmRpY2VzOiA3LFxyXG4gIG5vcm1hbDogOCxcclxuICBzcGFjaW5nOiA5LFxyXG59O1xyXG5cclxudmFyIENsYXNzaWZpY2F0aW9uID1cclxue1xyXG4gIERFRkFVTFQ6XHJcbiAge1xyXG4gICAgMDogbmV3IFRIUkVFLlZlY3RvcjQoMC41LCAwLjUsIDAuNSwgMS4wKSxcclxuICAgIDE6IG5ldyBUSFJFRS5WZWN0b3I0KDAuNSwgMC41LCAwLjUsIDEuMCksXHJcbiAgICAyOiBuZXcgVEhSRUUuVmVjdG9yNCgwLjYzLCAwLjMyLCAwLjE4LCAxLjApLFxyXG4gICAgMzogbmV3IFRIUkVFLlZlY3RvcjQoMC4wLCAxLjAsIDAuMCwgMS4wKSxcclxuICAgIDQ6IG5ldyBUSFJFRS5WZWN0b3I0KDAuMCwgMC44LCAwLjAsIDEuMCksXHJcbiAgICA1OiBuZXcgVEhSRUUuVmVjdG9yNCgwLjAsIDAuNiwgMC4wLCAxLjApLFxyXG4gICAgNjogbmV3IFRIUkVFLlZlY3RvcjQoMS4wLCAwLjY2LCAwLjAsIDEuMCksXHJcbiAgICA3OiBuZXcgVEhSRUUuVmVjdG9yNCgxLjAsIDAsIDEuMCwgMS4wKSxcclxuICAgIDg6IG5ldyBUSFJFRS5WZWN0b3I0KDEuMCwgMCwgMC4wLCAxLjApLFxyXG4gICAgOTogbmV3IFRIUkVFLlZlY3RvcjQoMC4wLCAwLjAsIDEuMCwgMS4wKSxcclxuICAgIDEyOiBuZXcgVEhSRUUuVmVjdG9yNCgxLjAsIDEuMCwgMC4wLCAxLjApLFxyXG4gICAgREVGQVVMVDogbmV3IFRIUkVFLlZlY3RvcjQoMC4zLCAwLjYsIDAuNiwgMC41KVxyXG4gIH1cclxufTtcclxuXHJcbnZhciBDbGlwVGFzayA9XHJcbntcclxuICBOT05FOiAwLFxyXG4gIEhJR0hMSUdIVDogMSxcclxuICBTSE9XX0lOU0lERTogMixcclxuICBTSE9XX09VVFNJREU6IDNcclxufTtcclxuXHJcbnZhciBDbGlwTWV0aG9kID1cclxue1xyXG4gIElOU0lERV9BTlk6IDAsXHJcbiAgSU5TSURFX0FMTDogMVxyXG59O1xyXG5cclxudmFyIFBvaW50U2l6ZVR5cGUgPVxyXG57XHJcbiAgRklYRUQ6IDAsXHJcbiAgQVRURU5VQVRFRDogMSxcclxuICBBREFQVElWRTogMlxyXG59O1xyXG5cclxudmFyIFBvaW50U2hhcGUgPVxyXG57XHJcbiAgU1FVQVJFOiAwLFxyXG4gIENJUkNMRTogMSxcclxuICBQQVJBQk9MT0lEOiAyXHJcbn07XHJcblxyXG52YXIgUG9pbnRDb2xvclR5cGUgPVxyXG57XHJcbiAgUkdCOiAwLFxyXG4gIENPTE9SOiAxLFxyXG4gIERFUFRIOiAyLFxyXG4gIEhFSUdIVDogMyxcclxuICBFTEVWQVRJT046IDMsXHJcbiAgSU5URU5TSVRZOiA0LFxyXG4gIElOVEVOU0lUWV9HUkFESUVOVDogNSxcclxuICBMT0Q6IDYsXHJcbiAgTEVWRUxfT0ZfREVUQUlMOiA2LFxyXG4gIFBPSU5UX0lOREVYOiA3LFxyXG4gIENMQVNTSUZJQ0FUSU9OOiA4LFxyXG4gIFJFVFVSTl9OVU1CRVI6IDksXHJcbiAgU09VUkNFOiAxMCxcclxuICBOT1JNQUw6IDExLFxyXG4gIFBIT05HOiAxMixcclxuICBSR0JfSEVJR0hUOiAxMyxcclxuICBDT01QT1NJVEU6IDUwXHJcbn07XHJcblxyXG52YXIgVHJlZVR5cGUgPVxyXG57XHJcbiAgT0NUUkVFOiAwLFxyXG4gIEtEVFJFRTogMVxyXG59O1xyXG5cclxudmFyIFBvaW50U2VsZWN0aW9uVHlwZSA9XHJcbntcclxuICBCUklHSFRORVNTOiAwLFxyXG4gIENPTE9SOiAxXHJcbn07XHJcblxyXG5mdW5jdGlvbiBsb2FkUG9pbnRDbG91ZChwYXRoLCBuYW1lLCBjYWxsYmFjaykge1xyXG4gIHZhciBsb2FkZWQgPSBmdW5jdGlvbiAocG9pbnRjbG91ZCkge1xyXG4gICAgaWYgKG5hbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBwb2ludGNsb3VkLm5hbWUgPSBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGxiYWNrKFxyXG4gICAgICB7XHJcbiAgICAgICAgdHlwZTogXCJwb2ludGNsb3VkX2xvYWRlZFwiLFxyXG4gICAgICAgIHBvaW50Y2xvdWQ6IHBvaW50Y2xvdWRcclxuICAgICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgLy9HcmV5aG91bmQgcG9pbnRjbG91ZCBzZXJ2ZXIgVVJMLlxyXG4gIGlmIChwYXRoLmluZGV4T2YoXCJncmV5aG91bmQ6Ly9cIikgPT09IDApIHtcclxuICAgIEdyZXlob3VuZExvYWRlci5sb2FkKHBhdGgsIGZ1bmN0aW9uIChnZW9tZXRyeSkge1xyXG4gICAgICBpZiAoZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGxvYWRlZChuZXcgUG9pbnRDbG91ZE9jdHJlZShnZW9tZXRyeSkpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLy9Qb3RyZWUgcG9pbnQgY2xvdWRcclxuICBlbHNlIGlmIChwYXRoLmluZGV4T2YoXCJjbG91ZC5qc1wiKSA+IDApIHtcclxuICAgIFBPQ0xvYWRlci5sb2FkKHBhdGgsIGZ1bmN0aW9uIChnZW9tZXRyeSkge1xyXG4gICAgICBpZiAoZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGxvYWRlZChuZXcgUG9pbnRDbG91ZE9jdHJlZShnZW9tZXRyeSkpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgZWxzZSBpZiAocGF0aC5pbmRleE9mKCdlcHQuanNvbicpID4gMCkge1xyXG4gICAgRXB0TG9hZGVyLmxvYWQocGF0aCwgZnVuY3Rpb24gKGdlb21ldHJ5KSB7XHJcbiAgICAgIGlmIChnZW9tZXRyeSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgbG9hZGVkKG5ldyBQb2ludENsb3VkT2N0cmVlKGdlb21ldHJ5KSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICAvL0FyZW5hIDREIHBvaW50IGNsb3VkXHJcbiAgZWxzZSBpZiAocGF0aC5pbmRleE9mKFwiLnZwY1wiKSA+IDApIHtcclxuICAgIFBvaW50Q2xvdWRBcmVuYTRER2VvbWV0cnkubG9hZChwYXRoLCBmdW5jdGlvbiAoZ2VvbWV0cnkpIHtcclxuICAgICAgaWYgKGdlb21ldHJ5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBsb2FkZWQobmV3IFBvaW50Q2xvdWRBcmVuYTREKGdlb21ldHJ5KSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihcIlBvdHJlZTogRmFpbGVkIHRvIGxvYWQgcG9pbnQgY2xvdWQgZnJvbSBVUkwgXCIgKyBwYXRoKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVZpc2liaWxpdHkocG9pbnRjbG91ZHMsIGNhbWVyYSwgcmVuZGVyZXIpIHtcclxuICB2YXIgbnVtVmlzaWJsZU5vZGVzID0gMDtcclxuICB2YXIgbnVtVmlzaWJsZVBvaW50cyA9IDA7XHJcbiAgdmFyIG51bVZpc2libGVQb2ludHNJblBvaW50Y2xvdWRzID0gbmV3IE1hcChwb2ludGNsb3Vkcy5tYXAocGMgPT4gW3BjLCAwXSkpO1xyXG4gIHZhciB2aXNpYmxlTm9kZXMgPSBbXTtcclxuICB2YXIgdmlzaWJsZUdlb21ldHJ5ID0gW107XHJcbiAgdmFyIHVubG9hZGVkR2VvbWV0cnkgPSBbXTtcclxuICB2YXIgbG93ZXN0U3BhY2luZyA9IEluZmluaXR5O1xyXG5cclxuICAvL0NhbGN1bGF0ZSBvYmplY3Qgc3BhY2UgZnJ1c3R1bSBhbmQgY2FtIHBvcyBhbmQgc2V0dXAgcHJpb3JpdHkgcXVldWVcclxuICB2YXIgc3RydWN0dXJlcyA9IHVwZGF0ZVZpc2liaWxpdHlTdHJ1Y3R1cmVzKHBvaW50Y2xvdWRzLCBjYW1lcmEsIHJlbmRlcmVyKTtcclxuICB2YXIgZnJ1c3R1bXMgPSBzdHJ1Y3R1cmVzLmZydXN0dW1zO1xyXG4gIHZhciBjYW1PYmpQb3NpdGlvbnMgPSBzdHJ1Y3R1cmVzLmNhbU9ialBvc2l0aW9ucztcclxuICB2YXIgcHJpb3JpdHlRdWV1ZSA9IHN0cnVjdHVyZXMucHJpb3JpdHlRdWV1ZTtcclxuXHJcbiAgdmFyIGxvYWRlZFRvR1BVVGhpc0ZyYW1lID0gMDtcclxuICB2YXIgZG9tV2lkdGggPSByZW5kZXJlci5kb21FbGVtZW50LmNsaWVudFdpZHRoO1xyXG4gIHZhciBkb21IZWlnaHQgPSByZW5kZXJlci5kb21FbGVtZW50LmNsaWVudEhlaWdodDtcclxuXHJcbiAgLy9DaGVjayBpZiBwb2ludGNsb3VkIGhhcyBiZWVuIHRyYW5zZm9ybWVkLCBzb21lIGNvZGUgd2lsbCBvbmx5IGJlIGV4ZWN1dGVkIGlmIGNoYW5nZXMgaGF2ZSBiZWVuIGRldGVjdGVkXHJcbiAgaWYgKCFHbG9iYWwucG9pbnRjbG91ZFRyYW5zZm9ybVZlcnNpb24pIHtcclxuICAgIEdsb2JhbC5wb2ludGNsb3VkVHJhbnNmb3JtVmVyc2lvbiA9IG5ldyBNYXAoKTtcclxuICB9XHJcblxyXG4gIHZhciBwb2ludGNsb3VkVHJhbnNmb3JtVmVyc2lvbiA9IEdsb2JhbC5wb2ludGNsb3VkVHJhbnNmb3JtVmVyc2lvbjtcclxuXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludGNsb3Vkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgdmFyIHBvaW50Y2xvdWQgPSBwb2ludGNsb3Vkc1tpXTtcclxuXHJcbiAgICBpZiAoIXBvaW50Y2xvdWQudmlzaWJsZSkge1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuXHJcbiAgICBwb2ludGNsb3VkLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XHJcblxyXG4gICAgaWYgKCFwb2ludGNsb3VkVHJhbnNmb3JtVmVyc2lvbi5oYXMocG9pbnRjbG91ZCkpIHtcclxuICAgICAgcG9pbnRjbG91ZFRyYW5zZm9ybVZlcnNpb24uc2V0KHBvaW50Y2xvdWQsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbnVtYmVyOiAwLFxyXG4gICAgICAgICAgdHJhbnNmb3JtOiBwb2ludGNsb3VkLm1hdHJpeFdvcmxkLmNsb25lKClcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB2YXIgdmVyc2lvbiA9IHBvaW50Y2xvdWRUcmFuc2Zvcm1WZXJzaW9uLmdldChwb2ludGNsb3VkKTtcclxuICAgICAgaWYgKCF2ZXJzaW9uLnRyYW5zZm9ybS5lcXVhbHMocG9pbnRjbG91ZC5tYXRyaXhXb3JsZCkpIHtcclxuICAgICAgICB2ZXJzaW9uLm51bWJlcisrO1xyXG4gICAgICAgIHZlcnNpb24udHJhbnNmb3JtLmNvcHkocG9pbnRjbG91ZC5tYXRyaXhXb3JsZCk7XHJcblxyXG4gICAgICAgIHBvaW50Y2xvdWQuZGlzcGF0Y2hFdmVudChcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdHlwZTogXCJ0cmFuc2Zvcm1hdGlvbl9jaGFuZ2VkXCIsXHJcbiAgICAgICAgICAgIHRhcmdldDogcG9pbnRjbG91ZFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vUHJvY2VzcyBwcmlvcml0eSBxdWV1ZVxyXG4gIHdoaWxlIChwcmlvcml0eVF1ZXVlLnNpemUoKSA+IDApIHtcclxuICAgIHZhciBlbGVtZW50ID0gcHJpb3JpdHlRdWV1ZS5wb3AoKTtcclxuICAgIHZhciBub2RlID0gZWxlbWVudC5ub2RlO1xyXG4gICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50O1xyXG4gICAgdmFyIHBvaW50Y2xvdWQgPSBwb2ludGNsb3Vkc1tlbGVtZW50LnBvaW50Y2xvdWRdO1xyXG4gICAgdmFyIGJveCA9IG5vZGUuZ2V0Qm91bmRpbmdCb3goKTtcclxuICAgIHZhciBmcnVzdHVtID0gZnJ1c3R1bXNbZWxlbWVudC5wb2ludGNsb3VkXTtcclxuICAgIHZhciBjYW1PYmpQb3MgPSBjYW1PYmpQb3NpdGlvbnNbZWxlbWVudC5wb2ludGNsb3VkXTtcclxuXHJcbiAgICB2YXIgaW5zaWRlRnJ1c3R1bSA9IGZydXN0dW0uaW50ZXJzZWN0c0JveChib3gpO1xyXG4gICAgdmFyIG1heExldmVsID0gcG9pbnRjbG91ZC5tYXhMZXZlbCB8fCBJbmZpbml0eTtcclxuICAgIHZhciBsZXZlbCA9IG5vZGUuZ2V0TGV2ZWwoKTtcclxuXHJcbiAgICB2YXIgdmlzaWJsZSA9IGluc2lkZUZydXN0dW07XHJcbiAgICB2aXNpYmxlID0gdmlzaWJsZSAmJiAhKG51bVZpc2libGVQb2ludHNJblBvaW50Y2xvdWRzLmdldChwb2ludGNsb3VkKSArIG5vZGUuZ2V0TnVtUG9pbnRzKCkgPiBwb2ludGNsb3VkLnBvaW50QnVkZ2V0KTtcclxuICAgIHZpc2libGUgPSB2aXNpYmxlICYmIGxldmVsIDwgbWF4TGV2ZWw7XHJcblxyXG4gICAgLy9UT0RPIDxDTElQUElORyBUQVNLUz5cclxuICAgIC8qXHJcbiAgICBpZihmYWxzZSAmJiBwb2ludGNsb3VkLm1hdGVyaWFsLmNsaXBCb3hlcy5sZW5ndGggPiAwKVxyXG4gICAge1xyXG4gICAgICB2YXIgbnVtSW50ZXJzZWN0aW5nID0gMDtcclxuICAgICAgdmFyIG51bUludGVyc2VjdGlvblZvbHVtZXMgPSAwO1xyXG5cclxuICAgICAgZm9yKHZhciBjbGlwQm94IG9mIHBvaW50Y2xvdWQubWF0ZXJpYWwuY2xpcEJveGVzKVxyXG4gICAgICB7XHJcbiAgICAgICAgdmFyIHBjV29ybGRJbnZlcnNlID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5nZXRJbnZlcnNlKHBvaW50Y2xvdWQubWF0cml4V29ybGQpO1xyXG4gICAgICAgIHZhciB0b1BDT2JqZWN0ID0gcGNXb3JsZEludmVyc2UubXVsdGlwbHkoY2xpcEJveC5ib3gubWF0cml4V29ybGQpO1xyXG5cclxuICAgICAgICB2YXIgcHggPSBuZXcgVEhSRUUuVmVjdG9yMygrMSwgMCwgMCkuYXBwbHlNYXRyaXg0KHRvUENPYmplY3QpO1xyXG4gICAgICAgIHZhciBueCA9IG5ldyBUSFJFRS5WZWN0b3IzKC0xLCAwLCAwKS5hcHBseU1hdHJpeDQodG9QQ09iamVjdCk7XHJcbiAgICAgICAgdmFyIHB5ID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgKzEsIDApLmFwcGx5TWF0cml4NCh0b1BDT2JqZWN0KTtcclxuICAgICAgICB2YXIgbnkgPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAtMSwgMCkuYXBwbHlNYXRyaXg0KHRvUENPYmplY3QpO1xyXG4gICAgICAgIHZhciBweiA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsICsxKS5hcHBseU1hdHJpeDQodG9QQ09iamVjdCk7XHJcbiAgICAgICAgdmFyIG56ID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgLTEpLmFwcGx5TWF0cml4NCh0b1BDT2JqZWN0KTtcclxuXHJcbiAgICAgICAgdmFyIHB4TiA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuc3ViVmVjdG9ycyhueCwgcHgpLm5vcm1hbGl6ZSgpO1xyXG4gICAgICAgIHZhciBueE4gPSBweE4uY2xvbmUoKS5tdWx0aXBseVNjYWxhcigtMSk7XHJcbiAgICAgICAgdmFyIHB5TiA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuc3ViVmVjdG9ycyhueSwgcHkpLm5vcm1hbGl6ZSgpO1xyXG4gICAgICAgIHZhciBueU4gPSBweU4uY2xvbmUoKS5tdWx0aXBseVNjYWxhcigtMSk7XHJcbiAgICAgICAgdmFyIHB6TiA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuc3ViVmVjdG9ycyhueiwgcHopLm5vcm1hbGl6ZSgpO1xyXG4gICAgICAgIHZhciBuek4gPSBwek4uY2xvbmUoKS5tdWx0aXBseVNjYWxhcigtMSk7XHJcblxyXG4gICAgICAgIHZhciBweFBsYW5lID0gbmV3IFRIUkVFLlBsYW5lKCkuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQocHhOLCBweCk7XHJcbiAgICAgICAgdmFyIG54UGxhbmUgPSBuZXcgVEhSRUUuUGxhbmUoKS5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludChueE4sIG54KTtcclxuICAgICAgICB2YXIgcHlQbGFuZSA9IG5ldyBUSFJFRS5QbGFuZSgpLnNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KHB5TiwgcHkpO1xyXG4gICAgICAgIHZhciBueVBsYW5lID0gbmV3IFRIUkVFLlBsYW5lKCkuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQobnlOLCBueSk7XHJcbiAgICAgICAgdmFyIHB6UGxhbmUgPSBuZXcgVEhSRUUuUGxhbmUoKS5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludChwek4sIHB6KTtcclxuICAgICAgICB2YXIgbnpQbGFuZSA9IG5ldyBUSFJFRS5QbGFuZSgpLnNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KG56TiwgbnopO1xyXG5cclxuICAgICAgICB2YXIgZnJ1c3R1bSA9IG5ldyBUSFJFRS5GcnVzdHVtKHB4UGxhbmUsIG54UGxhbmUsIHB5UGxhbmUsIG55UGxhbmUsIHB6UGxhbmUsIG56UGxhbmUpO1xyXG4gICAgICAgIHZhciBpbnRlcnNlY3RzID0gZnJ1c3R1bS5pbnRlcnNlY3RzQm94KGJveCk7XHJcblxyXG4gICAgICAgIGlmKGludGVyc2VjdHMpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgbnVtSW50ZXJzZWN0aW5nKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG51bUludGVyc2VjdGlvblZvbHVtZXMrKztcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGluc2lkZUFueSA9IG51bUludGVyc2VjdGluZyA+IDA7XHJcbiAgICAgIHZhciBpbnNpZGVBbGwgPSBudW1JbnRlcnNlY3RpbmcgPT09IG51bUludGVyc2VjdGlvblZvbHVtZXM7XHJcblxyXG4gICAgICBpZihwb2ludGNsb3VkLm1hdGVyaWFsLmNsaXBUYXNrID09PSBDbGlwVGFzay5TSE9XX0lOU0lERSlcclxuICAgICAge1xyXG4gICAgICAgIGlmKHBvaW50Y2xvdWQubWF0ZXJpYWwuY2xpcE1ldGhvZCA9PT0gQ2xpcE1ldGhvZC5JTlNJREVfQU5ZICYmIGluc2lkZUFueSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICAvL25vZGUuZGVidWcgPSB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYocG9pbnRjbG91ZC5tYXRlcmlhbC5jbGlwTWV0aG9kID09PSBDbGlwTWV0aG9kLklOU0lERV9BTEwgJiYgaW5zaWRlQWxsKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgIC8vbm9kZS5kZWJ1ZyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICB7XHJcbiAgICAgICAgICB2aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAqL1xyXG5cclxuICAgIGlmIChub2RlLnNwYWNpbmcpIHtcclxuICAgICAgbG93ZXN0U3BhY2luZyA9IE1hdGgubWluKGxvd2VzdFNwYWNpbmcsIG5vZGUuc3BhY2luZyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChub2RlLmdlb21ldHJ5Tm9kZSAmJiBub2RlLmdlb21ldHJ5Tm9kZS5zcGFjaW5nKSB7XHJcbiAgICAgIGxvd2VzdFNwYWNpbmcgPSBNYXRoLm1pbihsb3dlc3RTcGFjaW5nLCBub2RlLmdlb21ldHJ5Tm9kZS5zcGFjaW5nKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXZpc2libGUpIHtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgbnVtVmlzaWJsZU5vZGVzKys7XHJcbiAgICBudW1WaXNpYmxlUG9pbnRzICs9IG5vZGUuZ2V0TnVtUG9pbnRzKCk7XHJcblxyXG4gICAgdmFyIG51bVZpc2libGVQb2ludHNJblBvaW50Y2xvdWQgPSBudW1WaXNpYmxlUG9pbnRzSW5Qb2ludGNsb3Vkcy5nZXQocG9pbnRjbG91ZCk7XHJcbiAgICBudW1WaXNpYmxlUG9pbnRzSW5Qb2ludGNsb3Vkcy5zZXQocG9pbnRjbG91ZCwgbnVtVmlzaWJsZVBvaW50c0luUG9pbnRjbG91ZCArIG5vZGUuZ2V0TnVtUG9pbnRzKCkpO1xyXG5cclxuICAgIHBvaW50Y2xvdWQubnVtVmlzaWJsZU5vZGVzKys7XHJcbiAgICBwb2ludGNsb3VkLm51bVZpc2libGVQb2ludHMgKz0gbm9kZS5nZXROdW1Qb2ludHMoKTtcclxuXHJcbiAgICBpZiAobm9kZS5pc0dlb21ldHJ5Tm9kZSgpICYmICghcGFyZW50IHx8IHBhcmVudC5pc1RyZWVOb2RlKCkpKSB7XHJcbiAgICAgIGlmIChub2RlLmlzTG9hZGVkKCkgJiYgbG9hZGVkVG9HUFVUaGlzRnJhbWUgPCBHbG9iYWwubWF4Tm9kZXNMb2FkR1BVRnJhbWUpIHtcclxuICAgICAgICBub2RlID0gcG9pbnRjbG91ZC50b1RyZWVOb2RlKG5vZGUsIHBhcmVudCk7XHJcbiAgICAgICAgbG9hZGVkVG9HUFVUaGlzRnJhbWUrKztcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB1bmxvYWRlZEdlb21ldHJ5LnB1c2gobm9kZSk7XHJcbiAgICAgICAgdmlzaWJsZUdlb21ldHJ5LnB1c2gobm9kZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAobm9kZS5pc1RyZWVOb2RlKCkpIHtcclxuICAgICAgR2xvYmFsLmxydS50b3VjaChub2RlLmdlb21ldHJ5Tm9kZSk7XHJcblxyXG4gICAgICBub2RlLnNjZW5lTm9kZS52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgbm9kZS5zY2VuZU5vZGUubWF0ZXJpYWwgPSBwb2ludGNsb3VkLm1hdGVyaWFsO1xyXG5cclxuICAgICAgdmlzaWJsZU5vZGVzLnB1c2gobm9kZSk7XHJcbiAgICAgIHBvaW50Y2xvdWQudmlzaWJsZU5vZGVzLnB1c2gobm9kZSk7XHJcblxyXG4gICAgICBpZiAobm9kZS5fdHJhbnNmb3JtVmVyc2lvbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgbm9kZS5fdHJhbnNmb3JtVmVyc2lvbiA9IC0xO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgdHJhbnNmb3JtVmVyc2lvbiA9IHBvaW50Y2xvdWRUcmFuc2Zvcm1WZXJzaW9uLmdldChwb2ludGNsb3VkKTtcclxuICAgICAgaWYgKG5vZGUuX3RyYW5zZm9ybVZlcnNpb24gIT09IHRyYW5zZm9ybVZlcnNpb24ubnVtYmVyKSB7XHJcbiAgICAgICAgbm9kZS5zY2VuZU5vZGUudXBkYXRlTWF0cml4KCk7XHJcbiAgICAgICAgbm9kZS5zY2VuZU5vZGUubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyhwb2ludGNsb3VkLm1hdHJpeFdvcmxkLCBub2RlLnNjZW5lTm9kZS5tYXRyaXgpO1xyXG4gICAgICAgIG5vZGUuX3RyYW5zZm9ybVZlcnNpb24gPSB0cmFuc2Zvcm1WZXJzaW9uLm51bWJlcjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHBvaW50Y2xvdWQuc2hvd0JvdW5kaW5nQm94ICYmICFub2RlLmJvdW5kaW5nQm94Tm9kZSAmJiBub2RlLmdldEJvdW5kaW5nQm94KSB7XHJcbiAgICAgICAgdmFyIGJveEhlbHBlciA9IG5ldyBUSFJFRS5Cb3gzSGVscGVyKG5vZGUuZ2V0Qm91bmRpbmdCb3goKSk7XHJcbiAgICAgICAgYm94SGVscGVyLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcclxuICAgICAgICBwb2ludGNsb3VkLmJvdW5kaW5nQm94Tm9kZXMucHVzaChib3hIZWxwZXIpO1xyXG4gICAgICAgIG5vZGUuYm91bmRpbmdCb3hOb2RlID0gYm94SGVscGVyO1xyXG4gICAgICAgIG5vZGUuYm91bmRpbmdCb3hOb2RlLm1hdHJpeC5jb3B5KHBvaW50Y2xvdWQubWF0cml4V29ybGQpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKHBvaW50Y2xvdWQuc2hvd0JvdW5kaW5nQm94KSB7XHJcbiAgICAgICAgbm9kZS5ib3VuZGluZ0JveE5vZGUudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgbm9kZS5ib3VuZGluZ0JveE5vZGUubWF0cml4LmNvcHkocG9pbnRjbG91ZC5tYXRyaXhXb3JsZCk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoIXBvaW50Y2xvdWQuc2hvd0JvdW5kaW5nQm94ICYmIG5vZGUuYm91bmRpbmdCb3hOb2RlKSB7XHJcbiAgICAgICAgbm9kZS5ib3VuZGluZ0JveE5vZGUudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy9BZGQgY2hpbGQgbm9kZXMgdG8gcHJpb3JpdHlRdWV1ZVxyXG4gICAgdmFyIGNoaWxkcmVuID0gbm9kZS5nZXRDaGlsZHJlbigpO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcclxuICAgICAgdmFyIHdlaWdodCA9IDA7XHJcblxyXG4gICAgICAvL1BlcnNwZWN0aXZlIGNhbWVyYVxyXG4gICAgICBpZiAoY2FtZXJhLmlzUGVyc3BlY3RpdmVDYW1lcmEpIHtcclxuICAgICAgICB2YXIgc3BoZXJlID0gY2hpbGQuZ2V0Qm91bmRpbmdTcGhlcmUobmV3IFRIUkVFLlNwaGVyZSgpKTtcclxuICAgICAgICB2YXIgY2VudGVyID0gc3BoZXJlLmNlbnRlcjtcclxuICAgICAgICB2YXIgZGlzdGFuY2UgPSBzcGhlcmUuY2VudGVyLmRpc3RhbmNlVG8oY2FtT2JqUG9zKTtcclxuXHJcbiAgICAgICAgdmFyIHJhZGl1cyA9IHNwaGVyZS5yYWRpdXM7XHJcbiAgICAgICAgdmFyIGZvdiA9IChjYW1lcmEuZm92ICogTWF0aC5QSSkgLyAxODA7XHJcbiAgICAgICAgdmFyIHNsb3BlID0gTWF0aC50YW4oZm92IC8gMik7XHJcbiAgICAgICAgdmFyIHByb2pGYWN0b3IgPSAoMC41ICogZG9tSGVpZ2h0KSAvIChzbG9wZSAqIGRpc3RhbmNlKTtcclxuICAgICAgICB2YXIgc2NyZWVuUGl4ZWxSYWRpdXMgPSByYWRpdXMgKiBwcm9qRmFjdG9yO1xyXG5cclxuICAgICAgICAvL0lmIHBpeGVsIHJhZGl1cyBiZWxsb3cgbWluaW11bSBkaXNjYXJkXHJcbiAgICAgICAgaWYgKHNjcmVlblBpeGVsUmFkaXVzIDwgcG9pbnRjbG91ZC5taW5pbXVtTm9kZVBpeGVsU2l6ZSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3ZWlnaHQgPSBzY3JlZW5QaXhlbFJhZGl1cztcclxuXHJcbiAgICAgICAgLy9SZWFsbHkgY2xvc2UgdG8gdGhlIGNhbWVyYVxyXG4gICAgICAgIGlmIChkaXN0YW5jZSAtIHJhZGl1cyA8IDApIHtcclxuICAgICAgICAgIHdlaWdodCA9IE51bWJlci5NQVhfVkFMVUU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIC8vT3J0aG9ncmFwaGljIGNhbWVyYVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICAvL1RPRE8gPElNUFJPVkUgVklTSUJJTElUWT5cclxuICAgICAgICB2YXIgYmIgPSBjaGlsZC5nZXRCb3VuZGluZ0JveCgpO1xyXG4gICAgICAgIHZhciBkaXN0YW5jZSA9IGNoaWxkLmdldEJvdW5kaW5nU3BoZXJlKG5ldyBUSFJFRS5TcGhlcmUoKSkuY2VudGVyLmRpc3RhbmNlVG8oY2FtT2JqUG9zKTtcclxuICAgICAgICB2YXIgZGlhZ29uYWwgPSBiYi5tYXguY2xvbmUoKS5zdWIoYmIubWluKS5sZW5ndGgoKTtcclxuICAgICAgICB3ZWlnaHQgPSBkaWFnb25hbCAvIGRpc3RhbmNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBwcmlvcml0eVF1ZXVlLnB1c2goXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcG9pbnRjbG91ZDogZWxlbWVudC5wb2ludGNsb3VkLFxyXG4gICAgICAgICAgbm9kZTogY2hpbGQsXHJcbiAgICAgICAgICBwYXJlbnQ6IG5vZGUsXHJcbiAgICAgICAgICB3ZWlnaHQ6IHdlaWdodFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy9VcGRhdGUgREVNXHJcbiAgdmFyIGNhbmRpZGF0ZXMgPSBwb2ludGNsb3Vkcy5maWx0ZXIocCA9PiAocC5nZW5lcmF0ZURFTSAmJiBwLmRlbSBpbnN0YW5jZW9mIERFTSkpO1xyXG5cclxuICBmb3IgKHZhciBwb2ludGNsb3VkIG9mIGNhbmRpZGF0ZXMpIHtcclxuICAgIHZhciB1cGRhdGluZ05vZGVzID0gcG9pbnRjbG91ZC52aXNpYmxlTm9kZXMuZmlsdGVyKG4gPT4gbi5nZXRMZXZlbCgpIDw9IEdsb2JhbC5tYXhERU1MZXZlbCk7XHJcbiAgICBwb2ludGNsb3VkLmRlbS51cGRhdGUodXBkYXRpbmdOb2Rlcyk7XHJcbiAgfVxyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IE1hdGgubWluKEdsb2JhbC5tYXhOb2Rlc0xvYWRpbmcsIHVubG9hZGVkR2VvbWV0cnkubGVuZ3RoKTsgaSsrKSB7XHJcbiAgICB1bmxvYWRlZEdlb21ldHJ5W2ldLmxvYWQoKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICB2aXNpYmxlTm9kZXM6IHZpc2libGVOb2RlcyxcclxuICAgIG51bVZpc2libGVQb2ludHM6IG51bVZpc2libGVQb2ludHMsXHJcbiAgICBsb3dlc3RTcGFjaW5nOiBsb3dlc3RTcGFjaW5nXHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlUG9pbnRDbG91ZHMocG9pbnRjbG91ZHMsIGNhbWVyYSwgcmVuZGVyZXIpIHtcclxuICB2YXIgcmVzdWx0ID0gdXBkYXRlVmlzaWJpbGl0eShwb2ludGNsb3VkcywgY2FtZXJhLCByZW5kZXJlcik7XHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRjbG91ZHMubGVuZ3RoOyBpKyspIHtcclxuICAgIHBvaW50Y2xvdWRzW2ldLnVwZGF0ZU1hdGVyaWFsKHBvaW50Y2xvdWRzW2ldLm1hdGVyaWFsLCBwb2ludGNsb3Vkc1tpXS52aXNpYmxlTm9kZXMsIGNhbWVyYSwgcmVuZGVyZXIpO1xyXG4gICAgcG9pbnRjbG91ZHNbaV0udXBkYXRlVmlzaWJsZUJvdW5kcygpO1xyXG4gIH1cclxuXHJcbiAgR2xvYmFsLmxydS5mcmVlTWVtb3J5KCk7XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVZpc2liaWxpdHlTdHJ1Y3R1cmVzKHBvaW50Y2xvdWRzLCBjYW1lcmEsIHJlbmRlcmVyKSB7XHJcbiAgdmFyIGZydXN0dW1zID0gW107XHJcbiAgdmFyIGNhbU9ialBvc2l0aW9ucyA9IFtdO1xyXG4gIHZhciBwcmlvcml0eVF1ZXVlID0gbmV3IEJpbmFyeUhlYXAoZnVuY3Rpb24gKHgpIHtcclxuICAgIHJldHVybiAxIC8geC53ZWlnaHQ7XHJcbiAgfSk7XHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRjbG91ZHMubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBwb2ludGNsb3VkID0gcG9pbnRjbG91ZHNbaV07XHJcblxyXG4gICAgaWYgKCFwb2ludGNsb3VkLmluaXRpYWxpemVkKCkpIHtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgcG9pbnRjbG91ZC5udW1WaXNpYmxlTm9kZXMgPSAwO1xyXG4gICAgcG9pbnRjbG91ZC5udW1WaXNpYmxlUG9pbnRzID0gMDtcclxuICAgIHBvaW50Y2xvdWQuZGVlcGVzdFZpc2libGVMZXZlbCA9IDA7XHJcbiAgICBwb2ludGNsb3VkLnZpc2libGVOb2RlcyA9IFtdO1xyXG4gICAgcG9pbnRjbG91ZC52aXNpYmxlR2VvbWV0cnkgPSBbXTtcclxuXHJcbiAgICAvL0ZydXN0dW0gaW4gb2JqZWN0IHNwYWNlXHJcbiAgICBjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcclxuICAgIHZhciBmcnVzdHVtID0gbmV3IFRIUkVFLkZydXN0dW0oKTtcclxuICAgIHZhciB2aWV3SSA9IGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2U7XHJcbiAgICB2YXIgd29ybGQgPSBwb2ludGNsb3VkLm1hdHJpeFdvcmxkO1xyXG5cclxuICAgIC8vVXNlIGNsb3NlIG5lYXIgcGxhbmUgZm9yIGZydXN0dW0gaW50ZXJzZWN0aW9uXHJcbiAgICB2YXIgZnJ1c3R1bUNhbSA9IGNhbWVyYS5jbG9uZSgpO1xyXG4gICAgZnJ1c3R1bUNhbS5uZWFyID0gY2FtZXJhLm5lYXI7IC8vTWF0aC5taW4oY2FtZXJhLm5lYXIsIDAuMSk7XHJcbiAgICBmcnVzdHVtQ2FtLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcclxuICAgIHZhciBwcm9qID0gY2FtZXJhLnByb2plY3Rpb25NYXRyaXg7XHJcblxyXG4gICAgdmFyIGZtID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5tdWx0aXBseShwcm9qKS5tdWx0aXBseSh2aWV3SSkubXVsdGlwbHkod29ybGQpO1xyXG4gICAgZnJ1c3R1bS5zZXRGcm9tUHJvamVjdGlvbk1hdHJpeChmbSk7XHJcbiAgICBmcnVzdHVtcy5wdXNoKGZydXN0dW0pO1xyXG5cclxuICAgIC8vQ2FtZXJhIHBvc2l0aW9uIGluIG9iamVjdCBzcGFjZVxyXG4gICAgdmFyIHZpZXcgPSBjYW1lcmEubWF0cml4V29ybGQ7XHJcbiAgICAvL3ZhciB3b3JsZEkgPSBuZXcgVEhSRUUuTWF0cml4NCgpLmdldEludmVyc2Uod29ybGQpO1xyXG4gICAgdmFyIHdvcmxkSSA9IHdvcmxkLmNsb25lKCkuaW52ZXJ0KCk7XHJcbiAgICB2YXIgY2FtTWF0cml4T2JqZWN0ID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5tdWx0aXBseSh3b3JsZEkpLm11bHRpcGx5KHZpZXcpO1xyXG4gICAgdmFyIGNhbU9ialBvcyA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKGNhbU1hdHJpeE9iamVjdCk7XHJcbiAgICBjYW1PYmpQb3NpdGlvbnMucHVzaChjYW1PYmpQb3MpO1xyXG5cclxuICAgIGlmIChwb2ludGNsb3VkLnZpc2libGUgJiYgcG9pbnRjbG91ZC5yb290ICE9PSBudWxsKSB7XHJcbiAgICAgIHByaW9yaXR5UXVldWUucHVzaChcclxuICAgICAgICB7XHJcbiAgICAgICAgICBwb2ludGNsb3VkOiBpLFxyXG4gICAgICAgICAgbm9kZTogcG9pbnRjbG91ZC5yb290LFxyXG4gICAgICAgICAgd2VpZ2h0OiBOdW1iZXIuTUFYX1ZBTFVFXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9IaWRlIGFsbCBwcmV2aW91c2x5IHZpc2libGUgbm9kZXNcclxuICAgIGlmIChwb2ludGNsb3VkLnJvb3QuaXNUcmVlTm9kZSgpKSB7XHJcbiAgICAgIHBvaW50Y2xvdWQuaGlkZURlc2NlbmRhbnRzKHBvaW50Y2xvdWQucm9vdC5zY2VuZU5vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcG9pbnRjbG91ZC5ib3VuZGluZ0JveE5vZGVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgIHBvaW50Y2xvdWQuYm91bmRpbmdCb3hOb2Rlc1tqXS52aXNpYmxlID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgZnJ1c3R1bXM6IGZydXN0dW1zLFxyXG4gICAgY2FtT2JqUG9zaXRpb25zOiBjYW1PYmpQb3NpdGlvbnMsXHJcbiAgICBwcmlvcml0eVF1ZXVlOiBwcmlvcml0eVF1ZXVlXHJcbiAgfTtcclxufVxyXG5cclxuY29uc3QgVkVSU0lPTiA9IF9fVkVSU0lPTl9fO1xyXG5cclxuZXhwb3J0IHtcclxuICBBdHRyaWJ1dGVMb2NhdGlvbnMsXHJcbiAgQ2xhc3NpZmljYXRpb24sXHJcbiAgQ2xpcFRhc2ssXHJcbiAgQ2xpcE1ldGhvZCxcclxuICBQb2ludFNpemVUeXBlLFxyXG4gIFBvaW50U2hhcGUsXHJcbiAgUG9pbnRDb2xvclR5cGUsXHJcbiAgVHJlZVR5cGUsXHJcbiAgUG9pbnRTZWxlY3Rpb25UeXBlLFxyXG4gIGxvYWRQb2ludENsb3VkLFxyXG4gIHVwZGF0ZVZpc2liaWxpdHksXHJcbiAgdXBkYXRlUG9pbnRDbG91ZHMsXHJcbiAgdXBkYXRlVmlzaWJpbGl0eVN0cnVjdHVyZXMsXHJcbiAgVkVSU0lPTlxyXG59O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuY2xhc3MgUG9pbnRzXHJcbntcclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IG5ldyBUSFJFRS5Cb3gzKCk7XHJcblx0XHR0aGlzLm51bVBvaW50cyA9IDA7XHJcblx0XHR0aGlzLmRhdGEgPSB7fTtcclxuXHR9XHJcblxyXG5cdGFkZChwb2ludHMpXHJcblx0e1xyXG5cdFx0dmFyIGN1cnJlbnRTaXplID0gdGhpcy5udW1Qb2ludHM7XHJcblx0XHR2YXIgYWRkaXRpb25hbFNpemUgPSBwb2ludHMubnVtUG9pbnRzO1xyXG5cdFx0dmFyIG5ld1NpemUgPSBjdXJyZW50U2l6ZSArIGFkZGl0aW9uYWxTaXplO1xyXG5cclxuXHRcdHZhciB0aGlzQXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKHRoaXMuZGF0YSk7XHJcblx0XHR2YXIgb3RoZXJBdHRyaWJ1dGVzID0gT2JqZWN0LmtleXMocG9pbnRzLmRhdGEpO1xyXG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSBuZXcgU2V0KFsuLi50aGlzQXR0cmlidXRlcywgLi4ub3RoZXJBdHRyaWJ1dGVzXSk7XHJcblxyXG5cdFx0Zm9yKHZhciBhdHRyaWJ1dGUgb2YgYXR0cmlidXRlcylcclxuXHRcdHtcclxuXHRcdFx0aWYodGhpc0F0dHJpYnV0ZXMuaW5jbHVkZXMoYXR0cmlidXRlKSAmJiBvdGhlckF0dHJpYnV0ZXMuaW5jbHVkZXMoYXR0cmlidXRlKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8vYXR0cmlidXRlIGluIGJvdGgsIG1lcmdlXHJcblx0XHRcdFx0dmFyIFR5cGUgPSB0aGlzLmRhdGFbYXR0cmlidXRlXS5jb25zdHJ1Y3RvcjtcclxuXHRcdFx0XHR2YXIgbWVyZ2VkID0gbmV3IFR5cGUodGhpcy5kYXRhW2F0dHJpYnV0ZV0ubGVuZ3RoICsgcG9pbnRzLmRhdGFbYXR0cmlidXRlXS5sZW5ndGgpO1xyXG5cdFx0XHRcdG1lcmdlZC5zZXQodGhpcy5kYXRhW2F0dHJpYnV0ZV0sIDApO1xyXG5cdFx0XHRcdG1lcmdlZC5zZXQocG9pbnRzLmRhdGFbYXR0cmlidXRlXSwgdGhpcy5kYXRhW2F0dHJpYnV0ZV0ubGVuZ3RoKTtcclxuXHRcdFx0XHR0aGlzLmRhdGFbYXR0cmlidXRlXSA9IG1lcmdlZDtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKHRoaXNBdHRyaWJ1dGVzLmluY2x1ZGVzKGF0dHJpYnV0ZSkgJiYgIW90aGVyQXR0cmlidXRlcy5pbmNsdWRlcyhhdHRyaWJ1dGUpKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Ly9hdHRyaWJ1dGUgb25seSBpbiB0aGlzOyB0YWtlIG92ZXIgdGhpcyBhbmQgZXhwYW5kIHRvIG5ldyBzaXplXHJcblx0XHRcdFx0dmFyIGVsZW1lbnRzUGVyUG9pbnQgPSB0aGlzLmRhdGFbYXR0cmlidXRlXS5sZW5ndGggLyB0aGlzLm51bVBvaW50cztcclxuXHRcdFx0XHR2YXIgVHlwZSA9IHRoaXMuZGF0YVthdHRyaWJ1dGVdLmNvbnN0cnVjdG9yO1xyXG5cdFx0XHRcdHZhciBleHBhbmRlZCA9IG5ldyBUeXBlKGVsZW1lbnRzUGVyUG9pbnQgKiBuZXdTaXplKTtcclxuXHRcdFx0XHRleHBhbmRlZC5zZXQodGhpcy5kYXRhW2F0dHJpYnV0ZV0sIDApO1xyXG5cdFx0XHRcdHRoaXMuZGF0YVthdHRyaWJ1dGVdID0gZXhwYW5kZWQ7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZighdGhpc0F0dHJpYnV0ZXMuaW5jbHVkZXMoYXR0cmlidXRlKSAmJiBvdGhlckF0dHJpYnV0ZXMuaW5jbHVkZXMoYXR0cmlidXRlKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8vYXR0cmlidXRlIG9ubHkgaW4gcG9pbnRzIHRvIGJlIGFkZGVkOyB0YWtlIG92ZXIgbmV3IHBvaW50cyBhbmQgZXhwYW5kIHRvIG5ldyBzaXplXHJcblx0XHRcdFx0dmFyIGVsZW1lbnRzUGVyUG9pbnQgPSBwb2ludHMuZGF0YVthdHRyaWJ1dGVdLmxlbmd0aCAvIHBvaW50cy5udW1Qb2ludHM7XHJcblx0XHRcdFx0dmFyIFR5cGUgPSBwb2ludHMuZGF0YVthdHRyaWJ1dGVdLmNvbnN0cnVjdG9yO1xyXG5cdFx0XHRcdHZhciBleHBhbmRlZCA9IG5ldyBUeXBlKGVsZW1lbnRzUGVyUG9pbnQgKiBuZXdTaXplKTtcclxuXHRcdFx0XHRleHBhbmRlZC5zZXQocG9pbnRzLmRhdGFbYXR0cmlidXRlXSwgZWxlbWVudHNQZXJQb2ludCAqIGN1cnJlbnRTaXplKTtcclxuXHRcdFx0XHR0aGlzLmRhdGFbYXR0cmlidXRlXSA9IGV4cGFuZGVkO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5udW1Qb2ludHMgPSBuZXdTaXplO1xyXG5cclxuXHRcdHRoaXMuYm91bmRpbmdCb3gudW5pb24ocG9pbnRzLmJvdW5kaW5nQm94KTtcclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQge1BvaW50c307XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxuZnVuY3Rpb24gcGFyYW1UaHJlZVRvR0woZ2wsIHApXHJcbntcclxuXHR2YXIgZXh0ZW5zaW9uO1xyXG5cclxuXHRpZihwID09PSBUSFJFRS5SZXBlYXRXcmFwcGluZykgcmV0dXJuIGdsLlJFUEVBVDtcclxuXHRpZihwID09PSBUSFJFRS5DbGFtcFRvRWRnZVdyYXBwaW5nKSByZXR1cm4gZ2wuQ0xBTVBfVE9fRURHRTtcclxuXHRpZihwID09PSBUSFJFRS5NaXJyb3JlZFJlcGVhdFdyYXBwaW5nKSByZXR1cm4gZ2wuTUlSUk9SRURfUkVQRUFUO1xyXG5cclxuXHRpZihwID09PSBUSFJFRS5OZWFyZXN0RmlsdGVyKSByZXR1cm4gZ2wuTkVBUkVTVDtcclxuXHRpZihwID09PSBUSFJFRS5OZWFyZXN0TWlwTWFwTmVhcmVzdEZpbHRlcikgcmV0dXJuIGdsLk5FQVJFU1RfTUlQTUFQX05FQVJFU1Q7XHJcblx0aWYocCA9PT0gVEhSRUUuTmVhcmVzdE1pcE1hcExpbmVhckZpbHRlcikgcmV0dXJuIGdsLk5FQVJFU1RfTUlQTUFQX0xJTkVBUjtcclxuXHJcblx0aWYocCA9PT0gVEhSRUUuTGluZWFyRmlsdGVyKSByZXR1cm4gZ2wuTElORUFSO1xyXG5cdGlmKHAgPT09IFRIUkVFLkxpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIpIHJldHVybiBnbC5MSU5FQVJfTUlQTUFQX05FQVJFU1Q7XHJcblx0aWYocCA9PT0gVEhSRUUuTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyKSByZXR1cm4gZ2wuTElORUFSX01JUE1BUF9MSU5FQVI7XHJcblxyXG5cdGlmKHAgPT09IFRIUkVFLlVuc2lnbmVkQnl0ZVR5cGUpIHJldHVybiBnbC5VTlNJR05FRF9CWVRFO1xyXG5cdGlmKHAgPT09IFRIUkVFLlVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSkgcmV0dXJuIGdsLlVOU0lHTkVEX1NIT1JUXzRfNF80XzQ7XHJcblx0aWYocCA9PT0gVEhSRUUuVW5zaWduZWRTaG9ydDU1NTFUeXBlKSByZXR1cm4gZ2wuVU5TSUdORURfU0hPUlRfNV81XzVfMTtcclxuXHRpZihwID09PSBUSFJFRS5VbnNpZ25lZFNob3J0NTY1VHlwZSkgcmV0dXJuIGdsLlVOU0lHTkVEX1NIT1JUXzVfNl81O1xyXG5cclxuXHRpZihwID09PSBUSFJFRS5CeXRlVHlwZSkgcmV0dXJuIGdsLkJZVEU7XHJcblx0aWYocCA9PT0gVEhSRUUuU2hvcnRUeXBlKSByZXR1cm4gZ2wuU0hPUlQ7XHJcblx0aWYocCA9PT0gVEhSRUUuVW5zaWduZWRTaG9ydFR5cGUpIHJldHVybiBnbC5VTlNJR05FRF9TSE9SVDtcclxuXHRpZihwID09PSBUSFJFRS5JbnRUeXBlKSByZXR1cm4gZ2wuSU5UO1xyXG5cdGlmKHAgPT09IFRIUkVFLlVuc2lnbmVkSW50VHlwZSkgcmV0dXJuIGdsLlVOU0lHTkVEX0lOVDtcclxuXHRpZihwID09PSBUSFJFRS5GbG9hdFR5cGUpIHJldHVybiBnbC5GTE9BVDtcclxuXHJcblx0aWYocCA9PT0gVEhSRUUuSGFsZkZsb2F0VHlwZSlcclxuXHR7XHJcblx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldChcIk9FU190ZXh0dXJlX2hhbGZfZmxvYXRcIik7XHJcblx0XHRpZihleHRlbnNpb24gIT09IG51bGwpIHJldHVybiBleHRlbnNpb24uSEFMRl9GTE9BVF9PRVM7XHJcblx0fVxyXG5cclxuXHRpZihwID09PSBUSFJFRS5BbHBoYUZvcm1hdCkgcmV0dXJuIGdsLkFMUEhBO1xyXG5cdGlmKHAgPT09IFRIUkVFLlJHQkZvcm1hdCkgcmV0dXJuIGdsLlJHQjtcclxuXHRpZihwID09PSBUSFJFRS5SR0JBRm9ybWF0KSByZXR1cm4gZ2wuUkdCQTtcclxuXHRpZihwID09PSBUSFJFRS5MdW1pbmFuY2VGb3JtYXQpIHJldHVybiBnbC5MVU1JTkFOQ0U7XHJcblx0aWYocCA9PT0gVEhSRUUuTHVtaW5hbmNlQWxwaGFGb3JtYXQpIHJldHVybiBnbC5MVU1JTkFOQ0VfQUxQSEE7XHJcblx0aWYocCA9PT0gVEhSRUUuRGVwdGhGb3JtYXQpIHJldHVybiBnbC5ERVBUSF9DT01QT05FTlQ7XHJcblx0aWYocCA9PT0gVEhSRUUuRGVwdGhTdGVuY2lsRm9ybWF0KSByZXR1cm4gZ2wuREVQVEhfU1RFTkNJTDtcclxuXHJcblx0aWYocCA9PT0gVEhSRUUuQWRkRXF1YXRpb24pIHJldHVybiBnbC5GVU5DX0FERDtcclxuXHRpZihwID09PSBUSFJFRS5TdWJ0cmFjdEVxdWF0aW9uKSByZXR1cm4gZ2wuRlVOQ19TVUJUUkFDVDtcclxuXHRpZihwID09PSBUSFJFRS5SZXZlcnNlU3VidHJhY3RFcXVhdGlvbikgcmV0dXJuIGdsLkZVTkNfUkVWRVJTRV9TVUJUUkFDVDtcclxuXHJcblx0aWYocCA9PT0gVEhSRUUuWmVyb0ZhY3RvcikgcmV0dXJuIGdsLlpFUk87XHJcblx0aWYocCA9PT0gVEhSRUUuT25lRmFjdG9yKSByZXR1cm4gZ2wuT05FO1xyXG5cdGlmKHAgPT09IFRIUkVFLlNyY0NvbG9yRmFjdG9yKSByZXR1cm4gZ2wuU1JDX0NPTE9SO1xyXG5cdGlmKHAgPT09IFRIUkVFLk9uZU1pbnVzU3JjQ29sb3JGYWN0b3IpIHJldHVybiBnbC5PTkVfTUlOVVNfU1JDX0NPTE9SO1xyXG5cdGlmKHAgPT09IFRIUkVFLlNyY0FscGhhRmFjdG9yKSByZXR1cm4gZ2wuU1JDX0FMUEhBO1xyXG5cdGlmKHAgPT09IFRIUkVFLk9uZU1pbnVzU3JjQWxwaGFGYWN0b3IpIHJldHVybiBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBO1xyXG5cdGlmKHAgPT09IFRIUkVFLkRzdEFscGhhRmFjdG9yKSByZXR1cm4gZ2wuRFNUX0FMUEhBO1xyXG5cdGlmKHAgPT09IFRIUkVFLk9uZU1pbnVzRHN0QWxwaGFGYWN0b3IpIHJldHVybiBnbC5PTkVfTUlOVVNfRFNUX0FMUEhBO1xyXG5cclxuXHRpZihwID09PSBUSFJFRS5Ec3RDb2xvckZhY3RvcikgcmV0dXJuIGdsLkRTVF9DT0xPUjtcclxuXHRpZihwID09PSBUSFJFRS5PbmVNaW51c0RzdENvbG9yRmFjdG9yKSByZXR1cm4gZ2wuT05FX01JTlVTX0RTVF9DT0xPUjtcclxuXHRpZihwID09PSBUSFJFRS5TcmNBbHBoYVNhdHVyYXRlRmFjdG9yKSByZXR1cm4gZ2wuU1JDX0FMUEhBX1NBVFVSQVRFO1xyXG5cclxuXHRpZihwID09PSBUSFJFRS5SR0JfUzNUQ19EWFQxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgfHwgcCA9PT0gVEhSRUUuUkdCQV9TM1RDX0RYVDNfRm9ybWF0IHx8IHAgPT09IFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdClcclxuXHR7XHJcblx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldChcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXCIpO1xyXG5cclxuXHRcdGlmKGV4dGVuc2lvbiAhPT0gbnVsbClcclxuXHRcdHtcclxuXHRcdFx0aWYocCA9PT0gVEhSRUUuUkdCX1MzVENfRFhUMV9Gb3JtYXQpIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVDtcclxuXHRcdFx0aWYocCA9PT0gVEhSRUUuUkdCQV9TM1RDX0RYVDFfRm9ybWF0KSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDFfRVhUO1xyXG5cdFx0XHRpZihwID09PSBUSFJFRS5SR0JBX1MzVENfRFhUM19Gb3JtYXQpIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQ7XHJcblx0XHRcdGlmKHAgPT09IFRIUkVFLlJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlmKHAgPT09IFRIUkVFLlJHQl9QVlJUQ180QlBQVjFfRm9ybWF0IHx8IHAgPT09IFRIUkVFLlJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0IHx8IHAgPT09IFRIUkVFLlJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCB8fCBwID09PSBUSFJFRS5SR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQpXHJcblx0e1xyXG5cdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGNcIik7XHJcblxyXG5cdFx0aWYoZXh0ZW5zaW9uICE9PSBudWxsKVxyXG5cdFx0e1xyXG5cdFx0XHRpZihwID09PSBUSFJFRS5SR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HO1xyXG5cdFx0XHRpZihwID09PSBUSFJFRS5SR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HO1xyXG5cdFx0XHRpZihwID09PSBUSFJFRS5SR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQpIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUc7XHJcblx0XHRcdGlmKHAgPT09IFRIUkVFLlJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlmKHAgPT09IFRIUkVFLlJHQl9FVEMxX0Zvcm1hdClcclxuXHR7XHJcblx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldChcIldFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxXCIpO1xyXG5cdFx0aWYoZXh0ZW5zaW9uICE9PSBudWxsKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0w7XHJcblx0fVxyXG5cclxuXHRpZihwID09PSBUSFJFRS5NaW5FcXVhdGlvbiB8fCBwID09PSBUSFJFRS5NYXhFcXVhdGlvbilcclxuXHR7XHJcblx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldChcIkVYVF9ibGVuZF9taW5tYXhcIik7XHJcblxyXG5cdFx0aWYoZXh0ZW5zaW9uICE9PSBudWxsKVxyXG5cdFx0e1xyXG5cdFx0XHRpZihwID09PSBUSFJFRS5NaW5FcXVhdGlvbikgcmV0dXJuIGV4dGVuc2lvbi5NSU5fRVhUO1xyXG5cdFx0XHRpZihwID09PSBUSFJFRS5NYXhFcXVhdGlvbikgcmV0dXJuIGV4dGVuc2lvbi5NQVhfRVhUO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0aWYocCA9PT0gVW5zaWduZWRJbnQyNDhUeXBlKVxyXG5cdHtcclxuXHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KFwiV0VCR0xfZGVwdGhfdGV4dHVyZVwiKTtcclxuXHRcdGlmKGV4dGVuc2lvbiAhPT0gbnVsbCkgcmV0dXJuIGV4dGVuc2lvbi5VTlNJR05FRF9JTlRfMjRfOF9XRUJHTDtcclxuXHR9XHJcblxyXG5cdHJldHVybiAwO1xyXG59XHJcblxyXG5jbGFzcyBXZWJHTFRleHR1cmVcclxue1xyXG5cdGNvbnN0cnVjdG9yKGdsLCB0ZXh0dXJlKVxyXG5cdHtcclxuXHRcdHRoaXMuZ2wgPSBnbDtcclxuXHJcblx0XHR0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xyXG5cdFx0dGhpcy5pZCA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcclxuXHJcblx0XHR0aGlzLnRhcmdldCA9IGdsLlRFWFRVUkVfMkQ7XHJcblx0XHR0aGlzLnZlcnNpb24gPSAtMTtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZSh0ZXh0dXJlKTtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZSgpXHJcblx0e1xyXG5cdFx0aWYoIXRoaXMudGV4dHVyZS5pbWFnZSlcclxuXHRcdHtcclxuXHRcdFx0dGhpcy52ZXJzaW9uID0gdGhpcy50ZXh0dXJlLnZlcnNpb247XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZ2wgPSB0aGlzLmdsO1xyXG5cdFx0dmFyIHRleHR1cmUgPSB0aGlzLnRleHR1cmU7XHJcblxyXG5cdFx0aWYodGhpcy52ZXJzaW9uID09PSB0ZXh0dXJlLnZlcnNpb24pXHJcblx0XHR7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnRhcmdldCA9IGdsLlRFWFRVUkVfMkQ7XHJcblxyXG5cdFx0Z2wuYmluZFRleHR1cmUodGhpcy50YXJnZXQsIHRoaXMuaWQpO1xyXG5cclxuXHRcdHZhciBsZXZlbCA9IDA7XHJcblx0XHR2YXIgaW50ZXJuYWxGb3JtYXQgPSBwYXJhbVRocmVlVG9HTChnbCwgdGV4dHVyZS5mb3JtYXQpO1xyXG5cdFx0dmFyIHdpZHRoID0gdGV4dHVyZS5pbWFnZS53aWR0aDtcclxuXHRcdHZhciBoZWlnaHQgPSB0ZXh0dXJlLmltYWdlLmhlaWdodDtcclxuXHRcdHZhciBib3JkZXIgPSAwO1xyXG5cdFx0dmFyIHNyY0Zvcm1hdCA9IGludGVybmFsRm9ybWF0O1xyXG5cdFx0dmFyIHNyY1R5cGUgPSBwYXJhbVRocmVlVG9HTChnbCwgdGV4dHVyZS50eXBlKTtcclxuXHRcdHZhciBkYXRhO1xyXG5cclxuXHRcdGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIHRleHR1cmUuZmxpcFkpO1xyXG5cdFx0Z2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCB0ZXh0dXJlLnByZW11bHRpcGx5QWxwaGEpO1xyXG5cdFx0Z2wucGl4ZWxTdG9yZWkoZ2wuVU5QQUNLX0FMSUdOTUVOVCwgdGV4dHVyZS51bnBhY2tBbGlnbm1lbnQpO1xyXG5cclxuXHRcdGlmKHRleHR1cmUgaW5zdGFuY2VvZiBUSFJFRS5EYXRhVGV4dHVyZSlcclxuXHRcdHtcclxuXHRcdFx0ZGF0YSA9IHRleHR1cmUuaW1hZ2UuZGF0YTtcclxuXHJcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkodGhpcy50YXJnZXQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcclxuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaSh0aGlzLnRhcmdldCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xyXG5cclxuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaSh0aGlzLnRhcmdldCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBwYXJhbVRocmVlVG9HTChnbCwgdGV4dHVyZS5tYWdGaWx0ZXIpKTtcclxuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaSh0aGlzLnRhcmdldCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBwYXJhbVRocmVlVG9HTChnbCwgdGV4dHVyZS5taW5GaWx0ZXIpKTtcclxuXHJcblx0XHRcdGdsLnRleEltYWdlMkQodGhpcy50YXJnZXQsIGxldmVsLCBpbnRlcm5hbEZvcm1hdCwgd2lkdGgsIGhlaWdodCwgYm9yZGVyLCBzcmNGb3JtYXQsIHNyY1R5cGUsIGRhdGEpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZih0ZXh0dXJlIGluc3RhbmNlb2YgVEhSRUUuQ2FudmFzVGV4dHVyZSlcclxuXHRcdHtcclxuXHRcdFx0ZGF0YSA9IHRleHR1cmUuaW1hZ2U7XHJcblxyXG5cdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKHRoaXMudGFyZ2V0LCBnbC5URVhUVVJFX1dSQVBfUywgcGFyYW1UaHJlZVRvR0woZ2wsIHRleHR1cmUud3JhcFMpKTtcclxuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaSh0aGlzLnRhcmdldCwgZ2wuVEVYVFVSRV9XUkFQX1QsIHBhcmFtVGhyZWVUb0dMKGdsLCB0ZXh0dXJlLndyYXBUKSk7XHJcblxyXG5cdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKHRoaXMudGFyZ2V0LCBnbC5URVhUVVJFX01BR19GSUxURVIsIHBhcmFtVGhyZWVUb0dMKGdsLCB0ZXh0dXJlLm1hZ0ZpbHRlcikpO1xyXG5cdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKHRoaXMudGFyZ2V0LCBnbC5URVhUVVJFX01JTl9GSUxURVIsIHBhcmFtVGhyZWVUb0dMKGdsLCB0ZXh0dXJlLm1pbkZpbHRlcikpO1xyXG5cclxuXHRcdFx0Z2wudGV4SW1hZ2UyRCh0aGlzLnRhcmdldCwgbGV2ZWwsIGludGVybmFsRm9ybWF0LCBpbnRlcm5hbEZvcm1hdCwgc3JjVHlwZSwgZGF0YSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Z2wuYmluZFRleHR1cmUodGhpcy50YXJnZXQsIG51bGwpO1xyXG5cclxuXHRcdHRoaXMudmVyc2lvbiA9IHRleHR1cmUudmVyc2lvbjtcclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQge1dlYkdMVGV4dHVyZX07IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5pbXBvcnQgeyBXZWJHTFRleHR1cmUgfSBmcm9tIFwiLi9XZWJHTFRleHR1cmUuanNcIjtcclxuaW1wb3J0IHsgQXR0cmlidXRlTG9jYXRpb25zIH0gZnJvbSBcIi4vUG90cmVlLmpzXCI7XHJcblxyXG5jbGFzcyBTaGFkZXIge1xyXG5cdGNvbnN0cnVjdG9yKGdsLCBuYW1lLCB2c1NvdXJjZSwgZnNTb3VyY2UpIHtcclxuXHRcdHRoaXMuZ2wgPSBnbDtcclxuXHRcdHRoaXMubmFtZSA9IG5hbWU7XHJcblx0XHR0aGlzLnZzU291cmNlID0gdnNTb3VyY2U7XHJcblx0XHR0aGlzLmZzU291cmNlID0gZnNTb3VyY2U7XHJcblxyXG5cdFx0dGhpcy5jYWNoZSA9IG5ldyBNYXAoKTtcclxuXHJcblx0XHR0aGlzLnZzID0gbnVsbDtcclxuXHRcdHRoaXMuZnMgPSBudWxsO1xyXG5cdFx0dGhpcy5wcm9ncmFtID0gbnVsbDtcclxuXHJcblx0XHR0aGlzLnVuaWZvcm1Mb2NhdGlvbnMgPSB7fTtcclxuXHRcdHRoaXMuYXR0cmlidXRlTG9jYXRpb25zID0ge307XHJcblxyXG5cdFx0dGhpcy51cGRhdGUodnNTb3VyY2UsIGZzU291cmNlKTtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZSh2c1NvdXJjZSwgZnNTb3VyY2UpIHtcclxuXHRcdHRoaXMudnNTb3VyY2UgPSB2c1NvdXJjZTtcclxuXHRcdHRoaXMuZnNTb3VyY2UgPSBmc1NvdXJjZTtcclxuXHJcblx0XHR0aGlzLmxpbmtQcm9ncmFtKCk7XHJcblx0fVxyXG5cclxuXHRjb21waWxlU2hhZGVyKHNoYWRlciwgc291cmNlKSB7XHJcblx0XHR2YXIgZ2wgPSB0aGlzLmdsO1xyXG5cclxuXHRcdGdsLnNoYWRlclNvdXJjZShzaGFkZXIsIHNvdXJjZSk7XHJcblxyXG5cdFx0Z2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xyXG5cclxuXHRcdHZhciBzdWNjZXNzID0gZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpO1xyXG5cdFx0aWYgKCFzdWNjZXNzKSB7XHJcblx0XHRcdHZhciBpbmZvID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpO1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJQb3RyZWU6IENvdWxkIG5vdCBjb21waWxlIHNoYWRlciBcIiArIHRoaXMubmFtZSArIFwiLCBcIiArIGluZm8pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0bGlua1Byb2dyYW0oKSB7XHJcblxyXG5cdFx0dmFyIGdsID0gdGhpcy5nbDtcclxuXHJcblx0XHR0aGlzLnVuaWZvcm1Mb2NhdGlvbnMgPSB7fTtcclxuXHRcdHRoaXMuYXR0cmlidXRlTG9jYXRpb25zID0ge307XHJcblxyXG5cdFx0Z2wudXNlUHJvZ3JhbShudWxsKTtcclxuXHJcblx0XHR2YXIgY2FjaGVkID0gdGhpcy5jYWNoZS5nZXQoYCR7dGhpcy52c1NvdXJjZX0sICR7dGhpcy5mc1NvdXJjZX1gKTtcclxuXHRcdGlmIChjYWNoZWQpIHtcclxuXHRcdFx0dGhpcy5wcm9ncmFtID0gY2FjaGVkLnByb2dyYW07XHJcblx0XHRcdHRoaXMudnMgPSBjYWNoZWQudnM7XHJcblx0XHRcdHRoaXMuZnMgPSBjYWNoZWQuZnM7XHJcblx0XHRcdHRoaXMuYXR0cmlidXRlTG9jYXRpb25zID0gY2FjaGVkLmF0dHJpYnV0ZUxvY2F0aW9ucztcclxuXHRcdFx0dGhpcy51bmlmb3JtTG9jYXRpb25zID0gY2FjaGVkLnVuaWZvcm1Mb2NhdGlvbnM7XHJcblxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0dGhpcy52cyA9IGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKTtcclxuXHRcdFx0dGhpcy5mcyA9IGdsLmNyZWF0ZVNoYWRlcihnbC5GUkFHTUVOVF9TSEFERVIpO1xyXG5cdFx0XHR0aGlzLnByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBuYW1lIG9mIE9iamVjdC5rZXlzKEF0dHJpYnV0ZUxvY2F0aW9ucykpIHtcclxuXHRcdFx0XHR2YXIgbG9jYXRpb24gPSBBdHRyaWJ1dGVMb2NhdGlvbnNbbmFtZV07XHJcblx0XHRcdFx0Z2wuYmluZEF0dHJpYkxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgbG9jYXRpb24sIG5hbWUpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLmNvbXBpbGVTaGFkZXIodGhpcy52cywgdGhpcy52c1NvdXJjZSk7XHJcblx0XHRcdHRoaXMuY29tcGlsZVNoYWRlcih0aGlzLmZzLCB0aGlzLmZzU291cmNlKTtcclxuXHJcblx0XHRcdHZhciBwcm9ncmFtID0gdGhpcy5wcm9ncmFtO1xyXG5cclxuXHRcdFx0Z2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHRoaXMudnMpO1xyXG5cdFx0XHRnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdGhpcy5mcyk7XHJcblxyXG5cdFx0XHRnbC5saW5rUHJvZ3JhbShwcm9ncmFtKTtcclxuXHJcblx0XHRcdGdsLmRldGFjaFNoYWRlcihwcm9ncmFtLCB0aGlzLnZzKTtcclxuXHRcdFx0Z2wuZGV0YWNoU2hhZGVyKHByb2dyYW0sIHRoaXMuZnMpO1xyXG5cclxuXHRcdFx0dmFyIHN1Y2Nlc3MgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIGdsLkxJTktfU1RBVFVTKTtcclxuXHRcdFx0aWYgKCFzdWNjZXNzKSB7XHJcblx0XHRcdFx0dmFyIGluZm8gPSBnbC5nZXRQcm9ncmFtSW5mb0xvZyhwcm9ncmFtKTtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJQb3RyZWU6IENvdWxkIG5vdCBsaW5rIHByb2dyYW0gXCIgKyB0aGlzLm5hbWUgKyBcIiwgXCIgKyBpbmZvKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly9hdHRyaWJ1dGUgbG9jYXRpb25zXHJcblx0XHRcdHZhciBudW1BdHRyaWJ1dGVzID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5BQ1RJVkVfQVRUUklCVVRFUyk7XHJcblxyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG51bUF0dHJpYnV0ZXM7IGkrKykge1xyXG5cdFx0XHRcdHZhciBhdHRyaWJ1dGUgPSBnbC5nZXRBY3RpdmVBdHRyaWIocHJvZ3JhbSwgaSk7XHJcblxyXG5cdFx0XHRcdHZhciBsb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sIGF0dHJpYnV0ZS5uYW1lKTtcclxuXHJcblx0XHRcdFx0dGhpcy5hdHRyaWJ1dGVMb2NhdGlvbnNbYXR0cmlidXRlLm5hbWVdID0gbG9jYXRpb247XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vdW5pZm9ybSBsb2NhdGlvbnNcclxuXHRcdFx0dmFyIG51bVVuaWZvcm1zID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5BQ1RJVkVfVU5JRk9STVMpO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBudW1Vbmlmb3JtczsgaSsrKSB7XHJcblx0XHRcdFx0dmFyIHVuaWZvcm0gPSBnbC5nZXRBY3RpdmVVbmlmb3JtKHByb2dyYW0sIGkpO1xyXG5cclxuXHRcdFx0XHR2YXIgbG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgdW5pZm9ybS5uYW1lKTtcclxuXHJcblx0XHRcdFx0dGhpcy51bmlmb3JtTG9jYXRpb25zW3VuaWZvcm0ubmFtZV0gPSBsb2NhdGlvbjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIGNhY2hlZCA9IHtcclxuXHRcdFx0XHRwcm9ncmFtOiB0aGlzLnByb2dyYW0sXHJcblx0XHRcdFx0dnM6IHRoaXMudnMsXHJcblx0XHRcdFx0ZnM6IHRoaXMuZnMsXHJcblx0XHRcdFx0YXR0cmlidXRlTG9jYXRpb25zOiB0aGlzLmF0dHJpYnV0ZUxvY2F0aW9ucyxcclxuXHRcdFx0XHR1bmlmb3JtTG9jYXRpb25zOiB0aGlzLnVuaWZvcm1Mb2NhdGlvbnNcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdHRoaXMuY2FjaGUuc2V0KGAke3RoaXMudnNTb3VyY2V9LCAke3RoaXMuZnNTb3VyY2V9YCwgY2FjaGVkKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHNldFVuaWZvcm1NYXRyaXg0KG5hbWUsIHZhbHVlKSB7XHJcblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XHJcblx0XHRjb25zdCBsb2NhdGlvbiA9IHRoaXMudW5pZm9ybUxvY2F0aW9uc1tuYW1lXTtcclxuXHJcblx0XHRpZiAobG9jYXRpb24gPT0gbnVsbCkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IHRtcCA9IG5ldyBGbG9hdDMyQXJyYXkodmFsdWUuZWxlbWVudHMpO1xyXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDRmdihsb2NhdGlvbiwgZmFsc2UsIHRtcCk7XHJcblx0fVxyXG5cclxuXHRzZXRVbmlmb3JtTWF0cml4NHYobmFtZSwgdmFsdWVzKSB7XHJcblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XHJcblx0XHRjb25zdCBsb2NhdGlvbiA9IHRoaXMudW5pZm9ybUxvY2F0aW9uc1tgJHtuYW1lfVswXWBdO1xyXG5cclxuXHRcdGlmIChsb2NhdGlvbiA9PSBudWxsKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBlbGVtZW50cyA9IHZhbHVlcy5mb3JFYWNoKG1hdHJpeDQgPT4gZWxlbWVudHMucHVzaCguLi5tYXRyaXg0LmVsZW1lbnRzKSk7XHJcblx0XHRjb25zdCB0bXAgPSBuZXcgRmxvYXQzMkFycmF5KGVsZW1lbnRzKTtcclxuXHJcblx0XHRnbC51bmlmb3JtTWF0cml4NGZ2KGxvY2F0aW9uLCBmYWxzZSwgdG1wKTtcclxuXHR9XHJcblxyXG5cdHNldFVuaWZvcm0xZihuYW1lLCB2YWx1ZSkge1xyXG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xyXG5cdFx0Y29uc3QgbG9jYXRpb24gPSB0aGlzLnVuaWZvcm1Mb2NhdGlvbnNbbmFtZV07XHJcblxyXG5cdFx0aWYgKGxvY2F0aW9uID09IG51bGwpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGdsLnVuaWZvcm0xZihsb2NhdGlvbiwgdmFsdWUpO1xyXG5cdH1cclxuXHJcblx0c2V0VW5pZm9ybTFmdihuYW1lLCB2YWx1ZXMpIHtcclxuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcclxuXHRcdGNvbnN0IGxvY2F0aW9uID0gdGhpcy51bmlmb3JtTG9jYXRpb25zW2Ake25hbWV9WzBdYF07XHJcblxyXG5cdFx0aWYgKGxvY2F0aW9uID09IG51bGwpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGdsLnVuaWZvcm0xZnYobG9jYXRpb24sIHZhbHVlcyk7XHJcblx0fVxyXG5cclxuXHRzZXRVbmlmb3JtQm9vbGVhbihuYW1lLCB2YWx1ZSkge1xyXG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xyXG5cdFx0Y29uc3QgbG9jYXRpb24gPSB0aGlzLnVuaWZvcm1Mb2NhdGlvbnNbbmFtZV07XHJcblxyXG5cdFx0aWYgKGxvY2F0aW9uID09IG51bGwpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGdsLnVuaWZvcm0xaShsb2NhdGlvbiwgdmFsdWUpO1xyXG5cdH1cclxuXHJcblx0c2V0VW5pZm9ybVRleHR1cmUobmFtZSwgdmFsdWUpIHtcclxuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcclxuXHRcdGNvbnN0IGxvY2F0aW9uID0gdGhpcy51bmlmb3JtTG9jYXRpb25zW25hbWVdO1xyXG5cclxuXHRcdGlmIChsb2NhdGlvbiA9PSBudWxsKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRnbC51bmlmb3JtMWkobG9jYXRpb24sIHZhbHVlKTtcclxuXHR9XHJcblxyXG5cdHNldFVuaWZvcm0yZihuYW1lLCB2YWx1ZSkge1xyXG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xyXG5cdFx0Y29uc3QgbG9jYXRpb24gPSB0aGlzLnVuaWZvcm1Mb2NhdGlvbnNbbmFtZV07XHJcblxyXG5cdFx0aWYgKGxvY2F0aW9uID09IG51bGwpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGdsLnVuaWZvcm0yZihsb2NhdGlvbiwgdmFsdWVbMF0sIHZhbHVlWzFdKTtcclxuXHR9XHJcblxyXG5cdHNldFVuaWZvcm0zZihuYW1lLCB2YWx1ZSkge1xyXG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xyXG5cdFx0Y29uc3QgbG9jYXRpb24gPSB0aGlzLnVuaWZvcm1Mb2NhdGlvbnNbbmFtZV07XHJcblxyXG5cdFx0aWYgKHZhbHVlIGluc3RhbmNlb2YgVEhSRUUuQ29sb3IpIHtcclxuXHRcdFx0dmFsdWUgPSB2YWx1ZS50b0FycmF5KCk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGxvY2F0aW9uID09IG51bGwpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGdsLnVuaWZvcm0zZihsb2NhdGlvbiwgdmFsdWVbMF0sIHZhbHVlWzFdLCB2YWx1ZVsyXSk7XHJcblx0fVxyXG5cclxuXHRzZXRVbmlmb3JtKG5hbWUsIHZhbHVlKSB7XHJcblxyXG5cdFx0aWYgKHZhbHVlLmNvbnN0cnVjdG9yID09PSBUSFJFRS5NYXRyaXg0KSB7XHJcblx0XHRcdHRoaXMuc2V0VW5pZm9ybU1hdHJpeDQobmFtZSwgdmFsdWUpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodmFsdWUuY29uc3RydWN0b3IgPT09IFRIUkVFLkNvbG9yKSB7XHJcblx0XHRcdHRoaXMuc2V0VW5pZm9ybTNmKG5hbWUsIHZhbHVlKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xyXG5cdFx0XHR0aGlzLnNldFVuaWZvcm0xZihuYW1lLCB2YWx1ZSk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiKSB7XHJcblx0XHRcdHRoaXMuc2V0VW5pZm9ybUJvb2xlYW4obmFtZSwgdmFsdWUpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBXZWJHTFRleHR1cmUpIHtcclxuXHRcdFx0dGhpcy5zZXRVbmlmb3JtVGV4dHVyZShuYW1lLCB2YWx1ZSk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcblx0XHRcdGlmICh2YWx1ZS5sZW5ndGggPT09IDIpIHtcclxuXHRcdFx0XHR0aGlzLnNldFVuaWZvcm0yZihuYW1lLCB2YWx1ZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZiAodmFsdWUubGVuZ3RoID09PSAzKSB7XHJcblx0XHRcdFx0dGhpcy5zZXRVbmlmb3JtM2YobmFtZSwgdmFsdWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0Y29uc29sZS5lcnJvcihcIlBvdHJlZTogVW5oYW5kbGVkIHVuaWZvcm0gdHlwZTogXCIsIG5hbWUsIHZhbHVlKTtcclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRzZXRVbmlmb3JtMWkobmFtZSwgdmFsdWUpIHtcclxuXHRcdHZhciBnbCA9IHRoaXMuZ2w7XHJcblx0XHR2YXIgbG9jYXRpb24gPSB0aGlzLnVuaWZvcm1Mb2NhdGlvbnNbbmFtZV07XHJcblxyXG5cdFx0aWYgKGxvY2F0aW9uID09IG51bGwpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGdsLnVuaWZvcm0xaShsb2NhdGlvbiwgdmFsdWUpO1xyXG5cdH1cclxufTtcclxuXHJcbmV4cG9ydCB7IFNoYWRlciB9OyIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuY2xhc3MgV2ViR0xCdWZmZXJcclxue1xyXG5cdGNvbnN0cnVjdG9yKClcclxuXHR7XHJcblx0XHR0aGlzLm51bUVsZW1lbnRzID0gMDtcclxuXHRcdHRoaXMudmFvID0gbnVsbDtcclxuXHRcdHRoaXMudmJvcyA9IG5ldyBNYXAoKTtcclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQge1dlYkdMQnVmZmVyfTsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmltcG9ydCB7IEhlbHBlclV0aWxzIH0gZnJvbSBcIi4uL3V0aWxzL0hlbHBlclV0aWxzLmpzXCI7XHJcbmltcG9ydCB7IHVwZGF0ZVBvaW50Q2xvdWRzIH0gZnJvbSBcIi4uL1BvdHJlZS5qc1wiO1xyXG5pbXBvcnQgeyBQb2ludENsb3VkVHJlZSB9IGZyb20gXCIuLi9wb2ludGNsb3VkL1BvaW50Q2xvdWRUcmVlLmpzXCI7XHJcblxyXG4vKipcclxuICogUG90cmVlIG9iamVjdCBpcyBhIHdyYXBwZXIgdG8gdXNlIFBvdHJlZSBhbG9uZ3NpZGUgb3RoZXIgVEhSRUUgYmFzZWQgZnJhbWV3b3Jrcy5cclxuICogXHJcbiAqIFRoZSBvYmplY3QgY2FuIGJlIHVzZWQgYSBub3JtYWwgT2JqZWN0M0QuXHJcbiAqIFxyXG4gKiBJdCBpcyBiYXNlZCBvbiBUSFJFRS5NZXNoIGFuZCBhdXRvbWF0aWNhbGx5IHVwZGF0ZXMgdGhlIHBvaW50IGNsb3VkIGJhc2VkIG9uIHZpc2liaWxpdHkuXHJcbiAqIFxyXG4gKiBBbHNvIHRha2VzIGNhcmUgb2YgZ2VvbWV0cnkgYWp1c3RtZW50cyB0byBhbGxvdyB0aGUgcG9pbnQgY2xvdWRzIHRvIGJlIGZydXN0dW0gY3VsbGVkLlxyXG4gKi9cclxuY2xhc3MgQmFzaWNHcm91cCBleHRlbmRzIFRIUkVFLk1lc2gge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIobmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCksIG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7IG9wYWNpdHk6IDAuMCwgd2lyZWZyYW1lOiBmYWxzZSwgdHJhbnNwYXJlbnQ6IHRydWUgfSkpO1xyXG5cclxuICAgIHRoaXMucm90YXRpb24uc2V0KC1NYXRoLlBJIC8gMiwgMCwgMCk7XHJcblxyXG4gICAgdGhpcy5mcnVzdHVtQ3VsbGVkID0gdHJ1ZTtcclxuICAgIHRoaXMucG9pbnRjbG91ZHMgPSBbXTtcclxuXHJcbiAgICB0aGlzLm5vZGVTaXplID0gMzA7XHJcbiAgICB0aGlzLnBvaW50QnVkZ2V0ID0gMWUxMDsgLy9UT0RPIDxOT1QgVVNFRD5cclxuICAgIHRoaXMubm9kZUxvYWRSYXRlID0gMjsgLy9UT0RPIDxOT1QgVVNFRD5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEVtcHR5IHJheWNhc3QgbWV0aG9kIHRvIGF2b2lkIGdldHRpbmcgdmFsaWQgY29sbGlzaW9uIGRldGVjdGlvbiB3aXRoIHRoZSBib3ggZ2VvbWV0cnkgYXR0YWNoZWQuXHJcbiAgICovXHJcbiAgcmF5Y2FzdChyYXljYXN0ZXIsIGludGVyc2VjdHMpIHsgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGFuZ2VzIHRoZSBwb2ludCBidWRnZXQgdG8gYmUgdXNlZCBieSBwb3RyZWUuXHJcbiAgICovXHJcbiAgc2V0UG9pbnRCdWRnZXQoYnVkZ2V0KSB7XHJcbiAgICB0aGlzLnBvaW50QnVkZ2V0ID0gYnVkZ2V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXNlZCB0byB1cGRhdGUgdGhlIHBvaW50IGNsb3VkIHZpc2liaWxpdHkgcmVsYXRpdmUgdG8gYSBjYW1lcmEuXHJcbiAgICogXHJcbiAgICogQ2FsbGVkIGF1dG9tYXRpY2FsbHkgYmVmb3JlIHJlbmRlcmluZy5cclxuICAgKi9cclxuICBvbkJlZm9yZVJlbmRlcihyZW5kZXJlciwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBvaW50Y2xvdWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHRoaXMucG9pbnRjbG91ZHNbaV0ubWluaW11bU5vZGVQaXhlbFNpemUgPSB0aGlzLm5vZGVTaXplO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVBvaW50Q2xvdWRzKHRoaXMucG9pbnRjbG91ZHMsIGNhbWVyYSwgcmVuZGVyZXIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVjYWxjdWxhdGUgdGhlIGJveCBnZW9tZXRyeSBhdHRhY2hlZCB0byB0aGlzIGdyb3VwLlxyXG4gICAqIFxyXG4gICAqIFRoZSBnZW9tZXRyeSBpdHMgbm90IHZpc2libGUgYW5kIGl0cyBvbmx5IHVzZWQgZm9yIGZydXN0dW0gY3VsbGluZy5cclxuICAgKi9cclxuICByZWNhbGN1bGF0ZUJveEdlb21ldHJ5KCkge1xyXG4gICAgdmFyIGJveCA9IHRoaXMuZ2V0Qm91bmRpbmdCb3goKTtcclxuXHJcbiAgICB2YXIgc2l6ZSA9IGJveC5nZXRTaXplKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG4gICAgdmFyIGNlbnRlciA9IGJveC5nZXRDZW50ZXIobmV3IFRIUkVFLlZlY3RvcjMoKSk7XHJcblxyXG4gICAgdmFyIG1hdHJpeCA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XHJcbiAgICBtYXRyaXgubWFrZVRyYW5zbGF0aW9uKGNlbnRlci54LCAtY2VudGVyLnosIGNlbnRlci55KTtcclxuXHJcbiAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94QnVmZmVyR2VvbWV0cnkoc2l6ZS54LCBzaXplLnosIHNpemUueSk7XHJcbiAgICBnZW9tZXRyeS5hcHBseU1hdHJpeDQobWF0cml4KTtcclxuXHJcbiAgICB0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGQgYW4gb2JqZWN0IGFzIGNoaWxkcmVuIG9mIHRoaXMgc2NlbmUuXHJcbiAgICogXHJcbiAgICogUG9pbnQgY2xvdWQgb2JqZWN0cyBhcmUgZGV0ZWN0ZWQgYW5kIHVzZWQgdG8gcmVjYWxjdWxhdGUgdGhlIGdlb21ldHJ5IGJveCB1c2VkIGZvciBmcnVzdHVtIGN1bGxpbmcuXHJcbiAgICovXHJcbiAgYWRkKG9iamVjdCkge1xyXG4gICAgVEhSRUUuT2JqZWN0M0QucHJvdG90eXBlLmFkZC5jYWxsKHRoaXMsIG9iamVjdCk7XHJcblxyXG4gICAgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFBvaW50Q2xvdWRUcmVlKSB7XHJcbiAgICAgIG9iamVjdC5zaG93Qm91bmRpbmdCb3ggPSBmYWxzZTtcclxuICAgICAgb2JqZWN0LmdlbmVyYXRlREVNID0gZmFsc2U7XHJcbiAgICAgIHRoaXMucG9pbnRjbG91ZHMucHVzaChvYmplY3QpO1xyXG4gICAgICB0aGlzLnJlY2FsY3VsYXRlQm94R2VvbWV0cnkoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZSBvYmplY3QgZnJvbSBncm91cC5cclxuICAgKiBcclxuICAgKiBQb2ludCBjbG91ZCBvYmplY3RzIGFyZSBkZXRlY3RlZCBhbmQgdXNlZCB0byByZWNhbGN1bGF0ZSB0aGUgZ2VvbWV0cnkgYm94IHVzZWQgZm9yIGZydXN0dW0gY3VsbGluZ1xyXG4gICAqL1xyXG4gIHJlbW92ZShvYmplY3QpIHtcclxuICAgIFRIUkVFLk9iamVjdDNELnByb3RvdHlwZS5yZW1vdmUuY2FsbCh0aGlzLCBvYmplY3QpO1xyXG5cclxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBQb2ludENsb3VkVHJlZSkge1xyXG4gICAgICB2YXIgaW5kZXggPSB0aGlzLnBvaW50Y2xvdWRzLmluZGV4T2Yob2JqZWN0KTtcclxuICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgIHRoaXMucG9pbnRjbG91ZHMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB0aGlzLnJlY2FsY3VsYXRlQm94R2VvbWV0cnkoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIFxyXG4gICAqIEdldCB0aGUgcG9pbnQgY2xvdWQgYm91ZGluZyBib3guXHJcbiAgICovXHJcbiAgZ2V0Qm91bmRpbmdCb3goKSB7XHJcbiAgICB2YXIgYm94ID0gbmV3IFRIUkVFLkJveDMoKTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKHRydWUpO1xyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5wb2ludGNsb3Vkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgcG9pbnRjbG91ZCA9IHRoaXMucG9pbnRjbG91ZHNbaV07XHJcbiAgICAgIHBvaW50Y2xvdWQudXBkYXRlTWF0cml4V29ybGQodHJ1ZSk7XHJcbiAgICAgIHZhciBwb2ludGNsb3VkQm94ID0gcG9pbnRjbG91ZC5wY29HZW9tZXRyeS50aWdodEJvdW5kaW5nQm94ID8gcG9pbnRjbG91ZC5wY29HZW9tZXRyeS50aWdodEJvdW5kaW5nQm94IDogcG9pbnRjbG91ZC5ib3VuZGluZ0JveDtcclxuICAgICAgdmFyIGJveFdvcmxkID0gSGVscGVyVXRpbHMuY29tcHV0ZVRyYW5zZm9ybWVkQm91bmRpbmdCb3gocG9pbnRjbG91ZEJveCwgcG9pbnRjbG91ZC5tYXRyaXhXb3JsZCk7XHJcbiAgICAgIGJveC51bmlvbihib3hXb3JsZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGJveDtcclxuICB9XHJcblxyXG4gIC8qKiBcclxuICAgKiBFc3RpbWF0ZSB0aGUgcG9pbnQgY2xvdWQgaGVpZ2h0IGF0IGEgZ2l2ZW4gcG9zaXRpb24uXHJcbiAgICovXHJcbiAgZXN0aW1hdGVIZWlnaHRBdChwb3NpdGlvbikge1xyXG4gICAgdmFyIGhlaWdodCA9IG51bGw7XHJcbiAgICB2YXIgZnJvbVNwYWNpbmcgPSBJbmZpbml0eTtcclxuXHJcbiAgICBmb3IgKHZhciBwb2ludGNsb3VkIG9mIHRoaXMucG9pbnRjbG91ZHMpIHtcclxuICAgICAgaWYgKHBvaW50Y2xvdWQucm9vdC5nZW9tZXRyeU5vZGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgcEhlaWdodCA9IG51bGw7XHJcbiAgICAgIHZhciBwRnJvbVNwYWNpbmcgPSBJbmZpbml0eTtcclxuXHJcbiAgICAgIHZhciBscG9zID0gcG9zaXRpb24uY2xvbmUoKS5zdWIocG9pbnRjbG91ZC5wb3NpdGlvbik7XHJcbiAgICAgIGxwb3MueiA9IDA7XHJcbiAgICAgIHZhciByYXkgPSBuZXcgVEhSRUUuUmF5KGxwb3MsIG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDEpKTtcclxuXHJcbiAgICAgIHZhciBzdGFjayA9IFtwb2ludGNsb3VkLnJvb3RdO1xyXG4gICAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHZhciBub2RlID0gc3RhY2sucG9wKCk7XHJcbiAgICAgICAgdmFyIGJveCA9IG5vZGUuZ2V0Qm91bmRpbmdCb3goKTtcclxuICAgICAgICB2YXIgaW5zaWRlID0gcmF5LmludGVyc2VjdEJveChib3gpO1xyXG5cclxuICAgICAgICBpZiAoIWluc2lkZSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaCA9IG5vZGUuZ2VvbWV0cnlOb2RlLm1lYW4ueiArIHBvaW50Y2xvdWQucG9zaXRpb24ueiArIG5vZGUuZ2VvbWV0cnlOb2RlLmJvdW5kaW5nQm94Lm1pbi56O1xyXG5cclxuICAgICAgICBpZiAobm9kZS5nZW9tZXRyeU5vZGUuc3BhY2luZyA8PSBwRnJvbVNwYWNpbmcpIHtcclxuICAgICAgICAgIHBIZWlnaHQgPSBoO1xyXG4gICAgICAgICAgcEZyb21TcGFjaW5nID0gbm9kZS5nZW9tZXRyeU5vZGUuc3BhY2luZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAodmFyIGluZGV4IG9mIE9iamVjdC5rZXlzKG5vZGUuY2hpbGRyZW4pKSB7XHJcbiAgICAgICAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2luZGV4XTtcclxuICAgICAgICAgIGlmIChjaGlsZC5nZW9tZXRyeU5vZGUpIHtcclxuICAgICAgICAgICAgc3RhY2sucHVzaChub2RlLmNoaWxkcmVuW2luZGV4XSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaGVpZ2h0ID09PSBudWxsIHx8IHBGcm9tU3BhY2luZyA8IGZyb21TcGFjaW5nKSB7XHJcbiAgICAgICAgaGVpZ2h0ID0gcEhlaWdodDtcclxuICAgICAgICBmcm9tU3BhY2luZyA9IHBGcm9tU3BhY2luZztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBoZWlnaHQ7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHsgQmFzaWNHcm91cCB9O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmltcG9ydCB7IFdlYkdMQnVmZmVyIH0gZnJvbSBcIi4uL1dlYkdMQnVmZmVyLmpzXCI7XHJcbmltcG9ydCB7IEJhc2ljR3JvdXAgfSBmcm9tIFwiLi9CYXNpY0dyb3VwLmpzXCI7XHJcbmltcG9ydCB7IFBvaW50Q2xvdWRUcmVlIH0gZnJvbSBcIi4uL3BvaW50Y2xvdWQvUG9pbnRDbG91ZFRyZWUuanNcIjtcclxuaW1wb3J0IHsgUG9pbnRDbG91ZE9jdHJlZU5vZGUgfSBmcm9tIFwiLi4vcG9pbnRjbG91ZC9Qb2ludENsb3VkT2N0cmVlLmpzXCI7XHJcbmltcG9ydCB7IFBvaW50Q2xvdWRBcmVuYTRETm9kZSB9IGZyb20gXCIuLi9wb2ludGNsb3VkL1BvaW50Q2xvdWRBcmVuYTRELmpzXCI7XHJcbmltcG9ydCB7IEF0dHJpYnV0ZUxvY2F0aW9ucywgUG9pbnRTaXplVHlwZSwgUG9pbnRDb2xvclR5cGUsIENsaXBUYXNrIH0gZnJvbSBcIi4uL1BvdHJlZS5qc1wiO1xyXG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tIFwiLi4vR2xvYmFsLmpzXCI7XHJcbmltcG9ydCB7IFNoYWRlciB9IGZyb20gXCIuLi9TaGFkZXIuanNcIjtcclxuaW1wb3J0IHsgV2ViR0xUZXh0dXJlIH0gZnJvbSBcIi4uL1dlYkdMVGV4dHVyZS5qc1wiO1xyXG5cclxuY2xhc3MgR3JvdXAgZXh0ZW5kcyBCYXNpY0dyb3VwIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgdGhpcy5idWZmZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy5zaGFkZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgdGhpcy50ZXh0dXJlcyA9IG5ldyBNYXAoKTtcclxuICAgIHRoaXMudHlwZXMgPSBuZXcgTWFwKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgV2ViR0wgZXh0ZW5zaW9ucyByZXF1aXJlZCBmb3IgdGhlIG1vcmUgYWR2YW5jZWQgZmVhdHVyZXMuXHJcbiAgICovXHJcbiAgZ2V0RXh0ZW5zaW9ucyhnbCkge1xyXG4gICAgdGhpcy50eXBlcy5zZXQoRmxvYXQzMkFycmF5LCBnbC5GTE9BVCk7XHJcbiAgICB0aGlzLnR5cGVzLnNldChVaW50OEFycmF5LCBnbC5VTlNJR05FRF9CWVRFKTtcclxuICAgIHRoaXMudHlwZXMuc2V0KFVpbnQxNkFycmF5LCBnbC5VTlNJR05FRF9TSE9SVCk7XHJcblxyXG4gICAgdmFyIGV4dFZBTyA9IGdsLmdldEV4dGVuc2lvbihcIk9FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0XCIpO1xyXG4gICAgZ2wuY3JlYXRlVmVydGV4QXJyYXkgPSBleHRWQU8uY3JlYXRlVmVydGV4QXJyYXlPRVMuYmluZChleHRWQU8pO1xyXG4gICAgZ2wuYmluZFZlcnRleEFycmF5ID0gZXh0VkFPLmJpbmRWZXJ0ZXhBcnJheU9FUy5iaW5kKGV4dFZBTyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGUgdGhlIHBvdHJlZSBncm91cCBiZWZvcmUgcmVuZGVyaW5nLlxyXG4gICAqL1xyXG4gIG9uQmVmb3JlUmVuZGVyKHJlbmRlcmVyLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwKSB7XHJcbiAgICBzdXBlci5vbkJlZm9yZVJlbmRlcihyZW5kZXJlciwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCk7XHJcblxyXG4gICAgdmFyIGdsID0gcmVuZGVyZXIuZ2V0Q29udGV4dCgpO1xyXG4gICAgaWYgKGdsLmJpbmRWZXJ0ZXhBcnJheSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMuZ2V0RXh0ZW5zaW9ucyhnbCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHJlc3VsdCA9IHRoaXMuZmV0Y2hPY3RyZWVzKCk7XHJcblxyXG4gICAgZm9yICh2YXIgb2N0cmVlIG9mIHJlc3VsdC5vY3RyZWVzKSB7XHJcbiAgICAgIHZhciBub2RlcyA9IG9jdHJlZS52aXNpYmxlTm9kZXM7XHJcbiAgICAgIHRoaXMucmVuZGVyT2N0cmVlKHJlbmRlcmVyLCBvY3RyZWUsIG5vZGVzLCBjYW1lcmEpO1xyXG4gICAgfVxyXG5cclxuICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTEpO1xyXG4gICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgbnVsbCk7XHJcblxyXG4gICAgcmVuZGVyZXIuc3RhdGUucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIGNyZWF0ZUJ1ZmZlcihnbCwgZ2VvbWV0cnkpIHtcclxuICAgIHZhciB3ZWJnbEJ1ZmZlciA9IG5ldyBXZWJHTEJ1ZmZlcigpO1xyXG4gICAgd2ViZ2xCdWZmZXIudmFvID0gZ2wuY3JlYXRlVmVydGV4QXJyYXkoKTtcclxuICAgIHdlYmdsQnVmZmVyLm51bUVsZW1lbnRzID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5jb3VudDtcclxuXHJcbiAgICBnbC5iaW5kVmVydGV4QXJyYXkod2ViZ2xCdWZmZXIudmFvKTtcclxuXHJcbiAgICBmb3IgKHZhciBhdHRyaWJ1dGVOYW1lIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMpIHtcclxuICAgICAgdmFyIGJ1ZmZlckF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV07XHJcblxyXG4gICAgICB2YXIgdmJvID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB2Ym8pO1xyXG4gICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyQXR0cmlidXRlLmFycmF5LCBnbC5TVEFUSUNfRFJBVyk7XHJcblxyXG4gICAgICB2YXIgYXR0cmlidXRlTG9jYXRpb24gPSBBdHRyaWJ1dGVMb2NhdGlvbnNbYXR0cmlidXRlTmFtZV07XHJcbiAgICAgIHZhciBub3JtYWxpemVkID0gYnVmZmVyQXR0cmlidXRlLm5vcm1hbGl6ZWQ7XHJcbiAgICAgIHZhciB0eXBlID0gdGhpcy50eXBlcy5nZXQoYnVmZmVyQXR0cmlidXRlLmFycmF5LmNvbnN0cnVjdG9yKTtcclxuXHJcbiAgICAgIGlmICh0eXBlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGF0dHJpYnV0ZUxvY2F0aW9uLCBidWZmZXJBdHRyaWJ1dGUuaXRlbVNpemUsIHR5cGUsIG5vcm1hbGl6ZWQsIDAsIDApO1xyXG4gICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGF0dHJpYnV0ZUxvY2F0aW9uKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgd2ViZ2xCdWZmZXIudmJvcy5zZXQoYXR0cmlidXRlTmFtZSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBoYW5kbGU6IHZibyxcclxuICAgICAgICAgIG5hbWU6IGF0dHJpYnV0ZU5hbWUsXHJcbiAgICAgICAgICBjb3VudDogYnVmZmVyQXR0cmlidXRlLmNvdW50LFxyXG4gICAgICAgICAgaXRlbVNpemU6IGJ1ZmZlckF0dHJpYnV0ZS5pdGVtU2l6ZSxcclxuICAgICAgICAgIHR5cGU6IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXkuY29uc3RydWN0b3IsXHJcbiAgICAgICAgICB2ZXJzaW9uOiAwXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgZ2wuYmluZFZlcnRleEFycmF5KG51bGwpO1xyXG5cclxuICAgIHJldHVybiB3ZWJnbEJ1ZmZlcjtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUJ1ZmZlcihnbCwgZ2VvbWV0cnkpIHtcclxuICAgIHZhciB3ZWJnbEJ1ZmZlciA9IHRoaXMuYnVmZmVycy5nZXQoZ2VvbWV0cnkpO1xyXG5cclxuICAgIGdsLmJpbmRWZXJ0ZXhBcnJheSh3ZWJnbEJ1ZmZlci52YW8pO1xyXG5cclxuICAgIGZvciAodmFyIGF0dHJpYnV0ZU5hbWUgaW4gZ2VvbWV0cnkuYXR0cmlidXRlcykge1xyXG4gICAgICB2YXIgYnVmZmVyQXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTtcclxuXHJcbiAgICAgIHZhciBhdHRyaWJ1dGVMb2NhdGlvbiA9IEF0dHJpYnV0ZUxvY2F0aW9uc1thdHRyaWJ1dGVOYW1lXTtcclxuICAgICAgdmFyIG5vcm1hbGl6ZWQgPSBidWZmZXJBdHRyaWJ1dGUubm9ybWFsaXplZDtcclxuICAgICAgdmFyIHR5cGUgPSB0aGlzLnR5cGVzLmdldChidWZmZXJBdHRyaWJ1dGUuYXJyYXkuY29uc3RydWN0b3IpO1xyXG5cclxuICAgICAgdmFyIHZibyA9IG51bGw7XHJcbiAgICAgIGlmICghd2ViZ2xCdWZmZXIudmJvcy5oYXMoYXR0cmlidXRlTmFtZSkpIHtcclxuICAgICAgICB2Ym8gPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuXHJcbiAgICAgICAgd2ViZ2xCdWZmZXIudmJvcy5zZXQoYXR0cmlidXRlTmFtZSxcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaGFuZGxlOiB2Ym8sXHJcbiAgICAgICAgICAgIG5hbWU6IGF0dHJpYnV0ZU5hbWUsXHJcbiAgICAgICAgICAgIGNvdW50OiBidWZmZXJBdHRyaWJ1dGUuY291bnQsXHJcbiAgICAgICAgICAgIGl0ZW1TaXplOiBidWZmZXJBdHRyaWJ1dGUuaXRlbVNpemUsXHJcbiAgICAgICAgICAgIHR5cGU6IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXkuY29uc3RydWN0b3IsXHJcbiAgICAgICAgICAgIHZlcnNpb246IGJ1ZmZlckF0dHJpYnV0ZS52ZXJzaW9uXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICB2Ym8gPSB3ZWJnbEJ1ZmZlci52Ym9zLmdldChhdHRyaWJ1dGVOYW1lKS5oYW5kbGU7XHJcbiAgICAgICAgd2ViZ2xCdWZmZXIudmJvcy5nZXQoYXR0cmlidXRlTmFtZSkudmVyc2lvbiA9IGJ1ZmZlckF0dHJpYnV0ZS52ZXJzaW9uO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdmJvKTtcclxuICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlckF0dHJpYnV0ZS5hcnJheSwgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGF0dHJpYnV0ZUxvY2F0aW9uLCBidWZmZXJBdHRyaWJ1dGUuaXRlbVNpemUsIHR5cGUsIG5vcm1hbGl6ZWQsIDAsIDApO1xyXG4gICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhdHRyaWJ1dGVMb2NhdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgZ2wuYmluZFZlcnRleEFycmF5KG51bGwpO1xyXG4gIH1cclxuXHJcbiAgZmV0Y2hPY3RyZWVzKCkge1xyXG4gICAgdmFyIG9jdHJlZXMgPSBbXTtcclxuICAgIHZhciBzdGFjayA9IFt0aGlzXTtcclxuXHJcbiAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICB2YXIgbm9kZSA9IHN0YWNrLnBvcCgpO1xyXG5cclxuICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBQb2ludENsb3VkVHJlZSkge1xyXG4gICAgICAgIG9jdHJlZXMucHVzaChub2RlKTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHZpc2libGVDaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW4uZmlsdGVyKGMgPT4gYy52aXNpYmxlKTtcclxuICAgICAgc3RhY2sucHVzaCguLi52aXNpYmxlQ2hpbGRyZW4pO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciByZXN1bHQgPVxyXG4gICAge1xyXG4gICAgICBvY3RyZWVzOiBvY3RyZWVzXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICByZW5kZXJOb2RlcyhyZW5kZXJlciwgb2N0cmVlLCBub2RlcywgdmlzaWJpbGl0eVRleHR1cmVEYXRhLCBjYW1lcmEsIHNoYWRlcikge1xyXG4gICAgdmFyIGdsID0gcmVuZGVyZXIuZ2V0Q29udGV4dCgpO1xyXG4gICAgdmFyIG1hdGVyaWFsID0gb2N0cmVlLm1hdGVyaWFsO1xyXG4gICAgdmFyIHNoYWRvd01hcHMgPSBbXTtcclxuICAgIHZhciB2aWV3ID0gY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZTtcclxuXHJcbiAgICB2YXIgd29ybGRWaWV3ID0gbmV3IFRIUkVFLk1hdHJpeDQoKTtcclxuICAgIHZhciBtYXQ0aG9sZGVyID0gbmV3IEZsb2F0MzJBcnJheSgxNik7XHJcblxyXG4gICAgZm9yICh2YXIgbm9kZSBvZiBub2Rlcykge1xyXG4gICAgICBpZiAoR2xvYmFsLmRlYnVnLmFsbG93ZWROb2RlcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKCFHbG9iYWwuZGVidWcuYWxsb3dlZE5vZGVzLmluY2x1ZGVzKG5vZGUubmFtZSkpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHdvcmxkID0gbm9kZS5zY2VuZU5vZGUubWF0cml4V29ybGQ7XHJcbiAgICAgIHdvcmxkVmlldy5tdWx0aXBseU1hdHJpY2VzKHZpZXcsIHdvcmxkKTtcclxuXHJcbiAgICAgIGlmICh2aXNpYmlsaXR5VGV4dHVyZURhdGEpIHtcclxuICAgICAgICB2YXIgdm5TdGFydCA9IHZpc2liaWxpdHlUZXh0dXJlRGF0YS5vZmZzZXRzLmdldChub2RlKTtcclxuICAgICAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwidVZOU3RhcnRcIiwgdm5TdGFydCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBsZXZlbCA9IG5vZGUuZ2V0TGV2ZWwoKTtcclxuICAgICAgc2hhZGVyLnNldFVuaWZvcm0oXCJ1RGVidWdcIiwgbm9kZS5kZWJ1ZyA9PT0gdHJ1ZSk7XHJcblxyXG4gICAgICB2YXIgaXNMZWFmO1xyXG4gICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFBvaW50Q2xvdWRPY3RyZWVOb2RlKSB7XHJcbiAgICAgICAgaXNMZWFmID0gT2JqZWN0LmtleXMobm9kZS5jaGlsZHJlbikubGVuZ3RoID09PSAwO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKG5vZGUgaW5zdGFuY2VvZiBQb2ludENsb3VkQXJlbmE0RE5vZGUpIHtcclxuICAgICAgICBpc0xlYWYgPSBub2RlLmdlb21ldHJ5Tm9kZS5pc0xlYWY7XHJcbiAgICAgIH1cclxuICAgICAgc2hhZGVyLnNldFVuaWZvcm0oXCJ1SXNMZWFmTm9kZVwiLCBpc0xlYWYpO1xyXG5cclxuICAgICAgLy9UT0RPIDxjb25zaWRlciBwYXNzaW5nIG1hdHJpY2VzIGluIGFuIGFycmF5IHRvIGF2b2lkIHVuaWZvcm1NYXRyaXg0ZnYgb3ZlcmhlYWQ+XHJcbiAgICAgIHZhciBsTW9kZWwgPSBzaGFkZXIudW5pZm9ybUxvY2F0aW9uc1tcIm1vZGVsTWF0cml4XCJdO1xyXG4gICAgICBpZiAobE1vZGVsKSB7XHJcbiAgICAgICAgbWF0NGhvbGRlci5zZXQod29ybGQuZWxlbWVudHMpO1xyXG4gICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYobE1vZGVsLCBmYWxzZSwgbWF0NGhvbGRlcik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBsTW9kZWxWaWV3ID0gc2hhZGVyLnVuaWZvcm1Mb2NhdGlvbnNbXCJtb2RlbFZpZXdNYXRyaXhcIl07XHJcbiAgICAgIG1hdDRob2xkZXIuc2V0KHdvcmxkVmlldy5lbGVtZW50cyk7XHJcbiAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYobE1vZGVsVmlldywgZmFsc2UsIG1hdDRob2xkZXIpO1xyXG5cclxuICAgICAgLy9DbGlwIFBvbHlnb25zXHJcbiAgICAgIGlmIChtYXRlcmlhbC5jbGlwUG9seWdvbnMgJiYgbWF0ZXJpYWwuY2xpcFBvbHlnb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICB2YXIgY2xpcFBvbHlnb25WQ291bnQgPSBbXTtcclxuICAgICAgICB2YXIgd29ybGRWaWV3UHJvak1hdHJpY2VzID0gW107XHJcblxyXG4gICAgICAgIGZvciAodmFyIGNsaXBQb2x5Z29uIG9mIG1hdGVyaWFsLmNsaXBQb2x5Z29ucykge1xyXG4gICAgICAgICAgdmFyIHZpZXcgPSBjbGlwUG9seWdvbi52aWV3TWF0cml4O1xyXG4gICAgICAgICAgdmFyIHByb2ogPSBjbGlwUG9seWdvbi5wcm9qTWF0cml4O1xyXG5cclxuICAgICAgICAgIHZhciB3b3JsZFZpZXdQcm9qID0gcHJvai5jbG9uZSgpLm11bHRpcGx5KHZpZXcpLm11bHRpcGx5KHdvcmxkKTtcclxuXHJcbiAgICAgICAgICBjbGlwUG9seWdvblZDb3VudC5wdXNoKGNsaXBQb2x5Z29uLm1hcmtlcnMubGVuZ3RoKTtcclxuICAgICAgICAgIHdvcmxkVmlld1Byb2pNYXRyaWNlcy5wdXNoKHdvcmxkVmlld1Byb2opO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGZsYXR0ZW5lZE1hdHJpY2VzID0gW10uY29uY2F0KC4uLndvcmxkVmlld1Byb2pNYXRyaWNlcy5tYXAobSA9PiBtLmVsZW1lbnRzKSk7XHJcblxyXG4gICAgICAgIHZhciBmbGF0dGVuZWRWZXJ0aWNlcyA9IG5ldyBBcnJheSg4ICogMyAqIG1hdGVyaWFsLmNsaXBQb2x5Z29ucy5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF0ZXJpYWwuY2xpcFBvbHlnb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICB2YXIgY2xpcFBvbHlnb24gPSBtYXRlcmlhbC5jbGlwUG9seWdvbnNbaV07XHJcblxyXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjbGlwUG9seWdvbi5tYXJrZXJzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIGZsYXR0ZW5lZFZlcnRpY2VzW2kgKiAyNCArIChqICogMyArIDApXSA9IGNsaXBQb2x5Z29uLm1hcmtlcnNbal0ucG9zaXRpb24ueDtcclxuICAgICAgICAgICAgZmxhdHRlbmVkVmVydGljZXNbaSAqIDI0ICsgKGogKiAzICsgMSldID0gY2xpcFBvbHlnb24ubWFya2Vyc1tqXS5wb3NpdGlvbi55O1xyXG4gICAgICAgICAgICBmbGF0dGVuZWRWZXJ0aWNlc1tpICogMjQgKyAoaiAqIDMgKyAyKV0gPSBjbGlwUG9seWdvbi5tYXJrZXJzW2pdLnBvc2l0aW9uLno7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbENsaXBQb2x5Z29uVkNvdW50ID0gc2hhZGVyLnVuaWZvcm1Mb2NhdGlvbnNbXCJ1Q2xpcFBvbHlnb25WQ291bnRbMF1cIl07XHJcbiAgICAgICAgZ2wudW5pZm9ybTFpdihsQ2xpcFBvbHlnb25WQ291bnQsIGNsaXBQb2x5Z29uVkNvdW50KTtcclxuXHJcbiAgICAgICAgdmFyIGxDbGlwUG9seWdvblZQID0gc2hhZGVyLnVuaWZvcm1Mb2NhdGlvbnNbXCJ1Q2xpcFBvbHlnb25XVlBbMF1cIl07XHJcbiAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihsQ2xpcFBvbHlnb25WUCwgZmFsc2UsIGZsYXR0ZW5lZE1hdHJpY2VzKTtcclxuXHJcbiAgICAgICAgdmFyIGxDbGlwUG9seWdvbnMgPSBzaGFkZXIudW5pZm9ybUxvY2F0aW9uc1tcInVDbGlwUG9seWdvblZlcnRpY2VzWzBdXCJdO1xyXG4gICAgICAgIGdsLnVuaWZvcm0zZnYobENsaXBQb2x5Z29ucywgZmxhdHRlbmVkVmVydGljZXMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwidUxldmVsXCIsIGxldmVsKTtcclxuICAgICAgc2hhZGVyLnNldFVuaWZvcm0xZihcInVOb2RlU3BhY2luZ1wiLCBub2RlLmdlb21ldHJ5Tm9kZS5lc3RpbWF0ZWRTcGFjaW5nKTtcclxuICAgICAgc2hhZGVyLnNldFVuaWZvcm0xZihcInVQQ0luZGV4XCIsIGkpO1xyXG5cclxuICAgICAgLypcclxuICAgICAgaWYoc2hhZG93TWFwcy5sZW5ndGggPiAwKVxyXG4gICAgICB7XHJcbiAgICAgICAgdmFyIGxTaGFkb3dNYXAgPSBzaGFkZXIudW5pZm9ybUxvY2F0aW9uc1tcInVTaGFkb3dNYXBbMF1cIl07XHJcblxyXG4gICAgICAgIHNoYWRlci5zZXRVbmlmb3JtM2YoXCJ1U2hhZG93Q29sb3JcIiwgbWF0ZXJpYWwudW5pZm9ybXMudVNoYWRvd0NvbG9yLnZhbHVlKTtcclxuXHJcbiAgICAgICAgdmFyIGJpbmRpbmdTdGFydCA9IDU7XHJcbiAgICAgICAgdmFyIGJpbmRpbmdQb2ludHMgPSBuZXcgQXJyYXkoc2hhZG93TWFwcy5sZW5ndGgpLmZpbGwoYmluZGluZ1N0YXJ0KS5tYXAoKGEsIGkpID0+IChhICsgaSkpO1xyXG4gICAgICAgIGdsLnVuaWZvcm0xaXYobFNoYWRvd01hcCwgYmluZGluZ1BvaW50cyk7XHJcblxyXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBzaGFkb3dNYXBzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHZhciBzaGFkb3dNYXAgPSBzaGFkb3dNYXBzW2ldO1xyXG4gICAgICAgICAgdmFyIGJpbmRpbmdQb2ludCA9IGJpbmRpbmdQb2ludHNbaV07XHJcbiAgICAgICAgICB2YXIgZ2xUZXh0dXJlID0gcmVuZGVyZXIucHJvcGVydGllcy5nZXQoc2hhZG93TWFwLnRhcmdldC50ZXh0dXJlKS5fX3dlYmdsVGV4dHVyZTtcclxuXHJcbiAgICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsW2BURVhUVVJFJHtiaW5kaW5nUG9pbnR9YF0pO1xyXG4gICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgZ2xUZXh0dXJlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB3b3JsZFZpZXdNYXRyaWNlcyA9IHNoYWRvd01hcHMubWFwKHNtID0+IHNtLmNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UpLm1hcCh2aWV3ID0+IG5ldyBUSFJFRS5NYXRyaXg0KCkubXVsdGlwbHlNYXRyaWNlcyh2aWV3LCB3b3JsZCkpXHJcblxyXG4gICAgICAgIHZhciBmbGF0dGVuZWRNYXRyaWNlcyA9IFtdLmNvbmNhdCguLi53b3JsZFZpZXdNYXRyaWNlcy5tYXAoYyA9PiBjLmVsZW1lbnRzKSk7XHJcbiAgICAgICAgdmFyIGxXb3JsZFZpZXcgPSBzaGFkZXIudW5pZm9ybUxvY2F0aW9uc1tcInVTaGFkb3dXb3JsZFZpZXdbMF1cIl07XHJcbiAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihsV29ybGRWaWV3LCBmYWxzZSwgZmxhdHRlbmVkTWF0cmljZXMpO1xyXG5cclxuICAgICAgICBmbGF0dGVuZWRNYXRyaWNlcyA9IFtdLmNvbmNhdCguLi5zaGFkb3dNYXBzLm1hcChzbSA9PiBzbS5jYW1lcmEucHJvamVjdGlvbk1hdHJpeC5lbGVtZW50cykpO1xyXG4gICAgICAgIHZhciBsUHJvaiA9IHNoYWRlci51bmlmb3JtTG9jYXRpb25zW1widVNoYWRvd1Byb2pbMF1cIl07XHJcbiAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihsUHJvaiwgZmFsc2UsIGZsYXR0ZW5lZE1hdHJpY2VzKTtcclxuICAgICAgfVxyXG4gICAgICAqL1xyXG5cclxuICAgICAgdmFyIGdlb21ldHJ5ID0gbm9kZS5nZW9tZXRyeU5vZGUuZ2VvbWV0cnk7XHJcbiAgICAgIHZhciB3ZWJnbEJ1ZmZlciA9IG51bGw7XHJcbiAgICAgIGlmICghdGhpcy5idWZmZXJzLmhhcyhnZW9tZXRyeSkpIHtcclxuICAgICAgICB3ZWJnbEJ1ZmZlciA9IHRoaXMuY3JlYXRlQnVmZmVyKGdsLCBnZW9tZXRyeSk7XHJcbiAgICAgICAgdGhpcy5idWZmZXJzLnNldChnZW9tZXRyeSwgd2ViZ2xCdWZmZXIpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHdlYmdsQnVmZmVyID0gdGhpcy5idWZmZXJzLmdldChnZW9tZXRyeSk7XHJcbiAgICAgICAgZm9yICh2YXIgYXR0cmlidXRlTmFtZSBpbiBnZW9tZXRyeS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICB2YXIgYXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTtcclxuICAgICAgICAgIGlmIChhdHRyaWJ1dGUudmVyc2lvbiA+IHdlYmdsQnVmZmVyLnZib3MuZ2V0KGF0dHJpYnV0ZU5hbWUpLnZlcnNpb24pIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVCdWZmZXIoZ2wsIGdlb21ldHJ5KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGdsLmJpbmRWZXJ0ZXhBcnJheSh3ZWJnbEJ1ZmZlci52YW8pO1xyXG4gICAgICBnbC5kcmF3QXJyYXlzKGdsLlBPSU5UUywgMCwgd2ViZ2xCdWZmZXIubnVtRWxlbWVudHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdsLmJpbmRWZXJ0ZXhBcnJheShudWxsKTtcclxuICB9XHJcblxyXG4gIHJlbmRlck9jdHJlZShyZW5kZXJlciwgb2N0cmVlLCBub2RlcywgY2FtZXJhKSB7XHJcbiAgICB2YXIgZ2wgPSByZW5kZXJlci5nZXRDb250ZXh0KCk7XHJcbiAgICB2YXIgbWF0ZXJpYWwgPSBvY3RyZWUubWF0ZXJpYWw7XHJcbiAgICB2YXIgc2hhZG93TWFwcyA9IFtdO1xyXG4gICAgdmFyIHZpZXcgPSBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlO1xyXG4gICAgdmFyIHZpZXdJbnYgPSBjYW1lcmEubWF0cml4V29ybGQ7XHJcbiAgICB2YXIgcHJvaiA9IGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4O1xyXG4gICAgdmFyIHByb2pJbnYgPSBwcm9qLmNsb25lKCkuaW52ZXJ0KCk7XHJcbiAgICB2YXIgd29ybGRWaWV3ID0gbmV3IFRIUkVFLk1hdHJpeDQoKTtcclxuXHJcbiAgICB2YXIgdmlzaWJpbGl0eVRleHR1cmVEYXRhID0gbnVsbDtcclxuICAgIHZhciBjdXJyZW50VGV4dHVyZUJpbmRpbmdQb2ludCA9IDA7XHJcblxyXG4gICAgaWYgKG1hdGVyaWFsLnBvaW50U2l6ZVR5cGUgPT09IFBvaW50U2l6ZVR5cGUuQURBUFRJVkUgfHwgbWF0ZXJpYWwucG9pbnRDb2xvclR5cGUgPT09IFBvaW50Q29sb3JUeXBlLkxPRCkge1xyXG4gICAgICB2aXNpYmlsaXR5VGV4dHVyZURhdGEgPSBvY3RyZWUuY29tcHV0ZVZpc2liaWxpdHlUZXh0dXJlRGF0YShub2RlcywgY2FtZXJhKTtcclxuXHJcbiAgICAgIHZhciB2bnQgPSBtYXRlcmlhbC52aXNpYmxlTm9kZXNUZXh0dXJlO1xyXG4gICAgICB2bnQuaW1hZ2UuZGF0YS5zZXQodmlzaWJpbGl0eVRleHR1cmVEYXRhLmRhdGEpO1xyXG4gICAgICB2bnQubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBzaGFkZXIgPSBudWxsO1xyXG5cclxuICAgIGlmICghdGhpcy5zaGFkZXJzLmhhcyhtYXRlcmlhbCkpIHtcclxuICAgICAgc2hhZGVyID0gbmV3IFNoYWRlcihnbCwgXCJwb2ludGNsb3VkXCIsIG1hdGVyaWFsLnZlcnRleFNoYWRlciwgbWF0ZXJpYWwuZnJhZ21lbnRTaGFkZXIpO1xyXG4gICAgICB0aGlzLnNoYWRlcnMuc2V0KG1hdGVyaWFsLCBzaGFkZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHNoYWRlciA9IHRoaXMuc2hhZGVycy5nZXQobWF0ZXJpYWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBudW1TbmFwc2hvdHMgPSBtYXRlcmlhbC5zbmFwRW5hYmxlZCA/IG1hdGVyaWFsLm51bVNuYXBzaG90cyA6IDA7XHJcbiAgICB2YXIgbnVtQ2xpcEJveGVzID0gKG1hdGVyaWFsLmNsaXBCb3hlcyAmJiBtYXRlcmlhbC5jbGlwQm94ZXMubGVuZ3RoKSA/IG1hdGVyaWFsLmNsaXBCb3hlcy5sZW5ndGggOiAwO1xyXG4gICAgdmFyIG51bUNsaXBQb2x5Z29ucyA9IChtYXRlcmlhbC5jbGlwUG9seWdvbnMgJiYgbWF0ZXJpYWwuY2xpcFBvbHlnb25zLmxlbmd0aCkgPyBtYXRlcmlhbC5jbGlwUG9seWdvbnMubGVuZ3RoIDogMDtcclxuICAgIHZhciBudW1DbGlwU3BoZXJlcyA9IDA7XHJcblxyXG4gICAgdmFyIGRlZmluZXMgPSBbXHJcbiAgICAgIFwiI2RlZmluZSBudW1fc2hhZG93bWFwc1wiICsgc2hhZG93TWFwcy5sZW5ndGgsXHJcbiAgICAgIFwiI2RlZmluZSBudW1fc25hcHNob3RzXCIgKyBudW1TbmFwc2hvdHMsXHJcbiAgICAgIFwiI2RlZmluZSBudW1fY2xpcGJveGVzXCIgKyBudW1DbGlwQm94ZXMsXHJcbiAgICAgIFwiI2RlZmluZSBudW1fY2xpcHNwaGVyZXNcIiArIG51bUNsaXBTcGhlcmVzLFxyXG4gICAgICBcIiNkZWZpbmUgbnVtX2NsaXBwb2x5Z29uc1wiICsgbnVtQ2xpcFBvbHlnb25zLFxyXG4gICAgXTtcclxuXHJcbiAgICB2YXIgZGVmaW5lc1N0cmluZyA9IGRlZmluZXMuam9pbihcIlxcblwiKTtcclxuICAgIHZhciB2cyA9IGRlZmluZXNTdHJpbmcgKyBcIlxcblwiICsgbWF0ZXJpYWwudmVydGV4U2hhZGVyO1xyXG4gICAgdmFyIGZzID0gZGVmaW5lc1N0cmluZyArIFwiXFxuXCIgKyBtYXRlcmlhbC5mcmFnbWVudFNoYWRlcjtcclxuXHJcbiAgICBzaGFkZXIudXBkYXRlKHZzLCBmcyk7XHJcblxyXG4gICAgbWF0ZXJpYWwubmVlZHNVcGRhdGUgPSBmYWxzZTtcclxuXHJcbiAgICBmb3IgKHZhciB1bmlmb3JtTmFtZSBvZiBPYmplY3Qua2V5cyhtYXRlcmlhbC51bmlmb3JtcykpIHtcclxuICAgICAgdmFyIHVuaWZvcm0gPSBtYXRlcmlhbC51bmlmb3Jtc1t1bmlmb3JtTmFtZV07XHJcblxyXG4gICAgICBpZiAodW5pZm9ybS50eXBlID09IFwidFwiKSB7XHJcbiAgICAgICAgdmFyIHRleHR1cmUgPSB1bmlmb3JtLnZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoIXRleHR1cmUpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnRleHR1cmVzLmhhcyh0ZXh0dXJlKSkge1xyXG4gICAgICAgICAgdmFyIHdlYmdsVGV4dHVyZSA9IG5ldyBXZWJHTFRleHR1cmUoZ2wsIHRleHR1cmUpO1xyXG4gICAgICAgICAgdGhpcy50ZXh0dXJlcy5zZXQodGV4dHVyZSwgd2ViZ2xUZXh0dXJlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB3ZWJHTFRleHR1cmUgPSB0aGlzLnRleHR1cmVzLmdldCh0ZXh0dXJlKTtcclxuICAgICAgICB3ZWJHTFRleHR1cmUudXBkYXRlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnbC51c2VQcm9ncmFtKHNoYWRlci5wcm9ncmFtKTtcclxuXHJcbiAgICBpZiAobWF0ZXJpYWwub3BhY2l0eSA8IDEuMCkge1xyXG4gICAgICBnbC5lbmFibGUoZ2wuQkxFTkQpO1xyXG4gICAgICBnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkUpO1xyXG4gICAgICBnbC5kZXB0aE1hc2soZmFsc2UpO1xyXG4gICAgICBnbC5kaXNhYmxlKGdsLkRFUFRIX1RFU1QpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGdsLmRpc2FibGUoZ2wuQkxFTkQpO1xyXG4gICAgICBnbC5kZXB0aE1hc2sodHJ1ZSk7XHJcbiAgICAgIGdsLmVuYWJsZShnbC5ERVBUSF9URVNUKTtcclxuICAgIH1cclxuXHJcbiAgICAvL1VwZGF0ZSBzaGFkZXIgdW5pZm9ybXNcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtTWF0cml4NChcInByb2plY3Rpb25NYXRyaXhcIiwgcHJvaik7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybU1hdHJpeDQoXCJ2aWV3TWF0cml4XCIsIHZpZXcpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm1NYXRyaXg0KFwidVZpZXdJbnZcIiwgdmlld0ludik7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybU1hdHJpeDQoXCJ1UHJvakludlwiLCBwcm9qSW52KTtcclxuXHJcbiAgICB2YXIgc2NyZWVuV2lkdGggPSBtYXRlcmlhbC5zY3JlZW5XaWR0aDtcclxuICAgIHZhciBzY3JlZW5IZWlnaHQgPSBtYXRlcmlhbC5zY3JlZW5IZWlnaHQ7XHJcblxyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcInVTY3JlZW5XaWR0aFwiLCBzY3JlZW5XaWR0aCk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwidVNjcmVlbkhlaWdodFwiLCBzY3JlZW5IZWlnaHQpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcImZvdlwiLCBNYXRoLlBJICogY2FtZXJhLmZvdiAvIDE4MCk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwibmVhclwiLCBjYW1lcmEubmVhcik7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwiZmFyXCIsIGNhbWVyYS5mYXIpO1xyXG5cclxuICAgIC8vU2V0IGxvZ1xyXG4gICAgaWYgKHJlbmRlcmVyLmNhcGFiaWxpdGllcy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyKSB7XHJcbiAgICAgIHNoYWRlci5zZXRVbmlmb3JtKFwibG9nRGVwdGhCdWZGQ1wiLCAyLjAgLyAoTWF0aC5sb2coY2FtZXJhLmZhciArIDEuMCkgLyBNYXRoLkxOMikpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vQ2FtZXJhIGNvbmZpZ3VyYXRpb25cclxuICAgIGlmIChjYW1lcmEgaW5zdGFuY2VvZiBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEpIHtcclxuICAgICAgc2hhZGVyLnNldFVuaWZvcm0oXCJ1VXNlT3J0aG9ncmFwaGljQ2FtZXJhXCIsIHRydWUpO1xyXG4gICAgICBzaGFkZXIuc2V0VW5pZm9ybShcInVPcnRob1dpZHRoXCIsIGNhbWVyYS5yaWdodCAtIGNhbWVyYS5sZWZ0KTtcclxuICAgICAgc2hhZGVyLnNldFVuaWZvcm0oXCJ1T3J0aG9IZWlnaHRcIiwgY2FtZXJhLnRvcCAtIGNhbWVyYS5ib3R0b20pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHNoYWRlci5zZXRVbmlmb3JtKFwidVVzZU9ydGhvZ3JhcGhpY0NhbWVyYVwiLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9DbGlwIHRhc2tcclxuICAgIGlmIChtYXRlcmlhbC5jbGlwQm94ZXMubGVuZ3RoICsgbWF0ZXJpYWwuY2xpcFBvbHlnb25zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBzaGFkZXIuc2V0VW5pZm9ybTFpKFwiY2xpcFRhc2tcIiwgQ2xpcFRhc2suTk9ORSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc2hhZGVyLnNldFVuaWZvcm0xaShcImNsaXBUYXNrXCIsIG1hdGVyaWFsLmNsaXBUYXNrKTtcclxuICAgIH1cclxuXHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFpKFwiY2xpcE1ldGhvZFwiLCBtYXRlcmlhbC5jbGlwTWV0aG9kKTtcclxuXHJcbiAgICAvL0NsaXBib3hlc1xyXG4gICAgaWYgKG1hdGVyaWFsLmNsaXBCb3hlcyAmJiBtYXRlcmlhbC5jbGlwQm94ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICB2YXIgbENsaXBCb3hlcyA9IHNoYWRlci51bmlmb3JtTG9jYXRpb25zW1wiY2xpcEJveGVzWzBdXCJdO1xyXG4gICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KGxDbGlwQm94ZXMsIGZhbHNlLCBtYXRlcmlhbC51bmlmb3Jtcy5jbGlwQm94ZXMudmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vQ2xpc3BoZXJlc1xyXG4gICAgLyppZihtYXRlcmlhbC5jbGlwU3BoZXJlcyAmJiBtYXRlcmlhbC5jbGlwU3BoZXJlcy5sZW5ndGggPiAwKVxyXG4gICAge1xyXG4gICAgICB2YXIgY2xpcFNwaGVyZXMgPSBtYXRlcmlhbC5jbGlwU3BoZXJlcztcclxuICAgICAgdmFyIG1hdHJpY2VzID0gW107XHJcbiAgICAgIGZvcih2YXIgY2xpcFNwaGVyZSBvZiBjbGlwU3BoZXJlcylcclxuICAgICAge1xyXG4gICAgICAgIHZhciBjbGlwVG9Xb3JsZCA9IGNsaXBTcGhlcmUubWF0cml4V29ybGQ7XHJcbiAgICAgICAgdmFyIHZpZXdUb1dvcmxkID0gY2FtZXJhLm1hdHJpeFdvcmxkXHJcbiAgICAgICAgdmFyIHdvcmxkVG9DbGlwID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5nZXRJbnZlcnNlKGNsaXBUb1dvcmxkKTtcclxuXHJcbiAgICAgICAgdmFyIHZpZXdUb0NsaXAgPSBuZXcgVEhSRUUuTWF0cml4NCgpLm11bHRpcGx5TWF0cmljZXMod29ybGRUb0NsaXAsIHZpZXdUb1dvcmxkKTtcclxuXHJcbiAgICAgICAgbWF0cmljZXMucHVzaCh2aWV3VG9DbGlwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGZsYXR0ZW5lZE1hdHJpY2VzID0gW10uY29uY2F0KC4uLm1hdHJpY2VzLm1hcChtYXRyaXggPT4gbWF0cml4LmVsZW1lbnRzKSk7XHJcblxyXG4gICAgICB2YXIgbENsaXBTcGhlcmVzID0gc2hhZGVyLnVuaWZvcm1Mb2NhdGlvbnNbXCJ1Q2xpcFNwaGVyZXNbMF1cIl07XHJcbiAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYobENsaXBTcGhlcmVzLCBmYWxzZSwgZmxhdHRlbmVkTWF0cmljZXMpO1xyXG4gICAgfSovXHJcblxyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcInNpemVcIiwgbWF0ZXJpYWwuc2l6ZSk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwibWF4U2l6ZVwiLCBtYXRlcmlhbC51bmlmb3Jtcy5tYXhTaXplLnZhbHVlKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWYoXCJtaW5TaXplXCIsIG1hdGVyaWFsLnVuaWZvcm1zLm1pblNpemUudmFsdWUpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcInVPY3RyZWVTcGFjaW5nXCIsIG1hdGVyaWFsLnNwYWNpbmcpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0oXCJ1T2N0cmVlU2l6ZVwiLCBtYXRlcmlhbC51bmlmb3Jtcy5vY3RyZWVTaXplLnZhbHVlKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtM2YoXCJ1Q29sb3JcIiwgbWF0ZXJpYWwuY29sb3IudG9BcnJheSgpKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWYoXCJ1T3BhY2l0eVwiLCBtYXRlcmlhbC5vcGFjaXR5KTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMmYoXCJlbGV2YXRpb25SYW5nZVwiLCBtYXRlcmlhbC5lbGV2YXRpb25SYW5nZSk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTJmKFwiaW50ZW5zaXR5UmFuZ2VcIiwgbWF0ZXJpYWwuaW50ZW5zaXR5UmFuZ2UpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcImludGVuc2l0eUdhbW1hXCIsIG1hdGVyaWFsLmludGVuc2l0eUdhbW1hKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWYoXCJpbnRlbnNpdHlDb250cmFzdFwiLCBtYXRlcmlhbC5pbnRlbnNpdHlDb250cmFzdCk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwiaW50ZW5zaXR5QnJpZ2h0bmVzc1wiLCBtYXRlcmlhbC5pbnRlbnNpdHlCcmlnaHRuZXNzKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWYoXCJyZ2JHYW1tYVwiLCBtYXRlcmlhbC5yZ2JHYW1tYSk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwicmdiQ29udHJhc3RcIiwgbWF0ZXJpYWwucmdiQ29udHJhc3QpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcInJnYkJyaWdodG5lc3NcIiwgbWF0ZXJpYWwucmdiQnJpZ2h0bmVzcyk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwidVRyYW5zaXRpb25cIiwgbWF0ZXJpYWwudHJhbnNpdGlvbik7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwid1JHQlwiLCBtYXRlcmlhbC53ZWlnaHRSR0IpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcIndJbnRlbnNpdHlcIiwgbWF0ZXJpYWwud2VpZ2h0SW50ZW5zaXR5KTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWYoXCJ3RWxldmF0aW9uXCIsIG1hdGVyaWFsLndlaWdodEVsZXZhdGlvbik7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwid0NsYXNzaWZpY2F0aW9uXCIsIG1hdGVyaWFsLndlaWdodENsYXNzaWZpY2F0aW9uKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWYoXCJ3UmV0dXJuTnVtYmVyXCIsIG1hdGVyaWFsLndlaWdodFJldHVybk51bWJlcik7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwid1NvdXJjZUlEXCIsIG1hdGVyaWFsLndlaWdodFNvdXJjZUlEKTtcclxuXHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmdihcImhpZGRlbkNsYXNzaWZpY2F0aW9uc1wiLCBtYXRlcmlhbC5oaWRkZW5DbGFzc2lmaWNhdGlvbnMpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcInNlbGVjdGVkUG9pbnRTb3VyY2VJRFwiLCBtYXRlcmlhbC5zZWxlY3RlZFBvaW50U291cmNlSUQpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0zZihcInNlbGVjdGVkUG9pbnRTb3VyY2VJRENvbG9yXCIsIG1hdGVyaWFsLnNlbGVjdGVkUG9pbnRTb3VyY2VJRENvbG9yKTtcclxuXHJcbiAgICB2YXIgdm5XZWJHTFRleHR1cmUgPSB0aGlzLnRleHR1cmVzLmdldChtYXRlcmlhbC52aXNpYmxlTm9kZXNUZXh0dXJlKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWkoXCJ2aXNpYmxlTm9kZXNUZXh0dXJlXCIsIGN1cnJlbnRUZXh0dXJlQmluZGluZ1BvaW50KTtcclxuICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyBjdXJyZW50VGV4dHVyZUJpbmRpbmdQb2ludCk7XHJcbiAgICBnbC5iaW5kVGV4dHVyZSh2bldlYkdMVGV4dHVyZS50YXJnZXQsIHZuV2ViR0xUZXh0dXJlLmlkKTtcclxuICAgIGN1cnJlbnRUZXh0dXJlQmluZGluZ1BvaW50Kys7XHJcblxyXG4gICAgdmFyIGdyYWRpZW50VGV4dHVyZSA9IHRoaXMudGV4dHVyZXMuZ2V0KG1hdGVyaWFsLmdyYWRpZW50VGV4dHVyZSk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFpKFwiZ3JhZGllbnRcIiwgY3VycmVudFRleHR1cmVCaW5kaW5nUG9pbnQpO1xyXG4gICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCArIGN1cnJlbnRUZXh0dXJlQmluZGluZ1BvaW50KTtcclxuICAgIGdsLmJpbmRUZXh0dXJlKGdyYWRpZW50VGV4dHVyZS50YXJnZXQsIGdyYWRpZW50VGV4dHVyZS5pZCk7XHJcbiAgICBjdXJyZW50VGV4dHVyZUJpbmRpbmdQb2ludCsrO1xyXG5cclxuICAgIHZhciBjbGFzc2lmaWNhdGlvblRleHR1cmUgPSB0aGlzLnRleHR1cmVzLmdldChtYXRlcmlhbC5jbGFzc2lmaWNhdGlvblRleHR1cmUpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xaShcImNsYXNzaWZpY2F0aW9uTFVUXCIsIGN1cnJlbnRUZXh0dXJlQmluZGluZ1BvaW50KTtcclxuICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyBjdXJyZW50VGV4dHVyZUJpbmRpbmdQb2ludCk7XHJcbiAgICBnbC5iaW5kVGV4dHVyZShjbGFzc2lmaWNhdGlvblRleHR1cmUudGFyZ2V0LCBjbGFzc2lmaWNhdGlvblRleHR1cmUuaWQpO1xyXG4gICAgY3VycmVudFRleHR1cmVCaW5kaW5nUG9pbnQrKztcclxuXHJcbiAgICB2YXIgaGlkZGVuUG9pbnRTb3VyY2VJRHNUZXh0dXJlID0gdGhpcy50ZXh0dXJlcy5nZXQobWF0ZXJpYWwuaGlkZGVuUG9pbnRTb3VyY2VJRHNUZXh0dXJlKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWkoXCJoaWRkZW5Qb2ludFNvdXJjZUlEc1wiLCBjdXJyZW50VGV4dHVyZUJpbmRpbmdQb2ludCk7XHJcbiAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgY3VycmVudFRleHR1cmVCaW5kaW5nUG9pbnQpO1xyXG4gICAgZ2wuYmluZFRleHR1cmUoaGlkZGVuUG9pbnRTb3VyY2VJRHNUZXh0dXJlLnRhcmdldCwgaGlkZGVuUG9pbnRTb3VyY2VJRHNUZXh0dXJlLmlkKTtcclxuICAgIGN1cnJlbnRUZXh0dXJlQmluZGluZ1BvaW50Kys7XHJcblxyXG4gICAgaWYgKG1hdGVyaWFsLnNuYXBFbmFibGVkID09PSB0cnVlKSB7XHJcbiAgICAgIHZhciBsU25hcHNob3QgPSBzaGFkZXIudW5pZm9ybUxvY2F0aW9uc1tcInVTbmFwc2hvdFswXVwiXTtcclxuICAgICAgdmFyIGxTbmFwc2hvdERlcHRoID0gc2hhZGVyLnVuaWZvcm1Mb2NhdGlvbnNbXCJ1U25hcHNob3REZXB0aFswXVwiXTtcclxuXHJcbiAgICAgIHZhciBiaW5kaW5nU3RhcnQgPSBjdXJyZW50VGV4dHVyZUJpbmRpbmdQb2ludDtcclxuICAgICAgdmFyIGxTbmFwc2hvdEJpbmRpbmdQb2ludHMgPSBuZXcgQXJyYXkoNSkuZmlsbChiaW5kaW5nU3RhcnQpLm1hcCgoYSwgaSkgPT4gKGEgKyBpKSk7XHJcbiAgICAgIHZhciBsU25hcHNob3REZXB0aEJpbmRpbmdQb2ludHMgPSBuZXcgQXJyYXkoNSkuZmlsbCgxICsgTWF0aC5tYXgoLi4ubFNuYXBzaG90QmluZGluZ1BvaW50cykpLm1hcCgoYSwgaSkgPT4gKGEgKyBpKSk7XHJcbiAgICAgIGN1cnJlbnRUZXh0dXJlQmluZGluZ1BvaW50ID0gMSArIE1hdGgubWF4KC4uLmxTbmFwc2hvdERlcHRoQmluZGluZ1BvaW50cyk7XHJcblxyXG4gICAgICBnbC51bmlmb3JtMWl2KGxTbmFwc2hvdCwgbFNuYXBzaG90QmluZGluZ1BvaW50cyk7XHJcbiAgICAgIGdsLnVuaWZvcm0xaXYobFNuYXBzaG90RGVwdGgsIGxTbmFwc2hvdERlcHRoQmluZGluZ1BvaW50cyk7XHJcblxyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7IGkrKykge1xyXG4gICAgICAgIHZhciB0ZXh0dXJlID0gbWF0ZXJpYWwudW5pZm9ybXNbXCJ1U25hcHNob3RcIl0udmFsdWVbaV07XHJcbiAgICAgICAgdmFyIHRleHR1cmVEZXB0aCA9IG1hdGVyaWFsLnVuaWZvcm1zW1widVNuYXBzaG90RGVwdGhcIl0udmFsdWVbaV07XHJcblxyXG4gICAgICAgIGlmICghdGV4dHVyZSkge1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgc25hcFRleHR1cmUgPSByZW5kZXJlci5wcm9wZXJ0aWVzLmdldCh0ZXh0dXJlKS5fX3dlYmdsVGV4dHVyZTtcclxuICAgICAgICB2YXIgc25hcFRleHR1cmVEZXB0aCA9IHJlbmRlcmVyLnByb3BlcnRpZXMuZ2V0KHRleHR1cmVEZXB0aCkuX193ZWJnbFRleHR1cmU7XHJcblxyXG4gICAgICAgIHZhciBiaW5kaW5nUG9pbnQgPSBsU25hcHNob3RCaW5kaW5nUG9pbnRzW2ldO1xyXG4gICAgICAgIHZhciBkZXB0aEJpbmRpbmdQb2ludCA9IGxTbmFwc2hvdERlcHRoQmluZGluZ1BvaW50c1tpXTtcclxuXHJcbiAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZShnbFtgVEVYVFVSRSR7YmluZGluZ1BvaW50fWBdKTtcclxuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBzbmFwVGV4dHVyZSk7XHJcblxyXG4gICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2xbYFRFWFRVUkUke2RlcHRoQmluZGluZ1BvaW50fWBdKTtcclxuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBzbmFwVGV4dHVyZURlcHRoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGZsYXR0ZW5lZE1hdHJpY2VzID0gW10uY29uY2F0KC4uLm1hdGVyaWFsLnVuaWZvcm1zLnVTbmFwVmlldy52YWx1ZS5tYXAoYyA9PiBjLmVsZW1lbnRzKSk7XHJcbiAgICAgIHZhciBsU25hcFZpZXcgPSBzaGFkZXIudW5pZm9ybUxvY2F0aW9uc1tcInVTbmFwVmlld1swXVwiXTtcclxuICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihsU25hcFZpZXcsIGZhbHNlLCBmbGF0dGVuZWRNYXRyaWNlcyk7XHJcblxyXG4gICAgICBmbGF0dGVuZWRNYXRyaWNlcyA9IFtdLmNvbmNhdCguLi5tYXRlcmlhbC51bmlmb3Jtcy51U25hcFByb2oudmFsdWUubWFwKGMgPT4gYy5lbGVtZW50cykpO1xyXG4gICAgICB2YXIgbFNuYXBQcm9qID0gc2hhZGVyLnVuaWZvcm1Mb2NhdGlvbnNbXCJ1U25hcFByb2pbMF1cIl07XHJcbiAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYobFNuYXBQcm9qLCBmYWxzZSwgZmxhdHRlbmVkTWF0cmljZXMpO1xyXG5cclxuICAgICAgZmxhdHRlbmVkTWF0cmljZXMgPSBbXS5jb25jYXQoLi4ubWF0ZXJpYWwudW5pZm9ybXMudVNuYXBQcm9qSW52LnZhbHVlLm1hcChjID0+IGMuZWxlbWVudHMpKTtcclxuICAgICAgdmFyIGxTbmFwUHJvakludiA9IHNoYWRlci51bmlmb3JtTG9jYXRpb25zW1widVNuYXBQcm9qSW52WzBdXCJdO1xyXG4gICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KGxTbmFwUHJvakludiwgZmFsc2UsIGZsYXR0ZW5lZE1hdHJpY2VzKTtcclxuXHJcbiAgICAgIGZsYXR0ZW5lZE1hdHJpY2VzID0gW10uY29uY2F0KC4uLm1hdGVyaWFsLnVuaWZvcm1zLnVTbmFwVmlld0ludi52YWx1ZS5tYXAoYyA9PiBjLmVsZW1lbnRzKSk7XHJcbiAgICAgIHZhciBsU25hcFZpZXdJbnYgPSBzaGFkZXIudW5pZm9ybUxvY2F0aW9uc1tcInVTbmFwVmlld0ludlswXVwiXTtcclxuICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihsU25hcFZpZXdJbnYsIGZhbHNlLCBmbGF0dGVuZWRNYXRyaWNlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yZW5kZXJOb2RlcyhyZW5kZXJlciwgb2N0cmVlLCBub2RlcywgdmlzaWJpbGl0eVRleHR1cmVEYXRhLCBjYW1lcmEsIHNoYWRlcik7XHJcblxyXG4gICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMik7XHJcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcclxuICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCB7IEdyb3VwIH07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=