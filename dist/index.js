(()=>{"use strict";var e={477:e=>{e.exports=function(e,t,i,n){var r=self||window;try{try{var o;try{o=new r.Blob([e])}catch(t){(o=new(r.BlobBuilder||r.WebKitBlobBuilder||r.MozBlobBuilder||r.MSBlobBuilder)).append(e),o=o.getBlob()}var s=r.URL||r.webkitURL,a=s.createObjectURL(o),l=new r[t](a,i);return s.revokeObjectURL(a),l}catch(n){return new r[t]("data:application/javascript,".concat(encodeURIComponent(e)),i)}}catch(e){if(!n)throw Error("Inline worker is not supported");return new r[t](n,i)}}}},t={};function i(n){var r=t[n];if(void 0!==r)return r.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,i),o.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{i.r(n),i.d(n,{AttributeLocations:()=>se,BasicGroup:()=>Ae,BinaryHeap:()=>oe,BinaryLoader:()=>N,Classification:()=>ae,ClipMethod:()=>ue,ClipTask:()=>le,DEM:()=>y,DEMNode:()=>v,EptBinaryLoader:()=>V,EptLaszipLoader:()=>G,EptLoader:()=>X,Global:()=>u,Gradients:()=>K,GreyhoundBinaryLoader:()=>A,GreyhoundLoader:()=>B,GreyhoundUtils:()=>E,Group:()=>Ee,HelperUtils:()=>q,LASLAZLoader:()=>M,LASLoader:()=>I,LRU:()=>t,POCLoader:()=>F,PointAttribute:()=>m,PointAttributeNames:()=>d,PointAttributeTypes:()=>p,PointAttributes:()=>g,PointCloudArena4D:()=>ie,PointCloudArena4DGeometry:()=>re,PointCloudEptGeometry:()=>W,PointCloudEptGeometryNode:()=>Y,PointCloudGreyhoundGeometry:()=>S,PointCloudMaterial:()=>Q,PointCloudOctree:()=>ee,PointCloudOctreeGeometry:()=>z,PointCloudOctreeGeometryNode:()=>U,PointCloudTree:()=>b,PointColorType:()=>pe,PointShape:()=>de,PointSizeType:()=>he,Points:()=>be,Shader:()=>Te,Shaders:()=>$,TreeType:()=>ce,VERSION:()=>xe,VersionUtils:()=>T,WebGLBuffer:()=>_e,WebGLTexture:()=>we,WorkerManager:()=>l,XHRFactory:()=>_,loadPointCloud:()=>me,updatePointClouds:()=>ve,updateVisibility:()=>ge,updateVisibilityStructures:()=>ye});class e{constructor(e){this.previous=null,this.next=null,this.node=e}}class t{constructor(){this.first=null,this.last=null,this.items={},this.elements=0,this.numPoints=0}size(){return this.elements}contains(e){return null==this.items[e.id]}touch(t){var i;t.loaded&&(null==this.items[t.id]?((i=new e(t)).previous=this.last,this.last=i,null!==i.previous&&(i.previous.next=i),this.items[t.id]=i,this.elements++,null===this.first&&(this.first=i),this.numPoints+=t.numPoints):null===(i=this.items[t.id]).previous?null!==i.next&&(this.first=i.next,this.first.previous=null,i.previous=this.last,i.next=null,this.last=i,i.previous.next=i):null!==i.next&&(i.previous.next=i.next,i.next.previous=i.previous,i.previous=this.last,i.next=null,this.last=i,i.previous.next=i))}remove(e){var t=this.items[e.id];t&&(1===this.elements?(this.first=null,this.last=null):(t.previous||(this.first=t.next,this.first.previous=null),t.next||(this.last=t.previous,this.last.next=null),t.previous&&t.next&&(t.previous.next=t.next,t.next.previous=t.previous)),delete this.items[e.id],this.elements--,this.numPoints-=e.numPoints)}getLRUItem(){return null===this.first?null:this.first.node}toString(){for(var e="{ ",t=this.first;null!==t;)e+=t.node.id,null!==t.next&&(e+=", "),t=t.next;return(e+="}")+"("+this.size()+")"}freeMemory(){if(!(this.elements<=1))for(;this.numPoints>u.pointLoadLimit;){var e=this.first.node;this.disposeDescendants(e)}}disposeDescendants(e){var t=[];for(t.push(e);t.length>0;){var i=t.pop();for(var n in i.dispose(),this.remove(i),i.children)i.children.hasOwnProperty(n)&&i.children[n].loaded&&t.push(i.children[n])}}}var r=i(477),o=i.n(r);function s(){return o()('(()=>{"use strict";function e(e){this.buffer=e,this.u8=new Uint8Array(e);var t=new ArrayBuffer(4),r=new Float32Array(t),i=new Uint8Array(t);this.getUint32=function(e){return this.u8[e+3]<<24|this.u8[e+2]<<16|this.u8[e+1]<<8|this.u8[e]},this.getUint16=function(e){return this.u8[e+1]<<8|this.u8[e]},this.getFloat32=function(e){return i[0]=this.u8[e+0],i[1]=this.u8[e+1],i[2]=this.u8[e+2],i[3]=this.u8[e+3],r[0]},this.getUint8=function(e){return this.u8[e]}}function t(e){this.version=e;var t=-1===e.indexOf(".")?e.length:e.indexOf(".");this.versionMajor=parseInt(e.substr(0,t)),this.versionMinor=parseInt(e.substr(t+1)),0===this.versionMinor.length&&(this.versionMinor=0)}onmessage=function(r){if(r.data&&r.data.buffer)try{var i=r.data.buffer,n=r.data.pointAttributes,s=i.byteLength/n.byteSize,A=new e(i),T=new t(r.data.version),u=r.data.offset,o=r.data.scale,f=(r.data.spacing,r.data.hasChildren,r.data.name,[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY]),h=[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY],_=[0,0,0],I={},b=0;for(var N of n.attributes){if(N.name===a.POSITION_CARTESIAN.name){for(var E=new ArrayBuffer(4*s*3),y=new Float32Array(E),S=0;S<s;S++)T.newerThan("1.3")?(L=A.getUint32(b+S*n.byteSize+0,!0)*o,C=A.getUint32(b+S*n.byteSize+4,!0)*o,d=A.getUint32(b+S*n.byteSize+8,!0)*o):(L=A.getFloat32(S*n.byteSize+0,!0)+u[0],C=A.getFloat32(S*n.byteSize+4,!0)+u[1],d=A.getFloat32(S*n.byteSize+8,!0)+u[2]),y[3*S+0]=L,y[3*S+1]=C,y[3*S+2]=d,_[0]+=L/s,_[1]+=C/s,_[2]+=d/s,f[0]=Math.min(f[0],L),f[1]=Math.min(f[1],C),f[2]=Math.min(f[2],d),h[0]=Math.max(h[0],L),h[1]=Math.max(h[1],C),h[2]=Math.max(h[2],d);I[N.name]={buffer:E,attribute:N}}else if(N.name===a.COLOR_PACKED.name){E=new ArrayBuffer(4*s);var m=new Uint8Array(E);for(S=0;S<s;S++)m[4*S+0]=A.getUint8(b+S*n.byteSize+0),m[4*S+1]=A.getUint8(b+S*n.byteSize+1),m[4*S+2]=A.getUint8(b+S*n.byteSize+2);I[N.name]={buffer:E,attribute:N}}else if(N.name===a.INTENSITY.name){E=new ArrayBuffer(4*s);var P=new Float32Array(E);for(S=0;S<s;S++){var M=A.getUint16(b+S*n.byteSize,!0);P[S]=M}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.CLASSIFICATION.name){E=new ArrayBuffer(s);var w=new Uint8Array(E);for(S=0;S<s;S++){var l=A.getUint8(b+S*n.byteSize);w[S]=l}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.NORMAL_SPHEREMAPPED.name){E=new ArrayBuffer(4*s*3);var z=new Float32Array(E);for(S=0;S<s;S++){var O=A.getUint8(b+S*n.byteSize+0),U=A.getUint8(b+S*n.byteSize+1),D=O/255*2-1,g=U/255*2-1,v=1,Y=D*-D+g*-g+1*v;v=Y,D*=Math.sqrt(Y),g*=Math.sqrt(Y),D*=2,g*=2,v=2*v-1,z[3*S+0]=D,z[3*S+1]=g,z[3*S+2]=v}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.NORMAL_OCT16.name){for(E=new ArrayBuffer(4*s*3),z=new Float32Array(E),S=0;S<s;S++){O=A.getUint8(b+S*n.byteSize+0),U=A.getUint8(b+S*n.byteSize+1);var F=O/255*2-1,R=U/255*2-1,d=1-Math.abs(F)-Math.abs(R),L=0,C=0;d>=0?(L=F,C=R):(L=-(R/Math.sign(R)-1)/Math.sign(F),C=-(F/Math.sign(F)-1)/Math.sign(R));var p=Math.sqrt(L*L+C*C+d*d);L/=p,C/=p,d/=p,z[3*S+0]=L,z[3*S+1]=C,z[3*S+2]=d}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.NORMAL.name){for(E=new ArrayBuffer(4*s*3),z=new Float32Array(E),S=0;S<s;S++)L=A.getFloat32(b+S*n.byteSize+0,!0),C=A.getFloat32(b+S*n.byteSize+4,!0),d=A.getFloat32(b+S*n.byteSize+8,!0),z[3*S+0]=L,z[3*S+1]=C,z[3*S+2]=d;I[N.name]={buffer:E,attribute:N}}b+=N.byteSize}E=new ArrayBuffer(4*s);for(var B=new Uint32Array(E),c=0;c<s;c++)B[c]=c;I[a.INDICES.name]={buffer:E,attribute:a.INDICES};var x={buffer:i,mean:_,attributeBuffers:I,tightBoundingBox:{min:f,max:h}},G=[];for(var V in x.attributeBuffers)G.push(x.attributeBuffers[V].buffer);G.push(i),postMessage(x,G)}catch(e){postMessage({error:"Exeption thrown during execution."})}},t.prototype.newerThan=function(e){var r=new t(e);return this.versionMajor>r.versionMajor||this.versionMajor===r.versionMajor&&this.versionMinor>r.versionMinor};var r={DATA_TYPE_DOUBLE:{ordinal:0,size:8},DATA_TYPE_FLOAT:{ordinal:1,size:4},DATA_TYPE_INT8:{ordinal:2,size:1},DATA_TYPE_UINT8:{ordinal:3,size:1},DATA_TYPE_INT16:{ordinal:4,size:2},DATA_TYPE_UINT16:{ordinal:5,size:2},DATA_TYPE_INT32:{ordinal:6,size:4},DATA_TYPE_UINT32:{ordinal:7,size:4},DATA_TYPE_INT64:{ordinal:8,size:8},DATA_TYPE_UINT64:{ordinal:9,size:8}},i=0;for(var n in r)r[i]=r[n],i++;function a(e,t,r){this.name=e,this.type=t,this.numElements=r,this.byteSize=this.numElements*this.type.size}function s(e){if(this.attributes=[],this.byteSize=0,this.size=0,null!=e)for(var t=0;t<e.length;t++){var r=a[e[t]];this.attributes.push(r),this.byteSize+=r.byteSize,this.size++}}a.POSITION_CARTESIAN=new a(0,r.DATA_TYPE_FLOAT,3),a.RGBA_PACKED=new a(1,r.DATA_TYPE_INT8,4),a.COLOR_PACKED=a.RGBA_PACKED,a.RGB_PACKED=new a(1,r.DATA_TYPE_INT8,3),a.NORMAL_FLOATS=new a(4,r.DATA_TYPE_FLOAT,3),a.FILLER_1B=new a(5,r.DATA_TYPE_UINT8,1),a.INTENSITY=new a(6,r.DATA_TYPE_UINT16,1),a.CLASSIFICATION=new a(7,r.DATA_TYPE_UINT8,1),a.NORMAL_SPHEREMAPPED=new a(8,r.DATA_TYPE_UINT8,2),a.NORMAL_OCT16=new a(9,r.DATA_TYPE_UINT8,2),a.NORMAL=new a(10,r.DATA_TYPE_FLOAT,3),a.RETURN_NUMBER=new a(11,r.DATA_TYPE_UINT8,1),a.NUMBER_OF_RETURNS=new a(12,r.DATA_TYPE_UINT8,1),a.SOURCE_ID=new a(13,r.DATA_TYPE_UINT8,1),a.INDICES=new a(14,r.DATA_TYPE_UINT32,1),a.SPACING=new a(15,r.DATA_TYPE_FLOAT,1),s.prototype.add=function(e){this.attributes.push(e),this.byteSize+=e.byteSize,this.size++},s.prototype.hasColors=function(){for(var e in this.attributes)if(1===this.attributes[e].name)return!0;return!1},s.prototype.hasNormals=function(){for(var e in this.attributes){var t=this.attributes[e];if(t===a.NORMAL_SPHEREMAPPED||t===a.NORMAL_FLOATS||t===a.NORMAL||t===a.NORMAL_OCT16)return!0}return!1}})();\n',"Worker",void 0,void 0)}function a(){return o()('(()=>{"use strict";onmessage=function(a){if(a.data&&a.data.buffer){for(var r=a.data.buffer,n=a.data.numPoints,t=a.data.pointSize,e=a.data.pointFormatID,i=a.data.scale,m=a.data.offset,f=(new Uint8Array(r),new DataView(r)),I=new ArrayBuffer(40*n),u=(new DataView(I),{min:[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY],max:[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY]}),o=[0,0,0],s=new ArrayBuffer(3*n*4),N=new ArrayBuffer(4*n),w=new ArrayBuffer(4*n),A=new ArrayBuffer(n),y=new ArrayBuffer(n),d=new ArrayBuffer(n),g=new ArrayBuffer(2*n),U=new Float32Array(s),c=new Uint8Array(N),b=new Float32Array(w),T=new Uint8Array(A),x=new Uint8Array(y),B=new Uint8Array(d),v=new Uint16Array(g),E=0;E<n;E++){var F=f.getInt32(E*t+0,!0),V=f.getInt32(E*t+4,!0),h=f.getInt32(E*t+8,!0),l=F*i[0]+m[0]-a.data.mins[0],p=V*i[1]+m[1]-a.data.mins[1],M=h*i[2]+m[2]-a.data.mins[2];U[3*E+0]=l,U[3*E+1]=p,U[3*E+2]=M,o[0]+=l/n,o[1]+=p/n,o[2]+=M/n,u.min[0]=Math.min(u.min[0],l),u.min[1]=Math.min(u.min[1],p),u.min[2]=Math.min(u.min[2],M),u.max[0]=Math.max(u.max[0],l),u.max[1]=Math.max(u.max[1],p),u.max[2]=Math.max(u.max[2],M);var S=f.getUint16(E*t+12,!0);b[E]=S;var Y=f.getUint8(E*t+14,!0),_=7&Y,D=(56&Y)>>3;x[E]=_,B[E]=D;var O=f.getUint8(E*t+15,!0);T[E]=O;var P=f.getUint16(E*t+18,!0);if(v[E]=P,2===e){var G=f.getUint16(E*t+20,!0)/256,R=f.getUint16(E*t+22,!0)/256,z=f.getUint16(E*t+24,!0)/256;c[4*E+0]=G,c[4*E+1]=R,c[4*E+2]=z,c[4*E+3]=255}}var j=new ArrayBuffer(4*n),k=new Uint32Array(j);for(E=0;E<n;E++)k[E]=E;var q={mean:o,position:s,color:N,intensity:w,classification:A,returnNumber:y,numberOfReturns:d,pointSourceID:g,tightBoundingBox:u,indices:j};postMessage(q,[q.position,q.color,q.intensity,q.classification,q.returnNumber,q.numberOfReturns,q.pointSourceID,q.indices])}}})();\n',"Worker",void 0,void 0)}class l{constructor(){this.workers=[];for(var e=0;e<7;e++)this.workers.push([])}getWorker(e){if(this.workers[e].length>0)return this.workers[e].pop();switch(e){case 0:return new s;case 1:throw new Error("LASLAZWorker not implemented");case 2:return new a;case 3:throw new Error("GreyhoundBinaryDecoderWorker not implemented");case 4:throw new Error("DEMWorker not implemented");case 5:throw new Error("EptLaszipDecoderWorker not implemented");case 6:throw new Error("EptBinaryDecoderWorker not implemented");default:throw"Unknown worker requested"}}returnWorker(e,t){this.workers[e].push(t)}runTask(e,t,i,n){var r=this,o=this.getWorker(e);o.onmessage=function(i){t(i),r.returnWorker(e,o)},void 0!==n?o.postMessage(i,n):o.postMessage(i)}}l.BINARY_DECODER=0,l.LAS_LAZ=1,l.LAS_DECODER=2,l.GREYHOUND=3,l.DEM=4,l.EPT_LAS_ZIP_DECODER=5,l.EPT_BINARY_DECODER=6;var u={debug:{},workerPath:function(){var e=function(){if(document&&document.currentScript)return document.currentScript;const e=document.getElementsByTagName("script");return e&&e.length?e[e.length-1].getAttribute("src"):null}();if(e&&e.src){var t=new URL(e.src+"/..").href;return"/"===t.slice(-1)&&(t=t.slice(0,-1)),t}return console.error("Potree: Was unable to find its script path using document.currentScript."),""}(),maxNodesLoadGPUFrame:20,maxDEMLevel:0,maxNodesLoading:void 0!==navigator.hardwareConcurrency?navigator.hardwareConcurrency:4,pointLoadLimit:1e10,numNodesLoading:0,measureTimings:!1,workerPool:new l,lru:new t,pointcloudTransformVersion:void 0};const h=require("three");var d={POSITION_CARTESIAN:0,COLOR_PACKED:1,COLOR_FLOATS_1:2,COLOR_FLOATS_255:3,NORMAL_FLOATS:4,FILLER:5,INTENSITY:6,CLASSIFICATION:7,NORMAL_SPHEREMAPPED:8,NORMAL_OCT16:9,NORMAL:10,RETURN_NUMBER:11,NUMBER_OF_RETURNS:12,SOURCE_ID:13,INDICES:14,SPACING:15},p={DATA_TYPE_DOUBLE:{ordinal:0,size:8},DATA_TYPE_FLOAT:{ordinal:1,size:4},DATA_TYPE_INT8:{ordinal:2,size:1},DATA_TYPE_UINT8:{ordinal:3,size:1},DATA_TYPE_INT16:{ordinal:4,size:2},DATA_TYPE_UINT16:{ordinal:5,size:2},DATA_TYPE_INT32:{ordinal:6,size:4},DATA_TYPE_UINT32:{ordinal:7,size:4},DATA_TYPE_INT64:{ordinal:8,size:8},DATA_TYPE_UINT64:{ordinal:9,size:8}},c=0;for(var f in p)p[c]=p[f],c++;function m(e,t,i){this.name=e,this.type=t,this.numElements=i,this.byteSize=this.numElements*this.type.size}function g(e){if(this.attributes=[],this.byteSize=0,this.size=0,null!=e)for(var t=0;t<e.length;t++){var i=m[e[t]];this.attributes.push(i),this.byteSize+=i.byteSize,this.size++}}m.POSITION_CARTESIAN=new m(d.POSITION_CARTESIAN,p.DATA_TYPE_FLOAT,3),m.RGBA_PACKED=new m(d.COLOR_PACKED,p.DATA_TYPE_INT8,4),m.COLOR_PACKED=m.RGBA_PACKED,m.RGB_PACKED=new m(d.COLOR_PACKED,p.DATA_TYPE_INT8,3),m.NORMAL_FLOATS=new m(d.NORMAL_FLOATS,p.DATA_TYPE_FLOAT,3),m.FILLER_1B=new m(d.FILLER,p.DATA_TYPE_UINT8,1),m.INTENSITY=new m(d.INTENSITY,p.DATA_TYPE_UINT16,1),m.CLASSIFICATION=new m(d.CLASSIFICATION,p.DATA_TYPE_UINT8,1),m.NORMAL_SPHEREMAPPED=new m(d.NORMAL_SPHEREMAPPED,p.DATA_TYPE_UINT8,2),m.NORMAL_OCT16=new m(d.NORMAL_OCT16,p.DATA_TYPE_UINT8,2),m.NORMAL=new m(d.NORMAL,p.DATA_TYPE_FLOAT,3),m.RETURN_NUMBER=new m(d.RETURN_NUMBER,p.DATA_TYPE_UINT8,1),m.NUMBER_OF_RETURNS=new m(d.NUMBER_OF_RETURNS,p.DATA_TYPE_UINT8,1),m.SOURCE_ID=new m(d.SOURCE_ID,p.DATA_TYPE_UINT8,1),m.INDICES=new m(d.INDICES,p.DATA_TYPE_UINT32,1),m.SPACING=new m(d.SPACING,p.DATA_TYPE_FLOAT,1),g.prototype.add=function(e){this.attributes.push(e),this.byteSize+=e.byteSize,this.size++},g.prototype.hasColors=function(){for(var e in this.attributes)if(this.attributes[e].name===d.COLOR_PACKED)return!0;return!1},g.prototype.hasNormals=function(){for(var e in this.attributes){var t=this.attributes[e];if(t===m.NORMAL_SPHEREMAPPED||t===m.NORMAL_FLOATS||t===m.NORMAL||t===m.NORMAL_OCT16)return!0}return!1};class v{constructor(e,t,i){this.name=e,this.box=t,this.tileSize=i,this.level=this.name.length-1,this.data=new Float32Array(i*i),this.data.fill(-1/0),this.children=[],this.mipMap=[this.data],this.mipMapNeedsUpdate=!0}createMipMap(){this.mipMap=[this.data];for(var e=this.tileSize,t=parseInt(e/2),i=this.data;t>1;){for(var n=new Float32Array(t*t),r=0;r<t;r++)for(var o=0;o<t;o++){var s=i[2*r+0+2*o*e],a=i[2*r+0+2*o*e+e],l=i[2*r+1+2*o*e],u=i[2*r+1+2*o*e+e],[h,d]=[0,0];isFinite(s)&&(h+=s,d+=1),isFinite(a)&&(h+=a,d+=1),isFinite(l)&&(h+=l,d+=1),isFinite(u)&&(h+=u,d+=1),h/=d,n[r+o*t]=h}this.mipMap.push(n),i=n,e=t,t=parseInt(t/2)}this.mipMapNeedsUpdate=!1}uv(e){var t=this.box.getSize(new h.Vector3);return[(e.x-this.box.min.x)/t.x,(e.y-this.box.min.y)/t.y]}heightAtMipMapLevel(e,t){var i=this.uv(e),n=parseInt(this.tileSize/parseInt(2**t)),r=this.mipMap[t],o=Math.min(i[0]*n,n-1),s=Math.min(i[1]*n,n-1),a=o%1,l=s%1,[u,h]=[Math.floor(o),Math.ceil(o)],[d,p]=[Math.floor(s),Math.ceil(s)],c=r[u+n*d],f=r[u+n*p],m=r[h+n*d],g=r[h+n*p],v=isFinite(c)?(1-a)*(1-l):0,y=isFinite(f)?(1-a)*l:0,x=isFinite(m)?a*(1-l):0,b=isFinite(g)?a*l:0,S=v+y+x+b;if(v/=S,y/=S,x/=S,b/=S,0===S)return null;var w=0;return isFinite(c)&&(w+=c*v),isFinite(f)&&(w+=f*y),isFinite(m)&&(w+=m*x),isFinite(g)&&(w+=g*b),w}height(e){for(var t=null,i=0;i<this.mipMap.length;i++)if(null!==(t=this.heightAtMipMapLevel(e,i)))return t;return t}traverse(e,t=0){for(var i of(e(this,t),this.children.filter((e=>void 0!==e))))i.traverse(e,t+1)}}class y{constructor(e){this.pointcloud=e,this.matrix=null,this.boundingBox=null,this.tileSize=64,this.root=null,this.version=0}expandAndFindByBox(e,t){if(0===t)return[this.root];for(var i=[],n=[this.root];n.length>0;){var r=n.pop(),o=r.box.getSize(new h.Vector3),s={x:(e.min.x-r.box.min.x)/o.x,y:(e.min.y-r.box.min.y)/o.y},a={x:(e.max.x-r.box.max.x)/o.x,y:(e.max.y-r.box.max.y)/o.y};for(var l of(s.x=s.x<.5?0:1,s.y=s.y<.5?0:1,a.x=a.x<.5?0:1,a.y=a.y<.5?0:1,0===s.x&&0===s.y&&1===a.x&&1===a.y?[0,1,2,3]:s.x===a.x&&s.y===a.y?[s.x<<1|s.y]:[s.x<<1|s.y,a.x<<1|a.y])){if(void 0===r.children[l]){var u=r.box.clone();(2&l)>0?u.min.x+=o.x/2:u.max.x-=o.x/2,(1&l)>0?u.min.y+=o.y/2:u.max.y-=o.y/2;var d=new v(r.name+l,u,this.tileSize);r.children[l]=d}(d=r.children[l]).level<t?n.push(d):i.push(d)}}return i}childIndex(e){var[t,i]=e.map((e=>e<.5?0:1));return t<<1|i}height(e){if(!this.root)return 0;for(var t=null,i=[this.root];;){var n=i[i.length-1],r=n.height(e);null!==r&&(t=r);var o=n.uv(e),s=this.childIndex(o);if(!n.children[s])break;i.push(n.children[s])}return t+this.pointcloud.position.z}update(e){null!==this.matrix&&this.matrix.equals(this.pointcloud.matrixWorld)||(this.matrix=this.pointcloud.matrixWorld.clone(),this.boundingBox=this.pointcloud.boundingBox.clone().applyMatrix4(this.matrix),this.root=new v("r",this.boundingBox,this.tileSize),this.version++);var t=null;for(var i of e)if(void 0===i.demVersion||i.demVersion<this.version){t=i;break}if(null!==t){var n=t.getBoundingBox().clone().applyMatrix4(this.matrix),r=n.getSize(new h.Vector3),o=this.expandAndFindByBox(n,t.getLevel());t.demVersion=this.version;var s=t.geometryNode.geometry.attributes.position.array,a={boundingBox:{min:t.getBoundingBox().min.toArray(),max:t.getBoundingBox().max.toArray()},position:new Float32Array(s).buffer},d=[a.position],p=this;u.workerPool.runTask(l.DEM,(function(e){var t=new Float32Array(e.data.dem.data);for(var i of o){for(var s=i.box.getSize(new h.Vector3),a=0;a<p.tileSize;a++)for(var l=0;l<p.tileSize;l++){var u=a/(p.tileSize-1),d=l/(p.tileSize-1),c=i.box.min.x+u*s.x,f=i.box.min.y+d*s.y,m=p.tileSize*(c-n.min.x)/r.x,g=p.tileSize*(f-n.min.y)/r.y;m<0||m>p.tileSize||g<0||g>p.tileSize||(m=Math.min(Math.floor(m),p.tileSize-1),g=Math.min(Math.floor(g),p.tileSize-1),i.data[a+p.tileSize*l]=t[m+p.tileSize*g])}i.createMipMap(),i.mipMapNeedsUpdate=!0}}),a,d)}}}class x{constructor(){this.needsTransformUpdate=!0}getChildren(){}getBoundingBox(){}isLoaded(){}isGeometryNode(){}isTreeNode(){}getLevel(){}getBoundingSphere(){}}class b extends h.Object3D{constructor(){super(),this.dem=new y(this)}initialized(){return null!==this.root}}class S{constructor(){this.spacing=0,this.boundingBox=null,this.root=null,this.nodes=null,this.pointAttributes={},this.hierarchyStepSize=-1,this.loader=null,this.schema=null,this.baseDepth=null,this.offset=null,this.projection=null,this.boundingSphere=null,this.serverURL=null,this.normalize={color:!1,intensity:!1}}}function w(e,t,i,n,r){this.id=w.IDCount++,this.name=e,this.index=parseInt(e.charAt(e.length-1)),this.pcoGeometry=t,this.geometry=null,this.boundingBox=i,this.boundingSphere=i.getBoundingSphere(new h.Sphere),this.scale=n,this.offset=r,this.children={},this.numPoints=0,this.level=null,this.loaded=!1,this.oneTimeDisposeHandlers=[],this.baseLoaded=!1;var o=new h.Vector3,s=this.boundingBox.clone();s.min.sub(this.pcoGeometry.boundingBox.getCenter(o)),s.max.sub(this.pcoGeometry.boundingBox.getCenter(o)),this.scale&&(s.min.multiplyScalar(1/this.scale),s.max.multiplyScalar(1/this.scale)),this.greyhoundBounds=s,this.greyhoundOffset=this.pcoGeometry.offset.clone().add(this.pcoGeometry.boundingBox.getSize(new h.Vector3).multiplyScalar(.5))}function T(e){this.version=e;var t=-1===e.indexOf(".")?e.length:e.indexOf(".");this.versionMajor=parseInt(e.substr(0,t)),this.versionMinor=parseInt(e.substr(t+1)),0===this.versionMinor.length&&(this.versionMinor=0)}w.IDCount=0,w.prototype=Object.create(x.prototype),w.prototype.isGeometryNode=function(){return!0},w.prototype.isTreeNode=function(){return!1},w.prototype.isLoaded=function(){return this.loaded},w.prototype.getBoundingSphere=function(){return this.boundingSphere},w.prototype.getBoundingBox=function(){return this.boundingBox},w.prototype.getLevel=function(){return this.level},w.prototype.getChildren=function(){for(var e=[],t=0;t<8;++t)this.children[t]&&e.push(this.children[t]);return e},w.prototype.getURL=function(){var e=this.pcoGeometry.schema,t=this.greyhoundBounds,i=t.min.x+","+t.min.y+","+t.min.z+","+t.max.x+","+t.max.y+","+t.max.z,n=this.pcoGeometry.serverURL+"read?depthBegin="+(this.baseLoaded?this.level+this.pcoGeometry.baseDepth:0)+"&depthEnd="+(this.level+this.pcoGeometry.baseDepth+1)+"&bounds=["+i+"]&schema="+JSON.stringify(e)+"&compress=true";if(this.scale&&(n+="&scale="+this.scale),this.greyhoundOffset){var r=this.greyhoundOffset;n+="&offset=["+r.x+","+r.y+","+r.z+"]"}return this.baseLoaded||(this.baseLoaded=!0),n},w.prototype.addChild=function(e){this.children[e.index]=e,e.parent=this},w.prototype.load=function(){!0===this.loading||!0===this.loaded||u.numNodesLoading>=u.maxNodesLoading||(this.loading=!0,u.numNodesLoading++,this.level%this.pcoGeometry.hierarchyStepSize==0&&this.hasChildren?this.loadHierarchyThenPoints():this.loadPoints())},w.prototype.loadPoints=function(){this.pcoGeometry.loader.load(this)},w.prototype.loadHierarchyThenPoints=function(){var e=[0,2,1,3,4,6,5,7],t=function(t){var i=0;return Object.keys(t).forEach((function(t){"swd"===t?i+=1<<e[0]:"nwd"===t?i+=1<<e[1]:"swu"===t?i+=1<<e[2]:"nwu"===t?i+=1<<e[3]:"sed"===t?i+=1<<e[4]:"ned"===t?i+=1<<e[5]:"seu"===t?i+=1<<e[6]:"neu"===t&&(i+=1<<e[7])})),i},i=function(n,r,o){var s,a;Object.keys(n).forEach((function(l){if("n"!==l){switch(l){case"swd":s=n.swd,a=r+e[0];break;case"nwd":s=n.nwd,a=r+e[1];break;case"swu":s=n.swu,a=r+e[2];break;case"nwu":s=n.nwu,a=r+e[3];break;case"sed":s=n.sed,a=r+e[4];break;case"ned":s=n.ned,a=r+e[5];break;case"seu":s=n.seu,a=r+e[6];break;case"neu":s=n.neu,a=r+e[7]}o.push({children:t(s),numPoints:s.n,name:a}),i(s,a,o)}}))};if(this.level%this.pcoGeometry.hierarchyStepSize==0){var n=this.level+this.pcoGeometry.baseDepth,r=n+this.pcoGeometry.hierarchyStepSize+2,o=this.greyhoundBounds,s=o.min.x+","+o.min.y+","+o.min.z+","+o.max.x+","+o.max.y+","+o.max.z,a=this.pcoGeometry.serverURL+"hierarchy?bounds=["+s+"]&depthBegin="+n+"&depthEnd="+r;if(this.scale&&(a+="&scale="+this.scale),this.greyhoundOffset){var l=this.greyhoundOffset;a+="&offset=["+l.x+","+l.y+","+l.z+"]"}var h=this,d=XHRFactory.createXMLHttpRequest();d.overrideMimeType("text/plain"),d.open("GET",a,!0),d.onload=function(e){try{!function(e,t){var n=[];e.numPoints=t.n,i(t,e.name,n);var r={};r[e.name]=e;for(var o=e.pcoGeometry,s=0;s<n.length;s++){var a=n[s].name,l=n[s].numPoints,u=parseInt(a.charAt(a.length-1)),h=r[a.substring(0,a.length-1)],d=a.length-1,p=new w(a,o,B.createChildAABB(h.boundingBox,u),e.scale,e.offset);p.level=d,p.numPoints=l,p.hasChildren=n[s].children>0,p.spacing=o.spacing/Math.pow(2,d),h.addChild(p),r[a]=p}e.loadPoints()}(h,JSON.parse(d.responseText)||{})}catch(e){u.numNodesLoading--,console.error("Potree: Exception thrown parsing points.",e)}},d.onerror=function(e){console.log("Potree: Failed to load file! HTTP status "+d.status+", file:"+a,e)},d.send(null)}},w.prototype.getNumPoints=function(){return this.numPoints},w.prototype.dispose=function(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(var e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}},Object.assign(w.prototype,h.EventDispatcher.prototype),T.prototype.newerThan=function(e){var t=new T(e);return this.versionMajor>t.versionMajor||this.versionMajor===t.versionMajor&&this.versionMinor>t.versionMinor},T.prototype.equalOrHigher=function(e){var t=new T(e);return this.versionMajor>t.versionMajor||this.versionMajor===t.versionMajor&&this.versionMinor>=t.versionMinor},T.prototype.upTo=function(e){return!this.newerThan(e)};const _={config:{withCredentials:!1,customHeaders:[{header:null,value:null}]},createXMLHttpRequest:function(){let e=new XMLHttpRequest;if(this.config.customHeaders&&Array.isArray(this.config.customHeaders)&&this.config.customHeaders.length>0){let t=e.open,i=this.config.customHeaders;e.open=function(){t.apply(this,[].slice.call(arguments)),i.forEach((function(t){t.header&&t.value&&e.setRequestHeader(t.header,t.value)}))}}return e},fetch:async function(e){const t=new Headers;this.config.customHeaders&&this.config.customHeaders.forEach((function(e){e.header&&e.value&&t.append(e.header,e.value)}));const i={headers:t,credentials:_.config.withCredentials?"include":"same-origin"};return fetch(e,i)}};class A{constructor(e,t,i){this.version="string"==typeof e?new T(e):e,this.boundingBox=t,this.scale=i}load(e){if(!e.loaded){var t=this,i=e.getURL(),n=_.createXMLHttpRequest();n.overrideMimeType("text/plain"),n.open("GET",i,!0),n.responseType="arraybuffer",n.overrideMimeType("text/plain; charset=x-user-defined"),n.onload=function(){try{t.parse(e,n.response)}catch(e){console.error("Potree: Exception thrown parsing points.",e),u.numNodesLoading--}},n.onerror=function(e){u.numNodesLoading--,console.error("Potree: Failed to load file.",n,i)},n.send(null)}}parse(e,t){var i=new DataView(t,t.byteLength-4,4).getUint32(0,!0),n=e.pcoGeometry.pointAttributes;e.numPoints=i;var r=e.boundingBox,o=new THREE.Vector3,s=e.pcoGeometry.boundingBox.getCenter(o).sub(e.boundingBox.min),a={buffer:t,pointAttributes:n,version:this.version.version,schema:e.pcoGeometry.schema,min:[r.min.x,r.min.y,r.min.z],max:[r.max.x,r.max.y,r.max.z],offset:s.toArray(),scale:this.scale,normalize:e.pcoGeometry.normalize};u.workerPool.runTask(l.GREYHOUND,(function(t){var i=t.data,n=i.attributeBuffers,r=new THREE.Box3((new THREE.Vector3).fromArray(i.tightBoundingBox.min),(new THREE.Vector3).fromArray(i.tightBoundingBox.max)),o=new THREE.BufferGeometry;for(var s in n){var a=n[s].buffer;if(parseInt(s)===d.POSITION_CARTESIAN)o.setAttribute("position",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===d.COLOR_PACKED)o.setAttribute("color",new THREE.BufferAttribute(new Uint8Array(a),4,!0));else if(parseInt(s)===d.INTENSITY)o.setAttribute("intensity",new THREE.BufferAttribute(new Float32Array(a),1));else if(parseInt(s)===d.CLASSIFICATION)o.setAttribute("classification",new THREE.BufferAttribute(new Uint8Array(a),1));else if(parseInt(s)===d.NORMAL_SPHEREMAPPED)o.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===d.NORMAL_OCT16)o.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===d.NORMAL)o.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===d.INDICES)(l=new THREE.BufferAttribute(new Uint8Array(a),4)).normalized=!0,o.setAttribute("indices",l);else if(parseInt(s)===d.SPACING){var l=new THREE.BufferAttribute(new Float32Array(a),1);o.setAttribute("spacing",l)}}r.max.sub(r.min),r.min.set(0,0,0),e.numPoints=i.numPoints,e.geometry=o,e.mean=new THREE.Vector3(...i.mean),e.tightBoundingBox=r,e.loaded=!0,e.loading=!1,u.numNodesLoading--}),a,[a.buffer])}}class E{static getQueryParam(e){e=e.replace(/[[\]]/g,"\\$&");var t=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(window.location.href);return t?t[2]?decodeURIComponent(t[2].replace(/\+/g," ")):"":null}static createSchema(e){var t=[{name:"X",size:4,type:"signed"},{name:"Y",size:4,type:"signed"},{name:"Z",size:4,type:"signed"}];return e.forEach((function(e){"COLOR_PACKED"===e?(t.push({name:"Red",size:2,type:"unsigned"}),t.push({name:"Green",size:2,type:"unsigned"}),t.push({name:"Blue",size:2,type:"unsigned"})):"INTENSITY"===e?t.push({name:"Intensity",size:2,type:"unsigned"}):"CLASSIFICATION"===e&&t.push({name:"Classification",size:1,type:"unsigned"})})),t}static fetch(e,t){var i=_.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",e,!0),i.onreadystatechange=function(){4===i.readyState&&(200===i.status||0===i.status?t(null,i.responseText):t(i.responseText))},i.send(null)}static fetchBinary(e,t){var i=_.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",e,!0),i.responseType="arraybuffer",i.onreadystatechange=function(){4===i.readyState&&(200===i.status||0===i.status?t(null,i.response):t(i.responseText))},i.send(null)}static pointSizeFrom(e){return e.reduce(((e,t)=>e+t.size),0)}static getNormalization(e,t,i){var n=[{name:"X",size:4,type:"floating"},{name:"Y",size:4,type:"floating"},{name:"Z",size:4,type:"floating"},{name:"Red",size:2,type:"unsigned"},{name:"Green",size:2,type:"unsigned"},{name:"Blue",size:2,type:"unsigned"},{name:"Intensity",size:2,type:"unsigned"}],r=e+"read?depth="+t+"&schema="+JSON.stringify(n);E.fetchBinary(r,(function(e,t){if(e)throw new Error(e);for(var r=new DataView(t),o=t.byteLength-4,s=E.pointSizeFrom(n),a=!1,l=!1,u=0;u<o&&((r.getUint16(u+12,!0)>255||r.getUint16(u+14,!0)>255||r.getUint16(u+16,!0)>255)&&(a=!0),r.getUint16(u+18,!0)>255&&(l=!0),!a||!l);u+=s);i(null,{color:a,intensity:l})}))}}function B(){}B.loadInfoJSON=function(e,t){},B.load=function(e,t){try{var i=e.split("greyhound://")[1];1===i.split("http://").length&&1===i.split("https://").length&&(i="http://"+i),E.fetch(i+"info",(function(e,n){if(e)throw new Error(e);var r=JSON.parse(n),o=new T("1.4"),s=r.bounds,a=r.scale||.01;Array.isArray(a)&&(a=Math.min(a[0],a[1],a[2])),E.getQueryParam("scale")&&(a=parseFloat(E.getQueryParam("scale")));var l=Math.max(8,r.baseDepth),u=["POSITION_CARTESIAN"],h=!1,d=!1,p=!1;r.schema.forEach((function(e){"Intensity"===e.name&&u.push("INTENSITY"),"Classification"===e.name&&u.push("CLASSIFICATION"),"Red"===e.name?h=!0:"Green"===e.name?d=!0:"Blue"===e.name&&(p=!0)})),h&&d&&p&&u.push("COLOR_PACKED");var c=new S;c.serverURL=i,c.spacing=(s[3]-s[0])/Math.pow(2,l),c.baseDepth=l,c.hierarchyStepSize=5,c.schema=E.createSchema(u);var f=E.pointSizeFrom(c.schema);c.pointAttributes=new g(u),c.pointAttributes.byteSize=f;var m=new THREE.Box3((new THREE.Vector3).fromArray(s,0),(new THREE.Vector3).fromArray(s,3)),v=m.min.clone();m.max.sub(m.min),m.min.set(0,0,0),c.projection=r.srs,c.boundingBox=m,c.boundingSphere=m.getBoundingSphere(new THREE.Sphere),c.scale=a,c.offset=v,c.loader=new A(o,m,c.scale);var y={},x=new w("r",c,m,a,v);x.level=0,x.hasChildren=!0,x.numPoints=r.numPoints,x.spacing=c.spacing,c.root=x,c.root.load(),y.r=x,c.nodes=y,E.getNormalization(i,r.baseDepth,(function(e,i){i.color&&(c.normalize.color=!0),i.intensity&&(c.normalize.intensity=!0),t(c)}))}))}catch(i){console.log("Potree: Loading failed.",e,i),t()}},B.loadPointAttributes=function(e){for(var t=e.pointAttributes,i=new g,n=0;n<t.length;n++){var r=m[t[n]];i.add(r)}return i},B.createChildAABB=function(e,t){var i=e.min,n=e.max,r=(new THREE.Vector3).copy(n).sub(i).multiplyScalar(.5),o=new THREE.Vector3(r.x,0,0),s=new THREE.Vector3(0,r.y,0),a=new THREE.Vector3(0,0,r.z),l=i,u=(new THREE.Vector3).add(i).add(r);return 1===t?(i=(new THREE.Vector3).copy(l).add(a),n=(new THREE.Vector3).copy(u).add(a)):3===t?(i=(new THREE.Vector3).copy(l).add(a).add(s),n=(new THREE.Vector3).copy(u).add(a).add(s)):0===t?(i=l,n=u):2===t?(i=(new THREE.Vector3).copy(l).add(s),n=(new THREE.Vector3).copy(u).add(s)):5===t?(i=(new THREE.Vector3).copy(l).add(a).add(o),n=(new THREE.Vector3).copy(u).add(a).add(o)):7===t?(i=(new THREE.Vector3).copy(l).add(r),n=(new THREE.Vector3).copy(u).add(r)):4===t?(i=(new THREE.Vector3).copy(l).add(o),n=(new THREE.Vector3).copy(u).add(o)):6===t&&(i=(new THREE.Vector3).copy(l).add(o).add(s),n=(new THREE.Vector3).copy(u).add(o).add(s)),new THREE.Box3(i,n)};class N{constructor(e,t,i){this.version="string"==typeof e?new T(e):e,this.boundingBox=t,this.scale=i}load(e){if(!e.loaded){var t=e.getURL();this.version.equalOrHigher("1.4")&&(t+=".bin");var i=this,n=_.createXMLHttpRequest();n.open("GET",t,!0),n.responseType="arraybuffer",n.overrideMimeType("text/plain; charset=x-user-defined"),n.onload=function(){try{i.parse(e,n.response)}catch(e){u.numNodesLoading--,console.error("Potree: Exception thrown parsing points.",e)}},n.onerror=function(e){u.numNodesLoading--,console.error("Potree: Failed to load file.",n,t)},n.send(null)}}parse(e,t){var i=e.pcoGeometry.pointAttributes,n=t.byteLength/e.pcoGeometry.pointAttributes.byteSize;this.version.upTo("1.5")&&(e.numPoints=n);var r={buffer:t,pointAttributes:i,version:this.version.version,min:[e.boundingBox.min.x,e.boundingBox.min.y,e.boundingBox.min.z],offset:[e.pcoGeometry.offset.x,e.pcoGeometry.offset.y,e.pcoGeometry.offset.z],scale:this.scale,spacing:e.spacing,hasChildren:e.hasChildren,name:e.name};u.workerPool.runTask(l.BINARY_DECODER,(function(t){var n=t.data;if(void 0!==n.error)return u.numNodesLoading--,void console.error("Potree: Binary worker error.",n);var r=n.attributeBuffers,o=new h.Box3((new h.Vector3).fromArray(n.tightBoundingBox.min),(new h.Vector3).fromArray(n.tightBoundingBox.max)),s=new h.BufferGeometry;for(var a in r){var l=r[a].buffer;if(parseInt(a)===d.POSITION_CARTESIAN)s.setAttribute("position",new h.BufferAttribute(new Float32Array(l),3));else if(parseInt(a)===d.COLOR_PACKED)s.setAttribute("color",new h.BufferAttribute(new Uint8Array(l),4,!0));else if(parseInt(a)===d.INTENSITY)s.setAttribute("intensity",new h.BufferAttribute(new Float32Array(l),1));else if(parseInt(a)===d.CLASSIFICATION)s.setAttribute("classification",new h.BufferAttribute(new Uint8Array(l),1));else if(parseInt(a)===d.NORMAL_SPHEREMAPPED)s.setAttribute("normal",new h.BufferAttribute(new Float32Array(l),3));else if(parseInt(a)===d.NORMAL_OCT16)s.setAttribute("normal",new h.BufferAttribute(new Float32Array(l),3));else if(parseInt(a)===d.NORMAL)s.setAttribute("normal",new h.BufferAttribute(new Float32Array(l),3));else if(parseInt(a)===d.INDICES)(p=new h.BufferAttribute(new Uint8Array(l),4)).normalized=!0,s.setAttribute("indices",p);else if(parseInt(a)===d.SPACING){var p=new h.BufferAttribute(new Float32Array(l),1);s.setAttribute("spacing",p)}}o.max.sub(o.min),o.min.set(0,0,0);var c=t.data.buffer.byteLength/i.byteSize;e.numPoints=c,e.geometry=s,e.mean=new h.Vector3(...n.mean),e.tightBoundingBox=o,e.loaded=!0,e.loading=!1,e.estimatedSpacing=n.estimatedSpacing,u.numNodesLoading--}),r,[r.buffer])}}var P=[function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0)}},function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0)}},function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0),color:[e.getUint16(20,!0),e.getUint16(22,!0),e.getUint16(24,!0)]}},function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0),color:[e.getUint16(28,!0),e.getUint16(30,!0),e.getUint16(32,!0)]}}];function C(e,t,i,n){n=void 0===n||0===n?1:n;var r=new t(e.slice(i,i+t.BYTES_PER_ELEMENT*n));if(void 0===n||1===n)return r[0];for(var o=[],s=0;s<n;s++)o.push(r[s]);return o}function I(e){this.arraybuffer=e}function R(e){var t=this;this.arraybuffer=e,this.nextCB=null,this.dorr=function(e,i){t.nextCB=i,u.workerPool.runTask(l.LAS_LAZ,(function(e){null!==t.nextCB&&(t.nextCB(e.data),t.nextCB=null)}),e)}}function D(e){if(this.arraybuffer=e,this.determineVersion(),this.version>12)throw new Error("Only file versions <= 1.2 are supported at this time");if(this.determineFormat(),void 0===P[this.formatId])throw new Error("The point format ID is not supported");this.loader=this.isCompressed?new R(this.arraybuffer):new I(this.arraybuffer)}function L(e,t,i,n,r,o,s,a){this.arrayb=e,this.decoder=P[t],this.pointsCount=n,this.pointSize=i,this.scale=r,this.offset=o,this.mins=s,this.maxs=a}I.prototype.open=function(){return this.readOffset=0,new Promise((function(e,t){setTimeout(e,0)}))},I.prototype.getHeader=function(){var e=this;return new Promise((function(t,i){setTimeout((function(){e.header=function(e){var t={};t.pointsOffset=C(e,Uint32Array,96),t.pointsFormatId=C(e,Uint8Array,104),t.pointsStructSize=C(e,Uint16Array,105),t.pointsCount=C(e,Uint32Array,107);var i=131;t.scale=C(e,Float64Array,i,3),i+=24,t.offset=C(e,Float64Array,i,3),i+=24;var n=C(e,Float64Array,i,6);return i+=48,t.maxs=[n[0],n[2],n[4]],t.mins=[n[1],n[3],n[5]],t}(e.arraybuffer),t(e.header)}),0)}))},I.prototype.readData=function(e,t,i){var n=this;return new Promise((function(t,r){setTimeout((function(){if(!n.header)return r(new Error("Cannot start reading data till a header request is issued"));var o;if(i<=1){e=Math.min(e,n.header.pointsCount-n.readOffset);var s=(o=n.header.pointsOffset+n.readOffset*n.header.pointsStructSize)+e*n.header.pointsStructSize;t({buffer:n.arraybuffer.slice(o,s),count:e,hasMoreData:n.readOffset+e<n.header.pointsCount}),n.readOffset+=e}else{for(var a=Math.min(e*i,n.header.pointsCount-n.readOffset),l=Math.ceil(a/i),u=0,h=new Uint8Array(l*n.header.pointsStructSize),d=0;d<a;d++){if(d%i==0){o=n.header.pointsOffset+n.readOffset*n.header.pointsStructSize;var p=new Uint8Array(n.arraybuffer,o,n.header.pointsStructSize);h.set(p,u*n.header.pointsStructSize),u++}n.readOffset++}t({buffer:h.buffer,count:u,hasMoreData:n.readOffset<n.header.pointsCount})}}),0)}))},I.prototype.close=function(){var e=this;return new Promise((function(t,i){e.arraybuffer=null,setTimeout(t,0)}))},R.prototype.open=function(){var e=this;return new Promise((function(t,i){e.dorr({type:"open",arraybuffer:e.arraybuffer},(function(e){if(1!==e.status)return i(new Error("Failed to open file"));t(!0)}))}))},R.prototype.getHeader=function(){var e=this;return new Promise((function(t,i){e.dorr({type:"header"},(function(e){if(1!==e.status)return i(new Error("Failed to get header"));t(e.header)}))}))},R.prototype.readData=function(e,t,i){var n=this;return new Promise((function(r,o){n.dorr({type:"read",count:e,offset:t,skip:i},(function(e){if(1!==e.status)return o(new Error("Failed to read data"));r({buffer:e.buffer,count:e.count,hasMoreData:e.hasMoreData})}))}))},R.prototype.close=function(){var e=this;return new Promise((function(t,i){e.dorr({type:"close"},(function(e){if(1!==e.status)return i(new Error("Failed to close file"));t(!0)}))}))},D.prototype.determineFormat=function(){var e=C(this.arraybuffer,Uint8Array,104),t=(128&e)>>7,i=(64&e)>>6;if(1===t&&1===i)throw new Error("Old style compression not supported");this.formatId=63&e,this.isCompressed=1===t||1===i},D.prototype.determineVersion=function(){var e=new Int8Array(this.arraybuffer,24,2);this.version=10*e[0]+e[1],this.versionAsString=e[0]+"."+e[1]},D.prototype.open=function(){return this.loader.open()},D.prototype.getHeader=function(){return this.loader.getHeader()},D.prototype.readData=function(e,t,i){return this.loader.readData(e,t,i)},D.prototype.close=function(){return this.loader.close()},L.prototype.getPoint=function(e){if(e<0||e>=this.pointsCount)throw new Error("Point index out of range");return this.decoder(new DataView(this.arrayb,e*this.pointSize,this.pointSize))};class M{constructor(e){this.version="string"==typeof e?new T(e):e}load(e){if(!e.loaded){var t=e.pcoGeometry.pointAttributes,i=e.getURL();this.version.equalOrHigher("1.4")&&(i+="."+t.toLowerCase());var n=this,r=_.createXMLHttpRequest();r.open("GET",i,!0),r.responseType="arraybuffer",r.overrideMimeType("text/plain; charset=x-user-defined"),r.onload=function(){if(r.response instanceof ArrayBuffer)try{n.parse(e,r.response)}catch(e){console.error("Potree: Exception thrown parsing points.",e),u.numNodesLoading--}else u.numNodesLoading--,console.log("Potree: LASLAZLoader xhr response is not a ArrayBuffer.")},r.onerror=function(){u.numNodesLoading--,console.log("Potree: LASLAZLoader failed to load file, "+r.status+", file: "+i)},r.send(null)}}parse(e,t){var i=new D(t),n=new O(e);i.open().then((e=>(i.isOpen=!0,i))).then((e=>e.getHeader().then((function(t){return[e,t]})))).then((e=>{let t=e[0],i=e[1],r=0;i.pointsCount;var o=function(){return t.readData(1e6,0,1).then((function(e){return n.push(new L(e.buffer,i.pointsFormatId,i.pointsStructSize,e.count,i.scale,i.offset,i.mins,i.maxs)),r+=e.count,e.hasMoreData?o():(i.totalRead=r,i.versionAsString=t.versionAsString,i.isCompressed=t.isCompressed,[t,i,n])}))};return o()})).then((e=>{let t=e[0];return t.close().then((function(){return t.isOpen=!1,e.slice(1)})).catch((e=>{if(t.isOpen)return t.close().then((function(){throw t.isOpen=!1,e}));throw e}))})).catch((e=>{console.error("Potree: Failed to open file:",e)}))}handle(e,t){}}class O{constructor(e){this.node=e}push(e){var t=this,i={buffer:e.arrayb,numPoints:e.pointsCount,pointSize:e.pointSize,pointFormatID:2,scale:e.scale,offset:e.offset,mins:e.mins,maxs:e.maxs},n=u.workerPool.getWorker(l.LAS_DECODER);n.onmessage=function(i){var r=new h.BufferGeometry,o=e.pointsCount,s=new Float32Array(i.data.position),a=new Uint8Array(i.data.color),d=new Float32Array(i.data.intensity),p=new Uint8Array(i.data.classification),c=new Uint8Array(i.data.returnNumber),f=new Uint8Array(i.data.numberOfReturns),m=new Uint16Array(i.data.pointSourceID),g=new Uint8Array(i.data.indices);r.setAttribute("position",new h.BufferAttribute(s,3)),r.setAttribute("color",new h.BufferAttribute(a,4,!0)),r.setAttribute("intensity",new h.BufferAttribute(d,1)),r.setAttribute("classification",new h.BufferAttribute(p,1)),r.setAttribute("returnNumber",new h.BufferAttribute(c,1)),r.setAttribute("numberOfReturns",new h.BufferAttribute(f,1)),r.setAttribute("pointSourceID",new h.BufferAttribute(m,1)),r.setAttribute("indices",new h.BufferAttribute(g,4)),r.attributes.indices.normalized=!0;var v=new h.Box3((new h.Vector3).fromArray(i.data.tightBoundingBox.min),(new h.Vector3).fromArray(i.data.tightBoundingBox.max));r.boundingBox=t.node.boundingBox,t.node.tightBoundingBox=v,t.node.geometry=r,t.node.numPoints=o,t.node.loaded=!0,t.node.loading=!1,u.numNodesLoading--,t.node.mean=new h.Vector3(...i.data.mean),u.workerPool.returnWorker(l.LAS_DECODER,n)},n.postMessage(i,[i.buffer])}}class z{constructor(){this.url=null,this.octreeDir=null,this.spacing=0,this.boundingBox=null,this.root=null,this.nodes=null,this.pointAttributes=null,this.hierarchyStepSize=-1,this.loader=null}}class U extends x{constructor(e,t,i){super(),this.id=U.IDCount++,this.name=e,this.index=parseInt(e.charAt(e.length-1)),this.pcoGeometry=t,this.geometry=null,this.boundingBox=i,this.boundingSphere=i.getBoundingSphere(new h.Sphere),this.children={},this.numPoints=0,this.level=null,this.loaded=!1,this.oneTimeDisposeHandlers=[]}isGeometryNode(){return!0}getLevel(){return this.level}isTreeNode(){return!1}isLoaded(){return this.loaded}getBoundingSphere(){return this.boundingSphere}getBoundingBox(){return this.boundingBox}getChildren(){for(var e=[],t=0;t<8;t++)this.children[t]&&e.push(this.children[t]);return e}getURL(){var e="",t=this.pcoGeometry.loader.version;return t.equalOrHigher("1.5")?e=this.pcoGeometry.octreeDir+"/"+this.getHierarchyPath()+"/"+this.name:(t.equalOrHigher("1.4")||t.upTo("1.3"))&&(e=this.pcoGeometry.octreeDir+"/"+this.name),e}getHierarchyPath(){for(var e="r/",t=this.pcoGeometry.hierarchyStepSize,i=this.name.substr(1),n=Math.floor(i.length/t),r=0;r<n;r++)e+=i.substr(r*t,t)+"/";return e.slice(0,-1)}addChild(e){this.children[e.index]=e,e.parent=this}load(){if(!(!0===this.loading||!0===this.loaded||u.numNodesLoading>=u.maxNodesLoading)){this.loading=!0,u.numNodesLoading++;try{this.pcoGeometry.loader.version.equalOrHigher("1.5")&&this.level%this.pcoGeometry.hierarchyStepSize==0&&this.hasChildren?this.loadHierachyThenPoints():this.loadPoints()}catch(e){u.numNodesLoading--,console.error("Potree: Exception thrown loading points file.",e)}}}loadPoints(){this.pcoGeometry.loader.load(this)}loadHierachyThenPoints(){var e=this;if(e.level%e.pcoGeometry.hierarchyStepSize==0){var t=e.pcoGeometry.octreeDir+"/"+e.getHierarchyPath()+"/"+e.name+".hrc",i=_.createXMLHttpRequest();i.open("GET",t,!0),i.responseType="arraybuffer",i.overrideMimeType("text/plain; charset=x-user-defined"),i.onload=function(t){try{!function(e,t){var i=new DataView(t),n=[],r=i.getUint8(0),o=i.getUint32(1,!0);e.numPoints=o,n.push({children:r,numPoints:o,name:e.name});for(var s=[],a=5;n.length>0;){for(var l=n.shift(),u=1,h=0;h<8;h++){if(0!=(l.children&u)){var d=l.name+h,p=i.getUint8(a),c=i.getUint32(a+1,!0);n.push({children:p,numPoints:c,name:d}),s.push({children:p,numPoints:c,name:d}),a+=5}u*=2}if(a===t.byteLength)break}var f={};f[e.name]=e;var m=e.pcoGeometry;for(h=0;h<s.length;h++){var g=s[h].name,v=s[h].numPoints,y=parseInt(g.charAt(g.length-1)),x=f[g.substring(0,g.length-1)],b=g.length-1,S=F.createChildAABB(x.boundingBox,y),w=new U(g,m,S);w.level=b,w.numPoints=v,w.hasChildren=s[h].children>0,w.spacing=m.spacing/Math.pow(2,b),x.addChild(w),f[g]=w}e.loadPoints()}(e,i.response)}catch(e){u.numNodesLoading--,console.error("Potree: Exception thrown parsing points.",e)}},i.onerror=function(e){u.numNodesLoading--,console.error("Potree: Failed to load file.",i.status,t,e)},i.send(null)}}getNumPoints(){return this.numPoints}dispose(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(var e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}}}U.IDCount=0,Object.assign(U.prototype,h.EventDispatcher.prototype);class F{static load(e,t){var i=new z;i.url=e;var n=_.createXMLHttpRequest();n.overrideMimeType("text/plain"),n.open("GET",e,!0),n.onload=function(){var r=JSON.parse(n.responseText),o=new T(r.version);0===r.octreeDir.indexOf("http")?i.octreeDir=r.octreeDir:i.octreeDir=e+"/../"+r.octreeDir,i.spacing=r.spacing,i.hierarchyStepSize=r.hierarchyStepSize,i.pointAttributes=r.pointAttributes;var s=new h.Vector3(r.boundingBox.lx,r.boundingBox.ly,r.boundingBox.lz),a=new h.Vector3(r.boundingBox.ux,r.boundingBox.uy,r.boundingBox.uz),l=(b=new h.Box3(s,a)).clone();r.tightBoundingBox&&(l.min.copy(new h.Vector3(r.tightBoundingBox.lx,r.tightBoundingBox.ly,r.tightBoundingBox.lz)),l.max.copy(new h.Vector3(r.tightBoundingBox.ux,r.tightBoundingBox.uy,r.tightBoundingBox.uz)));var u=s.clone();b.min.sub(u),b.max.sub(u),l.min.sub(u),l.max.sub(u),i.projection=r.projection,i.boundingBox=b,i.tightBoundingBox=l,i.boundingSphere=b.getBoundingSphere(new h.Sphere),i.tightBoundingSphere=l.getBoundingSphere(new h.Sphere),i.offset=u,"LAS"===r.pointAttributes||"LAZ"===r.pointAttributes?i.loader=new M(r.version):(i.loader=new N(r.version,b,r.scale),i.pointAttributes=new g(i.pointAttributes));var d={},p=new U(f="r",i,b);if(p.level=0,p.hasChildren=!0,p.spacing=i.spacing,p.numPoints=o.upTo("1.5")?r.hierarchy[0][1]:0,i.root=p,i.root.load(),d[f]=p,o.upTo("1.4"))for(var c=1;c<r.hierarchy.length;c++){var f=r.hierarchy[c][0],m=r.hierarchy[c][1],v=parseInt(f.charAt(f.length-1)),y=d[f.substring(0,f.length-1)],x=f.length-1,b=F.createChildAABB(y.boundingBox,v),S=new U(f,i,b);S.level=x,S.numPoints=m,S.spacing=i.spacing/Math.pow(2,x),y.addChild(S),d[f]=S}i.nodes=d,t(i)},n.onerror=function(i){u.numNodesLoading--,console.log("Potree: loading file failed.",e,i),t()},n.send(null)}static loadPointAttributes(e){for(var t=e.pointAttributes,i=new g,n=0;n<t.length;n++)i.add(m[t[n]]);return i}static createChildAABB(e,t){var i=e.min.clone(),n=e.max.clone(),r=(new h.Vector3).subVectors(n,i);return(1&t)>0?i.z+=r.z/2:n.z-=r.z/2,(2&t)>0?i.y+=r.y/2:n.y-=r.y/2,(4&t)>0?i.x+=r.x/2:n.x-=r.x/2,new h.Box3(i,n)}}class V{load(e){if(!e.loaded){var t=e.url()+".bin",i=_.createXMLHttpRequest();i.open("GET",t,!0),i.responseType="arraybuffer",i.overrideMimeType("text/plain; charset=x-user-defined"),i.onreadystatechange=()=>{if(4===i.readyState)if(200===i.status){var n=i.response;this.parse(e,n)}else console.log("Failed "+t+": "+i.status)};try{i.send(null)}catch(e){console.log("Failed request: "+e)}}}parse(e,t){var i=u.workerPool.getWorker(l.EPT_BINARY_DECODER);i.onmessage=function(t){var n=new h.BufferGeometry,r=t.data.numPoints,o=new Float32Array(t.data.position);n.setAttribute("position",new h.BufferAttribute(o,3));var s=new Uint8Array(t.data.indices);if(n.setAttribute("indices",new h.BufferAttribute(s,4)),t.data.color){var a=new Uint8Array(t.data.color);n.setAttribute("color",new h.BufferAttribute(a,4,!0))}if(t.data.intensity){var d=new Float32Array(t.data.intensity);n.setAttribute("intensity",new h.BufferAttribute(d,1))}if(t.data.classification){var p=new Uint8Array(t.data.classification);n.setAttribute("classification",new h.BufferAttribute(p,1))}if(t.data.returnNumber){var c=new Uint8Array(t.data.returnNumber);n.setAttribute("returnNumber",new h.BufferAttribute(c,1))}if(t.data.numberOfReturns){var f=new Uint8Array(t.data.numberOfReturns);n.setAttribute("numberOfReturns",new h.BufferAttribute(f,1))}if(t.data.pointSourceId){var m=new Uint16Array(t.data.pointSourceId);n.setAttribute("pointSourceID",new h.BufferAttribute(m,1))}n.attributes.indices.normalized=!0;var g=new h.Box3((new h.Vector3).fromArray(t.data.tightBoundingBox.min),(new h.Vector3).fromArray(t.data.tightBoundingBox.max));e.doneLoading(n,g,r,new h.Vector3(...t.data.mean)),u.workerPool.returnWorker(l.EPT_BINARY_DECODER,i)};var n,r={buffer:t,schema:e.ept.schema,scale:e.ept.eptScale,offset:e.ept.eptOffset,mins:(n=e.key.b.min,[n.x,n.y,n.z])};i.postMessage(r,[r.buffer])}}class G{load(e){if(!e.loaded){var t=e.url()+".laz",i=_.createXMLHttpRequest();i.open("GET",t,!0),i.responseType="arraybuffer",i.overrideMimeType("text/plain; charset=x-user-defined"),i.onreadystatechange=()=>{if(4===i.readyState)if(200===i.status){var n=i.response;this.parse(e,n)}else console.log("Failed "+t+": "+i.status)},i.send(null)}}parse(e,t){var i=new D(t),n=new H(e);i.open().then((()=>(i.isOpen=!0,i.getHeader()))).then((t=>{var r=0,o=(t.pointsCount,e=>[e.x,e.y,e.z]),s=o(e.key.b.min),a=o(e.key.b.max),l=()=>i.readData(1e6,0,1).then((function(e){var o=new L(e.buffer,t.pointsFormatId,t.pointsStructSize,e.count,t.scale,t.offset,s,a);return o.extraBytes=t.extraBytes,o.pointsFormatId=t.pointsFormatId,n.push(o),r+=e.count,e.hasMoreData?l():(t.totalRead=r,t.versionAsString=i.versionAsString,t.isCompressed=i.isCompressed,null)}));return l()})).then((()=>i.close())).then((()=>i.isOpen=!1)).catch((e=>{if(console.log("Error reading LAZ:",e),!i.isOpen)throw e;i.close().then((()=>{throw i.isOpen=!1,e}))}))}}class H{constructor(e){this.node=e}push(e){var t=u.workerPool.getWorker(l.EPT_LAS_ZIP_DECODER);t.onmessage=i=>{var n=new h.BufferGeometry,r=e.pointsCount,o=new Float32Array(i.data.position),s=new Uint8Array(i.data.color),a=new Float32Array(i.data.intensity),d=new Uint8Array(i.data.classification),p=new Uint8Array(i.data.returnNumber),c=new Uint8Array(i.data.numberOfReturns),f=new Uint16Array(i.data.pointSourceID),m=new Uint8Array(i.data.indices);n.setAttribute("position",new h.BufferAttribute(o,3)),n.setAttribute("color",new h.BufferAttribute(s,4,!0)),n.setAttribute("intensity",new h.BufferAttribute(a,1)),n.setAttribute("classification",new h.BufferAttribute(d,1)),n.setAttribute("returnNumber",new h.BufferAttribute(p,1)),n.setAttribute("numberOfReturns",new h.BufferAttribute(c,1)),n.setAttribute("pointSourceID",new h.BufferAttribute(f,1)),n.setAttribute("indices",new h.BufferAttribute(m,4)),n.attributes.indices.normalized=!0;var g=new h.Box3((new h.Vector3).fromArray(i.data.tightBoundingBox.min),(new h.Vector3).fromArray(i.data.tightBoundingBox.max));this.node.doneLoading(n,g,r,new h.Vector3(...i.data.mean)),u.workerPool.returnWorker(l.EPT_LAS_ZIP_DECODER,t)};var i={buffer:e.arrayb,numPoints:e.pointsCount,pointSize:e.pointSize,pointFormatID:e.pointsFormatId,scale:e.scale,offset:e.offset,mins:e.mins,maxs:e.maxs};t.postMessage(i,[i.buffer])}}class k{static toVector3(e,t){return(new h.Vector3).fromArray(e,t||0)}static toBox3(e){return new h.Box3(k.toVector3(e),k.toVector3(e,3))}static findDim(e,t){var i=e.find((e=>e.name==t));if(!i)throw new Error("Failed to find "+t+" in schema");return i}static sphereFrom(e){return e.getBoundingSphere(new h.Sphere)}}class W{constructor(e,t){t.version;let i=t.schema,n=t.bounds,r=t.boundsConforming,o=[k.findDim(i,"X"),k.findDim(i,"Y"),k.findDim(i,"Z")],s=o.map((e=>e.scale||1)),a=o.map((e=>e.offset||0));this.eptScale=k.toVector3(s),this.eptOffset=k.toVector3(a),this.url=e,this.info=t,this.type="ept",this.schema=i,this.span=t.span||t.ticks,this.boundingBox=k.toBox3(n),this.tightBoundingBox=k.toBox3(r),this.offset=k.toVector3([0,0,0]),this.boundingSphere=k.sphereFrom(this.boundingBox),this.tightBoundingSphere=k.sphereFrom(this.tightBoundingBox),this.version=new T("1.6"),this.projection=null,this.fallbackProjection=null,t.srs&&t.srs.horizontal&&(this.projection=t.srs.authority+":"+t.srs.horizontal),t.srs.wkt&&(this.projection?this.fallbackProjection=t.srs.wkt:this.projection=t.srs.wkt),this.pointAttributes="LAZ",this.spacing=(this.boundingBox.max.x-this.boundingBox.min.x)/this.span,t.hierarchyType;let l=t.dataType||"laszip";this.loader="binary"==l?new V:new G}}class j{constructor(e,t,i,n,r,o){this.ept=e,this.b=t,this.d=i,this.x=n||0,this.y=r||0,this.z=o||0}name(){return this.d+"-"+this.x+"-"+this.y+"-"+this.z}step(e,t,i){let n=this.b.min.clone(),r=this.b.max.clone(),o=(new h.Vector3).subVectors(r,n);return e?n.x+=o.x/2:r.x-=o.x/2,t?n.y+=o.y/2:r.y-=o.y/2,i?n.z+=o.z/2:r.z-=o.z/2,new j(this.ept,new h.Box3(n,r),this.d+1,2*this.x+e,2*this.y+t,2*this.z+i)}children(){for(var e=[],t=0;t<2;++t)for(var i=0;i<2;++i)for(var n=0;n<2;++n){var r=this.step(t,i,n).name();e.includes(r)||(e=e.concat(r))}return e}}class Y extends x{constructor(e,t,i,n,r,o){super(),this.ept=e,this.key=new j(this.ept,t||this.ept.boundingBox,i||0,n,r,o),this.id=Y.IDCount++,this.geometry=null,this.boundingBox=this.key.b,this.tightBoundingBox=this.boundingBox,this.spacing=this.ept.spacing/Math.pow(2,this.key.d),this.boundingSphere=k.sphereFrom(this.boundingBox),this.hasChildren=!1,this.children={},this.numPoints=-1,this.level=this.key.d,this.loaded=!1,this.loading=!1,this.oneTimeDisposeHandlers=[];let s=this.key;this.name=this.toPotreeName(s.d,s.x,s.y,s.z),this.index=parseInt(this.name.charAt(this.name.length-1))}isGeometryNode(){return!0}getLevel(){return this.level}isTreeNode(){return!1}isLoaded(){return this.loaded}getBoundingSphere(){return this.boundingSphere}getBoundingBox(){return this.boundingBox}url(){return this.ept.url+"ept-data/"+this.filename()}getNumPoints(){return this.numPoints}filename(){return this.key.name()}getChildren(){let e=[];for(let t=0;t<8;t++)this.children[t]&&e.push(this.children[t]);return e}addChild(e){this.children[e.index]=e,e.parent=this}load(){this.loaded||this.loading||u.numNodesLoading>=u.maxNodesLoading||(this.loading=!0,u.numNodesLoading++,-1===this.numPoints&&this.loadHierarchy(),this.loadPoints())}loadPoints(){this.ept.loader.load(this)}async loadHierarchy(){let e={};e[this.filename()]=this,this.hasChildren=!1;let t=`${this.ept.url}ept-hierarchy/${this.filename()}.json`,i=await _.fetch(t),n=await i.json();Object.keys(n).sort(((e,t)=>{let[i,n,r,o]=e.split("-").map((e=>parseInt(e,10))),[s,a,l,u]=t.split("-").map((e=>parseInt(e,10)));return i<s?-1:i>s?1:n<a?-1:n>a?1:r<l?-1:r>l?1:o<u?-1:o>u?1:0})).forEach((t=>{let[i,r,o,s]=t.split("-").map((e=>parseInt(e,10))),a=1&r,l=1&o,u=1&s,h=e[i-1+"-"+(r>>1)+"-"+(o>>1)+"-"+(s>>1)];if(!h)return;h.hasChildren=!0;let d=h.key.step(a,l,u),p=new Y(this.ept,d.b,d.d,d.x,d.y,d.z);p.level=i,p.numPoints=n[t],h.addChild(p),e[d.name()]=p}))}doneLoading(e,t,i,n){e.boundingBox=this.boundingBox,this.geometry=e,this.tightBoundingBox=t,this.numPoints=i,this.mean=n,this.loaded=!0,this.loading=!1,u.numNodesLoading--}toPotreeName(e,t,i,n){for(var r="r",o=0;o<e;++o){var s=1<<e-o-1,a=0;t&s&&(a+=4),i&s&&(a+=2),n&s&&(a+=1),r+=a}return r}dispose(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(let e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}}}Y.IDCount=0;class X{static async load(e,t){var i=await _.fetch(e),n=await i.json(),r=e.substr(0,e.lastIndexOf("ept.json")),o=new W(r,n),s=new Y(o);o.root=s,o.root.load(),t(o)}}class q{static generateDataTexture(e,t,i){for(var n=e*t,r=new Uint8Array(4*e*t),o=Math.floor(255*i.r),s=Math.floor(255*i.g),a=Math.floor(255*i.b),l=0;l<n;l++)r[3*l]=o,r[3*l+1]=s,r[3*l+2]=a;var u=new h.DataTexture(r,e,t,h.RGBAFormat);return u.needsUpdate=!0,u.magFilter=h.NearestFilter,u}static computeTransformedBoundingBox(e,t){var i=[new h.Vector3(e.min.x,e.min.y,e.min.z).applyMatrix4(t),new h.Vector3(e.min.x,e.min.y,e.min.z).applyMatrix4(t),new h.Vector3(e.max.x,e.min.y,e.min.z).applyMatrix4(t),new h.Vector3(e.min.x,e.max.y,e.min.z).applyMatrix4(t),new h.Vector3(e.min.x,e.min.y,e.max.z).applyMatrix4(t),new h.Vector3(e.min.x,e.max.y,e.max.z).applyMatrix4(t),new h.Vector3(e.max.x,e.max.y,e.min.z).applyMatrix4(t),new h.Vector3(e.max.x,e.min.y,e.max.z).applyMatrix4(t),new h.Vector3(e.max.x,e.max.y,e.max.z).applyMatrix4(t)],n=new h.Box3;return n.setFromPoints(i),n}static nodeToPoints(e,t={}){if(!e)return null;performance.mark("nodeToPoints-start");const{count:i}=e.geometryNode.geometry.attributes.indices,n=[];for(let r=0;r<i;r++){const i=this.nodeToPoint(e,r,t);i&&n.push(i)}return performance.measure("nodeToPoints","nodeToPoints-start"),n}static nodeToPoint(e,t=0,i={}){if(!e)return null;performance.mark("nodeToPoint-start");const n=new Map(Object.entries(e.geometryNode.geometry.attributes)),r={};for(const[o,s]of n){let n;switch(o){case"position":{let i=s.array[3*t+0],r=s.array[3*t+1],o=s.array[3*t+2];n=new h.Vector3(i,r,o),n.applyMatrix4(e.sceneNode.matrixWorld);break}case"indices":continue;default:{let e=s.array.slice(s.itemSize*t,s.itemSize*(t+1));if(s.potree){const{scale:t,offset:i}=s.potree;e=e.map((e=>e/t+i))}switch(o){case"color":const t=[...e].map((e=>e/255));n=new Color(...t);break;default:n=1===e.length?e[0]:e}break}}if(i.attributeFilter&&!i.attributeFilter(o,n))return null;r[o]=n}return performance.measure("nodeToPoint","nodeToPoint-start"),r}static intersectionToPoint(e){if(!e)return null;performance.mark("intersectionToPoint-start");const t={geometryNode:{geometry:e.object.geometry},sceneNode:e.object},i=[],{count:n}=e.object.geometry.attributes.indices;for(let e=0;e<n;e++){const n=this.nodeToPoint(t,e);i.push(n)}let r=Number.MAX_VALUE,o=0;return i.forEach(((t,i)=>{const n=e.point.distanceTo(t.position);n<r&&(r=n,o=i)})),performance.measure("intersectionToPoint","intersectionToPoint-start"),i[o]}}var K={RAINBOW:[[0,new h.Color(.278,0,.714)],[1/6,new h.Color(0,0,1)],[2/6,new h.Color(0,1,1)],[.5,new h.Color(0,1,0)],[4/6,new h.Color(1,1,0)],[5/6,new h.Color(1,.64,0)],[1,new h.Color(1,0,0)]],SPECTRAL:[[0,new h.Color(.3686,.3098,.6353)],[.1,new h.Color(.1961,.5333,.7412)],[.2,new h.Color(.4,.7608,.6471)],[.3,new h.Color(.6706,.8667,.6431)],[.4,new h.Color(.902,.9608,.5961)],[.5,new h.Color(1,1,.749)],[.6,new h.Color(.9961,.8784,.5451)],[.7,new h.Color(.9922,.6824,.3804)],[.8,new h.Color(.9569,.4275,.2627)],[.9,new h.Color(.8353,.2431,.3098)],[1,new h.Color(.6196,.0039,.2588)]],PLASMA:[[0,new h.Color(.241,.015,.61)],[.1,new h.Color(.387,.001,.654)],[.2,new h.Color(.524,.025,.653)],[.3,new h.Color(.651,.125,.596)],[.4,new h.Color(.752,.227,.513)],[.5,new h.Color(.837,.329,.431)],[.6,new h.Color(.907,.435,.353)],[.7,new h.Color(.963,.554,.272)],[.8,new h.Color(.992,.681,.195)],[.9,new h.Color(.987,.822,.144)],[1,new h.Color(.94,.975,.131)]],YELLOW_GREEN:[[0,new h.Color(.1647,.2824,.3451)],[.1,new h.Color(.1338,.3555,.4227)],[.2,new h.Color(.061,.4319,.4864)],[.3,new h.Color(0,.5099,.5319)],[.4,new h.Color(0,.5881,.5569)],[.5,new h.Color(.137,.665,.5614)],[.6,new h.Color(.2906,.7395,.5477)],[.7,new h.Color(.4453,.8099,.5201)],[.8,new h.Color(.6102,.8748,.485)],[.9,new h.Color(.7883,.9323,.4514)],[1,new h.Color(.9804,.9804,.4314)]],VIRIDIS:[[0,new h.Color(.267,.005,.329)],[.1,new h.Color(.283,.141,.458)],[.2,new h.Color(.254,.265,.53)],[.3,new h.Color(.207,.372,.553)],[.4,new h.Color(.164,.471,.558)],[.5,new h.Color(.128,.567,.551)],[.6,new h.Color(.135,.659,.518)],[.7,new h.Color(.267,.749,.441)],[.8,new h.Color(.478,.821,.318)],[.9,new h.Color(.741,.873,.15)],[1,new h.Color(.993,.906,.144)]],INFERNO:[[0,new h.Color(.077,.042,.206)],[.1,new h.Color(.225,.036,.388)],[.2,new h.Color(.373,.074,.432)],[.3,new h.Color(.522,.128,.42)],[.4,new h.Color(.665,.182,.37)],[.5,new h.Color(.797,.255,.287)],[.6,new h.Color(.902,.364,.184)],[.7,new h.Color(.969,.516,.063)],[.8,new h.Color(.988,.683,.072)],[.9,new h.Color(.961,.859,.298)],[1,new h.Color(.988,.998,.645)]],GRAYSCALE:[[0,new h.Color(0,0,0)],[1,new h.Color(1,1,1)]]};const Z=e=>e.raw[0];var $={};$.vertex=Z`
precision highp float;
precision highp int;

#define MAX_CLIP_POLYGONS 8

`+h.ShaderChunk.common+"\n"+h.ShaderChunk.logdepthbuf_pars_vertex+Z`

attribute vec3 position;
attribute vec3 color;
attribute float intensity;
attribute float classification;
attribute float returnNumber;
attribute float numberOfReturns;
attribute float pointSourceID;
attribute vec4 indices;
attribute float spacing;

uniform mat4 modelMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 uViewInv;

uniform float uScreenWidth;
uniform float uScreenHeight;
// #define uScreenWidth 1107.0
// #define uScreenHeight 774.0

uniform float fov;
uniform float near;
uniform float far;

uniform bool uDebug;

uniform bool uUseOrthographicCamera;
uniform float uOrthoWidth;
uniform float uOrthoHeight;

#define CLIPTASK_NONE 0
#define CLIPTASK_HIGHLIGHT 1
#define CLIPTASK_SHOW_INSIDE 2
#define CLIPTASK_SHOW_OUTSIDE 3

#define CLIPMETHOD_INSIDE_ANY 0
#define CLIPMETHOD_INSIDE_ALL 1

uniform int clipTask;
uniform int clipMethod;

#if defined(num_clipboxes) && num_clipboxes > 0
	uniform mat4 clipBoxes[num_clipboxes];
#endif

#if defined(num_clipspheres) && num_clipspheres > 0
	uniform mat4 uClipSpheres[num_clipspheres];
#endif

#if defined(num_clippolygons) && num_clippolygons > 0
	uniform int uClipPolygonVCount[num_clippolygons];
	uniform vec3 uClipPolygonVertices[num_clippolygons * 8];
	uniform mat4 uClipPolygonWVP[num_clippolygons];
#endif

uniform float size;
uniform float minSize;
uniform float maxSize;

uniform float uPCIndex;
uniform float uOctreeSpacing;
uniform float uNodeSpacing;
uniform float uOctreeSize;
uniform vec3 uBBSize;
uniform float uLevel;
uniform float uVNStart;
uniform bool uIsLeafNode;

uniform vec3 uColor;
uniform float uOpacity;

uniform vec2 elevationRange;
uniform vec2 intensityRange;
uniform float intensityGamma;
uniform float intensityContrast;
uniform float intensityBrightness;
uniform float rgbGamma;
uniform float rgbContrast;
uniform float rgbBrightness;
uniform float uTransition;
uniform float wRGB;
uniform float wIntensity;
uniform float wElevation;
uniform float wClassification;
uniform float wReturnNumber;
uniform float wSourceID;

uniform vec3 uShadowColor;

uniform sampler2D visibleNodes;
uniform sampler2D gradient;
uniform sampler2D classificationLUT;

#if defined(num_clipplanes) && num_clipplanes > 0 

uniform vec4 clipPlanes[num_clipplanes];

bool isClipped(vec3 point) {
	bool clipped = false;
	for (int i = 0; i < num_clipplanes; ++i) {
		vec4 p = clipPlanes[i];
		clipped = clipped || dot(-point, p.xyz) > p.w;
	}
	return clipped;
}

#else

bool isClipped(vec3 point) {
	return false;
}

#endif

#if defined(num_shadowmaps) && num_shadowmaps > 0
	uniform sampler2D uShadowMap[num_shadowmaps];
	uniform mat4 uShadowWorldView[num_shadowmaps];
	uniform mat4 uShadowProj[num_shadowmaps];
#endif

#if defined num_hiddenclassifications && num_hiddenclassifications > 0
	uniform float hiddenClassifications[num_hiddenclassifications];
#endif

#if defined num_hiddenpointsourceids && num_hiddenpointsourceids > 0
  uniform sampler2D hiddenPointSourceIDs;
#endif

uniform float selectedPointSourceID;
uniform vec3 selectedPointSourceIDColor;

varying vec3 vColor;
varying float vLogDepth;
varying vec3 vViewPosition;
varying float vRadius;
varying float vPointSize;

float round(float number)
{
	return floor(number + 0.5);
}

//---------------------
//OCTREE
//---------------------

#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_octree)

	/**
	 * number of 1-bits up to inclusive index position
	 * number is treated as if it were an integer in the range 0-255
	 */
	int numberOfOnes(int number, int index)
	{
		int numOnes = 0;
		int tmp = 128;

		for(int i = 7; i >= 0; i--)
		{
			if(number >= tmp)
			{
				number = number - tmp;

				if(i <= index)
				{
					numOnes++;
				}
			}

			tmp = tmp / 2;
		}

		return numOnes;
	}

	/**
	 * checks whether the bit at index is 1
	 * number is treated as if it were an integer in the range 0-255
	 */
	bool isBitSet(int number, int index)
	{
		//weird multi else if due to lack of proper array, int and bitwise support in WebGL 1.0
		int powi = 1;

		if(index == 0)
		{
			powi = 1;
		}
		else if(index == 1)
		{
			powi = 2;
		}
		else if(index == 2)
		{
			powi = 4;
		}
		else if(index == 3)
		{
			powi = 8;
		}
		else if(index == 4)
		{
			powi = 16;
		}
		else if(index == 5)
		{
			powi = 32;
		}
		else if(index == 6)
		{
			powi = 64;
		}
		else if(index == 7)
		{
			powi = 128;
		}
		else
		{
			return false;
		}

		int ndp = number / powi;

		return mod(float(ndp), 2.0) != 0.0;
	}

	/**
	 * find the LOD at the point position
	 */
	float getLOD()
	{
		vec3 offset = vec3(0.0, 0.0, 0.0);
		int iOffset = int(uVNStart);
		float depth = uLevel;

		for(float i = 0.0; i <= 30.0; i++)
		{
			float nodeSizeAtLevel = uOctreeSize / pow(2.0, i + uLevel + 0.0);

			vec3 index3d = (position-offset) / nodeSizeAtLevel;
			index3d = floor(index3d + 0.5);
			int index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));

			vec4 value = texture2D(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));
			int mask = int(round(value.r * 255.0));

			if(isBitSet(mask, index))
			{
				//there are more visible child nodes at this position
				int advanceG = int(round(value.g * 255.0)) * 256;
				int advanceB = int(round(value.b * 255.0));
				int advanceChild = numberOfOnes(mask, index - 1);
				int advance = advanceG + advanceB + advanceChild;

				iOffset = iOffset + advance;

				depth++;
			}
			else
			{
				//no more visible child nodes at this position
				return value.a * 255.0;
				//return depth;
			}

			offset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;
		}

		return depth;
	}

	float getSpacing()
	{
		vec3 offset = vec3(0.0, 0.0, 0.0);
		int iOffset = int(uVNStart);
		float depth = uLevel;
		float spacing = uNodeSpacing;

		for(float i = 0.0; i <= 30.0; i++)
		{
			float nodeSizeAtLevel = uOctreeSize / pow(2.0, i + uLevel + 0.0);

			vec3 index3d = (position-offset) / nodeSizeAtLevel;
			index3d = floor(index3d + 0.5);
			int index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));

			vec4 value = texture2D(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));
			int mask = int(round(value.r * 255.0));
			float spacingFactor = value.a;

			if(i > 0.0)
			{
				spacing = spacing / (255.0 * spacingFactor);
			}

			if(isBitSet(mask, index))
			{
				//there are more visible child nodes at this position
				int advanceG = int(round(value.g * 255.0)) * 256;
				int advanceB = int(round(value.b * 255.0));
				int advanceChild = numberOfOnes(mask, index - 1);
				int advance = advanceG + advanceB + advanceChild;

				iOffset = iOffset + advance;

				depth++;
			}
			else
			{
				//no more visible child nodes at this position
				return spacing;
			}

			offset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;
		}

		return spacing;
	}

	float getPointSizeAttenuation()
	{
		return pow(2.0, getLOD());
	}
#endif

//---------------------
//KD-TREE
//---------------------
#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_kdtree)
	float getLOD()
	{
		vec3 offset = vec3(0.0, 0.0, 0.0);
		float iOffset = 0.0;
		float depth = 0.0;

		vec3 size = uBBSize;
		vec3 pos = position;

		for(float i = 0.0; i <= 1000.0; i++)
		{
			vec4 value = texture2D(visibleNodes, vec2(iOffset / 2048.0, 0.0));

			int children = int(value.r * 255.0);
			float next = value.g * 255.0;
			int split = int(value.b * 255.0);

			if(next == 0.0)
			{
			 	return depth;
			}

			vec3 splitv = vec3(0.0, 0.0, 0.0);
			if(split == 1)
			{
				splitv.x = 1.0;
			}
			else if(split == 2)
			{
			 	splitv.y = 1.0;
			}
			else if(split == 4)
			{
			 	splitv.z = 1.0;
			}

			iOffset = iOffset + next;

			float factor = length(pos * splitv / size);

			//Left
			if(factor < 0.5)
			{
				if(children == 0 || children == 2)
				{
					return depth;
				}
			}
			//Right
			else
			{
				pos = pos - size * splitv * 0.5;
				if(children == 0 || children == 1)
				{
					return depth;
				}
				if(children == 3)
				{
					iOffset = iOffset + 1.0;
				}
			}

			size = size * ((1.0 - (splitv + 1.0) / 2.0) + 0.5);
			depth++;
		}

		return depth;
	}

	float getPointSizeAttenuation()
	{
		return 0.5 * pow(1.3, getLOD());
	}
#endif

//formula adapted from: http://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-5-contrast-adjustment/
float getContrastFactor(float contrast)
{
	return (1.0158730158730156 * (contrast + 1.0)) / (1.0158730158730156 - contrast);
}

vec3 getRGB()
{
	vec3 rgb = color;

	rgb = pow(rgb, vec3(rgbGamma));
	rgb = rgb + rgbBrightness;
	rgb = clamp(rgb, 0.0, 1.0);

	return rgb;
}

float getIntensity()
{
	float w = (intensity - intensityRange.x) / (intensityRange.y - intensityRange.x);
	w = pow(w, intensityGamma);
	w = w + intensityBrightness;
	w = (w - 0.5) * getContrastFactor(intensityContrast) + 0.5;
	w = clamp(w, 0.0, 1.0);

	return w;
}

vec3 getElevation()
{
	vec4 world = modelMatrix * vec4( position, 1.0 );
	float w = (world.z - elevationRange.x) / (elevationRange.y - elevationRange.x);
	return texture2D(gradient, vec2(w,1.0-w)).rgb;
}

vec4 getClassification()
{
	vec2 uv = vec2(classification / 255.0, 0.5);
	return texture2D(classificationLUT, uv);
}

vec3 getReturnNumber()
{
	if(numberOfReturns == 1.0)
	{
		return vec3(1.0, 1.0, 0.0);
	}
	else
	{
		if(returnNumber == 1.0)
		{
			return vec3(1.0, 0.0, 0.0);
		}
		else if(returnNumber == numberOfReturns)
		{
			return vec3(0.0, 0.0, 1.0);
		}
		else
		{
			return vec3(0.0, 1.0, 0.0);
		}
	}
}

vec3 getSourceID()
{
	float w = mod(pointSourceID, 10.0) / 10.0;
	return texture2D(gradient, vec2(w,1.0 - w)).rgb;
}

vec3 getCompositeColor()
{
	vec3 c;
	float w;

	c += wRGB * getRGB();
	w += wRGB;

	c += wIntensity * getIntensity() * vec3(1.0, 1.0, 1.0);
	w += wIntensity;

	c += wElevation * getElevation();
	w += wElevation;

	c += wReturnNumber * getReturnNumber();
	w += wReturnNumber;

	c += wSourceID * getSourceID();
	w += wSourceID;

	vec4 cl = wClassification * getClassification();
  c += cl.a * cl.rgb;
	w += wClassification * cl.a;

	c = c / w;

	if(w == 0.0)
	{
		gl_Position = vec4(100.0, 100.0, 100.0, 0.0);
	}

	return c;
}

vec3 getColor()
{
	vec3 color;

	#ifdef selection_type_color
	if (pointSourceID == selectedPointSourceID)
	{
		return selectedPointSourceIDColor;
	}
	#endif

	#ifdef color_type_rgb
		color = getRGB();
	#elif defined color_type_height
		color = getElevation();
	#elif defined color_type_rgb_height
		vec3 cHeight = getElevation();
		color = (1.0 - uTransition) * getRGB() + uTransition * cHeight;
	#elif defined color_type_depth
		float linearDepth = gl_Position.w;
		float expDepth = (gl_Position.z / gl_Position.w) * 0.5 + 0.5;
		color = vec3(linearDepth, expDepth, 0.0);
	#elif defined color_type_intensity
		float w = getIntensity();
		color = vec3(w, w, w);
	#elif defined color_type_intensity_gradient
		float w = getIntensity();
		color = texture2D(gradient, vec2(w,1.0-w)).rgb;
	#elif defined color_type_color
		color = uColor;
	#elif defined color_type_lod
		float depth = getLOD();
		float w = depth / 10.0;
		color = texture2D(gradient, vec2(w,1.0-w)).rgb;
	#elif defined color_type_point_index
		color = indices.rgb;
	#elif defined color_type_classification
		vec4 cl = getClassification();
		color = cl.rgb;
	#elif defined color_type_return_number
		color = getReturnNumber();
	#elif defined color_type_source
		color = getSourceID();
	#elif defined color_type_normal
		color = (modelMatrix * vec4(normal, 0.0)).xyz;
	#elif defined color_type_phong
		color = color;
	#elif defined color_type_composite
		color = getCompositeColor();
	#endif

	if (pointSourceID == selectedPointSourceID)
	{
		color[0] = min(color[0] + 0.2, 1.0);
		color[1] = min(color[1] + 0.2, 1.0);
		color[2] = min(color[2] + 0.2, 1.0);
	}

	return color;
}

float getPointSize()
{
	float pointSize = 1.0;

	float slope = tan(fov / 2.0);
	float projFactor = -0.5 * uScreenHeight / (slope * vViewPosition.z);

	float r = uOctreeSpacing * 1.7;
	vRadius = r;

	#if defined fixed_point_size
		pointSize = size;
	#elif defined attenuated_point_size
		if(uUseOrthographicCamera)
		{
			pointSize = size;
		}
		else
		{
			pointSize = size * spacing * projFactor;
		}
	#elif defined adaptive_point_size
		if(uUseOrthographicCamera)
		{
			float worldSpaceSize = 1.0 * size * r / getPointSizeAttenuation();
			pointSize = (worldSpaceSize / uOrthoWidth) * uScreenWidth;
		}
		else
		{
			if(uIsLeafNode && false)
			{
				pointSize = size * spacing * projFactor;
			}
			else
			{
				float worldSpaceSize = 1.0 * size * r / getPointSizeAttenuation();
				pointSize = worldSpaceSize * projFactor;
			}
		}
	#endif

	pointSize = max(minSize, pointSize);
	pointSize = min(maxSize, pointSize);

	vRadius = pointSize / projFactor;

	return pointSize;
}

#if defined num_clippolygons && num_clippolygons > 0
	bool pointInClipPolygon(vec3 point, int polyIdx)
	{
		mat4 wvp = uClipPolygonWVP[polyIdx];

		vec4 pointNDC = wvp * vec4(point, 1.0);
		pointNDC.xy = pointNDC.xy / pointNDC.w;

		int j = uClipPolygonVCount[polyIdx] - 1;
		bool c = false;
		for(int i = 0; i < 8; i++)
		{
			if(i == uClipPolygonVCount[polyIdx])
			{
				break;
			}

			vec3 verti = uClipPolygonVertices[polyIdx * 8 + i];
			vec3 vertj = uClipPolygonVertices[polyIdx * 8 + j];

			if(((verti.y > pointNDC.y) != (vertj.y > pointNDC.y)) && (pointNDC.x < (vertj.x-verti.x) * (pointNDC.y-verti.y) / (vertj.y-verti.y) + verti.x))
			{
				c = !c;
			}

			j = i;
		}

		return c;
	}
#endif

void doClipping()
{
	#if !defined color_type_composite
		vec4 cl = getClassification();
		if(cl.a == 0.0)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 0.0);

			return;
		}
	#endif

	int clipVolumesCount = 0;
	int insideCount = 0;

	#if defined(num_clipboxes) && num_clipboxes > 0
		for(int i = 0; i < num_clipboxes; i++)
		{
			vec4 clipPosition = clipBoxes[i] * modelMatrix * vec4( position, 1.0 );
			bool inside = -0.5 <= clipPosition.x && clipPosition.x <= 0.5;
			inside = inside && -0.5 <= clipPosition.y && clipPosition.y <= 0.5;
			inside = inside && -0.5 <= clipPosition.z && clipPosition.z <= 0.5;

			insideCount = insideCount + (inside ? 1 : 0);
			clipVolumesCount++;
		}
	#endif

	#if defined(num_clippolygons) && num_clippolygons > 0
		for(int i = 0; i < num_clippolygons; i++)
		{
			bool inside = pointInClipPolygon(position, i);

			insideCount = insideCount + (inside ? 1 : 0);
			clipVolumesCount++;
		}
	#endif

	bool insideAny = insideCount > 0;
	bool insideAll = (clipVolumesCount > 0) && (clipVolumesCount == insideCount);

	if(clipMethod == CLIPMETHOD_INSIDE_ANY)
	{
		if(insideAny && clipTask == CLIPTASK_HIGHLIGHT)
		{
			vColor.r += 0.5;
		}
		else if(!insideAny && clipTask == CLIPTASK_SHOW_INSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
		else if(insideAny && clipTask == CLIPTASK_SHOW_OUTSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
	}
	else if(clipMethod == CLIPMETHOD_INSIDE_ALL)
	{
		if(insideAll && clipTask == CLIPTASK_HIGHLIGHT)
		{
			vColor.r += 0.5;
		}
		else if(!insideAll && clipTask == CLIPTASK_SHOW_INSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
		else if(insideAll && clipTask == CLIPTASK_SHOW_OUTSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
	}
}

bool isHiddenClassification()
{
	#if defined num_hiddenclassifications && num_hiddenclassifications > 0
	for (int i = 0; i < num_hiddenclassifications; i++)
	{
		if (classification == hiddenClassifications[i])
		{
			return true;
		}
	}
	#endif

	return false;
}

bool isHiddenPointSourceID()
{
	#if defined num_hiddenpointsourceids && num_hiddenpointsourceids > 0
	float x = mod(pointSourceID, 256.0);
	float y = floor(pointSourceID / 256.0);
	vec2 xy = vec2(x / 255.0, y / 255.0);
	float r = texture2D(hiddenPointSourceIDs, xy).r;

	return r == 1.0;
	#endif

	return false;
}

void main()
{
	if (isHiddenClassification() || isHiddenPointSourceID())
	{
		return; // Note: 'discard' only supported in fragment shaders
	}

	vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
	vViewPosition = mvPosition.xyz;
	gl_Position = projectionMatrix * mvPosition;

	vLogDepth = log2(-mvPosition.z);

	//POINT SIZE
	float pointSize = getPointSize();
	gl_PointSize = pointSize;
	vPointSize = pointSize;
	`+h.ShaderChunk.logdepthbuf_vertex+Z`

	//COLOR
	vColor = getColor();

	#if defined hq_depth_pass
		float originalDepth = gl_Position.w;
		float adjustedDepth = originalDepth + 2.0 * vRadius;
		float adjust = adjustedDepth / originalDepth;

		mvPosition.xyz = mvPosition.xyz * adjust;
		gl_Position = projectionMatrix * mvPosition;
	#endif

	//CLIPPING
	vec4 clipPosition = modelMatrix * vec4( position, 1.0 );
	if (isClipped(clipPosition.xyz)) {
		gl_Position = vec4(100.0, 100.0, 100.0, 1.0); // Outside clip space
	} 
	doClipping();

	#if defined num_clipspheres && num_clipspheres > 0
		for(int i = 0; i < num_clipspheres; i++)
		{
			vec4 sphereLocal = uClipSpheres[i] * mvPosition;

			float distance = length(sphereLocal.xyz);

			if(distance < 1.0)
			{
				float w = distance;
				vec3 cGradient = texture2D(gradient, vec2(w, 1.0 - w)).rgb;

				vColor = cGradient;
			}
		}
	#endif

	#if defined num_shadowmaps && num_shadowmaps > 0

		const float sm_near = 0.1;
		const float sm_far = 10000.0;

		for(int i = 0; i < num_shadowmaps; i++)
		{
			vec3 viewPos = (uShadowWorldView[i] * vec4(position, 1.0)).xyz;
			float distanceToLight = abs(viewPos.z);

			vec4 projPos = uShadowProj[i] * uShadowWorldView[i] * vec4(position, 1);
			vec3 nc = projPos.xyz / projPos.w;

			float u = nc.x * 0.5 + 0.5;
			float v = nc.y * 0.5 + 0.5;

			vec2 sampleStep = vec2(1.0 / (2.0*1024.0), 1.0 / (2.0*1024.0)) * 1.5;
			vec2 sampleLocations[9];

			sampleLocations[0] = vec2(0.0, 0.0);
			sampleLocations[1] = sampleStep;
			sampleLocations[2] = -sampleStep;
			sampleLocations[3] = vec2(sampleStep.x, -sampleStep.y);
			sampleLocations[4] = vec2(-sampleStep.x, sampleStep.y);
			sampleLocations[5] = vec2(0.0, sampleStep.y);
			sampleLocations[6] = vec2(0.0, -sampleStep.y);
			sampleLocations[7] = vec2(sampleStep.x, 0.0);
			sampleLocations[8] = vec2(-sampleStep.x, 0.0);

			float visibleSamples = 0.0;
			float numSamples = 0.0;

			float bias = vRadius * 2.0;

			for(int j = 0; j < 9; j++)
			{
				vec4 depthMapValue = texture2D(uShadowMap[i], vec2(u, v) + sampleLocations[j]);

				float linearDepthFromSM = depthMapValue.x + bias;
				float linearDepthFromViewer = distanceToLight;

				if(linearDepthFromSM > linearDepthFromViewer)
				{
					visibleSamples += 1.0;
				}

				numSamples += 1.0;
			}

			float visibility = visibleSamples / numSamples;

			if(u < 0.0 || u > 1.0 || v < 0.0 || v > 1.0 || nc.x < -1.0 || nc.x > 1.0 || nc.y < -1.0 || nc.y > 1.0 || nc.z < -1.0 || nc.z > 1.0)
			{
				//vColor = vec3(0.0, 0.0, 0.2);
			}
			else
			{
				vColor = vColor * visibility + vColor * uShadowColor * (1.0 - visibility);
			}
		}

	#endif
}`,$.fragment=Z`

#if defined USE_LOGDEPTHBUF_EXT || defined paraboloid_point_shape
	#extension GL_EXT_frag_depth : enable
#endif

precision highp float;
precision highp int;

`+h.ShaderChunk.common+"\n"+h.ShaderChunk.logdepthbuf_pars_fragment+Z`

uniform mat4 viewMatrix;
uniform mat4 uViewInv;
uniform mat4 uProjInv;
uniform vec3 cameraPosition;

uniform mat4 projectionMatrix;
uniform float uOpacity;

uniform float blendHardness;
uniform float blendDepthSupplement;
uniform float fov;
uniform float uSpacing;
uniform float near;
uniform float far;
uniform float uPCIndex;
uniform float uScreenWidth;
uniform float uScreenHeight;

varying vec3 vColor;
varying float vLogDepth;
varying vec3 vViewPosition;
varying float vRadius;
varying float vPointSize;
varying vec3 vPosition;

void main()
{
	vec3 color = vColor;
	float depth = gl_FragCoord.z;

	#if defined circle_point_shape || defined paraboloid_point_shape
		float u = (2.0 * gl_PointCoord.x) - 1.0;
		float v = (2.0 * gl_PointCoord.y) - 1.0;
	#endif

	#if defined circle_point_shape
		float cc = (u*u) + (v*v);
		if(cc > 1.0)
		{
			discard;
		}
	#endif

	#if defined color_type_point_index
		gl_FragColor = vec4(color, uPCIndex / 255.0);
	#else
		gl_FragColor = vec4(color, uOpacity);
	#endif

	#if defined paraboloid_point_shape
		float wi = -( u*u + v*v);
		vec4 pos = vec4(vViewPosition, 1.0);
		pos.z += wi * vRadius;
		float linearDepth = -pos.z;
		pos = projectionMatrix * pos;
		pos = pos / pos.w;
		float expDepth = pos.z;
		depth = (pos.z + 1.0) / 2.0;

		gl_FragDepthEXT = depth;

		#if defined color_type_depth
			color.r = linearDepth;
			color.g = expDepth;
		#endif
	#endif

	`+h.ShaderChunk.logdepthbuf_fragment+Z`

	#if defined weighted_splats
		float distance = 2.0 * length(gl_PointCoord.xy - 0.5);
		float weight = max(0.0, 1.0 - distance);
		weight = pow(weight, 1.5);

		gl_FragColor.a = weight;
		gl_FragColor.xyz = gl_FragColor.xyz * weight;
	#endif
}`;class Q extends h.RawShaderMaterial{constructor(e={}){super(),this.visibleNodesTexture=q.generateDataTexture(2048,1,new h.Color(16777215)),this.visibleNodesTexture.minFilter=h.NearestFilter,this.visibleNodesTexture.magFilter=h.NearestFilter;var t=function(e,t){return void 0!==e?e:t},i=t(e.size,1),n=t(e.minSize,2),r=t(e.maxSize,50),o=t(e.treeType,ce.OCTREE);this._pointSizeType=he.FIXED,this._shape=de.SQUARE,this._pointColorType=pe.RGB,this._useClipBox=!1,this._weighted=!1,this._gradient=K.SPECTRAL,this._treeType=o,this._useEDL=!1,this._snapEnabled=!1,this._numSnapshots=0,this._defaultIntensityRangeChanged=!1,this._defaultElevationRangeChanged=!1,this._pointSelectionType=fe.BRIGHTNESS,this.clipBoxes=[],this.clipPolygons=[],this.gradientTexture=Q.generateGradientTexture(this._gradient),this.lights=!1,this.fog=!1,this.defines=new Map,this.attributes={position:{type:"fv",value:[]},color:{type:"fv",value:[]},normal:{type:"fv",value:[]},intensity:{type:"f",value:[]},classification:{type:"f",value:[]},returnNumber:{type:"f",value:[]},numberOfReturns:{type:"f",value:[]},pointSourceID:{type:"f",value:[]},indices:{type:"fv",value:[]}},this.uniforms={level:{type:"f",value:0},vnStart:{type:"f",value:0},spacing:{type:"f",value:1},blendHardness:{type:"f",value:2},blendDepthSupplement:{type:"f",value:0},fov:{type:"f",value:1},screenWidth:{type:"f",value:1},screenHeight:{type:"f",value:1},near:{type:"f",value:.1},far:{type:"f",value:1},uColor:{type:"c",value:new h.Color(16777215)},uOpacity:{type:"f",value:1},size:{type:"f",value:i},minSize:{type:"f",value:n},maxSize:{type:"f",value:r},octreeSize:{type:"f",value:0},bbSize:{type:"fv",value:[0,0,0]},elevationRange:{type:"2fv",value:[0,0]},clipBoxCount:{type:"f",value:0},clipPolygonCount:{type:"i",value:0},clipBoxes:{type:"Matrix4fv",value:[]},clipPolygons:{type:"3fv",value:[]},clipPolygonVCount:{type:"iv",value:[]},clipPolygonVP:{type:"Matrix4fv",value:[]},visibleNodes:{type:"t",value:this.visibleNodesTexture},pcIndex:{type:"f",value:0},gradient:{type:"t",value:this.gradientTexture},classificationLUT:{type:"t",value:this.classificationTexture},uHQDepthMap:{type:"t",value:null},toModel:{type:"Matrix4f",value:[]},diffuse:{type:"fv",value:[1,1,1]},transition:{type:"f",value:.5},intensityRange:{type:"fv",value:[0,65e3]},intensityGamma:{type:"f",value:1},intensityContrast:{type:"f",value:0},intensityBrightness:{type:"f",value:0},rgbGamma:{type:"f",value:1},rgbContrast:{type:"f",value:0},rgbBrightness:{type:"f",value:0},wRGB:{type:"f",value:.5},wIntensity:{type:"f",value:0},wElevation:{type:"f",value:0},wClassification:{type:"f",value:0},wReturnNumber:{type:"f",value:0},wSourceID:{type:"f",value:0},useOrthographicCamera:{type:"b",value:!1},clipTask:{type:"i",value:1},clipMethod:{type:"i",value:1},uSnapshot:{type:"tv",value:[]},uSnapshotDepth:{type:"tv",value:[]},uSnapView:{type:"Matrix4fv",value:[]},uSnapProj:{type:"Matrix4fv",value:[]},uSnapProjInv:{type:"Matrix4fv",value:[]},uSnapViewInv:{type:"Matrix4fv",value:[]},uShadowColor:{type:"3fv",value:[0,0,0]},uFilterReturnNumberRange:{type:"fv",value:[0,7]},uFilterNumberOfReturnsRange:{type:"fv",value:[0,7]},uFilterGPSTimeClipRange:{type:"fv",value:[0,7]},hiddenClassifications:{type:"fv",value:[]},hiddenPointSourceIDs:{type:"t",value:null},selectedPointSourceID:{type:"f",value:-1},selectedPointSourceIDColor:{type:"3fv",value:new h.Color(.1,.61,.78)}},this.hiddenPointSourceIDs=[],this.classification=ae.DEFAULT,this.defaultAttributeValues.normal=[0,0,0],this.defaultAttributeValues.classification=[0,0,0],this.defaultAttributeValues.indices=[0,0,0,0];var s=this.getDefines();this.vertexShader=s+$.vertex,this.fragmentShader=s+$.fragment,this.vertexColors=h.VertexColors}setDefine(e,t){null!=t?this.defines.get(e)!==t&&(this.defines.set(e,t),this.updateShaderSource()):this.removeDefine(e)}removeDefine(e){this.defines.delete(e)}updateShaderSource(){var e=this.getDefines();this.vertexShader=e+$.vertex,this.fragmentShader=e+$.fragment,1===this.opacity?(this.blending=h.NoBlending,this.transparent=!1,this.depthTest=!0,this.depthWrite=!0,this.depthFunc=h.LessEqualDepth):this.opacity<1&&!this.useEDL&&(this.blending=h.AdditiveBlending,this.transparent=!0,this.depthTest=!1,this.depthWrite=!0,this.depthFunc=h.AlwaysDepth),this.weighted&&(this.blending=h.AdditiveBlending,this.transparent=!0,this.depthTest=!0,this.depthWrite=!1),this.needsUpdate=!0}onBeforeCompile(e,t){if(t.capabilities.logarithmicDepthBuffer){var i="#define USE_LOGDEPTHBUF\n#define USE_LOGDEPTHBUF_EXT\n#define EPSILON 1e-6\n";e.fragmentShader=i+e.fragmentShader,e.vertexShader=i+e.vertexShader}}getDefines(){var e=[];for(var[t,i]of(this.pointSizeType===he.FIXED?e.push("#define fixed_point_size"):this.pointSizeType===he.ATTENUATED?e.push("#define attenuated_point_size"):this.pointSizeType===he.ADAPTIVE&&e.push("#define adaptive_point_size"),this.shape===de.SQUARE?e.push("#define square_point_shape"):this.shape===de.CIRCLE?e.push("#define circle_point_shape"):this.shape===de.PARABOLOID&&e.push("#define paraboloid_point_shape"),this._useEDL&&e.push("#define use_edl"),this._snapEnabled&&e.push("#define snap_enabled"),this._pointColorType===pe.RGB?e.push("#define color_type_rgb"):this._pointColorType===pe.COLOR?e.push("#define color_type_color"):this._pointColorType===pe.DEPTH?e.push("#define color_type_depth"):this._pointColorType===pe.HEIGHT?e.push("#define color_type_height"):this._pointColorType===pe.INTENSITY?e.push("#define color_type_intensity"):this._pointColorType===pe.INTENSITY_GRADIENT?e.push("#define color_type_intensity_gradient"):this._pointColorType===pe.LOD?e.push("#define color_type_lod"):this._pointColorType===pe.POINT_INDEX?e.push("#define color_type_point_index"):this._pointColorType===pe.CLASSIFICATION?e.push("#define color_type_classification"):this._pointColorType===pe.RETURN_NUMBER?e.push("#define color_type_return_number"):this._pointColorType===pe.SOURCE?e.push("#define color_type_source"):this._pointColorType===pe.NORMAL?e.push("#define color_type_normal"):this._pointColorType===pe.PHONG?e.push("#define color_type_phong"):this._pointColorType===pe.RGB_HEIGHT?e.push("#define color_type_rgb_height"):this._pointColorType===pe.COMPOSITE&&e.push("#define color_type_composite"),this._treeType===ce.OCTREE?e.push("#define tree_type_octree"):this._treeType===ce.KDTREE&&e.push("#define tree_type_kdtree"),this.weighted&&e.push("#define weighted_splats"),this.hiddenClassifications.length&&e.push(`#define num_hiddenclassifications ${this.hiddenClassifications.length}`),this.hiddenPointSourceIDs.length&&e.push(`#define num_hiddenpointsourceids ${this.hiddenPointSourceIDs.length}`),this.pointSelectionType===fe.COLOR&&e.push("#define selection_type_color"),this.defines))e.push(i);return e.join("\n")}setClipBoxes(e){if(e){var t=this.clipBoxes.length!==e.length&&(0===e.length||0===this.clipBoxes.length);this.uniforms.clipBoxCount.value=this.clipBoxes.length,this.clipBoxes=e,t&&this.updateShaderSource(),this.uniforms.clipBoxes.value=new Float32Array(16*this.clipBoxes.length);for(var i=0;i<this.clipBoxes.length;i++){var n=e[i];this.uniforms.clipBoxes.value.set(n.inverse.elements,16*i)}for(i=0;i<this.uniforms.clipBoxes.value.length;i++)Number.isNaN(this.uniforms.clipBoxes.value[i])&&(this.uniforms.clipBoxes.value[i]=1/0)}}setClipPolygons(e,t){e&&(this.clipPolygons=e,this.clipPolygons.length!==e.length&&this.updateShaderSource())}get gradient(){return this._gradient}set gradient(e){this._gradient!==e&&(this._gradient=e,this.gradientTexture=Q.generateGradientTexture(this._gradient),this.uniforms.gradient.value=this.gradientTexture)}get useOrthographicCamera(){return this.uniforms.useOrthographicCamera.value}set useOrthographicCamera(e){this.uniforms.useOrthographicCamera.value!==e&&(this.uniforms.useOrthographicCamera.value=e)}get classification(){return this._classification}set classification(e){var t={};for(var i of Object.keys(e))t[i]=e[i].clone();var n=!1;if(void 0===this._classification)n=!1;else for(var i of(n=Object.keys(t).length===Object.keys(this._classification).length,Object.keys(t)))n=(n=n&&void 0!==this._classification[i])&&t[i].equals(this._classification[i]);n||(this._classification=t,this.recomputeClassification())}recomputeClassification(){this.classificationTexture=Q.generateClassificationTexture(this._classification),this.uniforms.classificationLUT.value=this.classificationTexture,this.dispatchEvent({type:"material_property_changed",target:this})}get hiddenClassifications(){return this.uniforms.hiddenClassifications.value}set hiddenClassifications(e){e=this.getDistinctFV(e),JSON.stringify(e)!==JSON.stringify(this.uniforms.hiddenClassifications.value)&&(this.uniforms.hiddenClassifications.value=e,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this}))}get hiddenPointSourceIDsTexture(){return this.uniforms.hiddenPointSourceIDs.value}get hiddenPointSourceIDs(){return this._hiddenPointSourceIDs}set hiddenPointSourceIDs(e){e=this.getDistinctFV(e),JSON.stringify(e)!==JSON.stringify(this._hiddenPointSourceIDs)&&(this._hiddenPointSourceIDs=e,this.recomputeHiddenPointSourceIDs())}getDistinctFV(e){return[...new Set(e)].sort()}recomputeHiddenPointSourceIDs(){const e=this.hiddenPointSourceIDs,t=new Uint8Array(196608);e.forEach((e=>{t[3*e]=255}));const i=new h.DataTexture(t,256,256,h.RGBFormat);i.magFilter=h.NearestFilter,i.needsUpdate=!0,this.uniforms.hiddenPointSourceIDs.value=i,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this})}get selectedPointSourceID(){return this.uniforms.selectedPointSourceID.value}set selectedPointSourceID(e){e!==this.uniforms.selectedPointSourceID.value&&(this.uniforms.selectedPointSourceID.value=e||-1,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this}))}get selectedPointSourceIDColor(){return this.uniforms.selectedPointSourceIDColor.value}set selectedPointSourceIDColor(e){e!==this.uniforms.selectedPointSourceIDColor.value&&(this.uniforms.selectedPointSourceIDColor.value=e,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this}))}get numSnapshots(){return this._numSnapshots}set numSnapshots(e){this._numSnapshots=e}get snapEnabled(){return this._snapEnabled}set snapEnabled(e){this._snapEnabled!==e&&(this._snapEnabled=e,this.updateShaderSource())}get spacing(){return this.uniforms.spacing.value}set spacing(e){this.uniforms.spacing.value!==e&&(this.uniforms.spacing.value=e)}get useClipBox(){return this._useClipBox}set useClipBox(e){this._useClipBox!==e&&(this._useClipBox=e,this.updateShaderSource())}get clipTask(){return this.uniforms.clipTask.value}set clipTask(e){this.uniforms.clipTask.value=e}get clipMethod(){return this.uniforms.clipMethod.value}set clipMethod(e){this.uniforms.clipMethod.value=e}get weighted(){return this._weighted}set weighted(e){this._weighted!==e&&(this._weighted=e,this.updateShaderSource())}get fov(){return this.uniforms.fov.value}set fov(e){this.uniforms.fov.value!==e&&(this.uniforms.fov.value=e,this.updateShaderSource())}get screenWidth(){return this.uniforms.screenWidth.value}set screenWidth(e){this.uniforms.screenWidth.value!==e&&(this.uniforms.screenWidth.value=e,this.updateShaderSource())}get screenHeight(){return this.uniforms.screenHeight.value}set screenHeight(e){this.uniforms.screenHeight.value!==e&&(this.uniforms.screenHeight.value=e,this.updateShaderSource())}get near(){return this.uniforms.near.value}set near(e){this.uniforms.near.value!==e&&(this.uniforms.near.value=e)}get far(){return this.uniforms.far.value}set far(e){this.uniforms.far.value!==e&&(this.uniforms.far.value=e)}get opacity(){return this.uniforms.uOpacity.value}set opacity(e){this.uniforms&&this.uniforms.uOpacity&&this.uniforms.uOpacity.value!==e&&(this.uniforms.uOpacity.value=e,this.updateShaderSource(),this.dispatchEvent({type:"opacity_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get pointColorType(){return this._pointColorType}set pointColorType(e){this._pointColorType!==e&&(this._pointColorType=e,this.updateShaderSource(),this.dispatchEvent({type:"point_color_type_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get pointSizeType(){return this._pointSizeType}set pointSizeType(e){this._pointSizeType!==e&&(this._pointSizeType=e,this.updateShaderSource(),this.dispatchEvent({type:"point_size_type_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get useEDL(){return this._useEDL}set useEDL(e){this._useEDL!==e&&(this._useEDL=e,this.updateShaderSource())}get color(){return this.uniforms.uColor.value}set color(e){this.uniforms.uColor.value.equals(e)||(this.uniforms.uColor.value.copy(e),this.dispatchEvent({type:"color_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get shape(){return this._shape}set shape(e){this._shape!==e&&(this._shape=e,this.updateShaderSource(),this.dispatchEvent({type:"point_shape_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get treeType(){return this._treeType}set treeType(e){this._treeType!==e&&(this._treeType=e,this.updateShaderSource())}get bbSize(){return this.uniforms.bbSize.value}set bbSize(e){this.uniforms.bbSize.value=e}get size(){return this.uniforms.size.value}set size(e){this.uniforms.size.value!==e&&(this.uniforms.size.value=e,this.dispatchEvent({type:"point_size_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get elevationRange(){return this.uniforms.elevationRange.value}set elevationRange(e){(this.uniforms.elevationRange.value[0]!==e[0]||this.uniforms.elevationRange.value[1]!==e[1])&&(this.uniforms.elevationRange.value=e,this._defaultElevationRangeChanged=!0,this.dispatchEvent({type:"material_property_changed",target:this}))}get heightMin(){return this.uniforms.elevationRange.value[0]}set heightMin(e){this.elevationRange=[e,this.elevationRange[1]]}get heightMax(){return this.uniforms.elevationRange.value[1]}set heightMax(e){this.elevationRange=[this.elevationRange[0],e]}get transition(){return this.uniforms.transition.value}set transition(e){this.uniforms.transition.value=e}get intensityRange(){return this.uniforms.intensityRange.value}set intensityRange(e){e instanceof Array&&2===e.length&&(e[0]===this.uniforms.intensityRange.value[0]&&e[1]===this.uniforms.intensityRange.value[1]||(this.uniforms.intensityRange.value=e,this._defaultIntensityRangeChanged=!0,this.dispatchEvent({type:"material_property_changed",target:this})))}get intensityGamma(){return this.uniforms.intensityGamma.value}set intensityGamma(e){this.uniforms.intensityGamma.value!==e&&(this.uniforms.intensityGamma.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get intensityContrast(){return this.uniforms.intensityContrast.value}set intensityContrast(e){this.uniforms.intensityContrast.value!==e&&(this.uniforms.intensityContrast.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get intensityBrightness(){return this.uniforms.intensityBrightness.value}set intensityBrightness(e){this.uniforms.intensityBrightness.value!==e&&(this.uniforms.intensityBrightness.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get rgbGamma(){return this.uniforms.rgbGamma.value}set rgbGamma(e){this.uniforms.rgbGamma.value!==e&&(this.uniforms.rgbGamma.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get rgbContrast(){return this.uniforms.rgbContrast.value}set rgbContrast(e){this.uniforms.rgbContrast.value!==e&&(this.uniforms.rgbContrast.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get rgbBrightness(){return this.uniforms.rgbBrightness.value}set rgbBrightness(e){this.uniforms.rgbBrightness.value!==e&&(this.uniforms.rgbBrightness.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightRGB(){return this.uniforms.wRGB.value}set weightRGB(e){this.uniforms.wRGB.value!==e&&(this.uniforms.wRGB.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightIntensity(){return this.uniforms.wIntensity.value}set weightIntensity(e){this.uniforms.wIntensity.value!==e&&(this.uniforms.wIntensity.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightElevation(){return this.uniforms.wElevation.value}set weightElevation(e){this.uniforms.wElevation.value!==e&&(this.uniforms.wElevation.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightClassification(){return this.uniforms.wClassification.value}set weightClassification(e){this.uniforms.wClassification.value!==e&&(this.uniforms.wClassification.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightReturnNumber(){return this.uniforms.wReturnNumber.value}set weightReturnNumber(e){this.uniforms.wReturnNumber.value!==e&&(this.uniforms.wReturnNumber.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightSourceID(){return this.uniforms.wSourceID.value}set weightSourceID(e){this.uniforms.wSourceID.value!==e&&(this.uniforms.wSourceID.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}static generateGradientTexture(e){var t=64,i=document.createElement("canvas");i.width=t,i.height=t;var n=i.getContext("2d");n.rect(0,0,t,t);for(var r=n.createLinearGradient(0,0,t,t),o=0;o<e.length;o++){var s=e[o];r.addColorStop(s[0],"#"+s[1].getHexString())}n.fillStyle=r,n.fill();var a=new h.CanvasTexture(i);return a.needsUpdate=!0,a.minFilter=h.LinearFilter,a}static generateClassificationTexture(e){for(var t=new Uint8Array(262144),i=0;i<256;i++)for(var n=0;n<256;n++){var r,o=i+256*n;r=e[i]?e[i]:e[i%32]?e[i%32]:e.DEFAULT,t[4*o+0]=255*r.x,t[4*o+1]=255*r.y,t[4*o+2]=255*r.z,t[4*o+3]=255*r.w}var s=new h.DataTexture(t,256,256,h.RGBAFormat);return s.magFilter=h.NearestFilter,s.needsUpdate=!0,s}disableEvents(){void 0===this._hiddenListeners&&(this._hiddenListeners=this._listeners,this._listeners={})}enableEvents(){this._listeners=this._hiddenListeners,this._hiddenListeners=void 0}copyFrom(e){for(var t of this.uniforms)this.uniforms[t].value=e.uniforms[t].value}}class J extends x{constructor(){super(),this.children={},this.sceneNode=null,this.octree=null}getNumPoints(){return this.geometryNode.numPoints}isLoaded(){return!0}isTreeNode(){return!0}isGeometryNode(){return!1}getLevel(){return this.geometryNode.level}getBoundingSphere(){return this.geometryNode.boundingSphere}getBoundingBox(){return this.geometryNode.boundingBox}getChildren(){let e=[];for(let t=0;t<8;t++)this.children[t]&&e.push(this.children[t]);return e}getPointsInBox(e){if(!this.sceneNode)return null;let t=this.geometryNode.buffer,i=t.offset("position"),n=t.stride,r=new DataView(t.data),o=(new h.Matrix4).getInverse(e.matrixWorld),s=(new h.Matrix4).multiplyMatrices(o,this.sceneNode.matrixWorld),a=[],l=new h.Vector4;for(let e=0;e<t.numElements;e++){let t=r.getFloat32(e*n+i+0,!0),o=r.getFloat32(e*n+i+4,!0),u=r.getFloat32(e*n+i+8,!0);l.set(t,o,u,1),l.applyMatrix4(s),-.5<l.x&&l.x<.5&&-.5<l.y&&l.y<.5&&-.5<l.z&&l.z<.5&&(l.set(t,o,u,1).applyMatrix4(this.sceneNode.matrixWorld),a.push(new h.Vector3(l.x,l.y,l.z)))}return a}get name(){return this.geometryNode.name}}class ee extends b{constructor(e,t){super(),this.pointBudget=1/0,this.pcoGeometry=e,this.boundingBox=this.pcoGeometry.boundingBox,this.boundingSphere=this.boundingBox.getBoundingSphere(new h.Sphere),this.material=t||new Q,this.visiblePointsTarget=2e6,this.minimumNodePixelSize=150,this.level=0,this.position.copy(e.offset),this.updateMatrix(),this.showBoundingBox=!1,this.boundingBoxNodes=[],this.loadQueue=[],this.visibleBounds=new h.Box3,this.visibleNodes=[],this.visibleGeometry=[],this.generateDEM=!1,this.profileRequests=[],this.name="",this.tempVector3=new h.Vector3;let i=[this.pcoGeometry.tightBoundingBox,this.getBoundingBoxWorld()].find((e=>void 0!==e));this.updateMatrixWorld(!0),i=q.computeTransformedBoundingBox(i,this.matrixWorld);let n=i.min.z,r=i.max.z;this.material.heightMin=n,this.material.heightMax=r,this.projection=e.projection,this.root=this.pcoGeometry.root}setName(e){this.name!==e&&(this.name=e,this.dispatchEvent({type:"name_changed",name:e,pointcloud:this}))}getName(){return this.name}toTreeNode(e,t){let i=new J,n=new h.Points(e.geometry,this.material);n.name=e.name,n.position.copy(e.boundingBox.min),n.frustumCulled=!0,n.onBeforeRender=(t,n,r,o,s,a)=>{if(s.program){if(t.getContext().useProgram(s.program.program),s.program.getUniforms().map.level){let i=e.getLevel();s.uniforms.level.value=i,s.program.getUniforms().map.level.setValue(t.getContext(),i)}if(this.visibleNodeTextureOffsets&&s.program.getUniforms().map.vnStart){let e=this.visibleNodeTextureOffsets.get(i);s.uniforms.vnStart.value=e,s.program.getUniforms().map.vnStart.setValue(t.getContext(),e)}if(s.program.getUniforms().map.pcIndex){let e=i.pcIndex?i.pcIndex:this.visibleNodes.indexOf(i);s.uniforms.pcIndex.value=e,s.program.getUniforms().map.pcIndex.setValue(t.getContext(),e)}}},i.geometryNode=e,i.sceneNode=n,i.pointcloud=this,i.children={};for(let t in e.children)i.children[t]=e.children[t];if(t){let r=parseInt(e.name[e.name.length-1]);t.sceneNode.add(n),t.children[r]=i}else this.root=i,this.add(n);return e.oneTimeDisposeHandlers.push((function(){let n=parseInt(e.name[e.name.length-1]);t.sceneNode.remove(i.sceneNode),t.children[n]=e})),i}updateVisibleBounds(){let e=[];for(let t=0;t<this.visibleNodes.length;t++){let i=this.visibleNodes[t],n=!0;for(let e=0;e<i.children.length;e++){let t=i.children[e];t instanceof J?n=n&&!t.sceneNode.visible:t instanceof U&&(n=!0)}n&&e.push(i)}this.visibleBounds.min=new h.Vector3(1/0,1/0,1/0),this.visibleBounds.max=new h.Vector3(-1/0,-1/0,-1/0);for(let t=0;t<e.length;t++){let i=e[t];this.visibleBounds.expandByPoint(i.getBoundingBox().min),this.visibleBounds.expandByPoint(i.getBoundingBox().max)}}updateMaterial(e,t,i,n){e.fov=i.fov*(Math.PI/180),e.screenWidth=n.domElement.clientWidth,e.screenHeight=n.domElement.clientHeight,e.spacing=this.pcoGeometry.spacing*Math.max(this.scale.x,this.scale.y,this.scale.z),e.near=i.near,e.far=i.far,e.uniforms.octreeSize.value=this.pcoGeometry.boundingBox.getSize(new h.Vector3).x}computeVisibilityTextureData(e,t){u.measureTimings&&performance.mark("computeVisibilityTextureData-start");let i=new Uint8Array(4*e.length),n=new Map;(e=e.slice()).sort((function(e,t){let i=e.geometryNode.name,n=t.geometryNode.name;return i.length!==n.length?i.length-n.length:i<n?-1:i>n?1:0}));let r=new h.Vector3,o=(e,t)=>{r.subVectors(t.center,e.origin);let i=r.dot(e.direction),n=r.dot(r)-i*i,o=t.radius*t.radius;if(n>o)return null;let s=i+Math.sqrt(o-n);return s<0?null:s},s=new Map,a=new Map;for(let r=0;r<e.length;r++){let l=e[r];n.set(l,r);let u=[];for(let t=0;t<8;t++){let i=l.children[t];i&&i.constructor===J&&e.includes(i,r)&&u.push(i)}l.geometryNode.estimatedSpacing,i[4*r+0]=0,i[4*r+1]=0,i[4*r+2]=0,i[4*r+3]=l.getLevel();for(let t=0;t<u.length;t++){let n=u[t],o=parseInt(n.geometryNode.name.substr(-1));if(i[4*r+0]+=Math.pow(2,o),0===t){let t=e.indexOf(n,r);i[4*r+1]=t-r>>8,i[4*r+2]=(t-r)%256}}let d=l.getBoundingBox().clone().getBoundingSphere(new h.Sphere);d.applyMatrix4(l.sceneNode.matrixWorld),d.applyMatrix4(t.matrixWorldInverse);let p=o(new h.Ray(t.position,t.getWorldDirection(this.tempVector3)),d),c=d.center.distanceTo(t.position)+d.radius;if(null===p&&(p=c),p=Math.max(p,c),s.has(l.getLevel())){let e=s.get(l.getLevel()),t=Math.max(e,p);s.set(l.getLevel(),t)}else s.set(l.getLevel(),p);if(!l.geometryNode.hasChildren){let e={distance:p,i:r};a.set(l,e)}}for(let[e,t]of a){let n=e.getLevel(),r=t.distance,o=t.i;if(!(n<4))for(let[e,t]of s)r<1.2*t&&(i[4*o+3]=e)}return u.measureTimings&&(performance.mark("computeVisibilityTextureData-end"),performance.measure("render.computeVisibilityTextureData","computeVisibilityTextureData-start","computeVisibilityTextureData-end")),{data:i,offsets:n}}nodeIntersectsProfile(e,t){let i=e.boundingBox.clone().applyMatrix4(this.matrixWorld).getBoundingSphere(new h.Sphere),n=!1;for(let e=0;e<t.points.length-1;e++){let r=new h.Vector3(t.points[e+0].x,t.points[e+0].y,i.center.z),o=new h.Vector3(t.points[e+1].x,t.points[e+1].y,i.center.z),s=new h.Line3(r,o).closestPointToPoint(i.center,!0).distanceTo(i.center);n=n||s<i.radius+t.width}return n}nodesOnRay(e,t,i={}){let n=[],r=t.clone();for(let t=0;t<e.length;t++){let o=e[t],s=o.getBoundingSphere().clone().applyMatrix4(o.sceneNode.matrixWorld);if(r.intersectsSphere(s)&&(o.distanceToOrigin=s.center.distanceTo(r.origin),n.push(o),i.recursive&&o.children)){const e=Object.values(o.children).filter((e=>e&&e.sceneNode));if(e.length){const t=this.nodesOnRay(e,r,i);n.push(...t)}}}return n.sort(((e,t)=>e.distanceToOrigin-t.distanceToOrigin))}pointsOnRay(e,t,i={}){const n=this.nodesOnRay(e,t,i),r=[],o=i.maxDistance||.5;i=Object.assign({attributeFilter:(e,i)=>{switch(e){case"position":return t.distanceToPoint(i)<=o;default:return!0}}},i);for(const e of n)r.push(...q.nodeToPoints(e,i));return r.sort(((e,t)=>e.distanceToRay-t.distanceToRay))}updateMatrixWorld(e){!0===this.matrixAutoUpdate&&this.updateMatrix(),!0!==this.matrixWorldNeedsUpdate&&!0!==e||(this.parent?this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0)}hideDescendants(e){let t=[];for(let i=0;i<e.children.length;i++){let n=e.children[i];n.visible&&t.push(n)}for(;t.length>0;){let e=t.shift();e.visible=!1;for(let i=0;i<e.children.length;i++){let n=e.children[i];n.visible&&t.push(n)}}}moveToOrigin(){this.position.set(0,0,0),this.updateMatrixWorld(!0);let e=this.boundingBox,t=this.matrixWorld,i=q.computeTransformedBoundingBox(e,t);this.position.set(0,0,0).sub(i.getCenter(new h.Vector3))}moveToGroundPlane(){this.updateMatrixWorld(!0);let e=this.boundingBox,t=this.matrixWorld,i=q.computeTransformedBoundingBox(e,t);this.position.y+=-i.min.y}getBoundingBoxWorld(){this.updateMatrixWorld(!0);let e=this.boundingBox,t=this.matrixWorld;return q.computeTransformedBoundingBox(e,t)}getPointsInProfile(e,t,i){let n={segments:[],boundingBox:new h.Box3,projectedBoundingBox:new h.Box2};for(let i=0;i<e.points.length-1;i++){let r=e.points[i],o=e.points[i+1],s=this.getProfile(r,o,e.width,t),a={start:r,end:o,points:s,project:null};n.segments.push(a),n.boundingBox.expandByPoint(s.boundingBox.min),n.boundingBox.expandByPoint(s.boundingBox.max)}let r=new h.Vector3;for(let e=0;e<n.segments.length;e++){let t=n.segments[e],i=t.start,o=t.end,s=function(e,t,i,n){let r=e,o=t,s=i,a=n,l=new h.Vector3(1,0,0),u=(new h.Vector3).subVectors(o,r);u.y=0,u.normalize();let d=Math.acos(l.dot(u));return u.z>0&&(d=-d),function(e){let t=(new h.Matrix4).makeTranslation(-r.x,-a.min.y,-r.z),i=(new h.Matrix4).makeRotationY(-d),n=(new h.Matrix4).makeTranslation(s.x,0,0),o=e.clone();return o.applyMatrix4(t),o.applyMatrix4(i),o.applyMatrix4(n),o}}(i,o,r.clone(),n.boundingBox.clone());t.project=s,r.x+=new h.Vector3(i.x,0,i.z).distanceTo(new h.Vector3(o.x,0,o.z)),r.y+=o.y-i.y}return n.projectedBoundingBox.min.x=0,n.projectedBoundingBox.min.y=n.boundingBox.min.y,n.projectedBoundingBox.max.x=r.x,n.projectedBoundingBox.max.y=n.boundingBox.max.y,n}getProfile(e,t,i,n,r){}getVisibleExtent(){return this.visibleBounds.applyMatrix4(this.matrixWorld)}pick(e,t,i,n={}){let r=e.renderer,o=e.pRenderer;performance.mark("pick-start");let s=(e,t)=>void 0!==e?e:t,a=s(n.pickWindowSize,15),l=(s(n.pickOutsideClipRegion,!1),r.getSize(new h.Vector2)),u=Math.ceil(s(n.width,l.x)),d=Math.ceil(s(n.height,l.y)),p=s(n.pointSizeType,he.FIXED),c=s(n.pointSize,8),f=s(n.pointShape,de.SQUARE),m=this.nodesOnRay(this.visibleNodes,i);if(0===m.length)return null;if(!this.pickState){let e=new h.Scene,t=new Q;t.pointColorType=pe.POINT_INDEX;let i=new h.WebGLRenderTarget(1,1,{minFilter:h.LinearFilter,magFilter:h.NearestFilter,format:h.RGBAFormat});this.pickState={renderTarget:i,material:t,scene:e}}let g=this.pickState,v=g.material;v.pointSizeType=p,v.shape=f,v.size=c,v.uniforms.minSize.value=this.material.uniforms.minSize.value,v.uniforms.maxSize.value=this.material.uniforms.maxSize.value,v.classification=this.material.classification,n.pickClipped?(v.clipBoxes=this.material.clipBoxes,this.material.clipTask===le.HIGHLIGHT?v.clipTask=le.NONE:v.clipTask=this.material.clipTask):v.clipBoxes=[],this.updateMaterial(v,m,t,r),g.renderTarget.setSize(u,d);let y=new h.Vector2(n.x,n.y),x=r.getContext();x.enable(x.SCISSOR_TEST),x.scissor(parseInt(y.x-(a-1)/2),parseInt(y.y-(a-1)/2),parseInt(a),parseInt(a)),r.state.buffers.depth.setTest(v.depthTest),r.state.buffers.depth.setMask(v.depthWrite),r.state.setBlending(h.NoBlending),r.setRenderTarget(g.renderTarget),x.clearColor(0,0,0,0),r.clear(!0,!0,!0);let b=this.material;this.material=v,o.renderOctree(r,this,m,t,g.renderTarget),this.material=b;let S=(e,t,i)=>Math.min(Math.max(t,e),i),w=parseInt(S(y.x-(a-1)/2,0,u)),T=parseInt(S(y.y-(a-1)/2,0,d)),_=parseInt(Math.min(w+a,u)-w),A=parseInt(Math.min(T+a,d)-T),E=new Uint8Array(_*A*4);x.readPixels(w,T,a,a,x.RGBA,x.UNSIGNED_BYTE,E),r.setRenderTarget(null),r.state.reset(),r.setScissorTest(!1),x.disable(x.SCISSOR_TEST);let B=E,N=new Uint32Array(E.buffer),P=[];for(let e=0;e<a;e++)for(let t=0;t<a;t++){let i=e+t*a,r=Math.pow(e-(a-1)/2,2)+Math.pow(t-(a-1)/2,2),o=B[4*i+3];B[4*i+3]=0;let s=N[i];if((0!==o||0!==s)&&void 0!==o&&void 0!==s){let e={pIndex:s,pcIndex:o,distanceToCenter:r};n.all?P.push(e):P.length>0?r<P[0].distanceToCenter&&(P[0]=e):P.push(e)}}for(let e of P){if(!m[e.pcIndex])return null;let t=q.nodeToPoint(node,e.pcIndex);e.point=t}return performance.measure("pick","pick-start"),n.all?P.sort(((e,t)=>e.distanceToCenter-t.distanceToCenter)).map((e=>e.point)):0===P.length?null:P[0].point}pickAll(e,t={}){performance.mark("pickAll-start");const i=this.pointsOnRay(this.visibleNodes,e,t.maxDistance||.5,t.recursive);return performance.measure("pickAll","pickAll-start"),t.firstHitOnly?i.map((t=>Object.assign(t,{distanceToOrigin:t.position.distanceTo(e.origin)}))).sort(((e,t)=>e.distanceToOrigin-t.distanceToOrigin)).shift():i}*getFittedBoxGen(e){let t=new h.Box3,i=(new h.Matrix4).getInverse(e.matrixWorld);for(let e of this.visibleNodes){if(!e.sceneNode)continue;let n=e.geometryNode.buffer,r=n.offset("position"),o=n.stride,s=new DataView(n.data),a=(new h.Matrix4).multiplyMatrices(i,e.sceneNode.matrixWorld),l=new h.Vector4;for(let e=0;e<n.numElements;e++){let i=s.getFloat32(e*o+r+0,!0),n=s.getFloat32(e*o+r+4,!0),u=s.getFloat32(e*o+r+8,!0);l.set(i,n,u,1),l.applyMatrix4(a),-.5<l.x&&l.x<.5&&-.5<l.y&&l.y<.5&&-.5<l.z&&l.z<.5&&t.expandByPoint(l)}yield}let n=t.getCenter(new h.Vector3).applyMatrix4(e.matrixWorld),r=new h.Object3D;r.position.copy(n),r.scale.copy(e.scale),r.rotation.copy(e.rotation);let o=(new h.Vector3).subVectors(t.max,t.min);r.scale.multiply(o),yield r}getFittedBox(e,t=1/0){let i=new h.Box3,n=(new h.Matrix4).getInverse(e.matrixWorld);for(let e of this.visibleNodes){if(!e.sceneNode||e.getLevel()>t)continue;let r=e.geometryNode.buffer,o=r.offset("position"),s=r.stride,a=new DataView(r.data),l=(new h.Matrix4).multiplyMatrices(n,e.sceneNode.matrixWorld),u=new h.Vector4;for(let e=0;e<r.numElements;e++){let t=a.getFloat32(e*s+o+0,!0),n=a.getFloat32(e*s+o+4,!0),r=a.getFloat32(e*s+o+8,!0);u.set(t,n,r,1),u.applyMatrix4(l),-.5<u.x&&u.x<.5&&-.5<u.y&&u.y<.5&&-.5<u.z&&u.z<.5&&i.expandByPoint(u)}}let r=i.getCenter(new h.Vector3).applyMatrix4(e.matrixWorld),o=new h.Object3D;o.position.copy(r),o.scale.copy(e.scale),o.rotation.copy(e.rotation);let s=(new h.Vector3).subVectors(i.max,i.min);return o.scale.multiply(s),o}get progress(){return this.visibleNodes.length/this.visibleGeometry.length}find(e){let t=null;for(let i of e)t="r"===i?this.root:t.children[i];return t}}class te extends x{constructor(){super(),this.left=null,this.right=null,this.sceneNode=null,this.kdtree=null}getNumPoints(){return this.geometryNode.numPoints}isLoaded(){return!0}isTreeNode(){return!0}isGeometryNode(){return!1}getLevel(){return this.geometryNode.level}getBoundingSphere(){return this.geometryNode.boundingSphere}getBoundingBox(){return this.geometryNode.boundingBox}toTreeNode(e){var t=null;if(this.left===e?t=this.left:this.right===e&&(t=this.right),t.loaded){var i=new te,n=h.PointCloud(t.geometry,this.kdtree.material);n.visible=!1,i.kdtree=this.kdtree,i.geometryNode=t,i.sceneNode=n,i.parent=this,i.left=this.geometryNode.left,i.right=this.geometryNode.right}}getChildren(){var e=[];return this.left&&e.push(this.left),this.right&&e.push(this.right),e}}class ie extends b{constructor(e){super(),this.root=null,e.root?this.root=e.root:e.addEventListener("hierarchy_loaded",(()=>{this.root=e.root})),this.visiblePointsTarget=2e6,this.minimumNodePixelSize=150,this.position.sub(e.offset),this.updateMatrix(),this.numVisibleNodes=0,this.numVisiblePoints=0,this.boundingBoxNodes=[],this.loadQueue=[],this.visibleNodes=[],this.pcoGeometry=e,this.boundingBox=this.pcoGeometry.boundingBox,this.boundingSphere=this.pcoGeometry.boundingSphere,this.material=new Q({vertexColors:h.VertexColors,size:.05,treeType:ce.KDTREE}),this.material.sizeType=he.ATTENUATED,this.material.size=.05,this.profileRequests=[],this.name=""}getBoundingBoxWorld(){this.updateMatrixWorld(!0);var e=this.boundingBox,t=this.matrixWorld;return q.computeTransformedBoundingBox(e,t)}setName(e){this.name!==e&&(this.name=e,this.dispatchEvent({type:"name_changed",name:e,pointcloud:this}))}getName(){return this.name}getLevel(){return this.level}toTreeNode(e,t){var i=new te,n=new h.Points(e.geometry,this.material);return n.frustumCulled=!0,n.onBeforeRender=(t,n,r,o,s,a)=>{if(s.program){if(t.getContext().useProgram(s.program.program),s.program.getUniforms().map.level){var l=e.getLevel();s.uniforms.level.value=l,s.program.getUniforms().map.level.setValue(t.getContext(),l)}if(this.visibleNodeTextureOffsets&&s.program.getUniforms().map.vnStart){var u=this.visibleNodeTextureOffsets.get(i);s.uniforms.vnStart.value=u,s.program.getUniforms().map.vnStart.setValue(t.getContext(),u)}if(s.program.getUniforms().map.pcIndex){var h=i.pcIndex?i.pcIndex:this.visibleNodes.indexOf(i);s.uniforms.pcIndex.value=h,s.program.getUniforms().map.pcIndex.setValue(t.getContext(),h)}}},i.geometryNode=e,i.sceneNode=n,i.pointcloud=this,i.left=e.left,i.right=e.right,t?(t.sceneNode.add(n),t.left===e?t.left=i:t.right===e&&(t.right=i)):(this.root=i,this.add(n)),e.oneTimeDisposeHandlers.push((function(){t.sceneNode.remove(i.sceneNode),t.left===i?t.left=e:t.right===i&&(t.right=e)})),i}updateMaterial(e,t,i,n){e.fov=i.fov*(Math.PI/180),e.screenWidth=n.domElement.clientWidth,e.screenHeight=n.domElement.clientHeight,e.spacing=this.pcoGeometry.spacing,e.near=i.near,e.far=i.far,this.maxLevel>e.levels&&(e.levels=this.maxLevel+2);var r=this.boundingBox.getSize(new h.Vector3);e.bbSize=[r.x,r.y,r.z]}updateVisibleBounds(){}hideDescendants(e){for(var t=[],i=0;i<e.children.length;i++)(n=e.children[i]).visible&&t.push(n);for(;t.length>0;){var n;for((n=t.shift()).visible=!1,n.boundingBoxNode&&(n.boundingBoxNode.visible=!1),i=0;i<n.children.length;i++){var r=n.children[i];r.visible&&t.push(r)}}}updateMatrixWorld(e){!0===this.matrixAutoUpdate&&this.updateMatrix(),!0!==this.matrixWorldNeedsUpdate&&!0!==e||(void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0)}nodesOnRay(e,t){for(var i=[],n=t.clone(),r=0;r<e.length;r++){var o=e[r],s=o.getBoundingSphere(new h.Sphere).clone().applyMatrix4(o.sceneNode.matrixWorld);n.intersectsSphere(s)&&i.push(o)}return i}pick(e,t,i,n={}){var r=e.renderer,o=e.pRenderer;performance.mark("pick-start");var s=(e,t)=>void 0!==e?e:t,a=s(n.pickWindowSize,17),l=(s(n.pickOutsideClipRegion,!1),r.getSize(new h.Vector3)),u=Math.ceil(s(n.width,l.width)),d=Math.ceil(s(n.height,l.height)),p=s(n.pointSizeType,this.material.pointSizeType),c=s(n.pointSize,this.material.size),f=this.nodesOnRay(this.visibleNodes,i);if(0===f.length)return null;if(!this.pickState){var m=new h.Scene,g=new Q;g.pointColorType=pe.POINT_INDEX;var v=new h.WebGLRenderTarget(1,1,{minFilter:h.LinearFilter,magFilter:h.NearestFilter,format:h.RGBAFormat});this.pickState={renderTarget:v,material:g,scene:m}}var y=this.pickState,x=y.material;x.pointSizeType=p,x.shape=this.material.shape,x.size=c,x.uniforms.minSize.value=this.material.uniforms.minSize.value,x.uniforms.maxSize.value=this.material.uniforms.maxSize.value,x.classification=this.material.classification,n.pickClipped?(x.clipBoxes=this.material.clipBoxes,this.material.clipTask===le.HIGHLIGHT?x.clipTask=le.NONE:x.clipTask=this.material.clipTask):x.clipBoxes=[],this.updateMaterial(x,f,t,r),y.renderTarget.setSize(u,d);var b=new h.Vector2(n.x,n.y),S=r.getContext();S.enable(S.SCISSOR_TEST),S.scissor(parseInt(b.x-(a-1)/2),parseInt(b.y-(a-1)/2),parseInt(a),parseInt(a)),r.state.buffers.depth.setTest(x.depthTest),r.state.buffers.depth.setMask(x.depthWrite),r.state.setBlending(h.NoBlending),r.clearTarget(y.renderTarget,!0,!0,!0),r.setRenderTarget(y.renderTarget),S.clearColor(0,0,0,0),r.clearTarget(y.renderTarget,!0,!0,!0);var w=this.material;this.material=x,o.renderOctree(this,f,t,y.renderTarget),this.material=w;var T=(e,t,i)=>Math.min(Math.max(t,e),i),_=parseInt(T(b.x-(a-1)/2,0,u)),A=parseInt(T(b.y-(a-1)/2,0,d)),E=parseInt(Math.min(_+a,u)-_),B=parseInt(Math.min(A+a,d)-A),N=new Uint8Array(E*B*4);S.readPixels(_,A,a,a,S.RGBA,S.UNSIGNED_BYTE,N),r.setRenderTarget(null),r.resetGLState(),r.setScissorTest(!1),S.disable(S.SCISSOR_TEST);for(var P=N,C=new Uint32Array(N.buffer),I=(Number.MAX_VALUE,[]),R=0;R<a;R++)for(var D=0;D<a;D++){var L=R+D*a,M=Math.pow(R-(a-1)/2,2)+Math.pow(D-(a-1)/2,2),O=P[4*L+3];P[4*L+3]=0;var z=C[L];if((0!==O||0!==z)&&void 0!==O&&void 0!==z){var U={pIndex:z,pcIndex:O,distanceToCenter:M};n.all?I.push(U):I.length>0?M<I[0].distanceToCenter&&(I[0]=U):I.push(U)}}for(var U of I){var F={};if(!f[U.pcIndex])return null;var V=f[U.pcIndex],G=V.sceneNode,H=V.geometryNode.geometry;for(var k in H.attributes){var W=H.attributes[k];if("position"===k){_=W.array[3*U.pIndex+0],A=W.array[3*U.pIndex+1];var j=W.array[3*U.pIndex+2],Y=new h.Vector3(_,A,j);Y.applyMatrix4(G.matrixWorld),F[k]=Y}}U.point=F}return performance.mark("pick-end"),performance.measure("pick","pick-start","pick-end"),n.all?I.map((e=>e.point)):0===I.length?null:I[0].point}computeVisibilityTextureData(e){u.measureTimings&&performance.mark("computeVisibilityTextureData-start");var t=new Uint8Array(3*e.length),i=new Map;(e=e.slice()).sort((function(e,t){var i=e.geometryNode.level,n=t.geometryNode.level,r=e.geometryNode.number,o=t.geometryNode.number;return i!==n?i-n:r<o?-1:r>o?1:0}));for(var n=[],r=0;r<e.length;r++)n.push(e[r].geometryNode.number);for(r=0;r<e.length;r++){var o=e[r];i.set(o,r);var s=0,a=0,l=0;o.geometryNode.left&&n.indexOf(o.geometryNode.left.number)>0&&(s+=1,a=n.indexOf(o.geometryNode.left.number)-r),o.geometryNode.right&&n.indexOf(o.geometryNode.right.number)>0&&(s+=2,a=0===a?n.indexOf(o.geometryNode.right.number)-r:a),"X"===o.geometryNode.split?l=1:"Y"===o.geometryNode.split?l=2:"Z"===o.geometryNode.split&&(l=4),t[3*r+0]=s,t[3*r+1]=a,t[3*r+2]=l}return u.measureTimings&&(performance.mark("computeVisibilityTextureData-end"),performance.measure("render.computeVisibilityTextureData","computeVisibilityTextureData-start","computeVisibilityTextureData-end")),{data:t,offsets:i}}get progress(){return this.pcoGeometry.root?u.numNodesLoading>0?0:1:0}}class ne{constructor(){this.left=null,this.right=null,this.boundingBox=null,this.number=null,this.pcoGeometry=null,this.loaded=!1,this.numPoints=0,this.level=0,this.children=[],this.oneTimeDisposeHandlers=[]}isGeometryNode(){return!0}isTreeNode(){return!1}isLoaded(){return this.loaded}getBoundingSphere(){return this.boundingSphere}getBoundingBox(){return this.boundingBox}getChildren(){var e=[];return this.left&&e.push(this.left),this.right&&e.push(this.right),e}getLevel(){return this.level}load(){if(!(this.loaded||this.loading||u.numNodesLoading>=u.maxNodesLoading)){this.loading=!0,u.numNodesLoading++;var e=this,t=this.pcoGeometry.url+"?node="+this.number,i=_.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",t,!0),i.responseType="arraybuffer",i.onload=function(){try{for(var t=i.response,n=new DataView(t),r=t.byteLength/17,o=new ArrayBuffer(28*r),s=(new DataView(o),m.POSITION_CARTESIAN,m.RGBA_PACKED,m.INTENSITY,m.CLASSIFICATION,new Float32Array(3*r)),a=new Uint8Array(4*r),l=new Float32Array(r),d=new Uint8Array(r),p=new ArrayBuffer(4*r),c=new Uint32Array(p),f=new h.Box3,g=0;g<r;g++){var v=n.getFloat32(17*g+0,!0)+e.boundingBox.min.x,y=n.getFloat32(17*g+4,!0)+e.boundingBox.min.y,x=n.getFloat32(17*g+8,!0)+e.boundingBox.min.z,b=n.getUint8(17*g+12,!0),S=n.getUint8(17*g+13,!0),w=n.getUint8(17*g+14,!0),T=n.getUint8(17*g+15,!0),_=n.getUint8(17*g+16,!0);f.expandByPoint(new h.Vector3(v,y,x)),s[3*g+0]=v,s[3*g+1]=y,s[3*g+2]=x,a[4*g+0]=b,a[4*g+1]=S,a[4*g+2]=w,a[4*g+3]=255,l[g]=T,d[g]=_,c[g]=g}var A=new h.BufferGeometry;A.setAttribute("position",new h.BufferAttribute(s,3)),A.setAttribute("color",new h.BufferAttribute(a,4,!0)),A.setAttribute("intensity",new h.BufferAttribute(l,1)),A.setAttribute("classification",new h.BufferAttribute(d,1));var E=new h.BufferAttribute(new Uint8Array(p),4,!0);A.setAttribute("indices",E),e.geometry=A,e.numPoints=r,e.loaded=!0,e.loading=!1,u.numNodesLoading--}catch(e){console.error("Potree: Exception thrown parsing points.",e),u.numNodesLoading--}},i.onerror=function(){u.numNodesLoading--,console.log("Potree: Failed to load file, "+i.status+", file: "+t)},i.send(null)}}dispose(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(var e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}}getNumPoints(){return this.numPoints}}class re extends h.EventDispatcher{constructor(){super(),this.numPoints=0,this.version=0,this.boundingBox=null,this.numNodes=0,this.name=null,this.provider=null,this.url=null,this.root=null,this.levels=0,this._spacing=null,this.pointAttributes=new g(["POSITION_CARTESIAN","COLOR_PACKED"])}static load(e,t){var i=_.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",e+"?info",!0),i.onreadystatechange=function(){try{if(4===i.readyState&&200===i.status){var n=JSON.parse(i.responseText),r=new re;r.url=e,r.name=n.Name,r.provider=n.Provider,r.numNodes=n.Nodes,r.numPoints=n.Points,r.version=n.Version,r.boundingBox=new h.Box3((new h.Vector3).fromArray(n.BoundingBox.slice(0,3)),(new h.Vector3).fromArray(n.BoundingBox.slice(3,6))),n.Spacing&&(r.spacing=n.Spacing);var o=r.boundingBox.min.clone().multiplyScalar(-1);r.boundingBox.min.add(o),r.boundingBox.max.add(o),r.offset=o;var s=new h.Vector3;r.boundingBox.getCenter(s);var a=r.boundingBox.getSize(new h.Vector3).length()/2;r.boundingSphere=new h.Sphere(s,a),r.loadHierarchy(),t(r)}else 4===i.readyState&&t(null)}catch(e){console.error(e.message),t(null)}},i.send(null)}loadHierarchy(){var e=this.url+"?tree",t=_.createXMLHttpRequest();t.overrideMimeType("text/plain"),t.open("GET",e,!0),t.responseType="arraybuffer",t.onreadystatechange=()=>{if(4===t.readyState&&200===t.status){for(var e=t.response,i=e.byteLength/3,n=new DataView(e),r=[],o=null,s=0,a=0;a<i;a++){var l=n.getUint8(3*a+0,!0),u=(1&l)>0,d=(2&l)>0,p=null;(4&l)>0?p="X":(8&l)>0&&(p="Y"),(16&l)>0&&(p="Z");var c=new ne;if(c.hasLeft=u,c.hasRight=d,c.split=p,c.isLeaf=!u&&!d,c.number=a,c.left=null,c.right=null,c.pcoGeometry=this,c.level=r.length,s=Math.max(s,c.level),r.length>0){var f=r[r.length-1];c.boundingBox=f.boundingBox.clone();var m=f.boundingBox.getSize(new h.Vector3);if(f.hasLeft&&!f.left){f.left=c,f.children.push(c),"X"===f.split?c.boundingBox.max.x=c.boundingBox.min.x+m.x/2:"Y"===f.split?c.boundingBox.max.y=c.boundingBox.min.y+m.y/2:"Z"===f.split&&(c.boundingBox.max.z=c.boundingBox.min.z+m.z/2);var g=new h.Vector3;c.boundingBox.getCenter(g);var v=c.boundingBox.getSize(new h.Vector3).length()/2;c.boundingSphere=new h.Sphere(g,v)}else f.right=c,f.children.push(c),"X"===f.split?c.boundingBox.min.x=c.boundingBox.min.x+m.x/2:"Y"===f.split?c.boundingBox.min.y=c.boundingBox.min.y+m.y/2:"Z"===f.split&&(c.boundingBox.min.z=c.boundingBox.min.z+m.z/2),g=new h.Vector3,c.boundingBox.getCenter(g),v=c.boundingBox.getSize(new h.Vector3).length()/2,c.boundingSphere=new h.Sphere(g,v)}else(o=c).boundingBox=this.boundingBox.clone(),g=new h.Vector3,o.boundingBox.getCenter(g),v=o.boundingBox.getSize(new h.Vector3).length()/2,o.boundingSphere=new h.Sphere(g,v);var y=c.boundingBox.getSize(new h.Vector3);if(c.spacing=(y.x+y.y+y.z)/3/75,c.estimatedSpacing=c.spacing,r.push(c),c.isLeaf)for(var x=!1;!x&&r.length>0;){r.pop();var b=r[r.length-1];x=r.length>0&&b.hasRight&&null==b.right}}this.root=o,this.levels=s,this.dispatchEvent({type:"hierarchy_loaded"})}},t.send(null)}get spacing(){return this._spacing?this._spacing:this.root?this.root.spacing:void 0}set spacing(e){this._spacing=e}}function oe(e){this.content=[],this.scoreFunction=e}oe.prototype={push:function(e){this.content.push(e),this.bubbleUp(this.content.length-1)},pop:function(){var e=this.content[0],t=this.content.pop();return this.content.length>0&&(this.content[0]=t,this.sinkDown(0)),e},remove:function(e){for(var t=this.content.length,i=0;i<t;i++)if(this.content[i]==e){var n=this.content.pop();if(i==t-1)break;this.content[i]=n,this.bubbleUp(i),this.sinkDown(i);break}},size:function(){return this.content.length},bubbleUp:function(e){for(var t=this.content[e],i=this.scoreFunction(t);e>0;){var n=Math.floor((e+1)/2)-1,r=this.content[n];if(i>=this.scoreFunction(r))break;this.content[n]=t,this.content[e]=r,e=n}},sinkDown:function(e){for(var t=this.content.length,i=this.content[e],n=this.scoreFunction(i);;){var r=2*(e+1),o=r-1,s=null;if(o<t){var a=this.content[o],l=this.scoreFunction(a);l<n&&(s=o)}if(r<t){var u=this.content[r];this.scoreFunction(u)<(null==s?n:l)&&(s=r)}if(null==s)break;this.content[e]=this.content[s],this.content[s]=i,e=s}}};var se={position:0,color:1,intensity:2,classification:3,returnNumber:4,numberOfReturns:5,pointSourceID:6,indices:7,normal:8,spacing:9},ae={DEFAULT:{0:new h.Vector4(.5,.5,.5,1),1:new h.Vector4(.5,.5,.5,1),2:new h.Vector4(.63,.32,.18,1),3:new h.Vector4(0,1,0,1),4:new h.Vector4(0,.8,0,1),5:new h.Vector4(0,.6,0,1),6:new h.Vector4(1,.66,0,1),7:new h.Vector4(1,0,1,1),8:new h.Vector4(1,0,0,1),9:new h.Vector4(0,0,1,1),12:new h.Vector4(1,1,0,1),DEFAULT:new h.Vector4(.3,.6,.6,.5)}},le={NONE:0,HIGHLIGHT:1,SHOW_INSIDE:2,SHOW_OUTSIDE:3},ue={INSIDE_ANY:0,INSIDE_ALL:1},he={FIXED:0,ATTENUATED:1,ADAPTIVE:2},de={SQUARE:0,CIRCLE:1,PARABOLOID:2},pe={RGB:0,COLOR:1,DEPTH:2,HEIGHT:3,ELEVATION:3,INTENSITY:4,INTENSITY_GRADIENT:5,LOD:6,LEVEL_OF_DETAIL:6,POINT_INDEX:7,CLASSIFICATION:8,RETURN_NUMBER:9,SOURCE:10,NORMAL:11,PHONG:12,RGB_HEIGHT:13,COMPOSITE:50},ce={OCTREE:0,KDTREE:1},fe={BRIGHTNESS:0,COLOR:1};function me(e,t,i){var n=function(e){void 0!==t&&(e.name=t),i({type:"pointcloud_loaded",pointcloud:e})};if(0===e.indexOf("greyhound://"))B.load(e,(function(e){void 0!==e&&n(new ee(e))}));else if(e.indexOf("cloud.js")>0)F.load(e,(function(e){void 0!==e&&n(new ee(e))}));else if(e.indexOf("ept.json")>0)X.load(e,(function(e){void 0!==e&&n(new ee(e))}));else{if(!(e.indexOf(".vpc")>0))throw new Error("Potree: Failed to load point cloud from URL "+e);re.load(e,(function(e){void 0!==e&&n(new ie(e))}))}}function ge(e,t,i){var n=0,r=new Map(e.map((e=>[e,0]))),o=[],s=[],a=[],l=1/0,d=ye(e,t),p=d.frustums,c=d.camObjPositions,f=d.priorityQueue,m=0,g=(i.domElement.clientWidth,i.domElement.clientHeight);u.pointcloudTransformVersion||(u.pointcloudTransformVersion=new Map);for(var v=u.pointcloudTransformVersion,y=0;y<e.length;y++)if((T=e[y]).visible)if(T.updateMatrixWorld(),v.has(T)){var x=v.get(T);x.transform.equals(T.matrixWorld)||(x.number++,x.transform.copy(T.matrixWorld),T.dispatchEvent({type:"transformation_changed",target:T}))}else v.set(T,{number:0,transform:T.matrixWorld.clone()});for(;f.size()>0;){var b=f.pop(),S=b.node,w=b.parent,T=e[b.pointcloud],_=S.getBoundingBox(),A=p[b.pointcloud],E=c[b.pointcloud],B=A.intersectsBox(_),N=T.maxLevel||1/0,P=S.getLevel(),C=B;if(C=(C=C&&!(r.get(T)+S.getNumPoints()>T.pointBudget))&&P<N,S.spacing?l=Math.min(l,S.spacing):S.geometryNode&&S.geometryNode.spacing&&(l=Math.min(l,S.geometryNode.spacing)),C){n+=S.getNumPoints();var I=r.get(T);if(r.set(T,I+S.getNumPoints()),T.numVisibleNodes++,T.numVisiblePoints+=S.getNumPoints(),!S.isGeometryNode()||w&&!w.isTreeNode()||(S.isLoaded()&&m<u.maxNodesLoadGPUFrame?(S=T.toTreeNode(S,w),m++):(a.push(S),s.push(S))),S.isTreeNode()){u.lru.touch(S.geometryNode),S.sceneNode.visible=!0,S.sceneNode.material=T.material,o.push(S),T.visibleNodes.push(S),void 0===S._transformVersion&&(S._transformVersion=-1);var R=v.get(T);if(S._transformVersion!==R.number&&(S.sceneNode.updateMatrix(),S.sceneNode.matrixWorld.multiplyMatrices(T.matrixWorld,S.sceneNode.matrix),S._transformVersion=R.number),T.showBoundingBox&&!S.boundingBoxNode&&S.getBoundingBox){var D=new h.Box3Helper(S.getBoundingBox());D.matrixAutoUpdate=!1,T.boundingBoxNodes.push(D),S.boundingBoxNode=D,S.boundingBoxNode.matrix.copy(T.matrixWorld)}else T.showBoundingBox?(S.boundingBoxNode.visible=!0,S.boundingBoxNode.matrix.copy(T.matrixWorld)):!T.showBoundingBox&&S.boundingBoxNode&&(S.boundingBoxNode.visible=!1)}var L=S.getChildren();for(y=0;y<L.length;y++){var M=L[y],O=0;if(t.isPerspectiveCamera){var z=M.getBoundingSphere(new h.Sphere),U=(z.center,z.center.distanceTo(E)),F=z.radius,V=t.fov*Math.PI/180,G=F*(.5*g/(Math.tan(V/2)*U));if(G<T.minimumNodePixelSize)continue;O=G,U-F<0&&(O=Number.MAX_VALUE)}else{var H=M.getBoundingBox();U=M.getBoundingSphere(new h.Sphere).center.distanceTo(E),O=H.max.clone().sub(H.min).length()/U}f.push({pointcloud:b.pointcloud,node:M,parent:S,weight:O})}}}var k=e.filter((e=>e.generateDEM&&e.dem instanceof DEM));for(var T of k){var W=T.visibleNodes.filter((e=>e.getLevel()<=u.maxDEMLevel));T.dem.update(W)}for(y=0;y<Math.min(u.maxNodesLoading,a.length);y++)a[y].load();return{visibleNodes:o,numVisiblePoints:n,lowestSpacing:l}}function ve(e,t,i){for(var n=ge(e,t,i),r=0;r<e.length;r++)e[r].updateMaterial(e[r].material,e[r].visibleNodes,t,i),e[r].updateVisibleBounds();return u.lru.freeMemory(),n}function ye(e,t,i){for(var n=[],r=[],o=new oe((function(e){return 1/e.weight})),s=0;s<e.length;s++){var a=e[s];if(a.initialized()){a.numVisibleNodes=0,a.numVisiblePoints=0,a.deepestVisibleLevel=0,a.visibleNodes=[],a.visibleGeometry=[],t.updateMatrixWorld();var l=new h.Frustum,u=t.matrixWorldInverse,d=a.matrixWorld,p=t.clone();p.near=t.near,p.updateProjectionMatrix();var c=t.projectionMatrix,f=(new h.Matrix4).multiply(c).multiply(u).multiply(d);l.setFromProjectionMatrix(f),n.push(l);var m=t.matrixWorld,g=d.clone().invert(),v=(new h.Matrix4).multiply(g).multiply(m),y=(new h.Vector3).setFromMatrixPosition(v);r.push(y),a.visible&&null!==a.root&&o.push({pointcloud:s,node:a.root,weight:Number.MAX_VALUE}),a.root.isTreeNode()&&a.hideDescendants(a.root.sceneNode);for(var x=0;x<a.boundingBoxNodes.length;x++)a.boundingBoxNodes[x].visible=!1}}return{frustums:n,camObjPositions:r,priorityQueue:o}}const xe="1.4.2";class be{constructor(){this.boundingBox=new h.Box3,this.numPoints=0,this.data={}}add(e){var t=this.numPoints,i=t+e.numPoints,n=Object.keys(this.data),r=Object.keys(e.data),o=new Set([...n,...r]);for(var s of o)if(n.includes(s)&&r.includes(s)){var a=new(0,this.data[s].constructor)(this.data[s].length+e.data[s].length);a.set(this.data[s],0),a.set(e.data[s],this.data[s].length),this.data[s]=a}else if(n.includes(s)&&!r.includes(s)){var l=this.data[s].length/this.numPoints;(u=new(0,this.data[s].constructor)(l*i)).set(this.data[s],0),this.data[s]=u}else if(!n.includes(s)&&r.includes(s)){var u;l=e.data[s].length/e.numPoints,(u=new(0,e.data[s].constructor)(l*i)).set(e.data[s],l*t),this.data[s]=u}this.numPoints=i,this.boundingBox.union(e.boundingBox)}}function Se(e,t){var i;if(t===h.RepeatWrapping)return e.REPEAT;if(t===h.ClampToEdgeWrapping)return e.CLAMP_TO_EDGE;if(t===h.MirroredRepeatWrapping)return e.MIRRORED_REPEAT;if(t===h.NearestFilter)return e.NEAREST;if(t===h.NearestMipMapNearestFilter)return e.NEAREST_MIPMAP_NEAREST;if(t===h.NearestMipMapLinearFilter)return e.NEAREST_MIPMAP_LINEAR;if(t===h.LinearFilter)return e.LINEAR;if(t===h.LinearMipMapNearestFilter)return e.LINEAR_MIPMAP_NEAREST;if(t===h.LinearMipMapLinearFilter)return e.LINEAR_MIPMAP_LINEAR;if(t===h.UnsignedByteType)return e.UNSIGNED_BYTE;if(t===h.UnsignedShort4444Type)return e.UNSIGNED_SHORT_4_4_4_4;if(t===h.UnsignedShort5551Type)return e.UNSIGNED_SHORT_5_5_5_1;if(t===h.UnsignedShort565Type)return e.UNSIGNED_SHORT_5_6_5;if(t===h.ByteType)return e.BYTE;if(t===h.ShortType)return e.SHORT;if(t===h.UnsignedShortType)return e.UNSIGNED_SHORT;if(t===h.IntType)return e.INT;if(t===h.UnsignedIntType)return e.UNSIGNED_INT;if(t===h.FloatType)return e.FLOAT;if(t===h.HalfFloatType&&null!==(i=extensions.get("OES_texture_half_float")))return i.HALF_FLOAT_OES;if(t===h.AlphaFormat)return e.ALPHA;if(t===h.RGBFormat)return e.RGB;if(t===h.RGBAFormat)return e.RGBA;if(t===h.LuminanceFormat)return e.LUMINANCE;if(t===h.LuminanceAlphaFormat)return e.LUMINANCE_ALPHA;if(t===h.DepthFormat)return e.DEPTH_COMPONENT;if(t===h.DepthStencilFormat)return e.DEPTH_STENCIL;if(t===h.AddEquation)return e.FUNC_ADD;if(t===h.SubtractEquation)return e.FUNC_SUBTRACT;if(t===h.ReverseSubtractEquation)return e.FUNC_REVERSE_SUBTRACT;if(t===h.ZeroFactor)return e.ZERO;if(t===h.OneFactor)return e.ONE;if(t===h.SrcColorFactor)return e.SRC_COLOR;if(t===h.OneMinusSrcColorFactor)return e.ONE_MINUS_SRC_COLOR;if(t===h.SrcAlphaFactor)return e.SRC_ALPHA;if(t===h.OneMinusSrcAlphaFactor)return e.ONE_MINUS_SRC_ALPHA;if(t===h.DstAlphaFactor)return e.DST_ALPHA;if(t===h.OneMinusDstAlphaFactor)return e.ONE_MINUS_DST_ALPHA;if(t===h.DstColorFactor)return e.DST_COLOR;if(t===h.OneMinusDstColorFactor)return e.ONE_MINUS_DST_COLOR;if(t===h.SrcAlphaSaturateFactor)return e.SRC_ALPHA_SATURATE;if((t===h.RGB_S3TC_DXT1_Format||t===RGBA_S3TC_DXT1_Format||t===h.RGBA_S3TC_DXT3_Format||t===RGBA_S3TC_DXT5_Format)&&null!==(i=extensions.get("WEBGL_compressed_texture_s3tc"))){if(t===h.RGB_S3TC_DXT1_Format)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===h.RGBA_S3TC_DXT1_Format)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===h.RGBA_S3TC_DXT3_Format)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===h.RGBA_S3TC_DXT5_Format)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((t===h.RGB_PVRTC_4BPPV1_Format||t===h.RGB_PVRTC_2BPPV1_Format||t===h.RGBA_PVRTC_4BPPV1_Format||t===h.RGBA_PVRTC_2BPPV1_Format)&&null!==(i=extensions.get("WEBGL_compressed_texture_pvrtc"))){if(t===h.RGB_PVRTC_4BPPV1_Format)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===h.RGB_PVRTC_2BPPV1_Format)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===h.RGBA_PVRTC_4BPPV1_Format)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===h.RGBA_PVRTC_2BPPV1_Format)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(t===h.RGB_ETC1_Format&&null!==(i=extensions.get("WEBGL_compressed_texture_etc1")))return i.COMPRESSED_RGB_ETC1_WEBGL;if((t===h.MinEquation||t===h.MaxEquation)&&null!==(i=extensions.get("EXT_blend_minmax"))){if(t===h.MinEquation)return i.MIN_EXT;if(t===h.MaxEquation)return i.MAX_EXT}return t===UnsignedInt248Type&&null!==(i=extensions.get("WEBGL_depth_texture"))?i.UNSIGNED_INT_24_8_WEBGL:0}class we{constructor(e,t){this.gl=e,this.texture=t,this.id=e.createTexture(),this.target=e.TEXTURE_2D,this.version=-1,this.update(t)}update(){if(this.texture.image){var e=this.gl,t=this.texture;if(this.version!==t.version){this.target=e.TEXTURE_2D,e.bindTexture(this.target,this.id);var i,n=Se(e,t.format),r=t.image.width,o=t.image.height,s=n,a=Se(e,t.type);e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,t.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,t.unpackAlignment),t instanceof h.DataTexture?(i=t.image.data,e.texParameteri(this.target,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(this.target,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(this.target,e.TEXTURE_MAG_FILTER,Se(e,t.magFilter)),e.texParameteri(this.target,e.TEXTURE_MIN_FILTER,Se(e,t.minFilter)),e.texImage2D(this.target,0,n,r,o,0,s,a,i)):t instanceof h.CanvasTexture&&(i=t.image,e.texParameteri(this.target,e.TEXTURE_WRAP_S,Se(e,t.wrapS)),e.texParameteri(this.target,e.TEXTURE_WRAP_T,Se(e,t.wrapT)),e.texParameteri(this.target,e.TEXTURE_MAG_FILTER,Se(e,t.magFilter)),e.texParameteri(this.target,e.TEXTURE_MIN_FILTER,Se(e,t.minFilter)),e.texImage2D(this.target,0,n,n,a,i)),e.bindTexture(this.target,null),this.version=t.version}}else this.version=this.texture.version}}class Te{constructor(e,t,i,n){this.gl=e,this.name=t,this.vsSource=i,this.fsSource=n,this.cache=new Map,this.vs=null,this.fs=null,this.program=null,this.uniformLocations={},this.attributeLocations={},this.update(i,n)}update(e,t){this.vsSource=e,this.fsSource=t,this.linkProgram()}compileShader(e,t){var i=this.gl;if(i.shaderSource(e,t),i.compileShader(e),!i.getShaderParameter(e,i.COMPILE_STATUS)){var n=i.getShaderInfoLog(e);throw new Error("Potree: Could not compile shader "+this.name+", "+n)}}linkProgram(){var e=this.gl;if(this.uniformLocations={},this.attributeLocations={},e.useProgram(null),h=this.cache.get(`${this.vsSource}, ${this.fsSource}`))return this.program=h.program,this.vs=h.vs,this.fs=h.fs,this.attributeLocations=h.attributeLocations,void(this.uniformLocations=h.uniformLocations);for(var t of(this.vs=e.createShader(e.VERTEX_SHADER),this.fs=e.createShader(e.FRAGMENT_SHADER),this.program=e.createProgram(),Object.keys(se))){var i=se[t];e.bindAttribLocation(this.program,i,t)}this.compileShader(this.vs,this.vsSource),this.compileShader(this.fs,this.fsSource);var n=this.program;if(e.attachShader(n,this.vs),e.attachShader(n,this.fs),e.linkProgram(n),e.detachShader(n,this.vs),e.detachShader(n,this.fs),!e.getProgramParameter(n,e.LINK_STATUS)){var r=e.getProgramInfoLog(n);throw new Error("Potree: Could not link program "+this.name+", "+r)}for(var o=e.getProgramParameter(n,e.ACTIVE_ATTRIBUTES),s=0;s<o;s++){var a=e.getActiveAttrib(n,s);i=e.getAttribLocation(n,a.name),this.attributeLocations[a.name]=i}var l=e.getProgramParameter(n,e.ACTIVE_UNIFORMS);for(s=0;s<l;s++){var u=e.getActiveUniform(n,s);i=e.getUniformLocation(n,u.name),this.uniformLocations[u.name]=i}var h={program:this.program,vs:this.vs,fs:this.fs,attributeLocations:this.attributeLocations,uniformLocations:this.uniformLocations};this.cache.set(`${this.vsSource}, ${this.fsSource}`,h)}setUniformMatrix4(e,t){const i=this.gl,n=this.uniformLocations[e];if(null==n)return;let r=new Float32Array(t.elements);i.uniformMatrix4fv(n,!1,r)}setUniformMatrix4v(e,t){const i=this.gl,n=this.uniformLocations[`${e}[0]`];if(null==n)return;const r=t.forEach((e=>r.push(...e.elements))),o=new Float32Array(r);i.uniformMatrix4fv(n,!1,o)}setUniform1f(e,t){const i=this.gl,n=this.uniformLocations[e];null!=n&&i.uniform1f(n,t)}setUniform1fv(e,t){const i=this.gl,n=this.uniformLocations[`${e}[0]`];null!=n&&i.uniform1fv(n,t)}setUniformBoolean(e,t){const i=this.gl,n=this.uniformLocations[e];null!=n&&i.uniform1i(n,t)}setUniformTexture(e,t){const i=this.gl,n=this.uniformLocations[e];null!=n&&i.uniform1i(n,t)}setUniform2f(e,t){const i=this.gl,n=this.uniformLocations[e];null!=n&&i.uniform2f(n,t[0],t[1])}setUniform3f(e,t){const i=this.gl,n=this.uniformLocations[e];t instanceof h.Color&&(t=t.toArray()),null!=n&&i.uniform3f(n,t[0],t[1],t[2])}setUniform(e,t){t.constructor===h.Matrix4?this.setUniformMatrix4(e,t):t.constructor===h.Color?this.setUniform3f(e,t):"number"==typeof t?this.setUniform1f(e,t):"boolean"==typeof t?this.setUniformBoolean(e,t):t instanceof we?this.setUniformTexture(e,t):t instanceof Array?2===t.length?this.setUniform2f(e,t):3===t.length&&this.setUniform3f(e,t):console.error("Potree: Unhandled uniform type: ",e,t)}setUniform1i(e,t){var i=this.gl,n=this.uniformLocations[e];null!=n&&i.uniform1i(n,t)}}class _e{constructor(){this.numElements=0,this.vao=null,this.vbos=new Map}}class Ae extends h.Mesh{constructor(){super(new h.BufferGeometry,new h.MeshBasicMaterial({opacity:0,wireframe:!1,transparent:!0})),this.rotation.set(-Math.PI/2,0,0),this.frustumCulled=!0,this.pointclouds=[],this.nodeSize=30,this.pointBudget=1e10,this.nodeLoadRate=2}raycast(e,t){}setPointBudget(e){this.pointBudget=e}onBeforeRender(e,t,i,n,r,o){for(var s=0;s<this.pointclouds.length;s++)this.pointclouds[s].minimumNodePixelSize=this.nodeSize;ve(this.pointclouds,i,e)}recalculateBoxGeometry(){var e=this.getBoundingBox(),t=e.getSize(new h.Vector3),i=e.getCenter(new h.Vector3),n=new h.Matrix4;n.makeTranslation(i.x,-i.z,i.y);var r=new h.BoxBufferGeometry(t.x,t.z,t.y);r.applyMatrix4(n),this.geometry=r}add(e){h.Object3D.prototype.add.call(this,e),e instanceof b&&(e.showBoundingBox=!1,e.generateDEM=!1,this.pointclouds.push(e),this.recalculateBoxGeometry())}remove(e){if(h.Object3D.prototype.remove.call(this,e),e instanceof b){var t=this.pointclouds.indexOf(e);-1!==t&&(this.pointclouds.splice(t,1),this.recalculateBoxGeometry())}}getBoundingBox(){var e=new h.Box3;this.updateMatrixWorld(!0);for(var t=0;t<this.pointclouds.length;t++){var i=this.pointclouds[t];i.updateMatrixWorld(!0);var n=i.pcoGeometry.tightBoundingBox?i.pcoGeometry.tightBoundingBox:i.boundingBox,r=q.computeTransformedBoundingBox(n,i.matrixWorld);e.union(r)}return e}estimateHeightAt(e){var t=null,i=1/0;for(var n of this.pointclouds)if(void 0!==n.root.geometryNode){var r=null,o=1/0,s=e.clone().sub(n.position);s.z=0;for(var a=new h.Ray(s,new h.Vector3(0,0,1)),l=[n.root];l.length>0;){var u=l.pop(),d=u.getBoundingBox();if(a.intersectBox(d)){var p=u.geometryNode.mean.z+n.position.z+u.geometryNode.boundingBox.min.z;for(var c of(u.geometryNode.spacing<=o&&(r=p,o=u.geometryNode.spacing),Object.keys(u.children)))u.children[c].geometryNode&&l.push(u.children[c])}}(null===t||o<i)&&(t=r,i=o)}return t}}class Ee extends Ae{constructor(){super(),this.buffers=new Map,this.shaders=new Map,this.textures=new Map,this.types=new Map}getExtensions(e){this.types.set(Float32Array,e.FLOAT),this.types.set(Uint8Array,e.UNSIGNED_BYTE),this.types.set(Uint16Array,e.UNSIGNED_SHORT);let t=e.getExtension("OES_vertex_array_object");e.createVertexArray=t.createVertexArrayOES.bind(t),e.bindVertexArray=t.bindVertexArrayOES.bind(t)}onBeforeRender(e,t,i,n,r,o){super.onBeforeRender(e,t,i,n,r,o);let s=e.getContext();void 0===s.bindVertexArray&&this.getExtensions(s);let a=this.fetchOctrees();for(let t of a.octrees){let n=t.visibleNodes;this.renderOctree(e,t,n,i)}s.activeTexture(s.TEXTURE1),s.bindTexture(s.TEXTURE_2D,null),e.state.reset()}createBuffer(e,t){let i=new _e;i.vao=e.createVertexArray(),i.numElements=t.attributes.position.count,e.bindVertexArray(i.vao);for(let n in t.attributes){let r=t.attributes[n],o=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,o),e.bufferData(e.ARRAY_BUFFER,r.array,e.STATIC_DRAW);let s=se[n],a=r.normalized,l=this.types.get(r.array.constructor);void 0!==l&&(e.vertexAttribPointer(s,r.itemSize,l,a,0,0),e.enableVertexAttribArray(s)),i.vbos.set(n,{handle:o,name:n,count:r.count,itemSize:r.itemSize,type:t.attributes.position.array.constructor,version:0})}return e.bindBuffer(e.ARRAY_BUFFER,null),e.bindVertexArray(null),i}updateBuffer(e,t){let i=this.buffers.get(t);e.bindVertexArray(i.vao);for(let n in t.attributes){let r=t.attributes[n],o=se[n],s=r.normalized,a=this.types.get(r.array.constructor),l=null;i.vbos.has(n)?(l=i.vbos.get(n).handle,i.vbos.get(n).version=r.version):(l=e.createBuffer(),i.vbos.set(n,{handle:l,name:n,count:r.count,itemSize:r.itemSize,type:t.attributes.position.array.constructor,version:r.version})),e.bindBuffer(e.ARRAY_BUFFER,l),e.bufferData(e.ARRAY_BUFFER,r.array,e.STATIC_DRAW),e.vertexAttribPointer(o,r.itemSize,a,s,0,0),e.enableVertexAttribArray(o)}e.bindBuffer(e.ARRAY_BUFFER,null),e.bindVertexArray(null)}fetchOctrees(){let e=[],t=[this];for(;t.length>0;){let i=t.pop();if(i instanceof b){e.push(i);continue}let n=i.children.filter((e=>e.visible));t.push(...n)}return{octrees:e}}renderNodes(e,t,i,n,r,o){let s=e.getContext(),a=t.material,l=r.matrixWorldInverse,d=new h.Matrix4,p=new Float32Array(16);for(let e of i){if(void 0!==u.debug.allowedNodes&&!u.debug.allowedNodes.includes(e.name))continue;let t=e.sceneNode.matrixWorld;if(d.multiplyMatrices(l,t),n){let t=n.offsets.get(e);o.setUniform1f("uVNStart",t)}let i,r=e.getLevel();o.setUniform("uDebug",!0===e.debug),e instanceof J?i=0===Object.keys(e.children).length:e instanceof te&&(i=e.geometryNode.isLeaf),o.setUniform("uIsLeafNode",i);let h=o.uniformLocations.modelMatrix;h&&(p.set(t.elements),s.uniformMatrix4fv(h,!1,p));let v=o.uniformLocations.modelViewMatrix;if(p.set(d.elements),s.uniformMatrix4fv(v,!1,p),a.clipping&&a.clippingPlanes&&a.clippingPlanes.length>0){for(var c=a.clippingPlanes,f=new Array(4*a.clippingPlanes.length),m=0;m<c.length;m++)f[4*m+0]=c[m].normal.x,f[4*m+1]=c[m].normal.y,f[4*m+2]=c[m].normal.z,f[4*m+3]=c[m].constant;var g=o.uniformLocations["clipPlanes[0]"];if(void 0===g)throw new Error("Could not find uniform clipPlanes");s.uniform4fv(g,f)}if(a.clipPolygons&&a.clipPolygons.length>0){let e=[],i=[];for(let n of a.clipPolygons){let r=n.viewMatrix,o=n.projMatrix.clone().multiply(r).multiply(t);e.push(n.markers.length),i.push(o)}let n=[].concat(...i.map((e=>e.elements))),r=new Array(24*a.clipPolygons.length);for(let e=0;e<a.clipPolygons.length;e++){let t=a.clipPolygons[e];for(let i=0;i<t.markers.length;i++)r[24*e+(3*i+0)]=t.markers[i].position.x,r[24*e+(3*i+1)]=t.markers[i].position.y,r[24*e+(3*i+2)]=t.markers[i].position.z}let l=o.uniformLocations["uClipPolygonVCount[0]"];s.uniform1iv(l,e);let u=o.uniformLocations["uClipPolygonWVP[0]"];s.uniformMatrix4fv(u,!1,n);let h=o.uniformLocations["uClipPolygonVertices[0]"];s.uniform3fv(h,r)}o.setUniform1f("uLevel",r),o.setUniform1f("uNodeSpacing",e.geometryNode.estimatedSpacing),o.setUniform1f("uPCIndex",a.clipPolygons.length);let y=e.geometryNode.geometry,x=null;if(this.buffers.has(y)){x=this.buffers.get(y);for(let e in y.attributes)y.attributes[e].version>x.vbos.get(e).version&&this.updateBuffer(s,y)}else x=this.createBuffer(s,y),this.buffers.set(y,x);s.bindVertexArray(x.vao),s.drawArrays(s.POINTS,0,x.numElements)}s.bindVertexArray(null)}renderOctree(e,t,i,n,r=null,o={}){let s=e.getContext(),a=o.material||t.material,l=o.shadowMaps||[],u=n.matrixWorldInverse,d=n.matrixWorld,p=n.projectionMatrix,c=n.projectionMatrixInverse,f=(new h.Matrix4,null),m=0;if(a.pointSizeType===he.ADAPTIVE||a.pointColorType===pe.LOD){f=t.computeVisibilityTextureData(i,n);let e=a.visibleNodesTexture;e.image.data.set(f.data),e.needsUpdate=!0}let g=null;this.shaders.has(a)?g=this.shaders.get(a):(g=new Te(s,"pointcloud",a.vertexShader,a.fragmentShader),this.shaders.set(a,g));let v=a.snapEnabled?a.numSnapshots:0,y=a.clipBoxes&&a.clipBoxes.length?a.clipBoxes.length:0,x=a.clipPolygons&&a.clipPolygons.length?a.clipPolygons.length:0;var b=a.clipping&&a.clippingPlanes&&a.clippingPlanes.length?a.clippingPlanes.length:0;let S=["#define num_shadowmaps "+l.length,"#define num_snapshots "+v,"#define num_clipboxes "+y,"#define num_clipspheres 0","#define num_clippolygons "+x,"#define num_clipplanes "+b].join("\n"),w=S+"\n"+a.vertexShader,T=S+"\n"+a.fragmentShader;g.update(w,T),a.needsUpdate=!1;for(let e of Object.keys(a.uniforms)){let t=a.uniforms[e];if("t"==t.type){let e=t.value;if(!e)continue;if(!this.textures.has(e)){let t=new we(s,e);this.textures.set(e,t)}this.textures.get(e).update()}}s.useProgram(g.program),a.opacity<1?(s.enable(s.BLEND),s.blendFunc(s.SRC_ALPHA,s.ONE),s.depthMask(!1),s.disable(s.DEPTH_TEST)):(s.disable(s.BLEND),s.depthMask(!0),s.enable(s.DEPTH_TEST)),g.setUniformMatrix4("projectionMatrix",p),g.setUniformMatrix4("viewMatrix",u),g.setUniformMatrix4("uViewInv",d),g.setUniformMatrix4("uProjInv",c);let _=r?r.width:a.screenWidth,A=r?r.height:a.screenHeight;if(g.setUniform1f("uScreenWidth",_),g.setUniform1f("uScreenHeight",A),g.setUniform1f("fov",Math.PI*n.fov/180),g.setUniform1f("near",n.near),g.setUniform1f("far",n.far),e.capabilities.logarithmicDepthBuffer&&g.setUniform("logDepthBufFC",2/(Math.log(n.far+1)/Math.LN2)),n instanceof h.OrthographicCamera?(g.setUniform("uUseOrthographicCamera",!0),g.setUniform("uOrthoWidth",n.right-n.left),g.setUniform("uOrthoHeight",n.top-n.bottom)):g.setUniform("uUseOrthographicCamera",!1),a.clipBoxes.length+a.clipPolygons.length===0?g.setUniform1i("clipTask",le.NONE):g.setUniform1i("clipTask",a.clipTask),g.setUniform1i("clipMethod",a.clipMethod),a.clipBoxes&&a.clipBoxes.length>0){let e=g.uniformLocations["clipBoxes[0]"];s.uniformMatrix4fv(e,!1,a.uniforms.clipBoxes.value)}g.setUniform1f("size",a.size),g.setUniform1f("maxSize",a.uniforms.maxSize.value),g.setUniform1f("minSize",a.uniforms.minSize.value),g.setUniform1f("uOctreeSpacing",a.spacing),g.setUniform("uOctreeSize",a.uniforms.octreeSize.value),g.setUniform3f("uColor",a.color.toArray()),g.setUniform1f("uOpacity",a.opacity),g.setUniform2f("elevationRange",a.elevationRange),g.setUniform2f("intensityRange",a.intensityRange),g.setUniform1f("intensityGamma",a.intensityGamma),g.setUniform1f("intensityContrast",a.intensityContrast),g.setUniform1f("intensityBrightness",a.intensityBrightness),g.setUniform1f("rgbGamma",a.rgbGamma),g.setUniform1f("rgbContrast",a.rgbContrast),g.setUniform1f("rgbBrightness",a.rgbBrightness),g.setUniform1f("uTransition",a.transition),g.setUniform1f("wRGB",a.weightRGB),g.setUniform1f("wIntensity",a.weightIntensity),g.setUniform1f("wElevation",a.weightElevation),g.setUniform1f("wClassification",a.weightClassification),g.setUniform1f("wReturnNumber",a.weightReturnNumber),g.setUniform1f("wSourceID",a.weightSourceID),g.setUniform1fv("hiddenClassifications",a.hiddenClassifications),g.setUniform1f("selectedPointSourceID",a.selectedPointSourceID),g.setUniform3f("selectedPointSourceIDColor",a.selectedPointSourceIDColor);let E=this.textures.get(a.visibleNodesTexture);g.setUniform1i("visibleNodesTexture",m),s.activeTexture(s.TEXTURE0+m),s.bindTexture(E.target,E.id),m++;let B=this.textures.get(a.gradientTexture);g.setUniform1i("gradient",m),s.activeTexture(s.TEXTURE0+m),s.bindTexture(B.target,B.id),m++;let N=this.textures.get(a.classificationTexture);g.setUniform1i("classificationLUT",m),s.activeTexture(s.TEXTURE0+m),s.bindTexture(N.target,N.id),m++;let P=this.textures.get(a.hiddenPointSourceIDsTexture);if(g.setUniform1i("hiddenPointSourceIDs",m),s.activeTexture(s.TEXTURE0+m),s.bindTexture(P.target,P.id),m++,!0===a.snapEnabled){let t=g.uniformLocations["uSnapshot[0]"],i=g.uniformLocations["uSnapshotDepth[0]"],n=m,r=new Array(5).fill(n).map(((e,t)=>e+t)),o=new Array(5).fill(1+Math.max(...r)).map(((e,t)=>e+t));m=1+Math.max(...o),s.uniform1iv(t,r),s.uniform1iv(i,o);for(let t=0;t<5;t++){let i=a.uniforms.uSnapshot.value[t],n=a.uniforms.uSnapshotDepth.value[t];if(!i)break;let l=e.properties.get(i).__webglTexture,u=e.properties.get(n).__webglTexture,h=r[t],d=o[t];s.activeTexture(s[`TEXTURE${h}`]),s.bindTexture(s.TEXTURE_2D,l),s.activeTexture(s[`TEXTURE${d}`]),s.bindTexture(s.TEXTURE_2D,u)}let l=[].concat(...a.uniforms.uSnapView.value.map((e=>e.elements))),u=g.uniformLocations["uSnapView[0]"];s.uniformMatrix4fv(u,!1,l),l=[].concat(...a.uniforms.uSnapProj.value.map((e=>e.elements)));let h=g.uniformLocations["uSnapProj[0]"];s.uniformMatrix4fv(h,!1,l),l=[].concat(...a.uniforms.uSnapProjInv.value.map((e=>e.elements)));let d=g.uniformLocations["uSnapProjInv[0]"];s.uniformMatrix4fv(d,!1,l),l=[].concat(...a.uniforms.uSnapViewInv.value.map((e=>e.elements)));let p=g.uniformLocations["uSnapViewInv[0]"];s.uniformMatrix4fv(p,!1,l)}this.renderNodes(e,t,i,f,n,g),s.activeTexture(s.TEXTURE2),s.bindTexture(s.TEXTURE_2D,null),s.activeTexture(s.TEXTURE0)}}})(),module.exports=n})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL25vZGVfbW9kdWxlcy93b3JrZXItbG9hZGVyL2Rpc3QvcnVudGltZS9pbmxpbmUuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3BvdHJlZS1jb3JlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS91dGlscy9MUlUuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2Uvd29ya2Vycy9CaW5hcnlEZWNvZGVyV29ya2VyLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL3dvcmtlcnMvTEFTRGVjb2Rlcldvcmtlci5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS91dGlscy9Xb3JrZXJNYW5hZ2VyLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL0dsb2JhbC5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS9leHRlcm5hbCBcInRocmVlXCIiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvUG9pbnRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL3BvaW50Y2xvdWQvREVNTm9kZS5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9wb2ludGNsb3VkL0RFTS5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9wb2ludGNsb3VkL1BvaW50Q2xvdWRUcmVlLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL3BvaW50Y2xvdWQvZ2VvbWV0cmllcy9Qb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnkuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvdXRpbHMvVmVyc2lvblV0aWxzLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL1hIUkZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvbG9hZGVycy9HcmV5aG91bmRCaW5hcnlMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvbG9hZGVycy9HcmV5aG91bmRVdGlscy5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9sb2FkZXJzL0dyZXlob3VuZExvYWRlci5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9sb2FkZXJzL0JpbmFyeUxvYWRlci5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9sb2FkZXJzL0xBU0xvYWRlci5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9sb2FkZXJzL0xBU0xBWkxvYWRlci5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9wb2ludGNsb3VkL2dlb21ldHJpZXMvUG9pbnRDbG91ZE9jdHJlZUdlb21ldHJ5LmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL2xvYWRlcnMvUE9DTG9hZGVyLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL2xvYWRlcnMvZXB0L0VwdEJpbmFyeUxvYWRlci5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9sb2FkZXJzL2VwdC9FcHRMYXN6aXBMb2FkZXIuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvcG9pbnRjbG91ZC9nZW9tZXRyaWVzL1BvaW50Q2xvdWRFcHRHZW9tZXRyeS5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9sb2FkZXJzL0VwdExvYWRlci5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS91dGlscy9IZWxwZXJVdGlscy5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9HcmFkaWVudHMuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvU2hhZGVycy5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9wb2ludGNsb3VkL21hdGVyaWFscy9Qb2ludENsb3VkTWF0ZXJpYWwuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvcG9pbnRjbG91ZC9Qb2ludENsb3VkT2N0cmVlLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL3BvaW50Y2xvdWQvUG9pbnRDbG91ZEFyZW5hNEQuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvcG9pbnRjbG91ZC9nZW9tZXRyaWVzL1BvaW50Q2xvdWRBcmVuYTRER2VvbWV0cnkuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvbGliL0JpbmFyeUhlYXAuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvUG90cmVlLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL1BvaW50cy5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9XZWJHTFRleHR1cmUuanMiLCJ3ZWJwYWNrOi8vcG90cmVlLWNvcmUvLi9zb3VyY2UvU2hhZGVyLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL1dlYkdMQnVmZmVyLmpzIiwid2VicGFjazovL3BvdHJlZS1jb3JlLy4vc291cmNlL29iamVjdHMvQmFzaWNHcm91cC5qcyIsIndlYnBhY2s6Ly9wb3RyZWUtY29yZS8uL3NvdXJjZS9vYmplY3RzL0dyb3VwLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb250ZW50Iiwid29ya2VyQ29uc3RydWN0b3IiLCJ3b3JrZXJPcHRpb25zIiwidXJsIiwiZ2xvYmFsU2NvcGUiLCJzZWxmIiwid2luZG93IiwiYmxvYiIsIkJsb2IiLCJlIiwiQmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsIk1vekJsb2JCdWlsZGVyIiwiTVNCbG9iQnVpbGRlciIsImFwcGVuZCIsImdldEJsb2IiLCJVUkwiLCJ3ZWJraXRVUkwiLCJvYmplY3RVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJ3b3JrZXIiLCJyZXZva2VPYmplY3RVUkwiLCJjb25jYXQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJFcnJvciIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJMUlVJdGVtIiwibm9kZSIsInRoaXMiLCJwcmV2aW91cyIsIm5leHQiLCJMUlUiLCJmaXJzdCIsImxhc3QiLCJpdGVtcyIsImVsZW1lbnRzIiwibnVtUG9pbnRzIiwiaWQiLCJpdGVtIiwibG9hZGVkIiwibHJ1SXRlbSIsInN0cmluZyIsImN1cnIiLCJzaXplIiwiR2xvYmFsIiwicG9pbnRMb2FkTGltaXQiLCJkaXNwb3NlRGVzY2VuZGFudHMiLCJzdGFjayIsInB1c2giLCJsZW5ndGgiLCJjdXJyZW50IiwicG9wIiwiZGlzcG9zZSIsInJlbW92ZSIsImNoaWxkcmVuIiwiV29ya2VyX2ZuIiwiV29ya2VyTWFuYWdlciIsIndvcmtlcnMiLCJpIiwidHlwZSIsIm9uTWVzc2FnZSIsIm1lc3NhZ2UiLCJ0cmFuc2ZlciIsImdldFdvcmtlciIsIm9ubWVzc2FnZSIsImV2ZW50IiwicmV0dXJuV29ya2VyIiwicG9zdE1lc3NhZ2UiLCJCSU5BUllfREVDT0RFUiIsIkxBU19MQVoiLCJMQVNfREVDT0RFUiIsIkdSRVlIT1VORCIsIkRFTSIsIkVQVF9MQVNfWklQX0RFQ09ERVIiLCJFUFRfQklOQVJZX0RFQ09ERVIiLCJkZWJ1ZyIsIndvcmtlclBhdGgiLCJjdXJyZW50U2NyaXB0IiwiZG9jdW1lbnQiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRBdHRyaWJ1dGUiLCJnZXRDdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0UGF0aCIsImhyZWYiLCJzbGljZSIsImNvbnNvbGUiLCJlcnJvciIsImdldEJhc2VQYXRoIiwibWF4Tm9kZXNMb2FkR1BVRnJhbWUiLCJtYXhERU1MZXZlbCIsIm1heE5vZGVzTG9hZGluZyIsIm5hdmlnYXRvciIsImhhcmR3YXJlQ29uY3VycmVuY3kiLCJudW1Ob2Rlc0xvYWRpbmciLCJtZWFzdXJlVGltaW5ncyIsIndvcmtlclBvb2wiLCJscnUiLCJwb2ludGNsb3VkVHJhbnNmb3JtVmVyc2lvbiIsInJlcXVpcmUiLCJQb2ludEF0dHJpYnV0ZU5hbWVzIiwiUE9TSVRJT05fQ0FSVEVTSUFOIiwiQ09MT1JfUEFDS0VEIiwiQ09MT1JfRkxPQVRTXzEiLCJDT0xPUl9GTE9BVFNfMjU1IiwiTk9STUFMX0ZMT0FUUyIsIkZJTExFUiIsIklOVEVOU0lUWSIsIkNMQVNTSUZJQ0FUSU9OIiwiTk9STUFMX1NQSEVSRU1BUFBFRCIsIk5PUk1BTF9PQ1QxNiIsIk5PUk1BTCIsIlJFVFVSTl9OVU1CRVIiLCJOVU1CRVJfT0ZfUkVUVVJOUyIsIlNPVVJDRV9JRCIsIklORElDRVMiLCJTUEFDSU5HIiwiUG9pbnRBdHRyaWJ1dGVUeXBlcyIsIkRBVEFfVFlQRV9ET1VCTEUiLCJvcmRpbmFsIiwiREFUQV9UWVBFX0ZMT0FUIiwiREFUQV9UWVBFX0lOVDgiLCJEQVRBX1RZUEVfVUlOVDgiLCJEQVRBX1RZUEVfSU5UMTYiLCJEQVRBX1RZUEVfVUlOVDE2IiwiREFUQV9UWVBFX0lOVDMyIiwiREFUQV9UWVBFX1VJTlQzMiIsIkRBVEFfVFlQRV9JTlQ2NCIsIkRBVEFfVFlQRV9VSU5UNjQiLCJQb2ludEF0dHJpYnV0ZSIsIm5hbWUiLCJudW1FbGVtZW50cyIsImJ5dGVTaXplIiwiUG9pbnRBdHRyaWJ1dGVzIiwicG9pbnRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInBvaW50QXR0cmlidXRlIiwiUkdCQV9QQUNLRUQiLCJSR0JfUEFDS0VEIiwiRklMTEVSXzFCIiwiYWRkIiwiaGFzQ29sb3JzIiwiaGFzTm9ybWFscyIsIkRFTU5vZGUiLCJib3giLCJ0aWxlU2l6ZSIsImxldmVsIiwiZGF0YSIsIkZsb2F0MzJBcnJheSIsImZpbGwiLCJtaXBNYXAiLCJtaXBNYXBOZWVkc1VwZGF0ZSIsInNvdXJjZVNpemUiLCJtaXBTaXplIiwicGFyc2VJbnQiLCJtaXBTb3VyY2UiLCJtaXBEYXRhIiwiaiIsImgwMCIsImgwMSIsImgxMCIsImgxMSIsImhlaWdodCIsIndlaWdodCIsImlzRmluaXRlIiwicG9zaXRpb24iLCJib3hTaXplIiwiZ2V0U2l6ZSIsIngiLCJtaW4iLCJ5IiwibWlwTWFwTGV2ZWwiLCJ1diIsIk1hdGgiLCJiIiwiaTAiLCJpMSIsImZsb29yIiwiY2VpbCIsImowIiwiajEiLCJ3aDAwIiwid2gwMSIsIndoMTAiLCJ3aDExIiwid3N1bSIsImgiLCJoZWlnaHRBdE1pcE1hcExldmVsIiwiaGFuZGxlciIsImNoaWxkIiwiZmlsdGVyIiwiYyIsInRyYXZlcnNlIiwicG9pbnRjbG91ZCIsIm1hdHJpeCIsImJvdW5kaW5nQm94Iiwicm9vdCIsInZlcnNpb24iLCJyZXN1bHQiLCJub2RlQm94U2l6ZSIsIm1heCIsImluZGV4IiwiY2hpbGRCb3giLCJjbG9uZSIsIm1hcCIsImxpc3QiLCJjdXJyZW50SGVpZ2h0IiwiY2hpbGRJbmRleCIsInoiLCJ2aXNpYmxlTm9kZXMiLCJlcXVhbHMiLCJtYXRyaXhXb3JsZCIsImFwcGx5TWF0cml4NCIsInZuIiwiZGVtVmVyc2lvbiIsInByb2plY3RlZEJveCIsImdldEJvdW5kaW5nQm94IiwicHJvamVjdGVkQm94U2l6ZSIsInRhcmdldE5vZGVzIiwiZXhwYW5kQW5kRmluZEJ5Qm94IiwiZ2V0TGV2ZWwiLCJnZW9tZXRyeU5vZGUiLCJnZW9tZXRyeSIsImFycmF5IiwidG9BcnJheSIsImJ1ZmZlciIsInRyYW5zZmVyYWJsZXMiLCJydW5UYXNrIiwiZGVtIiwiZGVtTm9kZSIsInUiLCJ2IiwiaXgiLCJpeSIsImNyZWF0ZU1pcE1hcCIsIlBvaW50Q2xvdWRUcmVlTm9kZSIsIm5lZWRzVHJhbnNmb3JtVXBkYXRlIiwiUG9pbnRDbG91ZFRyZWUiLCJzdXBlciIsIlBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeSIsInNwYWNpbmciLCJub2RlcyIsImhpZXJhcmNoeVN0ZXBTaXplIiwibG9hZGVyIiwic2NoZW1hIiwiYmFzZURlcHRoIiwib2Zmc2V0IiwicHJvamVjdGlvbiIsImJvdW5kaW5nU3BoZXJlIiwic2VydmVyVVJMIiwibm9ybWFsaXplIiwiY29sb3IiLCJpbnRlbnNpdHkiLCJQb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlIiwicGNvR2VvbWV0cnkiLCJzY2FsZSIsIklEQ291bnQiLCJjaGFyQXQiLCJnZXRCb3VuZGluZ1NwaGVyZSIsIm9uZVRpbWVEaXNwb3NlSGFuZGxlcnMiLCJiYXNlTG9hZGVkIiwiY2VudGVyIiwiYm91bmRzIiwic3ViIiwiZ2V0Q2VudGVyIiwibXVsdGlwbHlTY2FsYXIiLCJncmV5aG91bmRCb3VuZHMiLCJncmV5aG91bmRPZmZzZXQiLCJWZXJzaW9uVXRpbHMiLCJ2bUxlbmd0aCIsImluZGV4T2YiLCJ2ZXJzaW9uTWFqb3IiLCJzdWJzdHIiLCJ2ZXJzaW9uTWlub3IiLCJjcmVhdGUiLCJpc0dlb21ldHJ5Tm9kZSIsImlzVHJlZU5vZGUiLCJpc0xvYWRlZCIsImdldENoaWxkcmVuIiwiZ2V0VVJMIiwiYm91bmRzU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsImFkZENoaWxkIiwicGFyZW50IiwibG9hZCIsImxvYWRpbmciLCJoYXNDaGlsZHJlbiIsImxvYWRIaWVyYXJjaHlUaGVuUG9pbnRzIiwibG9hZFBvaW50cyIsInRyYW5zZm9ybSIsIm1ha2VCaXRNYXNrIiwibWFzayIsImtleXMiLCJmb3JFYWNoIiwicGFyc2VDaGlsZHJlbkNvdW50cyIsImJhc2UiLCJwYXJlbnROYW1lIiwiY2hpbGROYW1lIiwic3dkIiwibndkIiwic3d1Iiwibnd1Iiwic2VkIiwibmVkIiwic2V1IiwibmV1IiwiZGVwdGhCZWdpbiIsImRlcHRoRW5kIiwiaHVybCIsInhociIsIlhIUkZhY3RvcnkiLCJjcmVhdGVYTUxIdHRwUmVxdWVzdCIsIm92ZXJyaWRlTWltZVR5cGUiLCJvcGVuIiwib25sb2FkIiwiZ3JleWhvdW5kSGllcmFyY2h5IiwiZGVjb2RlZCIsInBnZyIsInBhcmVudE5vZGUiLCJzdWJzdHJpbmciLCJjdXJyZW50Tm9kZSIsIkdyZXlob3VuZExvYWRlciIsImNyZWF0ZUNoaWxkQUFCQiIsInBvdyIsImNhbGxiYWNrIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJvbmVycm9yIiwibG9nIiwic3RhdHVzIiwic2VuZCIsImdldE51bVBvaW50cyIsImFzc2lnbiIsIm5ld2VyVGhhbiIsImVxdWFsT3JIaWdoZXIiLCJ1cFRvIiwiY29uZmlnIiwid2l0aENyZWRlbnRpYWxzIiwiY3VzdG9tSGVhZGVycyIsImhlYWRlciIsIlhNTEh0dHBSZXF1ZXN0IiwiQXJyYXkiLCJpc0FycmF5IiwiYmFzZU9wZW4iLCJhcHBseSIsImFyZ3VtZW50cyIsImN1c3RvbUhlYWRlciIsInNldFJlcXVlc3RIZWFkZXIiLCJmZXRjaCIsImFzeW5jIiwicmVzb3VyY2UiLCJoZWFkZXJzIiwiSGVhZGVycyIsIm9wdGlvbnMiLCJjcmVkZW50aWFscyIsIkdyZXlob3VuZEJpbmFyeUxvYWRlciIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlIiwiRGF0YVZpZXciLCJieXRlTGVuZ3RoIiwiZ2V0VWludDMyIiwiYmIiLCJUSFJFRSIsIlZlY3RvcjMiLCJub2RlT2Zmc2V0IiwiYnVmZmVycyIsImF0dHJpYnV0ZUJ1ZmZlcnMiLCJ0aWdodEJvdW5kaW5nQm94IiwiQm94MyIsImZyb21BcnJheSIsIkJ1ZmZlckdlb21ldHJ5IiwicHJvcGVydHkiLCJzZXRBdHRyaWJ1dGUiLCJCdWZmZXJBdHRyaWJ1dGUiLCJVaW50OEFycmF5IiwiYnVmZmVyQXR0cmlidXRlIiwibm9ybWFsaXplZCIsInNldCIsIm1lYW4iLCJHcmV5aG91bmRVdGlscyIsInJlcGxhY2UiLCJyZXN1bHRzIiwiUmVnRXhwIiwiZXhlYyIsImxvY2F0aW9uIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiY2IiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVkdWNlIiwicCIsInMiLCJmZXRjaEJpbmFyeSIsImVyciIsInZpZXciLCJudW1CeXRlcyIsInBvaW50U2l6ZSIsInBvaW50U2l6ZUZyb20iLCJjb2xvck5vcm0iLCJpbnRlbnNpdHlOb3JtIiwiZ2V0VWludDE2IiwibG9hZEluZm9KU09OIiwic3BsaXQiLCJncmV5aG91bmRJbmZvIiwiZ2V0UXVlcnlQYXJhbSIsInBhcnNlRmxvYXQiLCJyZWQiLCJncmVlbiIsImJsdWUiLCJlbnRyeSIsImNyZWF0ZVNjaGVtYSIsInNycyIsIlNwaGVyZSIsImdldE5vcm1hbGl6YXRpb24iLCJfIiwibG9hZFBvaW50QXR0cmlidXRlcyIsIm1ubyIsImZwYSIsInBhIiwiYWFiYiIsImRIYWxmTGVuZ3RoIiwiY29weSIsInhIYWxmTGVuZ3RoIiwieUhhbGZMZW5ndGgiLCJ6SGFsZkxlbmd0aCIsImNtaW4iLCJjbWF4IiwiQmluYXJ5TG9hZGVyIiwiZXN0aW1hdGVkU3BhY2luZyIsInBvaW50Rm9ybWF0UmVhZGVycyIsImR2IiwiZ2V0SW50MzIiLCJnZXRVaW50OCIsInJlYWRBcyIsImJ1ZiIsIlR5cGUiLCJjb3VudCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwicmV0IiwiTEFTTG9hZGVyIiwiYXJyYXlidWZmZXIiLCJMQVpMb2FkZXIiLCJuZXh0Q0IiLCJkb3JyIiwicmVxIiwiTEFTRmlsZSIsImRldGVybWluZVZlcnNpb24iLCJkZXRlcm1pbmVGb3JtYXQiLCJmb3JtYXRJZCIsImlzQ29tcHJlc3NlZCIsIkxBU0RlY29kZXIiLCJwb2ludEZvcm1hdElEIiwicG9pbnRzQ291bnQiLCJtaW5zIiwibWF4cyIsImFycmF5YiIsImRlY29kZXIiLCJyZWFkT2Zmc2V0IiwiUHJvbWlzZSIsInJlcyIsInJlaiIsInNldFRpbWVvdXQiLCJnZXRIZWFkZXIiLCJwb2ludHNPZmZzZXQiLCJVaW50MzJBcnJheSIsInBvaW50c0Zvcm1hdElkIiwicG9pbnRzU3RydWN0U2l6ZSIsIlVpbnQxNkFycmF5Iiwic3RhcnQiLCJGbG9hdDY0QXJyYXkiLCJwYXJzZUxBU0hlYWRlciIsInJlYWREYXRhIiwic2tpcCIsImVuZCIsImhhc01vcmVEYXRhIiwicG9pbnRzVG9SZWFkIiwiYnVmZmVyU2l6ZSIsInBvaW50c1JlYWQiLCJjbG9zZSIsImJpdF83IiwiYml0XzYiLCJ2ZXIiLCJJbnQ4QXJyYXkiLCJ2ZXJzaW9uQXNTdHJpbmciLCJnZXRQb2ludCIsIkxBU0xBWkxvYWRlciIsInRvTG93ZXJDYXNlIiwiQXJyYXlCdWZmZXIiLCJsZiIsIkxBU0xBWkJhdGNoZXIiLCJ0aGVuIiwibXNnIiwiaXNPcGVuIiwidG90YWxSZWFkIiwicmVhZGVyIiwiY2F0Y2giLCJwb3NpdGlvbnMiLCJjb2xvcnMiLCJpbnRlbnNpdGllcyIsImNsYXNzaWZpY2F0aW9ucyIsImNsYXNzaWZpY2F0aW9uIiwicmV0dXJuTnVtYmVycyIsInJldHVybk51bWJlciIsIm51bWJlck9mUmV0dXJucyIsInBvaW50U291cmNlSURzIiwicG9pbnRTb3VyY2VJRCIsImluZGljZXMiLCJQb2ludENsb3VkT2N0cmVlR2VvbWV0cnkiLCJvY3RyZWVEaXIiLCJQb2ludENsb3VkT2N0cmVlR2VvbWV0cnlOb2RlIiwiZ2V0SGllcmFyY2h5UGF0aCIsInBhdGgiLCJudW1QYXJ0cyIsImxvYWRIaWVyYWNoeVRoZW5Qb2ludHMiLCJoYnVmZmVyIiwic25vZGUiLCJzaGlmdCIsImNoaWxkQ2hpbGRyZW4iLCJjaGlsZE51bVBvaW50cyIsInBjbyIsImRlY29kZWROdW1Qb2ludHMiLCJQT0NMb2FkZXIiLCJseCIsImx5IiwibHoiLCJ1eCIsInV5IiwidXoiLCJ0aWdodEJvdW5kaW5nU3BoZXJlIiwiaGllcmFyY2h5Iiwic3ViVmVjdG9ycyIsIkVwdEJpbmFyeUxvYWRlciIsImciLCJwb2ludFNvdXJjZUlkIiwiZG9uZUxvYWRpbmciLCJlcHQiLCJlcHRTY2FsZSIsImVwdE9mZnNldCIsIkVwdExhc3ppcExvYWRlciIsIkVwdExhekJhdGNoZXIiLCJyZWFkIiwiZXh0cmFCeXRlcyIsImxhcyIsIlV0aWxzIiwidG9WZWN0b3IzIiwiZGltIiwiZmluZCIsIlBvaW50Q2xvdWRFcHRHZW9tZXRyeSIsImluZm8iLCJib3VuZHNDb25mb3JtaW5nIiwieHl6IiwiZmluZERpbSIsInNwYW4iLCJ0aWNrcyIsInRvQm94MyIsInNwaGVyZUZyb20iLCJmYWxsYmFja1Byb2plY3Rpb24iLCJob3Jpem9udGFsIiwiYXV0aG9yaXR5Iiwid2t0IiwiaGllcmFyY2h5VHlwZSIsImRhdGFUeXBlIiwiRXB0S2V5IiwiZHN0Iiwic3RlcCIsImluY2x1ZGVzIiwiUG9pbnRDbG91ZEVwdEdlb21ldHJ5Tm9kZSIsImsiLCJ0b1BvdHJlZU5hbWUiLCJmaWxlbmFtZSIsImxvYWRIaWVyYXJjaHkiLCJlcHRIaWVyYXJjaHlGaWxlIiwiaGllciIsImpzb24iLCJzb3J0IiwiZGEiLCJ4YSIsInlhIiwiemEiLCJkYiIsInhiIiwieWIiLCJ6YiIsImJ1ZmZlckdlb21ldHJ5IiwibnAiLCJFcHRMb2FkZXIiLCJmaWxlIiwibGFzdEluZGV4T2YiLCJIZWxwZXJVdGlscyIsIndpZHRoIiwidGV4dHVyZSIsIm5lZWRzVXBkYXRlIiwibWFnRmlsdGVyIiwidmVydGljZXMiLCJzZXRGcm9tUG9pbnRzIiwicGFyYW1zIiwicGVyZm9ybWFuY2UiLCJtYXJrIiwicG9pbnRzIiwicG9pbnRJbmRleCIsInBvaW50Iiwibm9kZVRvUG9pbnQiLCJtZWFzdXJlIiwiTWFwIiwiZW50cmllcyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGUiLCJzY2VuZU5vZGUiLCJ2YWx1ZXMiLCJpdGVtU2l6ZSIsInBvdHJlZSIsInJnYiIsIkNvbG9yIiwiYXR0cmlidXRlRmlsdGVyIiwiaW50ZXJzZWN0aW9uIiwib2JqZWN0IiwiZGlzdGFuY2UiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJkaXN0YW5jZVRvIiwiR3JhZGllbnRzIiwiUkFJTkJPVyIsIlNQRUNUUkFMIiwiUExBU01BIiwiWUVMTE9XX0dSRUVOIiwiVklSSURJUyIsIklORkVSTk8iLCJHUkFZU0NBTEUiLCJnbHNsIiwic3RyaW5ncyIsInJhdyIsIlNoYWRlcnMiLCJ2ZXJ0ZXgiLCJmcmFnbWVudCIsIlBvaW50Q2xvdWRNYXRlcmlhbCIsInBhcmFtZXRlcnMiLCJ2aXNpYmxlTm9kZXNUZXh0dXJlIiwiZ2VuZXJhdGVEYXRhVGV4dHVyZSIsIm1pbkZpbHRlciIsImdldFZhbGlkIiwibWluU2l6ZSIsIm1heFNpemUiLCJ0cmVlVHlwZSIsIlRyZWVUeXBlIiwiT0NUUkVFIiwiX3BvaW50U2l6ZVR5cGUiLCJQb2ludFNpemVUeXBlIiwiRklYRUQiLCJfc2hhcGUiLCJQb2ludFNoYXBlIiwiU1FVQVJFIiwiX3BvaW50Q29sb3JUeXBlIiwiUG9pbnRDb2xvclR5cGUiLCJSR0IiLCJfdXNlQ2xpcEJveCIsIl93ZWlnaHRlZCIsIl9ncmFkaWVudCIsIl90cmVlVHlwZSIsIl91c2VFREwiLCJfc25hcEVuYWJsZWQiLCJfbnVtU25hcHNob3RzIiwiX2RlZmF1bHRJbnRlbnNpdHlSYW5nZUNoYW5nZWQiLCJfZGVmYXVsdEVsZXZhdGlvblJhbmdlQ2hhbmdlZCIsIl9wb2ludFNlbGVjdGlvblR5cGUiLCJQb2ludFNlbGVjdGlvblR5cGUiLCJCUklHSFRORVNTIiwiY2xpcEJveGVzIiwiY2xpcFBvbHlnb25zIiwiZ3JhZGllbnRUZXh0dXJlIiwiZ2VuZXJhdGVHcmFkaWVudFRleHR1cmUiLCJsaWdodHMiLCJmb2ciLCJkZWZpbmVzIiwibm9ybWFsIiwidW5pZm9ybXMiLCJ2blN0YXJ0IiwiYmxlbmRIYXJkbmVzcyIsImJsZW5kRGVwdGhTdXBwbGVtZW50IiwiZm92Iiwic2NyZWVuV2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJuZWFyIiwiZmFyIiwidUNvbG9yIiwidU9wYWNpdHkiLCJvY3RyZWVTaXplIiwiYmJTaXplIiwiZWxldmF0aW9uUmFuZ2UiLCJjbGlwQm94Q291bnQiLCJjbGlwUG9seWdvbkNvdW50IiwiY2xpcFBvbHlnb25WQ291bnQiLCJjbGlwUG9seWdvblZQIiwicGNJbmRleCIsImdyYWRpZW50IiwiY2xhc3NpZmljYXRpb25MVVQiLCJjbGFzc2lmaWNhdGlvblRleHR1cmUiLCJ1SFFEZXB0aE1hcCIsInRvTW9kZWwiLCJkaWZmdXNlIiwidHJhbnNpdGlvbiIsImludGVuc2l0eVJhbmdlIiwiaW50ZW5zaXR5R2FtbWEiLCJpbnRlbnNpdHlDb250cmFzdCIsImludGVuc2l0eUJyaWdodG5lc3MiLCJyZ2JHYW1tYSIsInJnYkNvbnRyYXN0IiwicmdiQnJpZ2h0bmVzcyIsIndSR0IiLCJ3SW50ZW5zaXR5Iiwid0VsZXZhdGlvbiIsIndDbGFzc2lmaWNhdGlvbiIsIndSZXR1cm5OdW1iZXIiLCJ3U291cmNlSUQiLCJ1c2VPcnRob2dyYXBoaWNDYW1lcmEiLCJjbGlwVGFzayIsImNsaXBNZXRob2QiLCJ1U25hcHNob3QiLCJ1U25hcHNob3REZXB0aCIsInVTbmFwVmlldyIsInVTbmFwUHJvaiIsInVTbmFwUHJvakludiIsInVTbmFwVmlld0ludiIsInVTaGFkb3dDb2xvciIsInVGaWx0ZXJSZXR1cm5OdW1iZXJSYW5nZSIsInVGaWx0ZXJOdW1iZXJPZlJldHVybnNSYW5nZSIsInVGaWx0ZXJHUFNUaW1lQ2xpcFJhbmdlIiwiaGlkZGVuQ2xhc3NpZmljYXRpb25zIiwiaGlkZGVuUG9pbnRTb3VyY2VJRHMiLCJzZWxlY3RlZFBvaW50U291cmNlSUQiLCJzZWxlY3RlZFBvaW50U291cmNlSURDb2xvciIsIkNsYXNzaWZpY2F0aW9uIiwiREVGQVVMVCIsImRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMiLCJnZXREZWZpbmVzIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJ2ZXJ0ZXhDb2xvcnMiLCJ1cGRhdGVTaGFkZXJTb3VyY2UiLCJyZW1vdmVEZWZpbmUiLCJkZWxldGUiLCJvcGFjaXR5IiwiYmxlbmRpbmciLCJ0cmFuc3BhcmVudCIsImRlcHRoVGVzdCIsImRlcHRoV3JpdGUiLCJkZXB0aEZ1bmMiLCJ1c2VFREwiLCJ3ZWlnaHRlZCIsInNoYWRlciIsInJlbmRlcmVyIiwiY2FwYWJpbGl0aWVzIiwibG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciIsImRlZmluZSIsInBvaW50U2l6ZVR5cGUiLCJBVFRFTlVBVEVEIiwiQURBUFRJVkUiLCJzaGFwZSIsIkNJUkNMRSIsIlBBUkFCT0xPSUQiLCJDT0xPUiIsIkRFUFRIIiwiSEVJR0hUIiwiSU5URU5TSVRZX0dSQURJRU5UIiwiTE9EIiwiUE9JTlRfSU5ERVgiLCJTT1VSQ0UiLCJQSE9ORyIsIlJHQl9IRUlHSFQiLCJDT01QT1NJVEUiLCJLRFRSRUUiLCJwb2ludFNlbGVjdGlvblR5cGUiLCJqb2luIiwiZG9VcGRhdGUiLCJpbnZlcnNlIiwiaXNOYU4iLCJJbmZpbml0eSIsIm1heFBvbHlnb25WZXJ0aWNlcyIsIl9jbGFzc2lmaWNhdGlvbiIsImlzRXF1YWwiLCJyZWNvbXB1dGVDbGFzc2lmaWNhdGlvbiIsImdlbmVyYXRlQ2xhc3NpZmljYXRpb25UZXh0dXJlIiwiZGlzcGF0Y2hFdmVudCIsInRhcmdldCIsImdldERpc3RpbmN0RlYiLCJfaGlkZGVuUG9pbnRTb3VyY2VJRHMiLCJyZWNvbXB1dGVIaWRkZW5Qb2ludFNvdXJjZUlEcyIsIlNldCIsIm1vZGUiLCJjYW52YXMiLCJjcmVhdGVFbGVtZW50IiwiY29udGV4dCIsImdldENvbnRleHQiLCJyZWN0IiwiY3R4R3JhZGllbnQiLCJjcmVhdGVMaW5lYXJHcmFkaWVudCIsImFkZENvbG9yU3RvcCIsImdldEhleFN0cmluZyIsImZpbGxTdHlsZSIsInciLCJfaGlkZGVuTGlzdGVuZXJzIiwiX2xpc3RlbmVycyIsImZyb20iLCJQb2ludENsb3VkT2N0cmVlTm9kZSIsIm9jdHJlZSIsImJveE5vZGUiLCJwb3NPZmZzZXQiLCJzdHJpZGUiLCJ3b3JsZFRvQm94IiwiZ2V0SW52ZXJzZSIsIm9iamVjdFRvQm94IiwibXVsdGlwbHlNYXRyaWNlcyIsImluQm94IiwicG9zIiwiZ2V0RmxvYXQzMiIsIlBvaW50Q2xvdWRPY3RyZWUiLCJtYXRlcmlhbCIsInBvaW50QnVkZ2V0IiwidmlzaWJsZVBvaW50c1RhcmdldCIsIm1pbmltdW1Ob2RlUGl4ZWxTaXplIiwidXBkYXRlTWF0cml4Iiwic2hvd0JvdW5kaW5nQm94IiwiYm91bmRpbmdCb3hOb2RlcyIsImxvYWRRdWV1ZSIsInZpc2libGVCb3VuZHMiLCJ2aXNpYmxlR2VvbWV0cnkiLCJnZW5lcmF0ZURFTSIsInByb2ZpbGVSZXF1ZXN0cyIsInRlbXBWZWN0b3IzIiwiZ2V0Qm91bmRpbmdCb3hXb3JsZCIsInVwZGF0ZU1hdHJpeFdvcmxkIiwiY29tcHV0ZVRyYW5zZm9ybWVkQm91bmRpbmdCb3giLCJiTWluIiwiYk1heCIsImhlaWdodE1pbiIsImhlaWdodE1heCIsImZydXN0dW1DdWxsZWQiLCJvbkJlZm9yZVJlbmRlciIsIl90aGlzIiwic2NlbmUiLCJjYW1lcmEiLCJncm91cCIsInByb2dyYW0iLCJ1c2VQcm9ncmFtIiwiZ2V0VW5pZm9ybXMiLCJzZXRWYWx1ZSIsInZpc2libGVOb2RlVGV4dHVyZU9mZnNldHMiLCJsZWFmTm9kZXMiLCJpc0xlYWYiLCJ2aXNpYmxlIiwiZXhwYW5kQnlQb2ludCIsIlBJIiwiZG9tRWxlbWVudCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwibmEiLCJuYiIsInYxIiwiaW50ZXJzZWN0U3BoZXJlQmFjayIsInJheSIsInNwaGVyZSIsIm9yaWdpbiIsInRjYSIsImRvdCIsImRpcmVjdGlvbiIsImQyIiwicmFkaXVzMiIsInJhZGl1cyIsInQxIiwic3FydCIsImxvZFJhbmdlcyIsImxlYWZOb2RlTG9kUmFuZ2VzIiwiY29uc3RydWN0b3IiLCJ2QXJyYXlJbmRleCIsImJTcGhlcmUiLCJtYXRyaXhXb3JsZEludmVyc2UiLCJnZXRXb3JsZERpcmVjdGlvbiIsImRpc3RhbmNlMiIsImhhcyIsInByZXZEaXN0YW5jZSIsIm5ld0Rpc3RhbmNlIiwibG9kIiwicmFuZ2UiLCJvZmZzZXRzIiwicHJvZmlsZSIsImJzV29ybGQiLCJpbnRlcnNlY3RzIiwiY2xvc2VzdFBvaW50VG9Qb2ludCIsIm5vZGVzT25SYXkiLCJfcmF5IiwiaW50ZXJzZWN0c1NwaGVyZSIsImRpc3RhbmNlVG9PcmlnaW4iLCJyZWN1cnNpdmUiLCJwb2ludHNPblJheSIsIm1heERpc3RhbmNlIiwiZGlzdGFuY2VUb1BvaW50Iiwibm9kZVRvUG9pbnRzIiwiZGlzdGFuY2VUb1JheSIsImZvcmNlIiwibWF0cml4QXV0b1VwZGF0ZSIsIm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJ0Qm94IiwibWF4RGVwdGgiLCJzZWdtZW50cyIsInByb2plY3RlZEJvdW5kaW5nQm94IiwicHMiLCJnZXRQcm9maWxlIiwic2VnbWVudCIsInByb2plY3QiLCJtaWxlYWdlIiwiX3N0YXJ0IiwiX2VuZCIsIl9taWxlYWdlIiwiX2JvdW5kaW5nQm94IiwieEF4aXMiLCJkaXIiLCJhbHBoYSIsImFjb3MiLCJ0b09yaWdpbiIsIm1ha2VUcmFuc2xhdGlvbiIsImFsaWduV2l0aFgiLCJtYWtlUm90YXRpb25ZIiwiYXBwbHlNaWxlYWdlIiwiZGVwdGgiLCJ2aWV3ZXIiLCJwUmVuZGVyZXIiLCJnZXRWYWwiLCJwaWNrV2luZG93U2l6ZSIsInBpY2tPdXRzaWRlQ2xpcFJlZ2lvbiIsInBvaW50U2hhcGUiLCJwaWNrU3RhdGUiLCJwb2ludENvbG9yVHlwZSIsInJlbmRlclRhcmdldCIsImZvcm1hdCIsInBpY2tNYXRlcmlhbCIsInBpY2tDbGlwcGVkIiwiQ2xpcFRhc2siLCJISUdITElHSFQiLCJOT05FIiwidXBkYXRlTWF0ZXJpYWwiLCJzZXRTaXplIiwicGl4ZWxQb3MiLCJnbCIsImVuYWJsZSIsIlNDSVNTT1JfVEVTVCIsInNjaXNzb3IiLCJzdGF0ZSIsInNldFRlc3QiLCJzZXRNYXNrIiwic2V0QmxlbmRpbmciLCJzZXRSZW5kZXJUYXJnZXQiLCJjbGVhckNvbG9yIiwiY2xlYXIiLCJ0bXAiLCJyZW5kZXJPY3RyZWUiLCJjbGFtcCIsIm51bWJlciIsInJlYWRQaXhlbHMiLCJSR0JBIiwiVU5TSUdORURfQllURSIsInJlc2V0Iiwic2V0U2Npc3NvclRlc3QiLCJkaXNhYmxlIiwicGl4ZWxzIiwiaWJ1ZmZlciIsImhpdHMiLCJwSW5kZXgiLCJoaXQiLCJkaXN0YW5jZVRvQ2VudGVyIiwiYWxsIiwiZmlyc3RIaXRPbmx5Iiwic2hyaW5rZWRMb2NhbEJvdW5kcyIsImZpdHRlZFBvc2l0aW9uIiwiZml0dGVkIiwicm90YXRpb24iLCJkcyIsIm11bHRpcGx5IiwibWF4TGV2ZWwiLCJjaGFyIiwiUG9pbnRDbG91ZEFyZW5hNEROb2RlIiwibGVmdCIsInJpZ2h0Iiwia2R0cmVlIiwiUG9pbnRDbG91ZEFyZW5hNEQiLCJhZGRFdmVudExpc3RlbmVyIiwibnVtVmlzaWJsZU5vZGVzIiwibnVtVmlzaWJsZVBvaW50cyIsInNpemVUeXBlIiwibGV2ZWxzIiwiYm91bmRpbmdCb3hOb2RlIiwiY2hpbGRPZkNoaWxkIiwiY2xlYXJUYXJnZXQiLCJyZXNldEdMU3RhdGUiLCJwYyIsImxhIiwibGIiLCJ2aXNpYmxlTm9kZU5hbWVzIiwiYjEiLCJiMiIsImIzIiwiUG9pbnRDbG91ZEFyZW5hNERHZW9tZXRyeU5vZGUiLCJzb3VyY2VWaWV3IiwidTMySW5kaWNlcyIsIlBvaW50Q2xvdWRBcmVuYTRER2VvbWV0cnkiLCJudW1Ob2RlcyIsInByb3ZpZGVyIiwiX3NwYWNpbmciLCJOYW1lIiwiUHJvdmlkZXIiLCJOb2RlcyIsIlBvaW50cyIsIlZlcnNpb24iLCJCb3VuZGluZ0JveCIsIlNwYWNpbmciLCJoYXNMZWZ0IiwiaGFzUmlnaHQiLCJwYXJlbnRCQlNpemUiLCJkb25lIiwidG9wIiwiQmluYXJ5SGVhcCIsInNjb3JlRnVuY3Rpb24iLCJlbGVtZW50IiwiYnViYmxlVXAiLCJzaW5rRG93biIsInNjb3JlIiwicGFyZW50TiIsImVsZW1TY29yZSIsImNoaWxkMk4iLCJjaGlsZDFOIiwic3dhcCIsImNoaWxkMSIsImNoaWxkMVNjb3JlIiwiY2hpbGQyIiwiQXR0cmlidXRlTG9jYXRpb25zIiwiMCIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciLCI4IiwiOSIsIjEyIiwiU0hPV19JTlNJREUiLCJTSE9XX09VVFNJREUiLCJDbGlwTWV0aG9kIiwiSU5TSURFX0FOWSIsIklOU0lERV9BTEwiLCJFTEVWQVRJT04iLCJMRVZFTF9PRl9ERVRBSUwiLCJsb2FkUG9pbnRDbG91ZCIsInVwZGF0ZVZpc2liaWxpdHkiLCJwb2ludGNsb3VkcyIsIm51bVZpc2libGVQb2ludHNJblBvaW50Y2xvdWRzIiwidW5sb2FkZWRHZW9tZXRyeSIsImxvd2VzdFNwYWNpbmciLCJzdHJ1Y3R1cmVzIiwidXBkYXRlVmlzaWJpbGl0eVN0cnVjdHVyZXMiLCJmcnVzdHVtcyIsImNhbU9ialBvc2l0aW9ucyIsInByaW9yaXR5UXVldWUiLCJsb2FkZWRUb0dQVVRoaXNGcmFtZSIsImRvbUhlaWdodCIsImZydXN0dW0iLCJjYW1PYmpQb3MiLCJpbnNpZGVGcnVzdHVtIiwiaW50ZXJzZWN0c0JveCIsIm51bVZpc2libGVQb2ludHNJblBvaW50Y2xvdWQiLCJ0b1RyZWVOb2RlIiwidG91Y2giLCJfdHJhbnNmb3JtVmVyc2lvbiIsInRyYW5zZm9ybVZlcnNpb24iLCJib3hIZWxwZXIiLCJpc1BlcnNwZWN0aXZlQ2FtZXJhIiwic2NyZWVuUGl4ZWxSYWRpdXMiLCJ0YW4iLCJjYW5kaWRhdGVzIiwidXBkYXRpbmdOb2RlcyIsInVwZGF0ZSIsInVwZGF0ZVBvaW50Q2xvdWRzIiwidXBkYXRlVmlzaWJsZUJvdW5kcyIsImZyZWVNZW1vcnkiLCJpbml0aWFsaXplZCIsImRlZXBlc3RWaXNpYmxlTGV2ZWwiLCJ2aWV3SSIsIndvcmxkIiwiZnJ1c3R1bUNhbSIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJwcm9qIiwicHJvamVjdGlvbk1hdHJpeCIsImZtIiwic2V0RnJvbVByb2plY3Rpb25NYXRyaXgiLCJ3b3JsZEkiLCJpbnZlcnQiLCJjYW1NYXRyaXhPYmplY3QiLCJzZXRGcm9tTWF0cml4UG9zaXRpb24iLCJoaWRlRGVzY2VuZGFudHMiLCJWRVJTSU9OIiwiY3VycmVudFNpemUiLCJuZXdTaXplIiwidGhpc0F0dHJpYnV0ZXMiLCJvdGhlckF0dHJpYnV0ZXMiLCJtZXJnZWQiLCJlbGVtZW50c1BlclBvaW50IiwiZXhwYW5kZWQiLCJ1bmlvbiIsInBhcmFtVGhyZWVUb0dMIiwiZXh0ZW5zaW9uIiwiUkVQRUFUIiwiQ0xBTVBfVE9fRURHRSIsIk1JUlJPUkVEX1JFUEVBVCIsIk5FQVJFU1QiLCJORUFSRVNUX01JUE1BUF9ORUFSRVNUIiwiTkVBUkVTVF9NSVBNQVBfTElORUFSIiwiTElORUFSIiwiTElORUFSX01JUE1BUF9ORUFSRVNUIiwiTElORUFSX01JUE1BUF9MSU5FQVIiLCJVTlNJR05FRF9TSE9SVF80XzRfNF80IiwiVU5TSUdORURfU0hPUlRfNV81XzVfMSIsIlVOU0lHTkVEX1NIT1JUXzVfNl81IiwiQllURSIsIlNIT1JUIiwiVU5TSUdORURfU0hPUlQiLCJJTlQiLCJVTlNJR05FRF9JTlQiLCJGTE9BVCIsImV4dGVuc2lvbnMiLCJIQUxGX0ZMT0FUX09FUyIsIkFMUEhBIiwiTFVNSU5BTkNFIiwiTFVNSU5BTkNFX0FMUEhBIiwiREVQVEhfQ09NUE9ORU5UIiwiREVQVEhfU1RFTkNJTCIsIkZVTkNfQUREIiwiRlVOQ19TVUJUUkFDVCIsIkZVTkNfUkVWRVJTRV9TVUJUUkFDVCIsIlpFUk8iLCJPTkUiLCJTUkNfQ09MT1IiLCJPTkVfTUlOVVNfU1JDX0NPTE9SIiwiU1JDX0FMUEhBIiwiT05FX01JTlVTX1NSQ19BTFBIQSIsIkRTVF9BTFBIQSIsIk9ORV9NSU5VU19EU1RfQUxQSEEiLCJEU1RfQ09MT1IiLCJPTkVfTUlOVVNfRFNUX0NPTE9SIiwiU1JDX0FMUEhBX1NBVFVSQVRFIiwiUkdCQV9TM1RDX0RYVDFfRm9ybWF0IiwiUkdCQV9TM1RDX0RYVDVfRm9ybWF0IiwiQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDFfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVCIsIkNPTVBSRVNTRURfUkdCX1BWUlRDXzRCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0wiLCJNSU5fRVhUIiwiTUFYX0VYVCIsIlVuc2lnbmVkSW50MjQ4VHlwZSIsIlVOU0lHTkVEX0lOVF8yNF84X1dFQkdMIiwiV2ViR0xUZXh0dXJlIiwiY3JlYXRlVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJpbWFnZSIsImJpbmRUZXh0dXJlIiwiaW50ZXJuYWxGb3JtYXQiLCJzcmNGb3JtYXQiLCJzcmNUeXBlIiwicGl4ZWxTdG9yZWkiLCJVTlBBQ0tfRkxJUF9ZX1dFQkdMIiwiZmxpcFkiLCJVTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wiLCJwcmVtdWx0aXBseUFscGhhIiwiVU5QQUNLX0FMSUdOTUVOVCIsInVucGFja0FsaWdubWVudCIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX1dSQVBfUyIsIlRFWFRVUkVfV1JBUF9UIiwiVEVYVFVSRV9NQUdfRklMVEVSIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwidGV4SW1hZ2UyRCIsIndyYXBTIiwid3JhcFQiLCJTaGFkZXIiLCJ2c1NvdXJjZSIsImZzU291cmNlIiwiY2FjaGUiLCJ2cyIsImZzIiwidW5pZm9ybUxvY2F0aW9ucyIsImF0dHJpYnV0ZUxvY2F0aW9ucyIsImxpbmtQcm9ncmFtIiwic291cmNlIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiZ2V0U2hhZGVySW5mb0xvZyIsImNhY2hlZCIsImNyZWF0ZVNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJGUkFHTUVOVF9TSEFERVIiLCJjcmVhdGVQcm9ncmFtIiwiYmluZEF0dHJpYkxvY2F0aW9uIiwiYXR0YWNoU2hhZGVyIiwiZGV0YWNoU2hhZGVyIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJudW1BdHRyaWJ1dGVzIiwiQUNUSVZFX0FUVFJJQlVURVMiLCJnZXRBY3RpdmVBdHRyaWIiLCJnZXRBdHRyaWJMb2NhdGlvbiIsIm51bVVuaWZvcm1zIiwiQUNUSVZFX1VOSUZPUk1TIiwidW5pZm9ybSIsImdldEFjdGl2ZVVuaWZvcm0iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJ1bmlmb3JtTWF0cml4NGZ2IiwibWF0cml4NCIsInVuaWZvcm0xZiIsInVuaWZvcm0xZnYiLCJ1bmlmb3JtMWkiLCJ1bmlmb3JtMmYiLCJ1bmlmb3JtM2YiLCJzZXRVbmlmb3JtTWF0cml4NCIsInNldFVuaWZvcm0zZiIsInNldFVuaWZvcm0xZiIsInNldFVuaWZvcm1Cb29sZWFuIiwic2V0VW5pZm9ybVRleHR1cmUiLCJzZXRVbmlmb3JtMmYiLCJXZWJHTEJ1ZmZlciIsInZhbyIsInZib3MiLCJCYXNpY0dyb3VwIiwid2lyZWZyYW1lIiwibm9kZVNpemUiLCJub2RlTG9hZFJhdGUiLCJyYXljYXN0ZXIiLCJidWRnZXQiLCJyZWNhbGN1bGF0ZUJveEdlb21ldHJ5Iiwic3BsaWNlIiwicG9pbnRjbG91ZEJveCIsImJveFdvcmxkIiwiZnJvbVNwYWNpbmciLCJwSGVpZ2h0IiwicEZyb21TcGFjaW5nIiwibHBvcyIsImludGVyc2VjdEJveCIsIkdyb3VwIiwic2hhZGVycyIsInRleHR1cmVzIiwidHlwZXMiLCJleHRWQU8iLCJnZXRFeHRlbnNpb24iLCJjcmVhdGVWZXJ0ZXhBcnJheSIsImNyZWF0ZVZlcnRleEFycmF5T0VTIiwiYmluZCIsImJpbmRWZXJ0ZXhBcnJheSIsImJpbmRWZXJ0ZXhBcnJheU9FUyIsImdldEV4dGVuc2lvbnMiLCJmZXRjaE9jdHJlZXMiLCJvY3RyZWVzIiwiYWN0aXZlVGV4dHVyZSIsIlRFWFRVUkUxIiwid2ViZ2xCdWZmZXIiLCJ2Ym8iLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiYnVmZmVyRGF0YSIsIlNUQVRJQ19EUkFXIiwiYXR0cmlidXRlTG9jYXRpb24iLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJoYW5kbGUiLCJ2aXNpYmxlQ2hpbGRyZW4iLCJ2aXNpYmlsaXR5VGV4dHVyZURhdGEiLCJ3b3JsZFZpZXciLCJtYXQ0aG9sZGVyIiwiYWxsb3dlZE5vZGVzIiwic2V0VW5pZm9ybSIsImxNb2RlbCIsImxNb2RlbFZpZXciLCJjbGlwcGluZyIsImNsaXBwaW5nUGxhbmVzIiwicGxhbmVzIiwiZmxhdHRlbmVkUGxhbmVzIiwiY29uc3RhbnQiLCJjbGlwUGxhbmVzTG9jIiwidW5pZm9ybTRmdiIsIndvcmxkVmlld1Byb2pNYXRyaWNlcyIsImNsaXBQb2x5Z29uIiwidmlld01hdHJpeCIsIndvcmxkVmlld1Byb2oiLCJwcm9qTWF0cml4IiwibWFya2VycyIsImZsYXR0ZW5lZE1hdHJpY2VzIiwibSIsImZsYXR0ZW5lZFZlcnRpY2VzIiwibENsaXBQb2x5Z29uVkNvdW50IiwidW5pZm9ybTFpdiIsImxDbGlwUG9seWdvblZQIiwibENsaXBQb2x5Z29ucyIsInVuaWZvcm0zZnYiLCJ1cGRhdGVCdWZmZXIiLCJkcmF3QXJyYXlzIiwiUE9JTlRTIiwic2hhZG93TWFwcyIsInZpZXdJbnYiLCJwcm9qSW52IiwicHJvamVjdGlvbk1hdHJpeEludmVyc2UiLCJjdXJyZW50VGV4dHVyZUJpbmRpbmdQb2ludCIsImNvbXB1dGVWaXNpYmlsaXR5VGV4dHVyZURhdGEiLCJ2bnQiLCJudW1TbmFwc2hvdHMiLCJzbmFwRW5hYmxlZCIsIm51bUNsaXBCb3hlcyIsIm51bUNsaXBQb2x5Z29ucyIsIm51bUNsaXBwaW5nUGxhbmVzIiwiZGVmaW5lc1N0cmluZyIsInVuaWZvcm1OYW1lIiwid2ViZ2xUZXh0dXJlIiwiQkxFTkQiLCJibGVuZEZ1bmMiLCJkZXB0aE1hc2siLCJERVBUSF9URVNUIiwiTE4yIiwiYm90dG9tIiwic2V0VW5pZm9ybTFpIiwibENsaXBCb3hlcyIsIndlaWdodFJHQiIsIndlaWdodEludGVuc2l0eSIsIndlaWdodEVsZXZhdGlvbiIsIndlaWdodENsYXNzaWZpY2F0aW9uIiwid2VpZ2h0UmV0dXJuTnVtYmVyIiwid2VpZ2h0U291cmNlSUQiLCJzZXRVbmlmb3JtMWZ2Iiwidm5XZWJHTFRleHR1cmUiLCJURVhUVVJFMCIsImhpZGRlblBvaW50U291cmNlSURzVGV4dHVyZSIsImxTbmFwc2hvdCIsImxTbmFwc2hvdERlcHRoIiwiYmluZGluZ1N0YXJ0IiwibFNuYXBzaG90QmluZGluZ1BvaW50cyIsImxTbmFwc2hvdERlcHRoQmluZGluZ1BvaW50cyIsInRleHR1cmVEZXB0aCIsInNuYXBUZXh0dXJlIiwicHJvcGVydGllcyIsIl9fd2ViZ2xUZXh0dXJlIiwic25hcFRleHR1cmVEZXB0aCIsImJpbmRpbmdQb2ludCIsImRlcHRoQmluZGluZ1BvaW50IiwibFNuYXBWaWV3IiwibFNuYXBQcm9qIiwibFNuYXBQcm9qSW52IiwibFNuYXBWaWV3SW52IiwicmVuZGVyTm9kZXMiLCJURVhUVVJFMiJdLCJtYXBwaW5ncyI6ImtDQUtBQSxFQUFPQyxR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QVEsUUFDdEMsQ0FBQyxHQUFLLElBQUksUUFBWSxNQUFRLE1BQVEsUUFDdEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFRLE1BQVEsUUFDdEMsQ0FBQyxHQUFLLElBQUksUUFBWSxFQUFRLEVBQVEsT0FDdEMsQ0FBQyxHQUFLLElBQUksUUFBWSxNQUFRLE1BQVEsUUFDdEMsQ0FBQyxHQUFLLElBQUksUUFBWSxNQUFRLE1BQVEsUUFDdEMsQ0FBQyxHQUFLLElBQUksUUFBWSxNQUFRLE1BQVEsUUFDdEMsQ0FBQyxHQUFLLElBQUksUUFBWSxNQUFRLE1BQVEsUUFDdEMsQ0FBQyxFQUFHLElBQUksUUFBWSxNQUFRLE1BQVEsU0FFckNDLE9BQVEsQ0FDUCxDQUFDLEVBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxNQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEVBQUssSUFBSSxRQUFZLElBQU8sS0FBTyxRQUVyQ0MsYUFBYyxDQUNiLENBQUMsRUFBRyxJQUFJLFFBQVksTUFBUSxNQUFRLFFBQ3BDLENBQUMsR0FBSyxJQUFJLFFBQVksTUFBUSxNQUFRLFFBQ3RDLENBQUMsR0FBSyxJQUFJLFFBQVksS0FBUSxNQUFRLFFBQ3RDLENBQUMsR0FBSyxJQUFJLFFBQVksRUFBUSxNQUFRLFFBQ3RDLENBQUMsR0FBSyxJQUFJLFFBQVksRUFBUSxNQUFRLFFBQ3RDLENBQUMsR0FBSyxJQUFJLFFBQVksS0FBUSxLQUFRLFFBQ3RDLENBQUMsR0FBSyxJQUFJLFFBQVksTUFBUSxNQUFRLFFBQ3RDLENBQUMsR0FBSyxJQUFJLFFBQVksTUFBUSxNQUFRLFFBQ3RDLENBQUMsR0FBSyxJQUFJLFFBQVksTUFBUSxNQUFRLE9BQ3RDLENBQUMsR0FBSyxJQUFJLFFBQVksTUFBUSxNQUFRLFFBQ3RDLENBQUMsRUFBRyxJQUFJLFFBQVksTUFBUSxNQUFRLFNBRXJDQyxRQUFTLENBQ1IsQ0FBQyxFQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sTUFDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sT0FDcEMsQ0FBQyxHQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sTUFDcEMsQ0FBQyxFQUFLLElBQUksUUFBWSxLQUFPLEtBQU8sUUFFckNDLFFBQVMsQ0FDUixDQUFDLEVBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxNQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxNQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEdBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxPQUNwQyxDQUFDLEVBQUssSUFBSSxRQUFZLEtBQU8sS0FBTyxRQUVyQ0MsVUFBVyxDQUNWLENBQUMsRUFBRyxJQUFJLFFBQVksRUFBRyxFQUFHLElBQzFCLENBQUMsRUFBRyxJQUFJLFFBQVksRUFBRyxFQUFHLE1DN0c1QixNQUFNQyxFQUFPQyxHQUFXQSxFQUFRQyxJQUFJLEdBRXBDLElBQUlDLEVBQVUsR0FHZEEsRUFBUUMsT0FBU0osQ0FBSTs7Ozs7O0VBTWpCLHFCQUEyQixLQUMzQixzQ0FBNENBLENBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QixFQUFPZ2hDLEVBQXVCemIsRUFBUTNGLEdBRXpFaU0sRUFBR3FVLGNBQWNyVSxFQUFHb2EsVUFDcEJwYSxFQUFHa08sWUFBWWxPLEVBQUdnTyxXQUFZLE1BQzlCaE8sRUFBR3FVLGNBQWNyVSxFQUFHaVosYSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYsIG5vLXVzZS1iZWZvcmUtZGVmaW5lLCBuZXctY2FwICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjb250ZW50LCB3b3JrZXJDb25zdHJ1Y3Rvciwgd29ya2VyT3B0aW9ucywgdXJsKSB7XG4gIHZhciBnbG9iYWxTY29wZSA9IHNlbGYgfHwgd2luZG93O1xuXG4gIHRyeSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBibG9iO1xuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBOZXcgQVBJXG4gICAgICAgIGJsb2IgPSBuZXcgZ2xvYmFsU2NvcGUuQmxvYihbY29udGVudF0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBCbG9iQnVpbGRlciA9IERlcHJlY2F0ZWQsIGJ1dCB3aWRlbHkgaW1wbGVtZW50ZWRcbiAgICAgICAgdmFyIEJsb2JCdWlsZGVyID0gZ2xvYmFsU2NvcGUuQmxvYkJ1aWxkZXIgfHwgZ2xvYmFsU2NvcGUuV2ViS2l0QmxvYkJ1aWxkZXIgfHwgZ2xvYmFsU2NvcGUuTW96QmxvYkJ1aWxkZXIgfHwgZ2xvYmFsU2NvcGUuTVNCbG9iQnVpbGRlcjtcbiAgICAgICAgYmxvYiA9IG5ldyBCbG9iQnVpbGRlcigpO1xuICAgICAgICBibG9iLmFwcGVuZChjb250ZW50KTtcbiAgICAgICAgYmxvYiA9IGJsb2IuZ2V0QmxvYigpO1xuICAgICAgfVxuXG4gICAgICB2YXIgVVJMID0gZ2xvYmFsU2NvcGUuVVJMIHx8IGdsb2JhbFNjb3BlLndlYmtpdFVSTDtcbiAgICAgIHZhciBvYmplY3RVUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgICAgdmFyIHdvcmtlciA9IG5ldyBnbG9iYWxTY29wZVt3b3JrZXJDb25zdHJ1Y3Rvcl0ob2JqZWN0VVJMLCB3b3JrZXJPcHRpb25zKTtcbiAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwob2JqZWN0VVJMKTtcbiAgICAgIHJldHVybiB3b3JrZXI7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG5ldyBnbG9iYWxTY29wZVt3b3JrZXJDb25zdHJ1Y3Rvcl0oXCJkYXRhOmFwcGxpY2F0aW9uL2phdmFzY3JpcHQsXCIuY29uY2F0KGVuY29kZVVSSUNvbXBvbmVudChjb250ZW50KSksIHdvcmtlck9wdGlvbnMpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICghdXJsKSB7XG4gICAgICB0aHJvdyBFcnJvcihcIklubGluZSB3b3JrZXIgaXMgbm90IHN1cHBvcnRlZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IGdsb2JhbFNjb3BlW3dvcmtlckNvbnN0cnVjdG9yXSh1cmwsIHdvcmtlck9wdGlvbnMpO1xuICB9XG59OyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7R2xvYmFsfSBmcm9tIFwiLi4vR2xvYmFsLmpzXCI7XHJcblxyXG5jbGFzcyBMUlVJdGVtXHJcbntcclxuXHRjb25zdHJ1Y3Rvcihub2RlKVxyXG5cdHtcclxuXHRcdHRoaXMucHJldmlvdXMgPSBudWxsO1xyXG5cdFx0dGhpcy5uZXh0ID0gbnVsbDtcclxuXHRcdHRoaXMubm9kZSA9IG5vZGU7XHJcblx0fVxyXG59XHJcblxyXG4vKipcclxuICogQGNsYXNzIEEgZG91Ymx5LWxpbmtlZC1saXN0IG9mIHRoZSBsZWFzdCByZWNlbnRseSB1c2VkIGVsZW1lbnRzLlxyXG4gKi9cclxuY2xhc3MgTFJVXHJcbntcclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdFx0Ly8gdGhlIGxlYXN0IHJlY2VudGx5IHVzZWQgaXRlbVxyXG5cdFx0dGhpcy5maXJzdCA9IG51bGw7XHJcblx0XHQvLyB0aGUgbW9zdCByZWNlbnRseSB1c2VkIGl0ZW1cclxuXHRcdHRoaXMubGFzdCA9IG51bGw7XHJcblx0XHQvLyBhIGxpc3Qgb2YgYWxsIGl0ZW1zIGluIHRoZSBscnUgbGlzdFxyXG5cdFx0dGhpcy5pdGVtcyA9IHt9O1xyXG5cdFx0dGhpcy5lbGVtZW50cyA9IDA7XHJcblx0XHR0aGlzLm51bVBvaW50cyA9IDA7XHJcblx0fVxyXG5cclxuXHRzaXplKClcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5lbGVtZW50cztcclxuXHR9XHJcblxyXG5cdGNvbnRhaW5zKG5vZGUpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuaXRlbXNbbm9kZS5pZF0gPT0gbnVsbDtcclxuXHR9XHJcblxyXG5cdHRvdWNoKG5vZGUpXHJcblx0e1xyXG5cdFx0aWYoIW5vZGUubG9hZGVkKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGl0ZW07XHJcblxyXG5cdFx0aWYodGhpcy5pdGVtc1tub2RlLmlkXSA9PSBudWxsKVxyXG5cdFx0e1xyXG5cdFx0XHQvLyBhZGQgdG8gbGlzdFxyXG5cdFx0XHRpdGVtID0gbmV3IExSVUl0ZW0obm9kZSk7XHJcblx0XHRcdGl0ZW0ucHJldmlvdXMgPSB0aGlzLmxhc3Q7XHJcblx0XHRcdHRoaXMubGFzdCA9IGl0ZW07XHJcblx0XHRcdGlmKGl0ZW0ucHJldmlvdXMgIT09IG51bGwpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpdGVtLnByZXZpb3VzLm5leHQgPSBpdGVtO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLml0ZW1zW25vZGUuaWRdID0gaXRlbTtcclxuXHRcdFx0dGhpcy5lbGVtZW50cysrO1xyXG5cclxuXHRcdFx0aWYodGhpcy5maXJzdCA9PT0gbnVsbClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRoaXMuZmlyc3QgPSBpdGVtO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMubnVtUG9pbnRzICs9IG5vZGUubnVtUG9pbnRzO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHQvLyB1cGRhdGUgaW4gbGlzdFxyXG5cdFx0XHRpdGVtID0gdGhpcy5pdGVtc1tub2RlLmlkXTtcclxuXHJcblx0XHRcdGlmKGl0ZW0ucHJldmlvdXMgPT09IG51bGwpXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvLyBoYW5kbGUgdG91Y2ggb24gZmlyc3QgZWxlbWVudFxyXG5cdFx0XHRcdGlmKGl0ZW0ubmV4dCAhPT0gbnVsbClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0aGlzLmZpcnN0ID0gaXRlbS5uZXh0O1xyXG5cdFx0XHRcdFx0dGhpcy5maXJzdC5wcmV2aW91cyA9IG51bGw7XHJcblx0XHRcdFx0XHRpdGVtLnByZXZpb3VzID0gdGhpcy5sYXN0O1xyXG5cdFx0XHRcdFx0aXRlbS5uZXh0ID0gbnVsbDtcclxuXHRcdFx0XHRcdHRoaXMubGFzdCA9IGl0ZW07XHJcblx0XHRcdFx0XHRpdGVtLnByZXZpb3VzLm5leHQgPSBpdGVtO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKGl0ZW0ubmV4dCAhPT0gbnVsbClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8vIGhhbmRsZSB0b3VjaCBvbiBhbnkgb3RoZXIgZWxlbWVudFxyXG5cdFx0XHRcdGl0ZW0ucHJldmlvdXMubmV4dCA9IGl0ZW0ubmV4dDtcclxuXHRcdFx0XHRpdGVtLm5leHQucHJldmlvdXMgPSBpdGVtLnByZXZpb3VzO1xyXG5cdFx0XHRcdGl0ZW0ucHJldmlvdXMgPSB0aGlzLmxhc3Q7XHJcblx0XHRcdFx0aXRlbS5uZXh0ID0gbnVsbDtcclxuXHRcdFx0XHR0aGlzLmxhc3QgPSBpdGVtO1xyXG5cdFx0XHRcdGl0ZW0ucHJldmlvdXMubmV4dCA9IGl0ZW07XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJlbW92ZShub2RlKVxyXG5cdHtcclxuXHRcdHZhciBscnVJdGVtID0gdGhpcy5pdGVtc1tub2RlLmlkXTtcclxuXHRcdGlmKGxydUl0ZW0pXHJcblx0XHR7XHJcblx0XHRcdGlmKHRoaXMuZWxlbWVudHMgPT09IDEpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0aGlzLmZpcnN0ID0gbnVsbDtcclxuXHRcdFx0XHR0aGlzLmxhc3QgPSBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKCFscnVJdGVtLnByZXZpb3VzKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHRoaXMuZmlyc3QgPSBscnVJdGVtLm5leHQ7XHJcblx0XHRcdFx0XHR0aGlzLmZpcnN0LnByZXZpb3VzID0gbnVsbDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYoIWxydUl0ZW0ubmV4dClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0aGlzLmxhc3QgPSBscnVJdGVtLnByZXZpb3VzO1xyXG5cdFx0XHRcdFx0dGhpcy5sYXN0Lm5leHQgPSBudWxsO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZihscnVJdGVtLnByZXZpb3VzICYmIGxydUl0ZW0ubmV4dClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRscnVJdGVtLnByZXZpb3VzLm5leHQgPSBscnVJdGVtLm5leHQ7XHJcblx0XHRcdFx0XHRscnVJdGVtLm5leHQucHJldmlvdXMgPSBscnVJdGVtLnByZXZpb3VzO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZGVsZXRlIHRoaXMuaXRlbXNbbm9kZS5pZF07XHJcblx0XHRcdHRoaXMuZWxlbWVudHMtLTtcclxuXHRcdFx0dGhpcy5udW1Qb2ludHMgLT0gbm9kZS5udW1Qb2ludHM7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXRMUlVJdGVtKClcclxuXHR7XHJcblx0XHRpZih0aGlzLmZpcnN0ID09PSBudWxsKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHRcdHZhciBscnUgPSB0aGlzLmZpcnN0O1xyXG5cclxuXHRcdHJldHVybiBscnUubm9kZTtcclxuXHR9XHJcblxyXG5cdHRvU3RyaW5nKClcclxuXHR7XHJcblx0XHR2YXIgc3RyaW5nID0gXCJ7IFwiO1xyXG5cdFx0dmFyIGN1cnIgPSB0aGlzLmZpcnN0O1xyXG5cclxuXHRcdHdoaWxlIChjdXJyICE9PSBudWxsKVxyXG5cdFx0e1xyXG5cdFx0XHRzdHJpbmcgKz0gY3Vyci5ub2RlLmlkO1xyXG5cdFx0XHRpZihjdXJyLm5leHQgIT09IG51bGwpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzdHJpbmcgKz0gXCIsIFwiO1xyXG5cdFx0XHR9XHJcblx0XHRcdGN1cnIgPSBjdXJyLm5leHQ7XHJcblx0XHR9XHJcblxyXG5cdFx0c3RyaW5nICs9IFwifVwiO1xyXG5cdFx0c3RyaW5nICs9IFwiKFwiICsgdGhpcy5zaXplKCkgKyBcIilcIjtcclxuXHRcdHJldHVybiBzdHJpbmc7XHJcblx0fVxyXG5cclxuXHRmcmVlTWVtb3J5KClcclxuXHR7XHJcblx0XHRpZih0aGlzLmVsZW1lbnRzIDw9IDEpXHJcblx0XHR7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR3aGlsZSh0aGlzLm51bVBvaW50cyA+IEdsb2JhbC5wb2ludExvYWRMaW1pdClcclxuXHRcdHtcclxuXHRcdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmZpcnN0O1xyXG5cdFx0XHR2YXIgbm9kZSA9IGVsZW1lbnQubm9kZTtcclxuXHRcdFx0dGhpcy5kaXNwb3NlRGVzY2VuZGFudHMobm9kZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRkaXNwb3NlRGVzY2VuZGFudHMobm9kZSlcclxuXHR7XHJcblx0XHR2YXIgc3RhY2sgPSBbXTtcclxuXHRcdHN0YWNrLnB1c2gobm9kZSk7XHJcblxyXG5cdFx0d2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApXHJcblx0XHR7XHJcblx0XHRcdHZhciBjdXJyZW50ID0gc3RhY2sucG9wKCk7XHJcblxyXG5cdFx0XHRjdXJyZW50LmRpc3Bvc2UoKTtcclxuXHRcdFx0dGhpcy5yZW1vdmUoY3VycmVudCk7XHJcblxyXG5cdFx0XHRmb3IodmFyIGtleSBpbiBjdXJyZW50LmNoaWxkcmVuKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYoY3VycmVudC5jaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShrZXkpKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciBjaGlsZCA9IGN1cnJlbnQuY2hpbGRyZW5ba2V5XTtcclxuXHRcdFx0XHRcdGlmKGNoaWxkLmxvYWRlZClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0c3RhY2sucHVzaChjdXJyZW50LmNoaWxkcmVuW2tleV0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IHtMUlUsIExSVUl0ZW19O1xyXG4iLCJcbmltcG9ydCB3b3JrZXIgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL3dvcmtlci1sb2FkZXIvZGlzdC9ydW50aW1lL2lubGluZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBXb3JrZXJfZm4oKSB7XG4gIHJldHVybiB3b3JrZXIoXCIoKCk9PntcXFwidXNlIHN0cmljdFxcXCI7ZnVuY3Rpb24gZShlKXt0aGlzLmJ1ZmZlcj1lLHRoaXMudTg9bmV3IFVpbnQ4QXJyYXkoZSk7dmFyIHQ9bmV3IEFycmF5QnVmZmVyKDQpLHI9bmV3IEZsb2F0MzJBcnJheSh0KSxpPW5ldyBVaW50OEFycmF5KHQpO3RoaXMuZ2V0VWludDMyPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnU4W2UrM108PDI0fHRoaXMudThbZSsyXTw8MTZ8dGhpcy51OFtlKzFdPDw4fHRoaXMudThbZV19LHRoaXMuZ2V0VWludDE2PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnU4W2UrMV08PDh8dGhpcy51OFtlXX0sdGhpcy5nZXRGbG9hdDMyPWZ1bmN0aW9uKGUpe3JldHVybiBpWzBdPXRoaXMudThbZSswXSxpWzFdPXRoaXMudThbZSsxXSxpWzJdPXRoaXMudThbZSsyXSxpWzNdPXRoaXMudThbZSszXSxyWzBdfSx0aGlzLmdldFVpbnQ4PWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnU4W2VdfX1mdW5jdGlvbiB0KGUpe3RoaXMudmVyc2lvbj1lO3ZhciB0PS0xPT09ZS5pbmRleE9mKFxcXCIuXFxcIik/ZS5sZW5ndGg6ZS5pbmRleE9mKFxcXCIuXFxcIik7dGhpcy52ZXJzaW9uTWFqb3I9cGFyc2VJbnQoZS5zdWJzdHIoMCx0KSksdGhpcy52ZXJzaW9uTWlub3I9cGFyc2VJbnQoZS5zdWJzdHIodCsxKSksMD09PXRoaXMudmVyc2lvbk1pbm9yLmxlbmd0aCYmKHRoaXMudmVyc2lvbk1pbm9yPTApfW9ubWVzc2FnZT1mdW5jdGlvbihyKXtpZihyLmRhdGEmJnIuZGF0YS5idWZmZXIpdHJ5e3ZhciBpPXIuZGF0YS5idWZmZXIsbj1yLmRhdGEucG9pbnRBdHRyaWJ1dGVzLHM9aS5ieXRlTGVuZ3RoL24uYnl0ZVNpemUsQT1uZXcgZShpKSxUPW5ldyB0KHIuZGF0YS52ZXJzaW9uKSx1PXIuZGF0YS5vZmZzZXQsbz1yLmRhdGEuc2NhbGUsZj0oci5kYXRhLnNwYWNpbmcsci5kYXRhLmhhc0NoaWxkcmVuLHIuZGF0YS5uYW1lLFtOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLE51bWJlci5QT1NJVElWRV9JTkZJTklUWV0pLGg9W051bWJlci5ORUdBVElWRV9JTkZJTklUWSxOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXSxfPVswLDAsMF0sST17fSxiPTA7Zm9yKHZhciBOIG9mIG4uYXR0cmlidXRlcyl7aWYoTi5uYW1lPT09YS5QT1NJVElPTl9DQVJURVNJQU4ubmFtZSl7Zm9yKHZhciBFPW5ldyBBcnJheUJ1ZmZlcig0KnMqMykseT1uZXcgRmxvYXQzMkFycmF5KEUpLFM9MDtTPHM7UysrKVQubmV3ZXJUaGFuKFxcXCIxLjNcXFwiKT8oTD1BLmdldFVpbnQzMihiK1Mqbi5ieXRlU2l6ZSswLCEwKSpvLEM9QS5nZXRVaW50MzIoYitTKm4uYnl0ZVNpemUrNCwhMCkqbyxkPUEuZ2V0VWludDMyKGIrUypuLmJ5dGVTaXplKzgsITApKm8pOihMPUEuZ2V0RmxvYXQzMihTKm4uYnl0ZVNpemUrMCwhMCkrdVswXSxDPUEuZ2V0RmxvYXQzMihTKm4uYnl0ZVNpemUrNCwhMCkrdVsxXSxkPUEuZ2V0RmxvYXQzMihTKm4uYnl0ZVNpemUrOCwhMCkrdVsyXSkseVszKlMrMF09TCx5WzMqUysxXT1DLHlbMypTKzJdPWQsX1swXSs9TC9zLF9bMV0rPUMvcyxfWzJdKz1kL3MsZlswXT1NYXRoLm1pbihmWzBdLEwpLGZbMV09TWF0aC5taW4oZlsxXSxDKSxmWzJdPU1hdGgubWluKGZbMl0sZCksaFswXT1NYXRoLm1heChoWzBdLEwpLGhbMV09TWF0aC5tYXgoaFsxXSxDKSxoWzJdPU1hdGgubWF4KGhbMl0sZCk7SVtOLm5hbWVdPXtidWZmZXI6RSxhdHRyaWJ1dGU6Tn19ZWxzZSBpZihOLm5hbWU9PT1hLkNPTE9SX1BBQ0tFRC5uYW1lKXtFPW5ldyBBcnJheUJ1ZmZlcig0KnMpO3ZhciBtPW5ldyBVaW50OEFycmF5KEUpO2ZvcihTPTA7UzxzO1MrKyltWzQqUyswXT1BLmdldFVpbnQ4KGIrUypuLmJ5dGVTaXplKzApLG1bNCpTKzFdPUEuZ2V0VWludDgoYitTKm4uYnl0ZVNpemUrMSksbVs0KlMrMl09QS5nZXRVaW50OChiK1Mqbi5ieXRlU2l6ZSsyKTtJW04ubmFtZV09e2J1ZmZlcjpFLGF0dHJpYnV0ZTpOfX1lbHNlIGlmKE4ubmFtZT09PWEuSU5URU5TSVRZLm5hbWUpe0U9bmV3IEFycmF5QnVmZmVyKDQqcyk7dmFyIFA9bmV3IEZsb2F0MzJBcnJheShFKTtmb3IoUz0wO1M8cztTKyspe3ZhciBNPUEuZ2V0VWludDE2KGIrUypuLmJ5dGVTaXplLCEwKTtQW1NdPU19SVtOLm5hbWVdPXtidWZmZXI6RSxhdHRyaWJ1dGU6Tn19ZWxzZSBpZihOLm5hbWU9PT1hLkNMQVNTSUZJQ0FUSU9OLm5hbWUpe0U9bmV3IEFycmF5QnVmZmVyKHMpO3ZhciB3PW5ldyBVaW50OEFycmF5KEUpO2ZvcihTPTA7UzxzO1MrKyl7dmFyIGw9QS5nZXRVaW50OChiK1Mqbi5ieXRlU2l6ZSk7d1tTXT1sfUlbTi5uYW1lXT17YnVmZmVyOkUsYXR0cmlidXRlOk59fWVsc2UgaWYoTi5uYW1lPT09YS5OT1JNQUxfU1BIRVJFTUFQUEVELm5hbWUpe0U9bmV3IEFycmF5QnVmZmVyKDQqcyozKTt2YXIgej1uZXcgRmxvYXQzMkFycmF5KEUpO2ZvcihTPTA7UzxzO1MrKyl7dmFyIE89QS5nZXRVaW50OChiK1Mqbi5ieXRlU2l6ZSswKSxVPUEuZ2V0VWludDgoYitTKm4uYnl0ZVNpemUrMSksRD1PLzI1NSoyLTEsZz1VLzI1NSoyLTEsdj0xLFk9RCotRCtnKi1nKzEqdjt2PVksRCo9TWF0aC5zcXJ0KFkpLGcqPU1hdGguc3FydChZKSxEKj0yLGcqPTIsdj0yKnYtMSx6WzMqUyswXT1ELHpbMypTKzFdPWcselszKlMrMl09dn1JW04ubmFtZV09e2J1ZmZlcjpFLGF0dHJpYnV0ZTpOfX1lbHNlIGlmKE4ubmFtZT09PWEuTk9STUFMX09DVDE2Lm5hbWUpe2ZvcihFPW5ldyBBcnJheUJ1ZmZlcig0KnMqMyksej1uZXcgRmxvYXQzMkFycmF5KEUpLFM9MDtTPHM7UysrKXtPPUEuZ2V0VWludDgoYitTKm4uYnl0ZVNpemUrMCksVT1BLmdldFVpbnQ4KGIrUypuLmJ5dGVTaXplKzEpO3ZhciBGPU8vMjU1KjItMSxSPVUvMjU1KjItMSxkPTEtTWF0aC5hYnMoRiktTWF0aC5hYnMoUiksTD0wLEM9MDtkPj0wPyhMPUYsQz1SKTooTD0tKFIvTWF0aC5zaWduKFIpLTEpL01hdGguc2lnbihGKSxDPS0oRi9NYXRoLnNpZ24oRiktMSkvTWF0aC5zaWduKFIpKTt2YXIgcD1NYXRoLnNxcnQoTCpMK0MqQytkKmQpO0wvPXAsQy89cCxkLz1wLHpbMypTKzBdPUwselszKlMrMV09Qyx6WzMqUysyXT1kfUlbTi5uYW1lXT17YnVmZmVyOkUsYXR0cmlidXRlOk59fWVsc2UgaWYoTi5uYW1lPT09YS5OT1JNQUwubmFtZSl7Zm9yKEU9bmV3IEFycmF5QnVmZmVyKDQqcyozKSx6PW5ldyBGbG9hdDMyQXJyYXkoRSksUz0wO1M8cztTKyspTD1BLmdldEZsb2F0MzIoYitTKm4uYnl0ZVNpemUrMCwhMCksQz1BLmdldEZsb2F0MzIoYitTKm4uYnl0ZVNpemUrNCwhMCksZD1BLmdldEZsb2F0MzIoYitTKm4uYnl0ZVNpemUrOCwhMCkselszKlMrMF09TCx6WzMqUysxXT1DLHpbMypTKzJdPWQ7SVtOLm5hbWVdPXtidWZmZXI6RSxhdHRyaWJ1dGU6Tn19Yis9Ti5ieXRlU2l6ZX1FPW5ldyBBcnJheUJ1ZmZlcig0KnMpO2Zvcih2YXIgQj1uZXcgVWludDMyQXJyYXkoRSksYz0wO2M8cztjKyspQltjXT1jO0lbYS5JTkRJQ0VTLm5hbWVdPXtidWZmZXI6RSxhdHRyaWJ1dGU6YS5JTkRJQ0VTfTt2YXIgeD17YnVmZmVyOmksbWVhbjpfLGF0dHJpYnV0ZUJ1ZmZlcnM6SSx0aWdodEJvdW5kaW5nQm94OnttaW46ZixtYXg6aH19LEc9W107Zm9yKHZhciBWIGluIHguYXR0cmlidXRlQnVmZmVycylHLnB1c2goeC5hdHRyaWJ1dGVCdWZmZXJzW1ZdLmJ1ZmZlcik7Ry5wdXNoKGkpLHBvc3RNZXNzYWdlKHgsRyl9Y2F0Y2goZSl7cG9zdE1lc3NhZ2Uoe2Vycm9yOlxcXCJFeGVwdGlvbiB0aHJvd24gZHVyaW5nIGV4ZWN1dGlvbi5cXFwifSl9fSx0LnByb3RvdHlwZS5uZXdlclRoYW49ZnVuY3Rpb24oZSl7dmFyIHI9bmV3IHQoZSk7cmV0dXJuIHRoaXMudmVyc2lvbk1ham9yPnIudmVyc2lvbk1ham9yfHx0aGlzLnZlcnNpb25NYWpvcj09PXIudmVyc2lvbk1ham9yJiZ0aGlzLnZlcnNpb25NaW5vcj5yLnZlcnNpb25NaW5vcn07dmFyIHI9e0RBVEFfVFlQRV9ET1VCTEU6e29yZGluYWw6MCxzaXplOjh9LERBVEFfVFlQRV9GTE9BVDp7b3JkaW5hbDoxLHNpemU6NH0sREFUQV9UWVBFX0lOVDg6e29yZGluYWw6MixzaXplOjF9LERBVEFfVFlQRV9VSU5UODp7b3JkaW5hbDozLHNpemU6MX0sREFUQV9UWVBFX0lOVDE2OntvcmRpbmFsOjQsc2l6ZToyfSxEQVRBX1RZUEVfVUlOVDE2OntvcmRpbmFsOjUsc2l6ZToyfSxEQVRBX1RZUEVfSU5UMzI6e29yZGluYWw6NixzaXplOjR9LERBVEFfVFlQRV9VSU5UMzI6e29yZGluYWw6NyxzaXplOjR9LERBVEFfVFlQRV9JTlQ2NDp7b3JkaW5hbDo4LHNpemU6OH0sREFUQV9UWVBFX1VJTlQ2NDp7b3JkaW5hbDo5LHNpemU6OH19LGk9MDtmb3IodmFyIG4gaW4gcilyW2ldPXJbbl0saSsrO2Z1bmN0aW9uIGEoZSx0LHIpe3RoaXMubmFtZT1lLHRoaXMudHlwZT10LHRoaXMubnVtRWxlbWVudHM9cix0aGlzLmJ5dGVTaXplPXRoaXMubnVtRWxlbWVudHMqdGhpcy50eXBlLnNpemV9ZnVuY3Rpb24gcyhlKXtpZih0aGlzLmF0dHJpYnV0ZXM9W10sdGhpcy5ieXRlU2l6ZT0wLHRoaXMuc2l6ZT0wLG51bGwhPWUpZm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kyspe3ZhciByPWFbZVt0XV07dGhpcy5hdHRyaWJ1dGVzLnB1c2gociksdGhpcy5ieXRlU2l6ZSs9ci5ieXRlU2l6ZSx0aGlzLnNpemUrK319YS5QT1NJVElPTl9DQVJURVNJQU49bmV3IGEoMCxyLkRBVEFfVFlQRV9GTE9BVCwzKSxhLlJHQkFfUEFDS0VEPW5ldyBhKDEsci5EQVRBX1RZUEVfSU5UOCw0KSxhLkNPTE9SX1BBQ0tFRD1hLlJHQkFfUEFDS0VELGEuUkdCX1BBQ0tFRD1uZXcgYSgxLHIuREFUQV9UWVBFX0lOVDgsMyksYS5OT1JNQUxfRkxPQVRTPW5ldyBhKDQsci5EQVRBX1RZUEVfRkxPQVQsMyksYS5GSUxMRVJfMUI9bmV3IGEoNSxyLkRBVEFfVFlQRV9VSU5UOCwxKSxhLklOVEVOU0lUWT1uZXcgYSg2LHIuREFUQV9UWVBFX1VJTlQxNiwxKSxhLkNMQVNTSUZJQ0FUSU9OPW5ldyBhKDcsci5EQVRBX1RZUEVfVUlOVDgsMSksYS5OT1JNQUxfU1BIRVJFTUFQUEVEPW5ldyBhKDgsci5EQVRBX1RZUEVfVUlOVDgsMiksYS5OT1JNQUxfT0NUMTY9bmV3IGEoOSxyLkRBVEFfVFlQRV9VSU5UOCwyKSxhLk5PUk1BTD1uZXcgYSgxMCxyLkRBVEFfVFlQRV9GTE9BVCwzKSxhLlJFVFVSTl9OVU1CRVI9bmV3IGEoMTEsci5EQVRBX1RZUEVfVUlOVDgsMSksYS5OVU1CRVJfT0ZfUkVUVVJOUz1uZXcgYSgxMixyLkRBVEFfVFlQRV9VSU5UOCwxKSxhLlNPVVJDRV9JRD1uZXcgYSgxMyxyLkRBVEFfVFlQRV9VSU5UOCwxKSxhLklORElDRVM9bmV3IGEoMTQsci5EQVRBX1RZUEVfVUlOVDMyLDEpLGEuU1BBQ0lORz1uZXcgYSgxNSxyLkRBVEFfVFlQRV9GTE9BVCwxKSxzLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24oZSl7dGhpcy5hdHRyaWJ1dGVzLnB1c2goZSksdGhpcy5ieXRlU2l6ZSs9ZS5ieXRlU2l6ZSx0aGlzLnNpemUrK30scy5wcm90b3R5cGUuaGFzQ29sb3JzPWZ1bmN0aW9uKCl7Zm9yKHZhciBlIGluIHRoaXMuYXR0cmlidXRlcylpZigxPT09dGhpcy5hdHRyaWJ1dGVzW2VdLm5hbWUpcmV0dXJuITA7cmV0dXJuITF9LHMucHJvdG90eXBlLmhhc05vcm1hbHM9ZnVuY3Rpb24oKXtmb3IodmFyIGUgaW4gdGhpcy5hdHRyaWJ1dGVzKXt2YXIgdD10aGlzLmF0dHJpYnV0ZXNbZV07aWYodD09PWEuTk9STUFMX1NQSEVSRU1BUFBFRHx8dD09PWEuTk9STUFMX0ZMT0FUU3x8dD09PWEuTk9STUFMfHx0PT09YS5OT1JNQUxfT0NUMTYpcmV0dXJuITB9cmV0dXJuITF9fSkoKTtcXG5cIiwgXCJXb3JrZXJcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xufVxuIiwiXG5pbXBvcnQgd29ya2VyIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy93b3JrZXItbG9hZGVyL2Rpc3QvcnVudGltZS9pbmxpbmUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gV29ya2VyX2ZuKCkge1xuICByZXR1cm4gd29ya2VyKFwiKCgpPT57XFxcInVzZSBzdHJpY3RcXFwiO29ubWVzc2FnZT1mdW5jdGlvbihhKXtpZihhLmRhdGEmJmEuZGF0YS5idWZmZXIpe2Zvcih2YXIgcj1hLmRhdGEuYnVmZmVyLG49YS5kYXRhLm51bVBvaW50cyx0PWEuZGF0YS5wb2ludFNpemUsZT1hLmRhdGEucG9pbnRGb3JtYXRJRCxpPWEuZGF0YS5zY2FsZSxtPWEuZGF0YS5vZmZzZXQsZj0obmV3IFVpbnQ4QXJyYXkociksbmV3IERhdGFWaWV3KHIpKSxJPW5ldyBBcnJheUJ1ZmZlcig0MCpuKSx1PShuZXcgRGF0YVZpZXcoSSkse21pbjpbTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFldLG1heDpbTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLE51bWJlci5ORUdBVElWRV9JTkZJTklUWSxOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFldfSksbz1bMCwwLDBdLHM9bmV3IEFycmF5QnVmZmVyKDMqbio0KSxOPW5ldyBBcnJheUJ1ZmZlcig0Km4pLHc9bmV3IEFycmF5QnVmZmVyKDQqbiksQT1uZXcgQXJyYXlCdWZmZXIobikseT1uZXcgQXJyYXlCdWZmZXIobiksZD1uZXcgQXJyYXlCdWZmZXIobiksZz1uZXcgQXJyYXlCdWZmZXIoMipuKSxVPW5ldyBGbG9hdDMyQXJyYXkocyksYz1uZXcgVWludDhBcnJheShOKSxiPW5ldyBGbG9hdDMyQXJyYXkodyksVD1uZXcgVWludDhBcnJheShBKSx4PW5ldyBVaW50OEFycmF5KHkpLEI9bmV3IFVpbnQ4QXJyYXkoZCksdj1uZXcgVWludDE2QXJyYXkoZyksRT0wO0U8bjtFKyspe3ZhciBGPWYuZ2V0SW50MzIoRSp0KzAsITApLFY9Zi5nZXRJbnQzMihFKnQrNCwhMCksaD1mLmdldEludDMyKEUqdCs4LCEwKSxsPUYqaVswXSttWzBdLWEuZGF0YS5taW5zWzBdLHA9VippWzFdK21bMV0tYS5kYXRhLm1pbnNbMV0sTT1oKmlbMl0rbVsyXS1hLmRhdGEubWluc1syXTtVWzMqRSswXT1sLFVbMypFKzFdPXAsVVszKkUrMl09TSxvWzBdKz1sL24sb1sxXSs9cC9uLG9bMl0rPU0vbix1Lm1pblswXT1NYXRoLm1pbih1Lm1pblswXSxsKSx1Lm1pblsxXT1NYXRoLm1pbih1Lm1pblsxXSxwKSx1Lm1pblsyXT1NYXRoLm1pbih1Lm1pblsyXSxNKSx1Lm1heFswXT1NYXRoLm1heCh1Lm1heFswXSxsKSx1Lm1heFsxXT1NYXRoLm1heCh1Lm1heFsxXSxwKSx1Lm1heFsyXT1NYXRoLm1heCh1Lm1heFsyXSxNKTt2YXIgUz1mLmdldFVpbnQxNihFKnQrMTIsITApO2JbRV09Uzt2YXIgWT1mLmdldFVpbnQ4KEUqdCsxNCwhMCksXz03JlksRD0oNTYmWSk+PjM7eFtFXT1fLEJbRV09RDt2YXIgTz1mLmdldFVpbnQ4KEUqdCsxNSwhMCk7VFtFXT1PO3ZhciBQPWYuZ2V0VWludDE2KEUqdCsxOCwhMCk7aWYodltFXT1QLDI9PT1lKXt2YXIgRz1mLmdldFVpbnQxNihFKnQrMjAsITApLzI1NixSPWYuZ2V0VWludDE2KEUqdCsyMiwhMCkvMjU2LHo9Zi5nZXRVaW50MTYoRSp0KzI0LCEwKS8yNTY7Y1s0KkUrMF09RyxjWzQqRSsxXT1SLGNbNCpFKzJdPXosY1s0KkUrM109MjU1fX12YXIgaj1uZXcgQXJyYXlCdWZmZXIoNCpuKSxrPW5ldyBVaW50MzJBcnJheShqKTtmb3IoRT0wO0U8bjtFKyspa1tFXT1FO3ZhciBxPXttZWFuOm8scG9zaXRpb246cyxjb2xvcjpOLGludGVuc2l0eTp3LGNsYXNzaWZpY2F0aW9uOkEscmV0dXJuTnVtYmVyOnksbnVtYmVyT2ZSZXR1cm5zOmQscG9pbnRTb3VyY2VJRDpnLHRpZ2h0Qm91bmRpbmdCb3g6dSxpbmRpY2VzOmp9O3Bvc3RNZXNzYWdlKHEsW3EucG9zaXRpb24scS5jb2xvcixxLmludGVuc2l0eSxxLmNsYXNzaWZpY2F0aW9uLHEucmV0dXJuTnVtYmVyLHEubnVtYmVyT2ZSZXR1cm5zLHEucG9pbnRTb3VyY2VJRCxxLmluZGljZXNdKX19fSkoKTtcXG5cIiwgXCJXb3JrZXJcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vLyBGb3JjZSB3b3JrZXJzIHRvIGJlIGluY2x1ZGVkXHJcbmltcG9ydCBCaW5hcnlEZWNvZGVyV29ya2VyIGZyb20gXCIuLi93b3JrZXJzL0JpbmFyeURlY29kZXJXb3JrZXJcIjtcclxuLy8gaW1wb3J0IExBU0xBWldvcmtlciBmcm9tIFwiLi4vd29ya2Vycy9MQVNMQVpXb3JrZXJcIjtcclxuaW1wb3J0IExBU0RlY29kZXJXb3JrZXIgZnJvbSBcIi4uL3dvcmtlcnMvTEFTRGVjb2RlcldvcmtlclwiO1xyXG4vLyBpbXBvcnQgR3JleWhvdW5kQmluYXJ5RGVjb2RlcldvcmtlciBmcm9tIFwiLi4vd29ya2Vycy9HcmV5aG91bmRCaW5hcnlEZWNvZGVyV29ya2VyXCI7XHJcbi8vIGltcG9ydCBERU1Xb3JrZXIgZnJvbSBcIi4uL3dvcmtlcnMvREVNV29ya2VyXCI7XHJcbi8vIGltcG9ydCBFcHRMYXN6aXBEZWNvZGVyV29ya2VyIGZyb20gXCIuLi93b3JrZXJzL0VwdExhc3ppcERlY29kZXJXb3JrZXJcIjtcclxuLy8gaW1wb3J0IEVwdEJpbmFyeURlY29kZXJXb3JrZXIgZnJvbSBcIi4uL3dvcmtlcnMvRXB0QmluYXJ5RGVjb2RlcldvcmtlclwiO1xyXG5cclxuLyoqXHJcbiAqIFRoZSB3b3JrZXIgbWFuYWdlciBpcyByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgYW5kIG1hbmFnaW5nIHdvcmtlciBpbnN0YW5jZXMuXHJcbiAqL1xyXG5jbGFzcyBXb3JrZXJNYW5hZ2VyIHtcclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHRoaXMud29ya2VycyA9IFtdO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgNzsgaSsrKSB7XHJcblx0XHRcdHRoaXMud29ya2Vycy5wdXNoKFtdKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCBhIHdvcmtlciBmcm9tIHRoZSBwb29sLCBpZiBub25lIGF2YWlsYWJsZSBvbmUgd2lsbCBiZSBjcmVhdGVkLlxyXG5cdCAqL1xyXG5cdGdldFdvcmtlcih0eXBlKSB7XHJcblx0XHRpZiAodGhpcy53b3JrZXJzW3R5cGVdLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMud29ya2Vyc1t0eXBlXS5wb3AoKTtcclxuXHRcdH1cclxuXHJcblx0XHRzd2l0Y2ggKHR5cGUpIHtcclxuXHRcdFx0Y2FzZSAwOlxyXG5cdFx0XHRcdHJldHVybiBuZXcgQmluYXJ5RGVjb2RlcldvcmtlcigpO1xyXG5cdFx0XHRjYXNlIDE6XHJcblx0XHRcdFx0Ly8gcmV0dXJuIG5ldyBMQVNMQVpXb3JrZXIoKTtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0xBU0xBWldvcmtlciBub3QgaW1wbGVtZW50ZWQnKTtcclxuXHRcdFx0Y2FzZSAyOlxyXG5cdFx0XHRcdHJldHVybiBuZXcgTEFTRGVjb2RlcldvcmtlcigpO1xyXG5cdFx0XHRjYXNlIDM6XHJcblx0XHRcdFx0Ly8gcmV0dXJuIG5ldyBHcmV5aG91bmRCaW5hcnlEZWNvZGVyV29ya2VyKCk7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdHcmV5aG91bmRCaW5hcnlEZWNvZGVyV29ya2VyIG5vdCBpbXBsZW1lbnRlZCcpO1xyXG5cdFx0XHRjYXNlIDQ6XHJcblx0XHRcdFx0Ly8gcmV0dXJuIG5ldyBERU1Xb3JrZXIoKTtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0RFTVdvcmtlciBub3QgaW1wbGVtZW50ZWQnKTtcclxuXHRcdFx0Y2FzZSA1OlxyXG5cdFx0XHRcdC8vIHJldHVybiBuZXcgRXB0TGFzemlwRGVjb2RlcldvcmtlcigpO1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignRXB0TGFzemlwRGVjb2RlcldvcmtlciBub3QgaW1wbGVtZW50ZWQnKTtcclxuXHRcdFx0Y2FzZSA2OlxyXG5cdFx0XHRcdC8vIHJldHVybiBuZXcgRXB0QmluYXJ5RGVjb2RlcldvcmtlcigpO1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignRXB0QmluYXJ5RGVjb2RlcldvcmtlciBub3QgaW1wbGVtZW50ZWQnKTtcclxuXHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHR0aHJvdyBcIlVua25vd24gd29ya2VyIHJlcXVlc3RlZFwiO1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldHVybiAocmVpbnNlcnQpIHRoZSB3b3JrZXIgaW50byB0aGUgcG9vbC5cclxuXHQgKi9cclxuXHRyZXR1cm5Xb3JrZXIodHlwZSwgd29ya2VyKSB7XHJcblx0XHR0aGlzLndvcmtlcnNbdHlwZV0ucHVzaCh3b3JrZXIpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUnVuIGEgdGFzayBpbW1lZGlhdGx5LlxyXG5cdCAqL1xyXG5cdHJ1blRhc2sodHlwZSwgb25NZXNzYWdlLCBtZXNzYWdlLCB0cmFuc2Zlcikge1xyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdHZhciB3b3JrZXIgPSB0aGlzLmdldFdvcmtlcih0eXBlKTtcclxuXHRcdHdvcmtlci5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuXHRcdFx0b25NZXNzYWdlKGV2ZW50KTtcclxuXHRcdFx0c2VsZi5yZXR1cm5Xb3JrZXIodHlwZSwgd29ya2VyKTtcclxuXHRcdH07XHJcblxyXG5cdFx0aWYgKHRyYW5zZmVyICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0d29ya2VyLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIHRyYW5zZmVyKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHR3b3JrZXIucG9zdE1lc3NhZ2UobWVzc2FnZSk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuV29ya2VyTWFuYWdlci5CSU5BUllfREVDT0RFUiA9IDA7XHJcbldvcmtlck1hbmFnZXIuTEFTX0xBWiA9IDE7XHJcbldvcmtlck1hbmFnZXIuTEFTX0RFQ09ERVIgPSAyO1xyXG5Xb3JrZXJNYW5hZ2VyLkdSRVlIT1VORCA9IDM7XHJcbldvcmtlck1hbmFnZXIuREVNID0gNDtcclxuV29ya2VyTWFuYWdlci5FUFRfTEFTX1pJUF9ERUNPREVSID0gNTtcclxuV29ya2VyTWFuYWdlci5FUFRfQklOQVJZX0RFQ09ERVIgPSA2O1xyXG5cclxuZXhwb3J0IHsgV29ya2VyTWFuYWdlciB9O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7TFJVfSBmcm9tIFwiLi91dGlscy9MUlUuanNcIjtcclxuaW1wb3J0IHtXb3JrZXJNYW5hZ2VyfSBmcm9tIFwiLi91dGlscy9Xb3JrZXJNYW5hZ2VyLmpzXCI7XHJcblxyXG5mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0KCkge1xyXG5cdGlmIChkb2N1bWVudCAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7XHJcblx0XHRyZXR1cm4gZG9jdW1lbnQuY3VycmVudFNjcmlwdDtcclxuXHR9XHJcblx0Y29uc3Qgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcclxuXHRpZiAoc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCkge1xyXG5cdFx0cmV0dXJuIHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xyXG5cdH1cclxuXHRyZXR1cm4gbnVsbDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QmFzZVBhdGgoKVxyXG57XHJcblx0dmFyIGN1cnJlbnRTY3JpcHQgPSBnZXRDdXJyZW50U2NyaXB0KCk7XHJcblx0aWYoY3VycmVudFNjcmlwdCAmJiBjdXJyZW50U2NyaXB0LnNyYylcclxuXHR7XHJcblx0XHR2YXIgc2NyaXB0UGF0aCA9IG5ldyBVUkwoY3VycmVudFNjcmlwdC5zcmMgKyBcIi8uLlwiKS5ocmVmO1xyXG5cclxuXHRcdGlmKHNjcmlwdFBhdGguc2xpY2UoLTEpID09PSBcIi9cIilcclxuXHRcdHtcclxuXHRcdFx0c2NyaXB0UGF0aCA9IHNjcmlwdFBhdGguc2xpY2UoMCwgLTEpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBzY3JpcHRQYXRoO1xyXG5cdH1cclxuXHRlbHNlXHJcblx0e1xyXG5cdFx0Y29uc29sZS5lcnJvcihcIlBvdHJlZTogV2FzIHVuYWJsZSB0byBmaW5kIGl0cyBzY3JpcHQgcGF0aCB1c2luZyBkb2N1bWVudC5jdXJyZW50U2NyaXB0LlwiKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBcIlwiO1xyXG59XHJcblxyXG52YXIgR2xvYmFsID0gXHJcbntcclxuXHRkZWJ1Zzoge30sXHJcblx0d29ya2VyUGF0aDogZ2V0QmFzZVBhdGgoKSxcclxuXHRtYXhOb2Rlc0xvYWRHUFVGcmFtZTogMjAsXHJcblx0bWF4REVNTGV2ZWw6IDAsXHJcblx0bWF4Tm9kZXNMb2FkaW5nOiBuYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeSAhPT0gdW5kZWZpbmVkID8gbmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3kgOiA0LFxyXG5cdHBvaW50TG9hZExpbWl0OiAxZTEwLFxyXG5cdG51bU5vZGVzTG9hZGluZzogMCxcclxuXHRtZWFzdXJlVGltaW5nczogZmFsc2UsXHJcblx0d29ya2VyUG9vbDogbmV3IFdvcmtlck1hbmFnZXIoKSxcclxuXHRscnU6IG5ldyBMUlUoKSxcclxuXHRwb2ludGNsb3VkVHJhbnNmb3JtVmVyc2lvbjogdW5kZWZpbmVkXHJcbn07XHJcblxyXG5leHBvcnQge0dsb2JhbH07IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJ0aHJlZVwiKTs7IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG52YXIgUG9pbnRBdHRyaWJ1dGVOYW1lcyA9XHJcbntcclxuXHRQT1NJVElPTl9DQVJURVNJQU46IDAsIC8vZmxvYXQgeCwgeSwgeixcclxuXHRDT0xPUl9QQUNLRUQ6IDEsIC8vYnl0ZSByLCBnLCBiLCBhLCBJOiBbMCwxXVxyXG5cdENPTE9SX0ZMT0FUU18xOiAyLCAvL2Zsb2F0IHIsIGcsIGIsIEk6IFswLDFdXHJcblx0Q09MT1JfRkxPQVRTXzI1NTogMywgLy9mbG9hdCByLCBnLCBiLCBJOiBbMCwyNTVdXHJcblx0Tk9STUFMX0ZMT0FUUzogNCwgLy9mbG9hdCB4LCB5LCB6LFxyXG5cdEZJTExFUjogNSxcclxuXHRJTlRFTlNJVFk6IDYsXHJcblx0Q0xBU1NJRklDQVRJT046IDcsXHJcblx0Tk9STUFMX1NQSEVSRU1BUFBFRDogOCxcclxuXHROT1JNQUxfT0NUMTY6IDksXHJcblx0Tk9STUFMOiAxMCxcclxuXHRSRVRVUk5fTlVNQkVSOiAxMSxcclxuXHROVU1CRVJfT0ZfUkVUVVJOUzogMTIsXHJcblx0U09VUkNFX0lEOiAxMyxcclxuXHRJTkRJQ0VTOiAxNCxcclxuXHRTUEFDSU5HOiAxNVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNvbWUgdHlwZXMgb2YgcG9zc2libGUgcG9pbnQgYXR0cmlidXRlIGRhdGEgZm9ybWF0c1xyXG4gKlxyXG4gKiBAY2xhc3NcclxuICovXHJcbnZhciBQb2ludEF0dHJpYnV0ZVR5cGVzID1cclxue1xyXG5cdERBVEFfVFlQRV9ET1VCTEU6XHJcblx0e1xyXG5cdFx0b3JkaW5hbDogMCxcclxuXHRcdHNpemU6IDhcclxuXHR9LFxyXG5cdERBVEFfVFlQRV9GTE9BVDpcclxuXHR7XHJcblx0XHRvcmRpbmFsOiAxLFxyXG5cdFx0c2l6ZTogNFxyXG5cdH0sXHJcblx0REFUQV9UWVBFX0lOVDg6XHJcblx0e1xyXG5cdFx0b3JkaW5hbDogMixcclxuXHRcdHNpemU6IDFcclxuXHR9LFxyXG5cdERBVEFfVFlQRV9VSU5UODpcclxuXHR7XHJcblx0XHRvcmRpbmFsOiAzLFxyXG5cdFx0c2l6ZTogMVxyXG5cdH0sXHJcblx0REFUQV9UWVBFX0lOVDE2OlxyXG5cdHtcclxuXHRcdG9yZGluYWw6IDQsXHJcblx0XHRzaXplOiAyXHJcblx0fSxcclxuXHREQVRBX1RZUEVfVUlOVDE2OlxyXG5cdHtcclxuXHRcdG9yZGluYWw6IDUsXHJcblx0XHRzaXplOiAyXHJcblx0fSxcclxuXHREQVRBX1RZUEVfSU5UMzI6XHJcblx0e1xyXG5cdFx0b3JkaW5hbDogNixcclxuXHRcdHNpemU6IDRcclxuXHR9LFxyXG5cdERBVEFfVFlQRV9VSU5UMzI6XHJcblx0e1xyXG5cdFx0b3JkaW5hbDogNyxcclxuXHRcdHNpemU6IDRcclxuXHR9LFxyXG5cdERBVEFfVFlQRV9JTlQ2NDpcclxuXHR7XHJcblx0XHRvcmRpbmFsOiA4LFxyXG5cdFx0c2l6ZTogOFxyXG5cdH0sXHJcblx0REFUQV9UWVBFX1VJTlQ2NDpcclxuXHR7XHJcblx0XHRvcmRpbmFsOiA5LFxyXG5cdFx0c2l6ZTogOFxyXG5cdH1cclxufTtcclxuXHJcbnZhciBpID0gMDtcclxuZm9yKHZhciBvYmogaW4gUG9pbnRBdHRyaWJ1dGVUeXBlcylcclxue1xyXG5cdFBvaW50QXR0cmlidXRlVHlwZXNbaV0gPSBQb2ludEF0dHJpYnV0ZVR5cGVzW29ial07XHJcblx0aSsrO1xyXG59XHJcblxyXG4vKipcclxuICogQSBzaW5nbGUgcG9pbnQgYXR0cmlidXRlIHN1Y2ggYXMgY29sb3Ivbm9ybWFsLy4uIGFuZCBpdHMgZGF0YSBmb3JtYXQvbnVtYmVyIG9mIGVsZW1lbnRzLy4uLlxyXG4gKi9cclxuZnVuY3Rpb24gUG9pbnRBdHRyaWJ1dGUobmFtZSwgdHlwZSwgbnVtRWxlbWVudHMpXHJcbntcclxuXHR0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdHRoaXMudHlwZSA9IHR5cGU7XHJcblx0dGhpcy5udW1FbGVtZW50cyA9IG51bUVsZW1lbnRzO1xyXG5cdHRoaXMuYnl0ZVNpemUgPSB0aGlzLm51bUVsZW1lbnRzICogdGhpcy50eXBlLnNpemU7XHJcbn07XHJcblxyXG5Qb2ludEF0dHJpYnV0ZS5QT1NJVElPTl9DQVJURVNJQU4gPSBuZXcgUG9pbnRBdHRyaWJ1dGUoUG9pbnRBdHRyaWJ1dGVOYW1lcy5QT1NJVElPTl9DQVJURVNJQU4sIFBvaW50QXR0cmlidXRlVHlwZXMuREFUQV9UWVBFX0ZMT0FULCAzKTtcclxuUG9pbnRBdHRyaWJ1dGUuUkdCQV9QQUNLRUQgPSBuZXcgUG9pbnRBdHRyaWJ1dGUoUG9pbnRBdHRyaWJ1dGVOYW1lcy5DT0xPUl9QQUNLRUQsIFBvaW50QXR0cmlidXRlVHlwZXMuREFUQV9UWVBFX0lOVDgsIDQpO1xyXG5Qb2ludEF0dHJpYnV0ZS5DT0xPUl9QQUNLRUQgPSBQb2ludEF0dHJpYnV0ZS5SR0JBX1BBQ0tFRDtcclxuUG9pbnRBdHRyaWJ1dGUuUkdCX1BBQ0tFRCA9IG5ldyBQb2ludEF0dHJpYnV0ZShQb2ludEF0dHJpYnV0ZU5hbWVzLkNPTE9SX1BBQ0tFRCwgUG9pbnRBdHRyaWJ1dGVUeXBlcy5EQVRBX1RZUEVfSU5UOCwgMyk7XHJcblBvaW50QXR0cmlidXRlLk5PUk1BTF9GTE9BVFMgPSBuZXcgUG9pbnRBdHRyaWJ1dGUoUG9pbnRBdHRyaWJ1dGVOYW1lcy5OT1JNQUxfRkxPQVRTLCBQb2ludEF0dHJpYnV0ZVR5cGVzLkRBVEFfVFlQRV9GTE9BVCwgMyk7XHJcblBvaW50QXR0cmlidXRlLkZJTExFUl8xQiA9IG5ldyBQb2ludEF0dHJpYnV0ZShQb2ludEF0dHJpYnV0ZU5hbWVzLkZJTExFUiwgUG9pbnRBdHRyaWJ1dGVUeXBlcy5EQVRBX1RZUEVfVUlOVDgsIDEpO1xyXG5Qb2ludEF0dHJpYnV0ZS5JTlRFTlNJVFkgPSBuZXcgUG9pbnRBdHRyaWJ1dGUoUG9pbnRBdHRyaWJ1dGVOYW1lcy5JTlRFTlNJVFksIFBvaW50QXR0cmlidXRlVHlwZXMuREFUQV9UWVBFX1VJTlQxNiwgMSk7XHJcblBvaW50QXR0cmlidXRlLkNMQVNTSUZJQ0FUSU9OID0gbmV3IFBvaW50QXR0cmlidXRlKFBvaW50QXR0cmlidXRlTmFtZXMuQ0xBU1NJRklDQVRJT04sIFBvaW50QXR0cmlidXRlVHlwZXMuREFUQV9UWVBFX1VJTlQ4LCAxKTtcclxuUG9pbnRBdHRyaWJ1dGUuTk9STUFMX1NQSEVSRU1BUFBFRCA9IG5ldyBQb2ludEF0dHJpYnV0ZShQb2ludEF0dHJpYnV0ZU5hbWVzLk5PUk1BTF9TUEhFUkVNQVBQRUQsIFBvaW50QXR0cmlidXRlVHlwZXMuREFUQV9UWVBFX1VJTlQ4LCAyKTtcclxuUG9pbnRBdHRyaWJ1dGUuTk9STUFMX09DVDE2ID0gbmV3IFBvaW50QXR0cmlidXRlKFBvaW50QXR0cmlidXRlTmFtZXMuTk9STUFMX09DVDE2LCBQb2ludEF0dHJpYnV0ZVR5cGVzLkRBVEFfVFlQRV9VSU5UOCwgMik7XHJcblBvaW50QXR0cmlidXRlLk5PUk1BTCA9IG5ldyBQb2ludEF0dHJpYnV0ZShQb2ludEF0dHJpYnV0ZU5hbWVzLk5PUk1BTCwgUG9pbnRBdHRyaWJ1dGVUeXBlcy5EQVRBX1RZUEVfRkxPQVQsIDMpO1xyXG5Qb2ludEF0dHJpYnV0ZS5SRVRVUk5fTlVNQkVSID0gbmV3IFBvaW50QXR0cmlidXRlKFBvaW50QXR0cmlidXRlTmFtZXMuUkVUVVJOX05VTUJFUiwgUG9pbnRBdHRyaWJ1dGVUeXBlcy5EQVRBX1RZUEVfVUlOVDgsIDEpO1xyXG5Qb2ludEF0dHJpYnV0ZS5OVU1CRVJfT0ZfUkVUVVJOUyA9IG5ldyBQb2ludEF0dHJpYnV0ZShQb2ludEF0dHJpYnV0ZU5hbWVzLk5VTUJFUl9PRl9SRVRVUk5TLCBQb2ludEF0dHJpYnV0ZVR5cGVzLkRBVEFfVFlQRV9VSU5UOCwgMSk7XHJcblBvaW50QXR0cmlidXRlLlNPVVJDRV9JRCA9IG5ldyBQb2ludEF0dHJpYnV0ZShQb2ludEF0dHJpYnV0ZU5hbWVzLlNPVVJDRV9JRCwgUG9pbnRBdHRyaWJ1dGVUeXBlcy5EQVRBX1RZUEVfVUlOVDgsIDEpO1xyXG5Qb2ludEF0dHJpYnV0ZS5JTkRJQ0VTID0gbmV3IFBvaW50QXR0cmlidXRlKFBvaW50QXR0cmlidXRlTmFtZXMuSU5ESUNFUywgUG9pbnRBdHRyaWJ1dGVUeXBlcy5EQVRBX1RZUEVfVUlOVDMyLCAxKTtcclxuUG9pbnRBdHRyaWJ1dGUuU1BBQ0lORyA9IG5ldyBQb2ludEF0dHJpYnV0ZShQb2ludEF0dHJpYnV0ZU5hbWVzLlNQQUNJTkcsIFBvaW50QXR0cmlidXRlVHlwZXMuREFUQV9UWVBFX0ZMT0FULCAxKTtcclxuXHJcbi8qKlxyXG4gKiBPcmRlcmVkIGxpc3Qgb2YgUG9pbnRBdHRyaWJ1dGVzIHVzZWQgdG8gaWRlbnRpZnkgaG93IHBvaW50cyBhcmUgYWxpZ25lZCBpbiBhIGJ1ZmZlci5cclxuICovXHJcbmZ1bmN0aW9uIFBvaW50QXR0cmlidXRlcyhwb2ludEF0dHJpYnV0ZXMpXHJcbntcclxuXHR0aGlzLmF0dHJpYnV0ZXMgPSBbXTtcclxuXHR0aGlzLmJ5dGVTaXplID0gMDtcclxuXHR0aGlzLnNpemUgPSAwO1xyXG5cclxuXHRpZihwb2ludEF0dHJpYnV0ZXMgIT0gbnVsbClcclxuXHR7XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgcG9pbnRBdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgcG9pbnRBdHRyaWJ1dGVOYW1lID0gcG9pbnRBdHRyaWJ1dGVzW2ldO1xyXG5cdFx0XHR2YXIgcG9pbnRBdHRyaWJ1dGUgPSBQb2ludEF0dHJpYnV0ZVtwb2ludEF0dHJpYnV0ZU5hbWVdO1xyXG5cdFx0XHR0aGlzLmF0dHJpYnV0ZXMucHVzaChwb2ludEF0dHJpYnV0ZSk7XHJcblx0XHRcdHRoaXMuYnl0ZVNpemUgKz0gcG9pbnRBdHRyaWJ1dGUuYnl0ZVNpemU7XHJcblx0XHRcdHRoaXMuc2l6ZSsrO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcblBvaW50QXR0cmlidXRlcy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24ocG9pbnRBdHRyaWJ1dGUpXHJcbntcclxuXHR0aGlzLmF0dHJpYnV0ZXMucHVzaChwb2ludEF0dHJpYnV0ZSk7XHJcblx0dGhpcy5ieXRlU2l6ZSArPSBwb2ludEF0dHJpYnV0ZS5ieXRlU2l6ZTtcclxuXHR0aGlzLnNpemUrKztcclxufTtcclxuXHJcblBvaW50QXR0cmlidXRlcy5wcm90b3R5cGUuaGFzQ29sb3JzID0gZnVuY3Rpb24oKVxyXG57XHJcblx0Zm9yKHZhciBuYW1lIGluIHRoaXMuYXR0cmlidXRlcylcclxuXHR7XHJcblx0XHR2YXIgcG9pbnRBdHRyaWJ1dGUgPSB0aGlzLmF0dHJpYnV0ZXNbbmFtZV07XHJcblx0XHRpZihwb2ludEF0dHJpYnV0ZS5uYW1lID09PSBQb2ludEF0dHJpYnV0ZU5hbWVzLkNPTE9SX1BBQ0tFRClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZmFsc2U7XHJcbn07XHJcblxyXG5Qb2ludEF0dHJpYnV0ZXMucHJvdG90eXBlLmhhc05vcm1hbHMgPSBmdW5jdGlvbigpXHJcbntcclxuXHRmb3IodmFyIG5hbWUgaW4gdGhpcy5hdHRyaWJ1dGVzKVxyXG5cdHtcclxuXHRcdHZhciBwb2ludEF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlc1tuYW1lXTtcclxuXHRcdGlmKHBvaW50QXR0cmlidXRlID09PSBQb2ludEF0dHJpYnV0ZS5OT1JNQUxfU1BIRVJFTUFQUEVEIHx8IHBvaW50QXR0cmlidXRlID09PSBQb2ludEF0dHJpYnV0ZS5OT1JNQUxfRkxPQVRTIHx8IHBvaW50QXR0cmlidXRlID09PSBQb2ludEF0dHJpYnV0ZS5OT1JNQUwgfHwgcG9pbnRBdHRyaWJ1dGUgPT09IFBvaW50QXR0cmlidXRlLk5PUk1BTF9PQ1QxNilcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gZmFsc2U7XHJcbn07XHJcblxyXG5leHBvcnQge1BvaW50QXR0cmlidXRlLCBQb2ludEF0dHJpYnV0ZXMsIFBvaW50QXR0cmlidXRlTmFtZXMsIFBvaW50QXR0cmlidXRlVHlwZXN9OyIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxuLy9cclxuLy9pbmRleCBpcyBpbiBvcmRlciB4eXp4eXp4eXpcclxuY2xhc3MgREVNTm9kZVxyXG57XHJcblx0Y29uc3RydWN0b3IobmFtZSwgYm94LCB0aWxlU2l6ZSlcclxuXHR7XHJcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdFx0dGhpcy5ib3ggPSBib3g7XHJcblx0XHR0aGlzLnRpbGVTaXplID0gdGlsZVNpemU7XHJcblx0XHR0aGlzLmxldmVsID0gdGhpcy5uYW1lLmxlbmd0aCAtIDE7XHJcblx0XHR0aGlzLmRhdGEgPSBuZXcgRmxvYXQzMkFycmF5KHRpbGVTaXplICogdGlsZVNpemUpO1xyXG5cdFx0dGhpcy5kYXRhLmZpbGwoLUluZmluaXR5KTtcclxuXHRcdHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuXHJcblx0XHR0aGlzLm1pcE1hcCA9IFt0aGlzLmRhdGFdO1xyXG5cdFx0dGhpcy5taXBNYXBOZWVkc1VwZGF0ZSA9IHRydWU7XHJcblx0fVxyXG5cclxuXHRjcmVhdGVNaXBNYXAoKVxyXG5cdHtcclxuXHRcdHRoaXMubWlwTWFwID0gW3RoaXMuZGF0YV07XHJcblxyXG5cdFx0dmFyIHNvdXJjZVNpemUgPSB0aGlzLnRpbGVTaXplO1xyXG5cdFx0dmFyIG1pcFNpemUgPSBwYXJzZUludChzb3VyY2VTaXplIC8gMik7XHJcblx0XHR2YXIgbWlwU291cmNlID0gdGhpcy5kYXRhO1xyXG5cdFx0d2hpbGUobWlwU2l6ZSA+IDEpXHJcblx0XHR7XHJcblx0XHRcdHZhciBtaXBEYXRhID0gbmV3IEZsb2F0MzJBcnJheShtaXBTaXplICogbWlwU2l6ZSk7XHJcblxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbWlwU2l6ZTsgaSsrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IG1pcFNpemU7IGorKylcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR2YXIgaDAwID0gbWlwU291cmNlWzIgKiBpICsgMCArIDIgKiBqICogc291cmNlU2l6ZV07XHJcblx0XHRcdFx0XHR2YXIgaDAxID0gbWlwU291cmNlWzIgKiBpICsgMCArIDIgKiBqICogc291cmNlU2l6ZSArIHNvdXJjZVNpemVdO1xyXG5cdFx0XHRcdFx0dmFyIGgxMCA9IG1pcFNvdXJjZVsyICogaSArIDEgKyAyICogaiAqIHNvdXJjZVNpemVdO1xyXG5cdFx0XHRcdFx0dmFyIGgxMSA9IG1pcFNvdXJjZVsyICogaSArIDEgKyAyICogaiAqIHNvdXJjZVNpemUgKyBzb3VyY2VTaXplXTtcclxuXHJcblx0XHRcdFx0XHR2YXIgW2hlaWdodCwgd2VpZ2h0XSA9IFswLCAwXTtcclxuXHJcblx0XHRcdFx0XHRpZihpc0Zpbml0ZShoMDApKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRoZWlnaHQgKz0gaDAwO1xyXG5cdFx0XHRcdFx0XHR3ZWlnaHQgKz0gMTtcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRpZihpc0Zpbml0ZShoMDEpKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRoZWlnaHQgKz0gaDAxO1xyXG5cdFx0XHRcdFx0XHR3ZWlnaHQgKz0gMTtcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRpZihpc0Zpbml0ZShoMTApKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRoZWlnaHQgKz0gaDEwO1xyXG5cdFx0XHRcdFx0XHR3ZWlnaHQgKz0gMTtcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRpZihpc0Zpbml0ZShoMTEpKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRoZWlnaHQgKz0gaDExO1xyXG5cdFx0XHRcdFx0XHR3ZWlnaHQgKz0gMTtcclxuXHRcdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdFx0aGVpZ2h0ID0gaGVpZ2h0IC8gd2VpZ2h0O1xyXG5cclxuXHRcdFx0XHRcdC8vdmFyIGhzID0gW2gwMCwgaDAxLCBoMTAsIGgxMV0uZmlsdGVyKGggPT4gaXNGaW5pdGUoaCkpO1xyXG5cdFx0XHRcdFx0Ly92YXIgaGVpZ2h0ID0gaHMucmVkdWNlKChhLCB2LCBpKSA9PiBhICsgdiwgMCkgLyBocy5sZW5ndGg7XHJcblxyXG5cdFx0XHRcdFx0bWlwRGF0YVtpICsgaiAqIG1pcFNpemVdID0gaGVpZ2h0O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5taXBNYXAucHVzaChtaXBEYXRhKTtcclxuXHJcblx0XHRcdG1pcFNvdXJjZSA9IG1pcERhdGE7XHJcblx0XHRcdHNvdXJjZVNpemUgPSBtaXBTaXplO1xyXG5cdFx0XHRtaXBTaXplID0gcGFyc2VJbnQobWlwU2l6ZSAvIDIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMubWlwTWFwTmVlZHNVcGRhdGUgPSBmYWxzZTtcclxuXHR9XHJcblxyXG5cdHV2KHBvc2l0aW9uKVxyXG5cdHtcclxuXHRcdHZhciBib3hTaXplID0gdGhpcy5ib3guZ2V0U2l6ZShuZXcgVEhSRUUuVmVjdG9yMygpKTtcclxuXHJcblx0XHR2YXIgdSA9IChwb3NpdGlvbi54IC0gdGhpcy5ib3gubWluLngpIC8gYm94U2l6ZS54O1xyXG5cdFx0dmFyIHYgPSAocG9zaXRpb24ueSAtIHRoaXMuYm94Lm1pbi55KSAvIGJveFNpemUueTtcclxuXHJcblx0XHRyZXR1cm4gW3UsIHZdO1xyXG5cdH1cclxuXHJcblx0aGVpZ2h0QXRNaXBNYXBMZXZlbChwb3NpdGlvbiwgbWlwTWFwTGV2ZWwpXHJcblx0e1xyXG5cdFx0dmFyIHV2ID0gdGhpcy51dihwb3NpdGlvbik7XHJcblxyXG5cdFx0dmFyIHRpbGVTaXplID0gcGFyc2VJbnQodGhpcy50aWxlU2l6ZSAvIHBhcnNlSW50KDIgKiogbWlwTWFwTGV2ZWwpKTtcclxuXHRcdHZhciBkYXRhID0gdGhpcy5taXBNYXBbbWlwTWFwTGV2ZWxdO1xyXG5cclxuXHRcdHZhciBpID0gTWF0aC5taW4odXZbMF0gKiB0aWxlU2l6ZSwgdGlsZVNpemUgLSAxKTtcclxuXHRcdHZhciBqID0gTWF0aC5taW4odXZbMV0gKiB0aWxlU2l6ZSwgdGlsZVNpemUgLSAxKTtcclxuXHJcblx0XHR2YXIgYSA9IGkgJSAxO1xyXG5cdFx0dmFyIGIgPSBqICUgMTtcclxuXHJcblx0XHR2YXIgW2kwLCBpMV0gPSBbTWF0aC5mbG9vcihpKSwgTWF0aC5jZWlsKGkpXTtcclxuXHRcdHZhciBbajAsIGoxXSA9IFtNYXRoLmZsb29yKGopLCBNYXRoLmNlaWwoaildO1xyXG5cclxuXHRcdHZhciBoMDAgPSBkYXRhW2kwICsgdGlsZVNpemUgKiBqMF07XHJcblx0XHR2YXIgaDAxID0gZGF0YVtpMCArIHRpbGVTaXplICogajFdO1xyXG5cdFx0dmFyIGgxMCA9IGRhdGFbaTEgKyB0aWxlU2l6ZSAqIGowXTtcclxuXHRcdHZhciBoMTEgPSBkYXRhW2kxICsgdGlsZVNpemUgKiBqMV07XHJcblxyXG5cdFx0dmFyIHdoMDAgPSBpc0Zpbml0ZShoMDApID8gKDEgLSBhKSAqICgxIC0gYikgOiAwO1xyXG5cdFx0dmFyIHdoMDEgPSBpc0Zpbml0ZShoMDEpID8gKDEgLSBhKSAqIGIgOiAwO1xyXG5cdFx0dmFyIHdoMTAgPSBpc0Zpbml0ZShoMTApID8gYSAqICgxIC0gYikgOiAwO1xyXG5cdFx0dmFyIHdoMTEgPSBpc0Zpbml0ZShoMTEpID8gYSAqIGIgOiAwO1xyXG5cclxuXHRcdHZhciB3c3VtID0gd2gwMCArIHdoMDEgKyB3aDEwICsgd2gxMTtcclxuXHRcdHdoMDAgPSB3aDAwIC8gd3N1bTtcclxuXHRcdHdoMDEgPSB3aDAxIC8gd3N1bTtcclxuXHRcdHdoMTAgPSB3aDEwIC8gd3N1bTtcclxuXHRcdHdoMTEgPSB3aDExIC8gd3N1bTtcclxuXHJcblx0XHRpZih3c3VtID09PSAwKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgaCA9IDA7XHJcblxyXG5cdFx0aWYoaXNGaW5pdGUoaDAwKSkgaCArPSBoMDAgKiB3aDAwO1xyXG5cdFx0aWYoaXNGaW5pdGUoaDAxKSkgaCArPSBoMDEgKiB3aDAxO1xyXG5cdFx0aWYoaXNGaW5pdGUoaDEwKSkgaCArPSBoMTAgKiB3aDEwO1xyXG5cdFx0aWYoaXNGaW5pdGUoaDExKSkgaCArPSBoMTEgKiB3aDExO1xyXG5cclxuXHRcdHJldHVybiBoO1xyXG5cdH1cclxuXHJcblx0aGVpZ2h0KHBvc2l0aW9uKVxyXG5cdHtcclxuXHRcdHZhciBoID0gbnVsbDtcclxuXHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5taXBNYXAubGVuZ3RoOyBpKyspXHJcblx0XHR7XHJcblx0XHRcdGggPSB0aGlzLmhlaWdodEF0TWlwTWFwTGV2ZWwocG9zaXRpb24sIGkpO1xyXG5cclxuXHRcdFx0aWYoaCAhPT0gbnVsbClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldHVybiBoO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGg7XHJcblx0fVxyXG5cclxuXHR0cmF2ZXJzZShoYW5kbGVyLCBsZXZlbCA9IDApXHJcblx0e1xyXG5cdFx0aGFuZGxlcih0aGlzLCBsZXZlbCk7XHJcblxyXG5cdFx0Zm9yKHZhciBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuLmZpbHRlcihjID0+IGMgIT09IHVuZGVmaW5lZCkpXHJcblx0XHR7XHJcblx0XHRcdGNoaWxkLnRyYXZlcnNlKGhhbmRsZXIsIGxldmVsICsgMSk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IHtERU1Ob2RlfSIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxuaW1wb3J0IHtXb3JrZXJNYW5hZ2VyfSBmcm9tIFwiLi4vdXRpbHMvV29ya2VyTWFuYWdlci5qc1wiO1xyXG5pbXBvcnQge0dsb2JhbH0gZnJvbSBcIi4uL0dsb2JhbC5qc1wiO1xyXG5pbXBvcnQge0RFTU5vZGV9IGZyb20gXCIuL0RFTU5vZGUuanNcIjtcclxuXHJcbmNsYXNzIERFTVxyXG57XHJcblx0Y29uc3RydWN0b3IocG9pbnRjbG91ZClcclxuXHR7XHJcblx0XHR0aGlzLnBvaW50Y2xvdWQgPSBwb2ludGNsb3VkO1xyXG5cdFx0dGhpcy5tYXRyaXggPSBudWxsO1xyXG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IG51bGw7XHJcblx0XHR0aGlzLnRpbGVTaXplID0gNjQ7XHJcblx0XHR0aGlzLnJvb3QgPSBudWxsO1xyXG5cdFx0dGhpcy52ZXJzaW9uID0gMDtcclxuXHR9XHJcblxyXG5cdC8vZXhwYW5kcyB0aGUgdHJlZSB0byBhbGwgbm9kZXMgdGhhdCBpbnRlcnNlY3QgPGJveD4gYXQgPGxldmVsPiByZXR1cm5zIHRoZSBpbnRlcnNlY3Rpbmcgbm9kZXMgYXQgPGxldmVsPlxyXG5cdGV4cGFuZEFuZEZpbmRCeUJveChib3gsIGxldmVsKVxyXG5cdHtcclxuXHRcdGlmKGxldmVsID09PSAwKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gW3RoaXMucm9vdF07XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0dmFyIHN0YWNrID0gW3RoaXMucm9vdF07XHJcblxyXG5cdFx0d2hpbGUoc3RhY2subGVuZ3RoID4gMClcclxuXHRcdHtcclxuXHRcdFx0dmFyIG5vZGUgPSBzdGFjay5wb3AoKTtcclxuXHRcdFx0dmFyIG5vZGVCb3hTaXplID0gbm9kZS5ib3guZ2V0U2l6ZShuZXcgVEhSRUUuVmVjdG9yMygpKTtcclxuXHJcblx0XHRcdC8vY2hlY2sgd2hpY2ggY2hpbGRyZW4gaW50ZXJzZWN0IGJ5IHRyYW5zZm9ybWluZyBtaW4vbWF4IHRvIHF1YWRyYW50c1xyXG5cdFx0XHR2YXIgbWluID0ge1xyXG5cdFx0XHRcdHg6IChib3gubWluLnggLSBub2RlLmJveC5taW4ueCkgLyBub2RlQm94U2l6ZS54LFxyXG5cdFx0XHRcdHk6IChib3gubWluLnkgLSBub2RlLmJveC5taW4ueSkgLyBub2RlQm94U2l6ZS55XHJcblx0XHRcdH07XHJcblx0XHRcdHZhciBtYXggPSB7XHJcblx0XHRcdFx0eDogKGJveC5tYXgueCAtIG5vZGUuYm94Lm1heC54KSAvIG5vZGVCb3hTaXplLngsXHJcblx0XHRcdFx0eTogKGJveC5tYXgueSAtIG5vZGUuYm94Lm1heC55KSAvIG5vZGVCb3hTaXplLnlcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdG1pbi54ID0gbWluLnggPCAwLjUgPyAwIDogMTtcclxuXHRcdFx0bWluLnkgPSBtaW4ueSA8IDAuNSA/IDAgOiAxO1xyXG5cdFx0XHRtYXgueCA9IG1heC54IDwgMC41ID8gMCA6IDE7XHJcblx0XHRcdG1heC55ID0gbWF4LnkgPCAwLjUgPyAwIDogMTtcclxuXHJcblx0XHRcdHZhciBjaGlsZEluZGljZXM7XHJcblx0XHRcdGlmKG1pbi54ID09PSAwICYmIG1pbi55ID09PSAwICYmIG1heC54ID09PSAxICYmIG1heC55ID09PSAxKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y2hpbGRJbmRpY2VzID0gWzAsIDEsIDIsIDNdO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYobWluLnggPT09IG1heC54ICYmIG1pbi55ID09PSBtYXgueSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNoaWxkSW5kaWNlcyA9IFsobWluLnggPDwgMSkgfCBtaW4ueV07XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y2hpbGRJbmRpY2VzID0gWyhtaW4ueCA8PCAxKSB8IG1pbi55LCAobWF4LnggPDwgMSkgfCBtYXgueV07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZvcih2YXIgaW5kZXggb2YgY2hpbGRJbmRpY2VzKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYobm9kZS5jaGlsZHJlbltpbmRleF0gPT09IHVuZGVmaW5lZClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR2YXIgY2hpbGRCb3ggPSBub2RlLmJveC5jbG9uZSgpO1xyXG5cclxuXHRcdFx0XHRcdGlmKChpbmRleCAmIDIpID4gMClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0Y2hpbGRCb3gubWluLnggKz0gbm9kZUJveFNpemUueCAvIDIuMDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0Y2hpbGRCb3gubWF4LnggLT0gbm9kZUJveFNpemUueCAvIDIuMDtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZigoaW5kZXggJiAxKSA+IDApXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGNoaWxkQm94Lm1pbi55ICs9IG5vZGVCb3hTaXplLnkgLyAyLjA7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGNoaWxkQm94Lm1heC55IC09IG5vZGVCb3hTaXplLnkgLyAyLjA7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dmFyIGNoaWxkID0gbmV3IERFTU5vZGUobm9kZS5uYW1lICsgaW5kZXgsIGNoaWxkQm94LCB0aGlzLnRpbGVTaXplKTtcclxuXHRcdFx0XHRcdG5vZGUuY2hpbGRyZW5baW5kZXhdID0gY2hpbGQ7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2YXIgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2luZGV4XTtcclxuXHJcblx0XHRcdFx0aWYoY2hpbGQubGV2ZWwgPCBsZXZlbClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzdGFjay5wdXNoKGNoaWxkKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHJlc3VsdC5wdXNoKGNoaWxkKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0Y2hpbGRJbmRleCh1dilcclxuXHR7XHJcblx0XHR2YXIgW3gsIHldID0gdXYubWFwKG4gPT4gbiA8IDAuNSA/IDAgOiAxKTtcclxuXHJcblx0XHR2YXIgaW5kZXggPSAoeCA8PCAxKSB8IHk7XHJcblxyXG5cdFx0cmV0dXJuIGluZGV4O1xyXG5cdH1cclxuXHJcblx0aGVpZ2h0KHBvc2l0aW9uKVxyXG5cdHtcclxuXHRcdGlmKCF0aGlzLnJvb3QpXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBoZWlnaHQgPSBudWxsO1xyXG5cdFx0dmFyIGxpc3QgPSBbdGhpcy5yb290XTtcclxuXHRcdHdoaWxlKHRydWUpXHJcblx0XHR7XHJcblx0XHRcdHZhciBub2RlID0gbGlzdFtsaXN0Lmxlbmd0aCAtIDFdO1xyXG5cclxuXHRcdFx0dmFyIGN1cnJlbnRIZWlnaHQgPSBub2RlLmhlaWdodChwb3NpdGlvbik7XHJcblxyXG5cdFx0XHRpZihjdXJyZW50SGVpZ2h0ICE9PSBudWxsKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aGVpZ2h0ID0gY3VycmVudEhlaWdodDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIHV2ID0gbm9kZS51dihwb3NpdGlvbik7XHJcblx0XHRcdHZhciBjaGlsZEluZGV4ID0gdGhpcy5jaGlsZEluZGV4KHV2KTtcclxuXHJcblx0XHRcdGlmKG5vZGUuY2hpbGRyZW5bY2hpbGRJbmRleF0pXHJcblx0XHRcdHtcclxuXHRcdFx0XHRsaXN0LnB1c2gobm9kZS5jaGlsZHJlbltjaGlsZEluZGV4XSk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gaGVpZ2h0ICsgdGhpcy5wb2ludGNsb3VkLnBvc2l0aW9uLno7XHJcblx0fVxyXG5cclxuXHR1cGRhdGUodmlzaWJsZU5vZGVzKVxyXG5cdHtcclxuXHRcdC8vY2hlY2sgaWYgcG9pbnQgY2xvdWQgdHJhbnNmb3JtYXRpb24gY2hhbmdlZFxyXG5cdFx0aWYodGhpcy5tYXRyaXggPT09IG51bGwgfHwgIXRoaXMubWF0cml4LmVxdWFscyh0aGlzLnBvaW50Y2xvdWQubWF0cml4V29ybGQpKVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLm1hdHJpeCA9IHRoaXMucG9pbnRjbG91ZC5tYXRyaXhXb3JsZC5jbG9uZSgpO1xyXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94ID0gdGhpcy5wb2ludGNsb3VkLmJvdW5kaW5nQm94LmNsb25lKCkuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4KTtcclxuXHRcdFx0dGhpcy5yb290ID0gbmV3IERFTU5vZGUoXCJyXCIsIHRoaXMuYm91bmRpbmdCb3gsIHRoaXMudGlsZVNpemUpO1xyXG5cdFx0XHR0aGlzLnZlcnNpb24rKztcclxuXHRcdH1cclxuXHJcblx0XHQvL2ZpbmQgbm9kZSB0byB1cGRhdGVcclxuXHRcdHZhciBub2RlID0gbnVsbDtcclxuXHRcdGZvcih2YXIgdm4gb2YgdmlzaWJsZU5vZGVzKVxyXG5cdFx0e1xyXG5cdFx0XHRpZih2bi5kZW1WZXJzaW9uID09PSB1bmRlZmluZWQgfHwgdm4uZGVtVmVyc2lvbiA8IHRoaXMudmVyc2lvbilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG5vZGUgPSB2bjtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0aWYobm9kZSA9PT0gbnVsbClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vdXBkYXRlIG5vZGVcclxuXHRcdHZhciBwcm9qZWN0ZWRCb3ggPSBub2RlLmdldEJvdW5kaW5nQm94KCkuY2xvbmUoKS5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXgpO1xyXG5cdFx0dmFyIHByb2plY3RlZEJveFNpemUgPSBwcm9qZWN0ZWRCb3guZ2V0U2l6ZShuZXcgVEhSRUUuVmVjdG9yMygpKTtcclxuXHJcblx0XHR2YXIgdGFyZ2V0Tm9kZXMgPSB0aGlzLmV4cGFuZEFuZEZpbmRCeUJveChwcm9qZWN0ZWRCb3gsIG5vZGUuZ2V0TGV2ZWwoKSk7XHJcblx0XHRub2RlLmRlbVZlcnNpb24gPSB0aGlzLnZlcnNpb247XHJcblxyXG5cdFx0dmFyIHBvc2l0aW9uID0gbm9kZS5nZW9tZXRyeU5vZGUuZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcclxuXHRcdHZhciBtZXNzYWdlID1cclxuXHRcdHtcclxuXHRcdFx0Ym91bmRpbmdCb3g6XHJcblx0XHRcdHtcclxuXHRcdFx0XHRtaW46IG5vZGUuZ2V0Qm91bmRpbmdCb3goKS5taW4udG9BcnJheSgpLFxyXG5cdFx0XHRcdG1heDogbm9kZS5nZXRCb3VuZGluZ0JveCgpLm1heC50b0FycmF5KClcclxuXHRcdFx0fSxcclxuXHRcdFx0cG9zaXRpb246IG5ldyBGbG9hdDMyQXJyYXkocG9zaXRpb24pLmJ1ZmZlclxyXG5cdFx0fTtcclxuXHRcdHZhciB0cmFuc2ZlcmFibGVzID0gW21lc3NhZ2UucG9zaXRpb25dO1xyXG5cclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHRHbG9iYWwud29ya2VyUG9vbC5ydW5UYXNrKFdvcmtlck1hbmFnZXIuREVNLCBmdW5jdGlvbihlKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgZGF0YSA9IG5ldyBGbG9hdDMyQXJyYXkoZS5kYXRhLmRlbS5kYXRhKTtcclxuXHJcblx0XHRcdGZvcih2YXIgZGVtTm9kZSBvZiB0YXJnZXROb2RlcylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZhciBib3hTaXplID0gZGVtTm9kZS5ib3guZ2V0U2l6ZShuZXcgVEhSRUUuVmVjdG9yMygpKTtcclxuXHJcblx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNlbGYudGlsZVNpemU7IGkrKylcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgc2VsZi50aWxlU2l6ZTsgaisrKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHR2YXIgdSA9IChpIC8gKHNlbGYudGlsZVNpemUgLSAxKSk7XHJcblx0XHRcdFx0XHRcdHZhciB2ID0gKGogLyAoc2VsZi50aWxlU2l6ZSAtIDEpKTtcclxuXHJcblx0XHRcdFx0XHRcdHZhciB4ID0gZGVtTm9kZS5ib3gubWluLnggKyB1ICogYm94U2l6ZS54O1xyXG5cdFx0XHRcdFx0XHR2YXIgeSA9IGRlbU5vZGUuYm94Lm1pbi55ICsgdiAqIGJveFNpemUueTtcclxuXHJcblx0XHRcdFx0XHRcdHZhciBpeCA9IHNlbGYudGlsZVNpemUgKiAoeCAtIHByb2plY3RlZEJveC5taW4ueCkgLyBwcm9qZWN0ZWRCb3hTaXplLng7XHJcblx0XHRcdFx0XHRcdHZhciBpeSA9IHNlbGYudGlsZVNpemUgKiAoeSAtIHByb2plY3RlZEJveC5taW4ueSkgLyBwcm9qZWN0ZWRCb3hTaXplLnk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZihpeCA8IDAgfHwgaXggPiBzZWxmLnRpbGVTaXplKVxyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdGlmKGl5IDwgMCB8fCBpeSA+IHNlbGYudGlsZVNpemUpXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0aXggPSBNYXRoLm1pbihNYXRoLmZsb29yKGl4KSwgc2VsZi50aWxlU2l6ZSAtIDEpO1xyXG5cdFx0XHRcdFx0XHRpeSA9IE1hdGgubWluKE1hdGguZmxvb3IoaXkpLCBzZWxmLnRpbGVTaXplIC0gMSk7XHJcblxyXG5cdFx0XHRcdFx0XHRkZW1Ob2RlLmRhdGFbaSArIHNlbGYudGlsZVNpemUgKiBqXSA9IGRhdGFbaXggKyBzZWxmLnRpbGVTaXplICogaXldO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0ZGVtTm9kZS5jcmVhdGVNaXBNYXAoKTtcclxuXHRcdFx0XHRkZW1Ob2RlLm1pcE1hcE5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0fSwgbWVzc2FnZSwgdHJhbnNmZXJhYmxlcyk7XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IHtERU19OyIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxuaW1wb3J0IHtERU19IGZyb20gXCIuL0RFTS5qc1wiO1xyXG5cclxuY2xhc3MgUG9pbnRDbG91ZFRyZWVOb2RlXHJcbntcclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdFx0dGhpcy5uZWVkc1RyYW5zZm9ybVVwZGF0ZSA9IHRydWU7XHJcblx0fVxyXG5cclxuXHRnZXRDaGlsZHJlbigpe31cclxuXHJcblx0Z2V0Qm91bmRpbmdCb3goKXt9XHJcblxyXG5cdGlzTG9hZGVkKCl7fVxyXG5cclxuXHRpc0dlb21ldHJ5Tm9kZSgpe31cclxuXHJcblx0aXNUcmVlTm9kZSgpe31cclxuXHJcblx0Z2V0TGV2ZWwoKXt9XHJcblxyXG5cdGdldEJvdW5kaW5nU3BoZXJlKCl7fVxyXG59O1xyXG5cclxuY2xhc3MgUG9pbnRDbG91ZFRyZWUgZXh0ZW5kcyBUSFJFRS5PYmplY3QzRFxyXG57XHJcblx0Y29uc3RydWN0b3IoKVxyXG5cdHtcclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5kZW0gPSBuZXcgREVNKHRoaXMpO1xyXG5cdH1cclxuXHJcblx0aW5pdGlhbGl6ZWQoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLnJvb3QgIT09IG51bGw7XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IHtQb2ludENsb3VkVHJlZSwgUG9pbnRDbG91ZFRyZWVOb2RlfTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5pbXBvcnQge0dyZXlob3VuZExvYWRlcn0gZnJvbSBcIi4uLy4uL2xvYWRlcnMvR3JleWhvdW5kTG9hZGVyLmpzXCI7XHJcbmltcG9ydCB7R2xvYmFsfSBmcm9tIFwiLi4vLi4vR2xvYmFsLmpzXCI7XHJcbmltcG9ydCB7UG9pbnRDbG91ZFRyZWUsIFBvaW50Q2xvdWRUcmVlTm9kZX0gZnJvbSBcIi4uL1BvaW50Q2xvdWRUcmVlLmpzXCI7XHJcblxyXG5jbGFzcyBQb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlcclxue1xyXG5cdGNvbnN0cnVjdG9yKClcclxuXHR7XHJcblx0XHR0aGlzLnNwYWNpbmcgPSAwO1xyXG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IG51bGw7XHJcblx0XHR0aGlzLnJvb3QgPSBudWxsO1xyXG5cdFx0dGhpcy5ub2RlcyA9IG51bGw7XHJcblx0XHR0aGlzLnBvaW50QXR0cmlidXRlcyA9IHt9O1xyXG5cdFx0dGhpcy5oaWVyYXJjaHlTdGVwU2l6ZSA9IC0xO1xyXG5cdFx0dGhpcy5sb2FkZXIgPSBudWxsO1xyXG5cdFx0dGhpcy5zY2hlbWEgPSBudWxsO1xyXG5cclxuXHRcdHRoaXMuYmFzZURlcHRoID0gbnVsbDtcclxuXHRcdHRoaXMub2Zmc2V0ID0gbnVsbDtcclxuXHRcdHRoaXMucHJvamVjdGlvbiA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG51bGw7XHJcblxyXG5cdFx0Ly8gdGhlIHNlcnZlclVSTCB3aWxsIGNvbnRhaW4gdGhlIGJhc2UgVVJMIG9mIHRoZSBncmV5aG91bmQgc2VydmVyLiBmLmUuIGh0dHA6Ly9kZXYuZ3JleWhvdW5kLmlvL3Jlc291cmNlL2F1dHplbi9cclxuXHRcdHRoaXMuc2VydmVyVVJMID0gbnVsbDtcclxuXHRcdHRoaXMubm9ybWFsaXplID0ge2NvbG9yOiBmYWxzZSwgaW50ZW5zaXR5OiBmYWxzZX07XHJcblx0fVxyXG59XHJcblxyXG5mdW5jdGlvbiBQb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlKG5hbWUsIHBjb0dlb21ldHJ5LCBib3VuZGluZ0JveCwgc2NhbGUsIG9mZnNldClcclxue1xyXG5cdHRoaXMuaWQgPSBQb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlLklEQ291bnQrKztcclxuXHR0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdHRoaXMuaW5kZXggPSBwYXJzZUludChuYW1lLmNoYXJBdChuYW1lLmxlbmd0aCAtIDEpKTtcclxuXHR0aGlzLnBjb0dlb21ldHJ5ID0gcGNvR2VvbWV0cnk7XHJcblx0dGhpcy5nZW9tZXRyeSA9IG51bGw7XHJcblx0dGhpcy5ib3VuZGluZ0JveCA9IGJvdW5kaW5nQm94O1xyXG5cdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBib3VuZGluZ0JveC5nZXRCb3VuZGluZ1NwaGVyZShuZXcgVEhSRUUuU3BoZXJlKCkpO1xyXG5cdHRoaXMuc2NhbGUgPSBzY2FsZTtcclxuXHR0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuXHR0aGlzLmNoaWxkcmVuID0ge307XHJcblx0dGhpcy5udW1Qb2ludHMgPSAwO1xyXG5cdHRoaXMubGV2ZWwgPSBudWxsO1xyXG5cdHRoaXMubG9hZGVkID0gZmFsc2U7XHJcblx0dGhpcy5vbmVUaW1lRGlzcG9zZUhhbmRsZXJzID0gW107XHJcblx0dGhpcy5iYXNlTG9hZGVkID0gZmFsc2U7XHJcblxyXG5cdHZhciBjZW50ZXIgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG5cclxuXHR2YXIgYm91bmRzID0gdGhpcy5ib3VuZGluZ0JveC5jbG9uZSgpO1xyXG5cdGJvdW5kcy5taW4uc3ViKHRoaXMucGNvR2VvbWV0cnkuYm91bmRpbmdCb3guZ2V0Q2VudGVyKGNlbnRlcikpO1xyXG5cdGJvdW5kcy5tYXguc3ViKHRoaXMucGNvR2VvbWV0cnkuYm91bmRpbmdCb3guZ2V0Q2VudGVyKGNlbnRlcikpO1xyXG5cclxuXHRpZih0aGlzLnNjYWxlKVxyXG5cdHtcclxuXHRcdGJvdW5kcy5taW4ubXVsdGlwbHlTY2FsYXIoMSAvIHRoaXMuc2NhbGUpO1xyXG5cdFx0Ym91bmRzLm1heC5tdWx0aXBseVNjYWxhcigxIC8gdGhpcy5zY2FsZSk7XHJcblx0fVxyXG5cclxuXHQvL1RoaXMgcmVwcmVzZW50cyB0aGUgYm91bmRzIGZvciB0aGlzIG5vZGUgaW4gdGhlIHJlZmVyZW5jZSBmcmFtZSBvZiB0aGVcclxuXHQvL2dsb2JhbCBib3VuZHMgZnJvbSBgaW5mb2AsIGNlbnRlcmVkIGFyb3VuZCB0aGUgb3JpZ2luLCBhbmQgdGhlbiBzY2FsZWRcclxuXHQvL2J5IG91ciBzZWxlY3RlZCBzY2FsZS5cclxuXHR0aGlzLmdyZXlob3VuZEJvdW5kcyA9IGJvdW5kcztcclxuXHJcblx0Ly9UaGlzIHJlcHJlc2VudHMgdGhlIG9mZnNldCBiZXR3ZWVuIHRoZSBjb29yZGluYXRlIHN5c3RlbSBkZXNjcmliZWQgYWJvdmVcclxuXHQvL2FuZCBvdXIgcGNvR2VvbWV0cnkgYm91bmRzLlxyXG5cdHRoaXMuZ3JleWhvdW5kT2Zmc2V0ID0gdGhpcy5wY29HZW9tZXRyeS5vZmZzZXQuY2xvbmUoKS5hZGQodGhpcy5wY29HZW9tZXRyeS5ib3VuZGluZ0JveC5nZXRTaXplKG5ldyBUSFJFRS5WZWN0b3IzKCkpLm11bHRpcGx5U2NhbGFyKDAuNSkpO1xyXG59O1xyXG5cclxuUG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5Tm9kZS5JRENvdW50ID0gMDtcclxuXHJcblBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShQb2ludENsb3VkVHJlZU5vZGUucHJvdG90eXBlKTtcclxuXHJcblBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUucHJvdG90eXBlLmlzR2VvbWV0cnlOb2RlID0gZnVuY3Rpb24oKVxyXG57XHJcblx0cmV0dXJuIHRydWU7XHJcbn07XHJcblxyXG5Qb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlLnByb3RvdHlwZS5pc1RyZWVOb2RlID0gZnVuY3Rpb24oKVxyXG57XHJcblx0cmV0dXJuIGZhbHNlO1xyXG59O1xyXG5cclxuUG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5Tm9kZS5wcm90b3R5cGUuaXNMb2FkZWQgPSBmdW5jdGlvbigpXHJcbntcclxuXHRyZXR1cm4gdGhpcy5sb2FkZWQ7XHJcbn07XHJcblxyXG5Qb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlLnByb3RvdHlwZS5nZXRCb3VuZGluZ1NwaGVyZSA9IGZ1bmN0aW9uKClcclxue1xyXG5cdHJldHVybiB0aGlzLmJvdW5kaW5nU3BoZXJlO1xyXG59O1xyXG5cclxuUG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5Tm9kZS5wcm90b3R5cGUuZ2V0Qm91bmRpbmdCb3ggPSBmdW5jdGlvbigpXHJcbntcclxuXHRyZXR1cm4gdGhpcy5ib3VuZGluZ0JveDtcclxufTtcclxuXHJcblBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUucHJvdG90eXBlLmdldExldmVsID0gZnVuY3Rpb24oKVxyXG57XHJcblx0cmV0dXJuIHRoaXMubGV2ZWw7XHJcbn07XHJcblxyXG5Qb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlLnByb3RvdHlwZS5nZXRDaGlsZHJlbiA9IGZ1bmN0aW9uKClcclxue1xyXG5cdHZhciBjaGlsZHJlbiA9IFtdO1xyXG5cclxuXHRmb3IodmFyIGkgPSAwOyBpIDwgODsgKytpKVxyXG5cdHtcclxuXHRcdGlmKHRoaXMuY2hpbGRyZW5baV0pXHJcblx0XHR7XHJcblx0XHRcdGNoaWxkcmVuLnB1c2godGhpcy5jaGlsZHJlbltpXSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gY2hpbGRyZW47XHJcbn07XHJcblxyXG5Qb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlLnByb3RvdHlwZS5nZXRVUkwgPSBmdW5jdGlvbigpXHJcbntcclxuXHR2YXIgc2NoZW1hID0gdGhpcy5wY29HZW9tZXRyeS5zY2hlbWE7XHJcblx0dmFyIGJvdW5kcyA9IHRoaXMuZ3JleWhvdW5kQm91bmRzO1xyXG5cclxuXHR2YXIgYm91bmRzU3RyaW5nID0gYm91bmRzLm1pbi54ICsgXCIsXCIgKyBib3VuZHMubWluLnkgKyBcIixcIiArIGJvdW5kcy5taW4ueiArIFwiLFwiICsgYm91bmRzLm1heC54ICsgXCIsXCIgKyBib3VuZHMubWF4LnkgKyBcIixcIiArIGJvdW5kcy5tYXguejtcclxuXHJcblx0dmFyIHVybCA9IFwiXCIgKyB0aGlzLnBjb0dlb21ldHJ5LnNlcnZlclVSTCArXHJcblx0XHRcInJlYWQ/ZGVwdGhCZWdpbj1cIiArXHJcblx0XHQodGhpcy5iYXNlTG9hZGVkID8gKHRoaXMubGV2ZWwgKyB0aGlzLnBjb0dlb21ldHJ5LmJhc2VEZXB0aCkgOiAwKSArXHJcblx0XHRcIiZkZXB0aEVuZD1cIiArICh0aGlzLmxldmVsICsgdGhpcy5wY29HZW9tZXRyeS5iYXNlRGVwdGggKyAxKSArXHJcblx0XHRcIiZib3VuZHM9W1wiICsgYm91bmRzU3RyaW5nICsgXCJdXCIgK1xyXG5cdFx0XCImc2NoZW1hPVwiICsgSlNPTi5zdHJpbmdpZnkoc2NoZW1hKSArXHJcblx0XHRcIiZjb21wcmVzcz10cnVlXCI7XHJcblxyXG5cdGlmKHRoaXMuc2NhbGUpXHJcblx0e1xyXG5cdFx0dXJsICs9IFwiJnNjYWxlPVwiICsgdGhpcy5zY2FsZTtcclxuXHR9XHJcblxyXG5cdGlmKHRoaXMuZ3JleWhvdW5kT2Zmc2V0KVxyXG5cdHtcclxuXHRcdHZhciBvZmZzZXQgPSB0aGlzLmdyZXlob3VuZE9mZnNldDtcclxuXHRcdHVybCArPSBcIiZvZmZzZXQ9W1wiICsgb2Zmc2V0LnggKyBcIixcIiArIG9mZnNldC55ICsgXCIsXCIgKyBvZmZzZXQueiArIFwiXVwiO1xyXG5cdH1cclxuXHJcblx0aWYoIXRoaXMuYmFzZUxvYWRlZCkgdGhpcy5iYXNlTG9hZGVkID0gdHJ1ZTtcclxuXHJcblx0cmV0dXJuIHVybDtcclxufTtcclxuXHJcblBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUucHJvdG90eXBlLmFkZENoaWxkID0gZnVuY3Rpb24oY2hpbGQpXHJcbntcclxuXHR0aGlzLmNoaWxkcmVuW2NoaWxkLmluZGV4XSA9IGNoaWxkO1xyXG5cdGNoaWxkLnBhcmVudCA9IHRoaXM7XHJcbn07XHJcblxyXG5Qb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24oKVxyXG57XHJcblx0aWYodGhpcy5sb2FkaW5nID09PSB0cnVlIHx8IHRoaXMubG9hZGVkID09PSB0cnVlIHx8IEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmcgPj0gR2xvYmFsLm1heE5vZGVzTG9hZGluZylcclxuXHR7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHR0aGlzLmxvYWRpbmcgPSB0cnVlO1xyXG5cdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmcrKztcclxuXHJcblx0aWYodGhpcy5sZXZlbCAlIHRoaXMucGNvR2VvbWV0cnkuaGllcmFyY2h5U3RlcFNpemUgPT09IDAgJiYgdGhpcy5oYXNDaGlsZHJlbilcclxuXHR7XHJcblx0XHR0aGlzLmxvYWRIaWVyYXJjaHlUaGVuUG9pbnRzKCk7XHJcblx0fVxyXG5cdGVsc2VcclxuXHR7XHJcblx0XHR0aGlzLmxvYWRQb2ludHMoKTtcclxuXHR9XHJcbn07XHJcblxyXG5Qb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlLnByb3RvdHlwZS5sb2FkUG9pbnRzID0gZnVuY3Rpb24oKVxyXG57XHJcblx0dGhpcy5wY29HZW9tZXRyeS5sb2FkZXIubG9hZCh0aGlzKTtcclxufTtcclxuXHJcblBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUucHJvdG90eXBlLmxvYWRIaWVyYXJjaHlUaGVuUG9pbnRzID0gZnVuY3Rpb24oKVxyXG57XHJcblx0Ly9Gcm9tIEdyZXlob3VuZCAoQ2FydGVzaWFuKSBvcmRlcmluZyBmb3IgdGhlIG9jdHJlZSB0byBQb3RyZWUtZGVmYXVsdFxyXG5cdHZhciB0cmFuc2Zvcm0gPSBbMCwgMiwgMSwgMywgNCwgNiwgNSwgN107XHJcblxyXG5cdHZhciBtYWtlQml0TWFzayA9IGZ1bmN0aW9uKG5vZGUpXHJcblx0e1xyXG5cdFx0dmFyIG1hc2sgPSAwO1xyXG5cdFx0T2JqZWN0LmtleXMobm9kZSkuZm9yRWFjaChmdW5jdGlvbihrZXkpXHJcblx0XHR7XHJcblx0XHRcdGlmKGtleSA9PT0gXCJzd2RcIikgbWFzayArPSAxIDw8IHRyYW5zZm9ybVswXTtcclxuXHRcdFx0ZWxzZSBpZihrZXkgPT09IFwibndkXCIpIG1hc2sgKz0gMSA8PCB0cmFuc2Zvcm1bMV07XHJcblx0XHRcdGVsc2UgaWYoa2V5ID09PSBcInN3dVwiKSBtYXNrICs9IDEgPDwgdHJhbnNmb3JtWzJdO1xyXG5cdFx0XHRlbHNlIGlmKGtleSA9PT0gXCJud3VcIikgbWFzayArPSAxIDw8IHRyYW5zZm9ybVszXTtcclxuXHRcdFx0ZWxzZSBpZihrZXkgPT09IFwic2VkXCIpIG1hc2sgKz0gMSA8PCB0cmFuc2Zvcm1bNF07XHJcblx0XHRcdGVsc2UgaWYoa2V5ID09PSBcIm5lZFwiKSBtYXNrICs9IDEgPDwgdHJhbnNmb3JtWzVdO1xyXG5cdFx0XHRlbHNlIGlmKGtleSA9PT0gXCJzZXVcIikgbWFzayArPSAxIDw8IHRyYW5zZm9ybVs2XTtcclxuXHRcdFx0ZWxzZSBpZihrZXkgPT09IFwibmV1XCIpIG1hc2sgKz0gMSA8PCB0cmFuc2Zvcm1bN107XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiBtYXNrO1xyXG5cdH07XHJcblxyXG5cdHZhciBwYXJzZUNoaWxkcmVuQ291bnRzID0gZnVuY3Rpb24oYmFzZSwgcGFyZW50TmFtZSwgc3RhY2spXHJcblx0e1xyXG5cdFx0dmFyIGtleXMgPSBPYmplY3Qua2V5cyhiYXNlKTtcclxuXHRcdHZhciBjaGlsZDtcclxuXHRcdHZhciBjaGlsZE5hbWU7XHJcblxyXG5cdFx0a2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSlcclxuXHRcdHtcclxuXHRcdFx0aWYoa2V5ID09PSBcIm5cIikgcmV0dXJuO1xyXG5cdFx0XHRzd2l0Y2goa2V5KVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y2FzZSBcInN3ZFwiOlxyXG5cdFx0XHRcdFx0Y2hpbGQgPSBiYXNlLnN3ZDtcclxuXHRcdFx0XHRcdGNoaWxkTmFtZSA9IHBhcmVudE5hbWUgKyB0cmFuc2Zvcm1bMF07XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIFwibndkXCI6XHJcblx0XHRcdFx0XHRjaGlsZCA9IGJhc2UubndkO1xyXG5cdFx0XHRcdFx0Y2hpbGROYW1lID0gcGFyZW50TmFtZSArIHRyYW5zZm9ybVsxXTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgXCJzd3VcIjpcclxuXHRcdFx0XHRcdGNoaWxkID0gYmFzZS5zd3U7XHJcblx0XHRcdFx0XHRjaGlsZE5hbWUgPSBwYXJlbnROYW1lICsgdHJhbnNmb3JtWzJdO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBcIm53dVwiOlxyXG5cdFx0XHRcdFx0Y2hpbGQgPSBiYXNlLm53dTtcclxuXHRcdFx0XHRcdGNoaWxkTmFtZSA9IHBhcmVudE5hbWUgKyB0cmFuc2Zvcm1bM107XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIFwic2VkXCI6XHJcblx0XHRcdFx0XHRjaGlsZCA9IGJhc2Uuc2VkO1xyXG5cdFx0XHRcdFx0Y2hpbGROYW1lID0gcGFyZW50TmFtZSArIHRyYW5zZm9ybVs0XTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgXCJuZWRcIjpcclxuXHRcdFx0XHRcdGNoaWxkID0gYmFzZS5uZWQ7XHJcblx0XHRcdFx0XHRjaGlsZE5hbWUgPSBwYXJlbnROYW1lICsgdHJhbnNmb3JtWzVdO1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0Y2FzZSBcInNldVwiOlxyXG5cdFx0XHRcdFx0Y2hpbGQgPSBiYXNlLnNldTtcclxuXHRcdFx0XHRcdGNoaWxkTmFtZSA9IHBhcmVudE5hbWUgKyB0cmFuc2Zvcm1bNl07XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRjYXNlIFwibmV1XCI6XHJcblx0XHRcdFx0XHRjaGlsZCA9IGJhc2UubmV1O1xyXG5cdFx0XHRcdFx0Y2hpbGROYW1lID0gcGFyZW50TmFtZSArIHRyYW5zZm9ybVs3XTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0c3RhY2sucHVzaChcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNoaWxkcmVuOiBtYWtlQml0TWFzayhjaGlsZCksXHJcblx0XHRcdFx0bnVtUG9pbnRzOiBjaGlsZC5uLFxyXG5cdFx0XHRcdG5hbWU6IGNoaWxkTmFtZVxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdHBhcnNlQ2hpbGRyZW5Db3VudHMoY2hpbGQsIGNoaWxkTmFtZSwgc3RhY2spO1xyXG5cdFx0fSk7XHJcblx0fTtcclxuXHJcblx0Ly9Mb2FkIGhpZXJhcmNoeS5cclxuXHR2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbihub2RlLCBncmV5aG91bmRIaWVyYXJjaHkpXHJcblx0e1xyXG5cdFx0dmFyIGRlY29kZWQgPSBbXTtcclxuXHRcdG5vZGUubnVtUG9pbnRzID0gZ3JleWhvdW5kSGllcmFyY2h5Lm47XHJcblx0XHRwYXJzZUNoaWxkcmVuQ291bnRzKGdyZXlob3VuZEhpZXJhcmNoeSwgbm9kZS5uYW1lLCBkZWNvZGVkKTtcclxuXHJcblx0XHR2YXIgbm9kZXMgPSB7fTtcclxuXHRcdG5vZGVzW25vZGUubmFtZV0gPSBub2RlO1xyXG5cdFx0dmFyIHBnZyA9IG5vZGUucGNvR2VvbWV0cnk7XHJcblxyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlY29kZWQubGVuZ3RoOyBpKyspXHJcblx0XHR7XHJcblx0XHRcdHZhciBuYW1lID0gZGVjb2RlZFtpXS5uYW1lO1xyXG5cdFx0XHR2YXIgbnVtUG9pbnRzID0gZGVjb2RlZFtpXS5udW1Qb2ludHM7XHJcblx0XHRcdHZhciBpbmRleCA9IHBhcnNlSW50KG5hbWUuY2hhckF0KG5hbWUubGVuZ3RoIC0gMSkpO1xyXG5cdFx0XHR2YXIgcGFyZW50TmFtZSA9IG5hbWUuc3Vic3RyaW5nKDAsIG5hbWUubGVuZ3RoIC0gMSk7XHJcblx0XHRcdHZhciBwYXJlbnROb2RlID0gbm9kZXNbcGFyZW50TmFtZV07XHJcblx0XHRcdHZhciBsZXZlbCA9IG5hbWUubGVuZ3RoIC0gMTtcclxuXHRcdFx0dmFyIGJvdW5kaW5nQm94ID0gR3JleWhvdW5kTG9hZGVyLmNyZWF0ZUNoaWxkQUFCQihwYXJlbnROb2RlLmJvdW5kaW5nQm94LCBpbmRleCk7XHJcblxyXG5cdFx0XHR2YXIgY3VycmVudE5vZGUgPSBuZXcgUG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5Tm9kZShuYW1lLCBwZ2csIGJvdW5kaW5nQm94LCBub2RlLnNjYWxlLCBub2RlLm9mZnNldCk7XHJcblx0XHRcdGN1cnJlbnROb2RlLmxldmVsID0gbGV2ZWw7XHJcblx0XHRcdGN1cnJlbnROb2RlLm51bVBvaW50cyA9IG51bVBvaW50cztcclxuXHRcdFx0Y3VycmVudE5vZGUuaGFzQ2hpbGRyZW4gPSBkZWNvZGVkW2ldLmNoaWxkcmVuID4gMDtcclxuXHRcdFx0Y3VycmVudE5vZGUuc3BhY2luZyA9IHBnZy5zcGFjaW5nIC8gTWF0aC5wb3coMiwgbGV2ZWwpO1xyXG5cclxuXHRcdFx0cGFyZW50Tm9kZS5hZGRDaGlsZChjdXJyZW50Tm9kZSk7XHJcblx0XHRcdG5vZGVzW25hbWVdID0gY3VycmVudE5vZGU7XHJcblx0XHR9XHJcblxyXG5cdFx0bm9kZS5sb2FkUG9pbnRzKCk7XHJcblx0fTtcclxuXHJcblx0aWYodGhpcy5sZXZlbCAlIHRoaXMucGNvR2VvbWV0cnkuaGllcmFyY2h5U3RlcFNpemUgPT09IDApXHJcblx0e1xyXG5cdFx0dmFyIGRlcHRoQmVnaW4gPSB0aGlzLmxldmVsICsgdGhpcy5wY29HZW9tZXRyeS5iYXNlRGVwdGg7XHJcblx0XHR2YXIgZGVwdGhFbmQgPSBkZXB0aEJlZ2luICsgdGhpcy5wY29HZW9tZXRyeS5oaWVyYXJjaHlTdGVwU2l6ZSArIDI7XHJcblxyXG5cdFx0dmFyIGJvdW5kcyA9IHRoaXMuZ3JleWhvdW5kQm91bmRzO1xyXG5cclxuXHRcdHZhciBib3VuZHNTdHJpbmcgPSBib3VuZHMubWluLnggKyBcIixcIiArIGJvdW5kcy5taW4ueSArIFwiLFwiICsgYm91bmRzLm1pbi56ICsgXCIsXCIgKyBib3VuZHMubWF4LnggKyBcIixcIiArIGJvdW5kcy5tYXgueSArIFwiLFwiICsgYm91bmRzLm1heC56O1xyXG5cclxuXHRcdHZhciBodXJsID0gXCJcIiArIHRoaXMucGNvR2VvbWV0cnkuc2VydmVyVVJMICtcclxuXHRcdFx0XCJoaWVyYXJjaHk/Ym91bmRzPVtcIiArIGJvdW5kc1N0cmluZyArIFwiXVwiICtcclxuXHRcdFx0XCImZGVwdGhCZWdpbj1cIiArIGRlcHRoQmVnaW4gK1xyXG5cdFx0XHRcIiZkZXB0aEVuZD1cIiArIGRlcHRoRW5kO1xyXG5cclxuXHRcdGlmKHRoaXMuc2NhbGUpXHJcblx0XHR7XHJcblx0XHRcdGh1cmwgKz0gXCImc2NhbGU9XCIgKyB0aGlzLnNjYWxlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmKHRoaXMuZ3JleWhvdW5kT2Zmc2V0KVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgb2Zmc2V0ID0gdGhpcy5ncmV5aG91bmRPZmZzZXQ7XHJcblx0XHRcdGh1cmwgKz0gXCImb2Zmc2V0PVtcIiArIG9mZnNldC54ICsgXCIsXCIgKyBvZmZzZXQueSArIFwiLFwiICsgb2Zmc2V0LnogKyBcIl1cIjtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHR2YXIgeGhyID0gWEhSRmFjdG9yeS5jcmVhdGVYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluXCIpO1xyXG5cdFx0eGhyLm9wZW4oXCJHRVRcIiwgaHVybCwgdHJ1ZSk7XHJcblx0XHR4aHIub25sb2FkID0gZnVuY3Rpb24oZXZlbnQpXHJcblx0XHR7XHJcblx0XHRcdHRyeVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y2FsbGJhY2soc2VsZiwgSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KSB8fCB7fSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2F0Y2goZSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmctLTtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiUG90cmVlOiBFeGNlcHRpb24gdGhyb3duIHBhcnNpbmcgcG9pbnRzLlwiLCBlKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdHhoci5vbmVycm9yID0gZnVuY3Rpb24oZXZlbnQpXHJcblx0XHR7XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiUG90cmVlOiBGYWlsZWQgdG8gbG9hZCBmaWxlISBIVFRQIHN0YXR1cyBcIiArIHhoci5zdGF0dXMgKyBcIiwgZmlsZTpcIiArIGh1cmwsIGV2ZW50KTtcclxuXHRcdH1cclxuXHRcdHhoci5zZW5kKG51bGwpO1xyXG5cdH1cclxufTtcclxuXHJcblBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUucHJvdG90eXBlLmdldE51bVBvaW50cyA9IGZ1bmN0aW9uKClcclxue1xyXG5cdHJldHVybiB0aGlzLm51bVBvaW50cztcclxufTtcclxuXHJcblBvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeU5vZGUucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbigpXHJcbntcclxuXHRpZih0aGlzLmdlb21ldHJ5ICYmIHRoaXMucGFyZW50ICE9IG51bGwpXHJcblx0e1xyXG5cdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcblx0XHR0aGlzLmdlb21ldHJ5ID0gbnVsbDtcclxuXHRcdHRoaXMubG9hZGVkID0gZmFsc2U7XHJcblxyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMub25lVGltZURpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGkrKylcclxuXHRcdHtcclxuXHRcdFx0dmFyIGhhbmRsZXIgPSB0aGlzLm9uZVRpbWVEaXNwb3NlSGFuZGxlcnNbaV07XHJcblx0XHRcdGhhbmRsZXIoKTtcclxuXHRcdH1cclxuXHRcdFxyXG5cdFx0dGhpcy5vbmVUaW1lRGlzcG9zZUhhbmRsZXJzID0gW107XHJcblx0fVxyXG59O1xyXG5cclxuT2JqZWN0LmFzc2lnbihQb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlLnByb3RvdHlwZSwgVEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSk7XHJcblxyXG5leHBvcnQge1BvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeSwgUG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5Tm9kZX07IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5mdW5jdGlvbiBWZXJzaW9uVXRpbHModmVyc2lvbilcclxue1xyXG5cdHRoaXMudmVyc2lvbiA9IHZlcnNpb247XHJcblx0dmFyIHZtTGVuZ3RoID0gKHZlcnNpb24uaW5kZXhPZihcIi5cIikgPT09IC0xKSA/IHZlcnNpb24ubGVuZ3RoIDogdmVyc2lvbi5pbmRleE9mKFwiLlwiKTtcclxuXHR0aGlzLnZlcnNpb25NYWpvciA9IHBhcnNlSW50KHZlcnNpb24uc3Vic3RyKDAsIHZtTGVuZ3RoKSk7XHJcblx0dGhpcy52ZXJzaW9uTWlub3IgPSBwYXJzZUludCh2ZXJzaW9uLnN1YnN0cih2bUxlbmd0aCArIDEpKTtcclxuXHRcclxuXHRpZih0aGlzLnZlcnNpb25NaW5vci5sZW5ndGggPT09IDApXHJcblx0e1xyXG5cdFx0dGhpcy52ZXJzaW9uTWlub3IgPSAwO1xyXG5cdH1cclxufTtcclxuXHJcblZlcnNpb25VdGlscy5wcm90b3R5cGUubmV3ZXJUaGFuID0gZnVuY3Rpb24odmVyc2lvbilcclxue1xyXG5cdHZhciB2ID0gbmV3IFZlcnNpb25VdGlscyh2ZXJzaW9uKTtcclxuXHJcblx0aWYoKHRoaXMudmVyc2lvbk1ham9yID4gdi52ZXJzaW9uTWFqb3IpIHx8ICh0aGlzLnZlcnNpb25NYWpvciA9PT0gdi52ZXJzaW9uTWFqb3IgJiYgdGhpcy52ZXJzaW9uTWlub3IgPiB2LnZlcnNpb25NaW5vcikpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cdFxyXG5cdHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcblZlcnNpb25VdGlscy5wcm90b3R5cGUuZXF1YWxPckhpZ2hlciA9IGZ1bmN0aW9uKHZlcnNpb24pXHJcbntcclxuXHR2YXIgdiA9IG5ldyBWZXJzaW9uVXRpbHModmVyc2lvbik7XHJcblxyXG5cdGlmKCh0aGlzLnZlcnNpb25NYWpvciA+IHYudmVyc2lvbk1ham9yKSB8fCAodGhpcy52ZXJzaW9uTWFqb3IgPT09IHYudmVyc2lvbk1ham9yICYmIHRoaXMudmVyc2lvbk1pbm9yID49IHYudmVyc2lvbk1pbm9yKSlcclxuXHR7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcblZlcnNpb25VdGlscy5wcm90b3R5cGUudXBUbyA9IGZ1bmN0aW9uKHZlcnNpb24pXHJcbntcclxuXHRyZXR1cm4gIXRoaXMubmV3ZXJUaGFuKHZlcnNpb24pO1xyXG59O1xyXG5cclxuZXhwb3J0IHtWZXJzaW9uVXRpbHN9O1xyXG4iLCIndXNlIHN0cmljdCc7XHJcblxyXG4vKipcclxuICogTWlncmF0ZWQgZnJvbSBQb3RyZWUgKGh0dHBzOi8vZ2l0aHViLmNvbS9wb3RyZWUvcG90cmVlL2Jsb2IvZGV2ZWxvcC9zcmMvWEhSRmFjdG9yeS5qcylcclxuICogYnkgTGFycyBNb2FzdHVlbiA8QGxhcnNtb2E+LlxyXG4gKi9cclxuXHJcbmNvbnN0IFhIUkZhY3RvcnkgPSB7XHJcblx0Y29uZmlnOiB7XHJcblx0XHR3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLFxyXG5cdFx0Y3VzdG9tSGVhZGVyczogW1xyXG5cdFx0XHR7IGhlYWRlcjogbnVsbCwgdmFsdWU6IG51bGwgfVxyXG5cdFx0XVxyXG5cdH0sXHJcblxyXG5cdGNyZWF0ZVhNTEh0dHBSZXF1ZXN0OiBmdW5jdGlvbiAoKSB7XHJcblx0XHRsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcblxyXG5cdFx0aWYgKHRoaXMuY29uZmlnLmN1c3RvbUhlYWRlcnMgJiZcclxuXHRcdFx0QXJyYXkuaXNBcnJheSh0aGlzLmNvbmZpZy5jdXN0b21IZWFkZXJzKSAmJlxyXG5cdFx0XHR0aGlzLmNvbmZpZy5jdXN0b21IZWFkZXJzLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0bGV0IGJhc2VPcGVuID0geGhyLm9wZW47XHJcblx0XHRcdGxldCBjdXN0b21IZWFkZXJzID0gdGhpcy5jb25maWcuY3VzdG9tSGVhZGVycztcclxuXHRcdFx0eGhyLm9wZW4gPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0YmFzZU9wZW4uYXBwbHkodGhpcywgW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcclxuXHRcdFx0XHRjdXN0b21IZWFkZXJzLmZvckVhY2goZnVuY3Rpb24gKGN1c3RvbUhlYWRlcikge1xyXG5cdFx0XHRcdFx0aWYgKCEhY3VzdG9tSGVhZGVyLmhlYWRlciAmJiAhIWN1c3RvbUhlYWRlci52YWx1ZSkge1xyXG5cdFx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlcihjdXN0b21IZWFkZXIuaGVhZGVyLCBjdXN0b21IZWFkZXIudmFsdWUpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB4aHI7XHJcblx0fSxcclxuXHJcblx0ZmV0Y2g6IGFzeW5jIGZ1bmN0aW9uKHJlc291cmNlKSB7XHJcblx0XHRjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcclxuXHRcdGlmICh0aGlzLmNvbmZpZy5jdXN0b21IZWFkZXJzKSB7XHJcblx0XHRcdHRoaXMuY29uZmlnLmN1c3RvbUhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoY3VzdG9tSGVhZGVyKSB7XHJcblx0XHRcdFx0aWYgKCEhY3VzdG9tSGVhZGVyLmhlYWRlciAmJiAhIWN1c3RvbUhlYWRlci52YWx1ZSkge1xyXG5cdFx0XHRcdFx0aGVhZGVycy5hcHBlbmQoY3VzdG9tSGVhZGVyLmhlYWRlciwgY3VzdG9tSGVhZGVyLnZhbHVlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3Qgb3B0aW9ucyA9IHtcclxuXHRcdFx0aGVhZGVycyxcclxuXHRcdFx0Y3JlZGVudGlhbHM6IFhIUkZhY3RvcnkuY29uZmlnLndpdGhDcmVkZW50aWFscyA/ICdpbmNsdWRlJyA6ICdzYW1lLW9yaWdpbidcclxuXHRcdH07XHJcblx0XHRyZXR1cm4gZmV0Y2gocmVzb3VyY2UsIG9wdGlvbnMpO1xyXG5cdH1cclxufTtcclxuXHJcbmV4cG9ydCB7WEhSRmFjdG9yeX07IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQge1BvaW50QXR0cmlidXRlTmFtZXN9IGZyb20gXCIuLi9Qb2ludEF0dHJpYnV0ZXMuanNcIjtcclxuaW1wb3J0IHtWZXJzaW9uVXRpbHN9IGZyb20gXCIuLi91dGlscy9WZXJzaW9uVXRpbHMuanNcIjtcclxuaW1wb3J0IHtXb3JrZXJNYW5hZ2VyfSBmcm9tIFwiLi4vdXRpbHMvV29ya2VyTWFuYWdlci5qc1wiO1xyXG5pbXBvcnQge0dsb2JhbH0gZnJvbSBcIi4uL0dsb2JhbC5qc1wiO1xyXG5pbXBvcnQge1hIUkZhY3Rvcnl9IGZyb20gXCIuLi9YSFJGYWN0b3J5LmpzXCI7XHJcblxyXG5jbGFzcyBHcmV5aG91bmRCaW5hcnlMb2FkZXJcclxue1xyXG5cdGNvbnN0cnVjdG9yKHZlcnNpb24sIGJvdW5kaW5nQm94LCBzY2FsZSlcclxuXHR7XHJcblx0XHRpZih0eXBlb2YodmVyc2lvbikgPT09IFwic3RyaW5nXCIpXHJcblx0XHR7XHJcblx0XHRcdHRoaXMudmVyc2lvbiA9IG5ldyBWZXJzaW9uVXRpbHModmVyc2lvbik7XHJcblx0XHR9XHJcblx0XHRlbHNlXHJcblx0XHR7XHJcblx0XHRcdHRoaXMudmVyc2lvbiA9IHZlcnNpb247XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IGJvdW5kaW5nQm94O1xyXG5cdFx0dGhpcy5zY2FsZSA9IHNjYWxlO1xyXG5cdH1cclxuXHJcblx0bG9hZChub2RlKVxyXG5cdHtcclxuXHRcdGlmKG5vZGUubG9hZGVkKSByZXR1cm47XHJcblxyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0dmFyIHVybCA9IG5vZGUuZ2V0VVJMKCk7XHJcblxyXG5cdFx0dmFyIHhociA9IFhIUkZhY3RvcnkuY3JlYXRlWE1MSHR0cFJlcXVlc3QoKTtcclxuXHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpblwiKTtcclxuXHRcdHhoci5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XHJcblx0XHR4aHIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xyXG5cdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkXCIpO1xyXG5cdFx0eGhyLm9ubG9hZCA9IGZ1bmN0aW9uKClcclxuXHRcdHtcclxuXHRcdFx0dHJ5XHJcblx0XHRcdHtcclxuXHRcdFx0XHRzZWxmLnBhcnNlKG5vZGUsIHhoci5yZXNwb25zZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2F0Y2goZSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJQb3RyZWU6IEV4Y2VwdGlvbiB0aHJvd24gcGFyc2luZyBwb2ludHMuXCIsIGUpO1xyXG5cdFx0XHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmctLTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdHhoci5vbmVycm9yID0gZnVuY3Rpb24oZXZlbnQpXHJcblx0XHR7XHJcblx0XHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmctLTtcclxuXHRcdFx0Y29uc29sZS5lcnJvcihcIlBvdHJlZTogRmFpbGVkIHRvIGxvYWQgZmlsZS5cIiwgeGhyLCB1cmwpO1xyXG5cdFx0fTtcclxuXHRcdHhoci5zZW5kKG51bGwpO1xyXG5cdH1cclxuXHJcblx0cGFyc2Uobm9kZSwgYnVmZmVyKVxyXG5cdHtcclxuXHRcdHZhciBOVU1fUE9JTlRTX0JZVEVTID0gNDtcclxuXHRcdHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlciwgYnVmZmVyLmJ5dGVMZW5ndGggLSBOVU1fUE9JTlRTX0JZVEVTLCBOVU1fUE9JTlRTX0JZVEVTKTtcclxuXHRcdHZhciBudW1Qb2ludHMgPSB2aWV3LmdldFVpbnQzMigwLCB0cnVlKTtcclxuXHRcdHZhciBwb2ludEF0dHJpYnV0ZXMgPSBub2RlLnBjb0dlb21ldHJ5LnBvaW50QXR0cmlidXRlcztcclxuXHJcblx0XHRub2RlLm51bVBvaW50cyA9IG51bVBvaW50cztcclxuXHJcblx0XHR2YXIgYmIgPSBub2RlLmJvdW5kaW5nQm94O1xyXG5cdFx0dmFyIGNlbnRlciA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcblx0XHR2YXIgbm9kZU9mZnNldCA9IG5vZGUucGNvR2VvbWV0cnkuYm91bmRpbmdCb3guZ2V0Q2VudGVyKGNlbnRlcikuc3ViKG5vZGUuYm91bmRpbmdCb3gubWluKTtcclxuXHJcblx0XHR2YXIgbWVzc2FnZSA9XHJcblx0XHR7XHJcblx0XHRcdGJ1ZmZlcjogYnVmZmVyLFxyXG5cdFx0XHRwb2ludEF0dHJpYnV0ZXM6IHBvaW50QXR0cmlidXRlcyxcclxuXHRcdFx0dmVyc2lvbjogdGhpcy52ZXJzaW9uLnZlcnNpb24sXHJcblx0XHRcdHNjaGVtYTogbm9kZS5wY29HZW9tZXRyeS5zY2hlbWEsXHJcblx0XHRcdG1pbjogW2JiLm1pbi54LCBiYi5taW4ueSwgYmIubWluLnpdLFxyXG5cdFx0XHRtYXg6IFtiYi5tYXgueCwgYmIubWF4LnksIGJiLm1heC56XSxcclxuXHRcdFx0b2Zmc2V0OiBub2RlT2Zmc2V0LnRvQXJyYXkoKSxcclxuXHRcdFx0c2NhbGU6IHRoaXMuc2NhbGUsXHJcblx0XHRcdG5vcm1hbGl6ZTogbm9kZS5wY29HZW9tZXRyeS5ub3JtYWxpemVcclxuXHRcdH07XHJcblxyXG5cdFx0R2xvYmFsLndvcmtlclBvb2wucnVuVGFzayhXb3JrZXJNYW5hZ2VyLkdSRVlIT1VORCwgZnVuY3Rpb24oZSlcclxuXHRcdHtcclxuXHRcdFx0dmFyIGRhdGEgPSBlLmRhdGE7XHJcblx0XHRcdHZhciBidWZmZXJzID0gZGF0YS5hdHRyaWJ1dGVCdWZmZXJzO1xyXG5cdFx0XHRcclxuXHRcdFx0dmFyIHRpZ2h0Qm91bmRpbmdCb3ggPSBuZXcgVEhSRUUuQm94M1xyXG5cdFx0XHQoXHJcblx0XHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoKS5mcm9tQXJyYXkoZGF0YS50aWdodEJvdW5kaW5nQm94Lm1pbiksXHJcblx0XHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoKS5mcm9tQXJyYXkoZGF0YS50aWdodEJvdW5kaW5nQm94Lm1heClcclxuXHRcdFx0KTtcclxuXHJcblx0XHRcdHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xyXG5cclxuXHRcdFx0Zm9yKHZhciBwcm9wZXJ0eSBpbiBidWZmZXJzKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIGJ1ZmZlciA9IGJ1ZmZlcnNbcHJvcGVydHldLmJ1ZmZlcjtcclxuXHJcblx0XHRcdFx0aWYocGFyc2VJbnQocHJvcGVydHkpID09PSBQb2ludEF0dHJpYnV0ZU5hbWVzLlBPU0lUSU9OX0NBUlRFU0lBTilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyKSwgMykpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmKHBhcnNlSW50KHByb3BlcnR5KSA9PT0gUG9pbnRBdHRyaWJ1dGVOYW1lcy5DT0xPUl9QQUNLRUQpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwiY29sb3JcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgVWludDhBcnJheShidWZmZXIpLCA0LCB0cnVlKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYocGFyc2VJbnQocHJvcGVydHkpID09PSBQb2ludEF0dHJpYnV0ZU5hbWVzLklOVEVOU0lUWSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJpbnRlbnNpdHlcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlciksIDEpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZihwYXJzZUludChwcm9wZXJ0eSkgPT09IFBvaW50QXR0cmlidXRlTmFtZXMuQ0xBU1NJRklDQVRJT04pXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwiY2xhc3NpZmljYXRpb25cIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgVWludDhBcnJheShidWZmZXIpLCAxKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYocGFyc2VJbnQocHJvcGVydHkpID09PSBQb2ludEF0dHJpYnV0ZU5hbWVzLk5PUk1BTF9TUEhFUkVNQVBQRUQpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwibm9ybWFsXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShidWZmZXIpLCAzKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYocGFyc2VJbnQocHJvcGVydHkpID09PSBQb2ludEF0dHJpYnV0ZU5hbWVzLk5PUk1BTF9PQ1QxNilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJub3JtYWxcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlciksIDMpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZihwYXJzZUludChwcm9wZXJ0eSkgPT09IFBvaW50QXR0cmlidXRlTmFtZXMuTk9STUFMKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcIm5vcm1hbFwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyKSwgMykpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmKHBhcnNlSW50KHByb3BlcnR5KSA9PT0gUG9pbnRBdHRyaWJ1dGVOYW1lcy5JTkRJQ0VTKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciBidWZmZXJBdHRyaWJ1dGUgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBVaW50OEFycmF5KGJ1ZmZlciksIDQpO1xyXG5cdFx0XHRcdFx0YnVmZmVyQXR0cmlidXRlLm5vcm1hbGl6ZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwiaW5kaWNlc1wiLCBidWZmZXJBdHRyaWJ1dGUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmKHBhcnNlSW50KHByb3BlcnR5KSA9PT0gUG9pbnRBdHRyaWJ1dGVOYW1lcy5TUEFDSU5HKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciBidWZmZXJBdHRyaWJ1dGUgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyKSwgMSk7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJzcGFjaW5nXCIsIGJ1ZmZlckF0dHJpYnV0ZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aWdodEJvdW5kaW5nQm94Lm1heC5zdWIodGlnaHRCb3VuZGluZ0JveC5taW4pO1xyXG5cdFx0XHR0aWdodEJvdW5kaW5nQm94Lm1pbi5zZXQoMCwgMCwgMCk7XHJcblxyXG5cdFx0XHRub2RlLm51bVBvaW50cyA9IGRhdGEubnVtUG9pbnRzO1xyXG5cdFx0XHRub2RlLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XHJcblx0XHRcdG5vZGUubWVhbiA9IG5ldyBUSFJFRS5WZWN0b3IzKC4uLmRhdGEubWVhbik7XHJcblx0XHRcdG5vZGUudGlnaHRCb3VuZGluZ0JveCA9IHRpZ2h0Qm91bmRpbmdCb3g7XHJcblx0XHRcdG5vZGUubG9hZGVkID0gdHJ1ZTtcclxuXHRcdFx0bm9kZS5sb2FkaW5nID0gZmFsc2U7XHJcblx0XHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmctLTtcclxuXHRcdH0sIG1lc3NhZ2UsIFttZXNzYWdlLmJ1ZmZlcl0pO1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IHtHcmV5aG91bmRCaW5hcnlMb2FkZXJ9OyIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHtYSFJGYWN0b3J5fSBmcm9tIFwiLi4vWEhSRmFjdG9yeS5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIEBjbGFzcyBMb2FkcyBncmV5aG91bmQgbWV0YWRhdGEgYW5kIHJldHVybnMgYSBQb2ludGNsb3VkT2N0cmVlXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFhcnRlbiB2YW4gTWVlcnNiZXJnZW5cclxuICogQGF1dGhvciBPc2NhciBNYXJ0aW5leiBSdWJpXHJcbiAqIEBhdXRob3IgQ29ubm9yIE1hbm5pbmdcclxuICovXHJcbmNsYXNzIEdyZXlob3VuZFV0aWxzXHJcbntcclxuXHRzdGF0aWMgZ2V0UXVlcnlQYXJhbShuYW1lKVxyXG5cdHtcclxuXHRcdG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tbXFxdXS9nLCBcIlxcXFwkJlwiKTtcclxuXHRcdHZhciByZWdleCA9IG5ldyBSZWdFeHAoXCJbPyZdXCIgKyBuYW1lICsgXCIoPShbXiYjXSopfCZ8I3wkKVwiKTtcclxuXHRcdHZhciByZXN1bHRzID0gcmVnZXguZXhlYyh3aW5kb3cubG9jYXRpb24uaHJlZik7XHJcblx0XHRpZighcmVzdWx0cykgcmV0dXJuIG51bGw7XHJcblx0XHRpZighcmVzdWx0c1syXSkgcmV0dXJuIFwiXCI7XHJcblx0XHRyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdHNbMl0ucmVwbGFjZSgvXFwrL2csIFwiIFwiKSk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgY3JlYXRlU2NoZW1hKGF0dHJpYnV0ZXMpXHJcblx0e1xyXG5cdFx0dmFyIHNjaGVtYSA9IFtcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFwibmFtZVwiOiBcIlhcIixcclxuXHRcdFx0XHRcInNpemVcIjogNCxcclxuXHRcdFx0XHRcInR5cGVcIjogXCJzaWduZWRcIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0XCJuYW1lXCI6IFwiWVwiLFxyXG5cdFx0XHRcdFwic2l6ZVwiOiA0LFxyXG5cdFx0XHRcdFwidHlwZVwiOiBcInNpZ25lZFwiXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRcIm5hbWVcIjogXCJaXCIsXHJcblx0XHRcdFx0XCJzaXplXCI6IDQsXHJcblx0XHRcdFx0XCJ0eXBlXCI6IFwic2lnbmVkXCJcclxuXHRcdFx0fVxyXG5cdFx0XTtcclxuXHJcblx0XHQvL09uY2Ugd2UgaW5jbHVkZSBvcHRpb25zIGluIHRoZSBVSSB0byBsb2FkIGEgZHluYW1pYyBsaXN0IG9mIGF2YWlsYWJsZVxyXG5cdFx0Ly9hdHRyaWJ1dGVzIGZvciB2aXN1YWxpemF0aW9uIChmLmUuIENsYXNzaWZpY2F0aW9uLCBJbnRlbnNpdHkgZXRjLilcclxuXHRcdC8vd2Ugd2lsbCBiZSBhYmxlIHRvIGFzayBmb3IgdGhhdCBzcGVjaWZpYyBhdHRyaWJ1dGUgZnJvbSB0aGUgc2VydmVyLFxyXG5cdFx0Ly93aGVyZSB3ZSBhcmUgbm93IHJlcXVlc3RpbmcgYWxsIGF0dHJpYnV0ZXMgZm9yIGFsbCBwb2ludHMgYWxsIHRoZSB0aW1lLlxyXG5cdFx0Ly9JZiB3ZSBkbyB0aGF0IHRob3VnaCwgd2UgYWxzbyBuZWVkIHRvIHRlbGwgUG90cmVlIHRvIHJlZHJhdyB0aGUgcG9pbnRzXHJcblx0XHQvL3RoYXQgYXJlIGFscmVhZHkgbG9hZGVkICh3aXRoIGRpZmZlcmVudCBhdHRyaWJ1dGVzKS5cclxuXHRcdC8vVGhpcyBpcyBub3QgZGVmYXVsdCBiZWhhdmlvdXIuXHJcblx0XHRhdHRyaWJ1dGVzLmZvckVhY2goZnVuY3Rpb24oaXRlbSlcclxuXHRcdHtcclxuXHRcdFx0aWYoaXRlbSA9PT0gXCJDT0xPUl9QQUNLRURcIilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHNjaGVtYS5wdXNoKFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIlJlZFwiLFxyXG5cdFx0XHRcdFx0XCJzaXplXCI6IDIsXHJcblx0XHRcdFx0XHRcInR5cGVcIjogXCJ1bnNpZ25lZFwiXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0c2NoZW1hLnB1c2goXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiR3JlZW5cIixcclxuXHRcdFx0XHRcdFwic2l6ZVwiOiAyLFxyXG5cdFx0XHRcdFx0XCJ0eXBlXCI6IFwidW5zaWduZWRcIlxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHNjaGVtYS5wdXNoKFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkJsdWVcIixcclxuXHRcdFx0XHRcdFwic2l6ZVwiOiAyLFxyXG5cdFx0XHRcdFx0XCJ0eXBlXCI6IFwidW5zaWduZWRcIlxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoaXRlbSA9PT0gXCJJTlRFTlNJVFlcIilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHNjaGVtYS5wdXNoKFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkludGVuc2l0eVwiLFxyXG5cdFx0XHRcdFx0XCJzaXplXCI6IDIsXHJcblx0XHRcdFx0XHRcInR5cGVcIjogXCJ1bnNpZ25lZFwiXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZihpdGVtID09PSBcIkNMQVNTSUZJQ0FUSU9OXCIpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzY2hlbWEucHVzaChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJDbGFzc2lmaWNhdGlvblwiLFxyXG5cdFx0XHRcdFx0XCJzaXplXCI6IDEsXHJcblx0XHRcdFx0XHRcInR5cGVcIjogXCJ1bnNpZ25lZFwiXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiBzY2hlbWE7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZmV0Y2godXJsLCBjYilcclxuXHR7XHJcblx0XHR2YXIgeGhyID0gWEhSRmFjdG9yeS5jcmVhdGVYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluXCIpO1xyXG5cdFx0eGhyLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcclxuXHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpXHJcblx0XHR7XHJcblx0XHRcdGlmKHhoci5yZWFkeVN0YXRlID09PSA0KVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYoeGhyLnN0YXR1cyA9PT0gMjAwIHx8IHhoci5zdGF0dXMgPT09IDApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Y2IobnVsbCwgeGhyLnJlc3BvbnNlVGV4dCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRjYih4aHIucmVzcG9uc2VUZXh0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHR4aHIuc2VuZChudWxsKTtcclxuXHR9O1xyXG5cclxuXHRzdGF0aWMgZmV0Y2hCaW5hcnkodXJsLCBjYilcclxuXHR7XHJcblx0XHR2YXIgeGhyID0gWEhSRmFjdG9yeS5jcmVhdGVYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluXCIpO1xyXG5cdFx0eGhyLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcclxuXHRcdHhoci5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XHJcblx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKVxyXG5cdFx0e1xyXG5cdFx0XHRpZih4aHIucmVhZHlTdGF0ZSA9PT0gNClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKHhoci5zdGF0dXMgPT09IDIwMCB8fCB4aHIuc3RhdHVzID09PSAwKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGNiKG51bGwsIHhoci5yZXNwb25zZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRjYih4aHIucmVzcG9uc2VUZXh0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHR4aHIuc2VuZChudWxsKTtcclxuXHR9O1xyXG5cclxuXHRzdGF0aWMgcG9pbnRTaXplRnJvbShzY2hlbWEpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHNjaGVtYS5yZWR1Y2UoKHAsIGMpID0+IHAgKyBjLnNpemUsIDApO1xyXG5cdH07XHJcblxyXG5cdHN0YXRpYyBnZXROb3JtYWxpemF0aW9uKHNlcnZlclVSTCwgYmFzZURlcHRoLCBjYilcclxuXHR7XHJcblx0XHR2YXIgcyA9IFtcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFwibmFtZVwiOiBcIlhcIixcclxuXHRcdFx0XHRcInNpemVcIjogNCxcclxuXHRcdFx0XHRcInR5cGVcIjogXCJmbG9hdGluZ1wiXHJcblx0XHRcdH0sXHJcblx0XHRcdHtcclxuXHRcdFx0XHRcIm5hbWVcIjogXCJZXCIsXHJcblx0XHRcdFx0XCJzaXplXCI6IDQsXHJcblx0XHRcdFx0XCJ0eXBlXCI6IFwiZmxvYXRpbmdcIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0XCJuYW1lXCI6IFwiWlwiLFxyXG5cdFx0XHRcdFwic2l6ZVwiOiA0LFxyXG5cdFx0XHRcdFwidHlwZVwiOiBcImZsb2F0aW5nXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFwibmFtZVwiOiBcIlJlZFwiLFxyXG5cdFx0XHRcdFwic2l6ZVwiOiAyLFxyXG5cdFx0XHRcdFwidHlwZVwiOiBcInVuc2lnbmVkXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFwibmFtZVwiOiBcIkdyZWVuXCIsXHJcblx0XHRcdFx0XCJzaXplXCI6IDIsXHJcblx0XHRcdFx0XCJ0eXBlXCI6IFwidW5zaWduZWRcIlxyXG5cdFx0XHR9LFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0XCJuYW1lXCI6IFwiQmx1ZVwiLFxyXG5cdFx0XHRcdFwic2l6ZVwiOiAyLFxyXG5cdFx0XHRcdFwidHlwZVwiOiBcInVuc2lnbmVkXCJcclxuXHRcdFx0fSxcclxuXHRcdFx0e1xyXG5cdFx0XHRcdFwibmFtZVwiOiBcIkludGVuc2l0eVwiLFxyXG5cdFx0XHRcdFwic2l6ZVwiOiAyLFxyXG5cdFx0XHRcdFwidHlwZVwiOiBcInVuc2lnbmVkXCJcclxuXHRcdFx0fVxyXG5cdFx0XTtcclxuXHJcblx0XHR2YXIgdXJsID0gc2VydmVyVVJMICsgXCJyZWFkP2RlcHRoPVwiICsgYmFzZURlcHRoICsgXCImc2NoZW1hPVwiICsgSlNPTi5zdHJpbmdpZnkocyk7XHJcblxyXG5cdFx0R3JleWhvdW5kVXRpbHMuZmV0Y2hCaW5hcnkodXJsLCBmdW5jdGlvbihlcnIsIGJ1ZmZlcilcclxuXHRcdHtcclxuXHRcdFx0aWYoZXJyKSB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcclxuXHJcblx0XHRcdHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XHJcblx0XHRcdHZhciBudW1CeXRlcyA9IGJ1ZmZlci5ieXRlTGVuZ3RoIC0gNDtcclxuXHRcdFx0dmFyIHBvaW50U2l6ZSA9IEdyZXlob3VuZFV0aWxzLnBvaW50U2l6ZUZyb20ocyk7XHJcblxyXG5cdFx0XHR2YXIgY29sb3JOb3JtID0gZmFsc2U7XHJcblx0XHRcdHZhciBpbnRlbnNpdHlOb3JtID0gZmFsc2U7XHJcblxyXG5cdFx0XHRmb3IodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IG51bUJ5dGVzOyBvZmZzZXQgKz0gcG9pbnRTaXplKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYodmlldy5nZXRVaW50MTYob2Zmc2V0ICsgMTIsIHRydWUpID4gMjU1IHx8XHJcblx0XHRcdFx0XHR2aWV3LmdldFVpbnQxNihvZmZzZXQgKyAxNCwgdHJ1ZSkgPiAyNTUgfHxcclxuXHRcdFx0XHRcdHZpZXcuZ2V0VWludDE2KG9mZnNldCArIDE2LCB0cnVlKSA+IDI1NSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRjb2xvck5vcm0gPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYodmlldy5nZXRVaW50MTYob2Zmc2V0ICsgMTgsIHRydWUpID4gMjU1KVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGludGVuc2l0eU5vcm0gPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYoY29sb3JOb3JtICYmIGludGVuc2l0eU5vcm0pIGJyZWFrO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRjYihudWxsLFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y29sb3I6IGNvbG9yTm9ybSxcclxuXHRcdFx0XHRpbnRlbnNpdHk6IGludGVuc2l0eU5vcm1cclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHR9O1xyXG59O1xyXG5cclxuZXhwb3J0IHtHcmV5aG91bmRVdGlsc307XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IHtQb2ludEF0dHJpYnV0ZXMsIFBvaW50QXR0cmlidXRlfSBmcm9tIFwiLi4vUG9pbnRBdHRyaWJ1dGVzLmpzXCI7XHJcbmltcG9ydCB7UG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5LCBQb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlfSBmcm9tIFwiLi4vcG9pbnRjbG91ZC9nZW9tZXRyaWVzL1BvaW50Q2xvdWRHcmV5aG91bmRHZW9tZXRyeS5qc1wiO1xyXG5pbXBvcnQge0dyZXlob3VuZEJpbmFyeUxvYWRlcn0gZnJvbSBcIi4vR3JleWhvdW5kQmluYXJ5TG9hZGVyLmpzXCI7XHJcbmltcG9ydCB7VmVyc2lvblV0aWxzfSBmcm9tIFwiLi4vdXRpbHMvVmVyc2lvblV0aWxzLmpzXCI7XHJcbmltcG9ydCB7R3JleWhvdW5kVXRpbHN9IGZyb20gXCIuL0dyZXlob3VuZFV0aWxzLmpzXCI7XHJcblxyXG5mdW5jdGlvbiBHcmV5aG91bmRMb2FkZXIoKXt9XHJcblxyXG5HcmV5aG91bmRMb2FkZXIubG9hZEluZm9KU09OID0gZnVuY3Rpb24odXJsLCBjYWxsYmFjayl7fTtcclxuXHJcbi8qKlxyXG4gKiBAcmV0dXJuIGEgcG9pbnQgY2xvdWQgb2N0cmVlIHdpdGggdGhlIHJvb3Qgbm9kZSBkYXRhIGxvYWRlZC5cclxuICogbG9hZGluZyBvZiBkZXNjZW5kYW50cyBoYXBwZW5zIGFzeW5jaHJvbm91c2x5IHdoZW4gdGhleVwicmUgbmVlZGVkXHJcbiAqXHJcbiAqIEBwYXJhbSB1cmxcclxuICogQHBhcmFtIGxvYWRpbmdGaW5pc2hlZExpc3RlbmVyIGV4ZWN1dGVkIGFmdGVyIGxvYWRpbmcgdGhlIGJpbmFyeSBoYXMgYmVlblxyXG4gKiBmaW5pc2hlZFxyXG4gKi9cclxuR3JleWhvdW5kTG9hZGVyLmxvYWQgPSBmdW5jdGlvbih1cmwsIGNhbGxiYWNrKVxyXG57XHJcblx0dmFyIEhJRVJBUkNIWV9TVEVQX1NJWkUgPSA1O1xyXG5cclxuXHR0cnlcclxuXHR7XHJcblx0XHQvL1dlIGFzc3VtZSBldmVyeXRoaW5nIGF0ZXIgdGhlIHN0cmluZyBcImdyZXlob3VuZDovL1wiIGlzIHRoZSBzZXJ2ZXIgdXJsXHJcblx0XHR2YXIgc2VydmVyVVJMID0gdXJsLnNwbGl0KFwiZ3JleWhvdW5kOi8vXCIpWzFdO1xyXG5cdFx0aWYoc2VydmVyVVJMLnNwbGl0KFwiaHR0cDovL1wiKS5sZW5ndGggPT09IDEgJiYgc2VydmVyVVJMLnNwbGl0KFwiaHR0cHM6Ly9cIikubGVuZ3RoID09PSAxKVxyXG5cdFx0e1xyXG5cdFx0XHRzZXJ2ZXJVUkwgPSBcImh0dHA6Ly9cIiArIHNlcnZlclVSTDtcclxuXHRcdH1cclxuXHJcblx0XHRHcmV5aG91bmRVdGlscy5mZXRjaChzZXJ2ZXJVUkwgKyBcImluZm9cIiwgZnVuY3Rpb24oZXJyLCBkYXRhKVxyXG5cdFx0e1xyXG5cdFx0XHRpZihlcnIpIHRocm93IG5ldyBFcnJvcihlcnIpO1xyXG5cclxuXHRcdFx0LyogV2UgcGFyc2UgdGhlIHJlc3VsdCBvZiB0aGUgaW5mbyBxdWVyeSwgd2hpY2ggc2hvdWxkIGJlIGEgSlNPTiBkYXRhc3RydWN0dXJlIHNvbWV3aGF0IGxpa2U6XHJcblx0XHRcdHtcclxuXHRcdFx0ICBcImJvdW5kc1wiOiBbNjM1NTc3LCA4NDg4ODIsIC0xMDAwLCA2MzkwMDQsIDg1MzUzOCwgMjAwMF0sXHJcblx0XHRcdCAgXCJudW1Qb2ludHNcIjogMTA2NTMzMzYsXHJcblx0XHRcdCAgXCJzY2hlbWFcIjogW1xyXG5cdFx0XHQgICAgICB7IFwibmFtZVwiOiBcIlhcIiwgXCJzaXplXCI6IDgsIFwidHlwZVwiOiBcImZsb2F0aW5nXCIgfSxcclxuXHRcdFx0ICAgICAgeyBcIm5hbWVcIjogXCJZXCIsIFwic2l6ZVwiOiA4LCBcInR5cGVcIjogXCJmbG9hdGluZ1wiIH0sXHJcblx0XHRcdCAgICAgIHsgXCJuYW1lXCI6IFwiWlwiLCBcInNpemVcIjogOCwgXCJ0eXBlXCI6IFwiZmxvYXRpbmdcIiB9LFxyXG5cdFx0XHQgICAgICB7IFwibmFtZVwiOiBcIkludGVuc2l0eVwiLCBcInNpemVcIjogMiwgXCJ0eXBlXCI6IFwidW5zaWduZWRcIiB9LFxyXG5cdFx0XHQgICAgICB7IFwibmFtZVwiOiBcIk9yaWdpbklkXCIsIFwic2l6ZVwiOiA0LCBcInR5cGVcIjogXCJ1bnNpZ25lZFwiIH0sXHJcblx0XHRcdCAgICAgIHsgXCJuYW1lXCI6IFwiUmVkXCIsIFwic2l6ZVwiOiAyLCBcInR5cGVcIjogXCJ1bnNpZ25lZFwiIH0sXHJcblx0XHRcdCAgICAgIHsgXCJuYW1lXCI6IFwiR3JlZW5cIiwgXCJzaXplXCI6IDIsIFwidHlwZVwiOiBcInVuc2lnbmVkXCIgfSxcclxuXHRcdFx0ICAgICAgeyBcIm5hbWVcIjogXCJCbHVlXCIsIFwic2l6ZVwiOiAyLCBcInR5cGVcIjogXCJ1bnNpZ25lZFwiIH1cclxuXHRcdFx0ICBdLFxyXG5cdFx0XHQgIFwic3JzXCI6IFwiPG9taXR0ZWQgZm9yIGJyZXZpdHk+XCIsXHJcblx0XHRcdCAgXCJ0eXBlXCI6IFwib2N0cmVlXCJcclxuXHRcdFx0fVxyXG5cdFx0XHQqL1xyXG5cdFx0XHR2YXIgZ3JleWhvdW5kSW5mbyA9IEpTT04ucGFyc2UoZGF0YSk7XHJcblx0XHRcdHZhciB2ZXJzaW9uID0gbmV3IFZlcnNpb25VdGlscyhcIjEuNFwiKTtcclxuXHJcblx0XHRcdHZhciBib3VuZHMgPSBncmV5aG91bmRJbmZvLmJvdW5kcztcclxuXHJcblx0XHRcdC8vVE9ETyBVbnVzZWQ6IHZhciBib3VuZHNDb25mb3JtaW5nID0gZ3JleWhvdW5kSW5mby5ib3VuZHNDb25mb3JtaW5nO1xyXG5cdFx0XHQvL1RPRE8gVW51c2VkOiB2YXIgd2lkdGggPSBib3VuZHNbM10gLSBib3VuZHNbMF07XHJcblx0XHRcdC8vVE9ETyBVbnVzZWQ6IHZhciBkZXB0aCA9IGJvdW5kc1s0XSAtIGJvdW5kc1sxXTtcclxuXHRcdFx0Ly9UT0RPIFVudXNlZDogdmFyIGhlaWdodCA9IGJvdW5kc1s1XSAtIGJvdW5kc1syXTtcclxuXHRcdFx0Ly9UT0RPIFVudXNlZDogdmFyIHJhZGl1cyA9IHdpZHRoIC8gMjtcclxuXHRcdFx0XHJcblx0XHRcdHZhciBzY2FsZSA9IGdyZXlob3VuZEluZm8uc2NhbGUgfHwgMC4wMTtcclxuXHRcdFx0aWYoQXJyYXkuaXNBcnJheShzY2FsZSkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzY2FsZSA9IE1hdGgubWluKHNjYWxlWzBdLCBzY2FsZVsxXSwgc2NhbGVbMl0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZihHcmV5aG91bmRVdGlscy5nZXRRdWVyeVBhcmFtKFwic2NhbGVcIikpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzY2FsZSA9IHBhcnNlRmxvYXQoR3JleWhvdW5kVXRpbHMuZ2V0UXVlcnlQYXJhbShcInNjYWxlXCIpKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIGJhc2VEZXB0aCA9IE1hdGgubWF4KDgsIGdyZXlob3VuZEluZm8uYmFzZURlcHRoKTtcclxuXHJcblx0XHRcdC8vSWRlYWxseSB3ZSB3YW50IHRvIGNoYW5nZSB0aGlzIGJpdCBjb21wbGV0ZWx5LCBzaW5jZVxyXG5cdFx0XHQvL2dyZXlob3VuZFwicyBvcHRpb25zIGFyZSB3aWRlciB0aGFuIHRoZSBkZWZhdWx0IG9wdGlvbnMgZm9yXHJcblx0XHRcdC8vdmlzdWFsaXppbmcgcG9pbnRjbG91ZHMuIElmIHNvbWVvbmUgZXZlciBoYXMgdGltZSB0byBidWlsZCBhXHJcblx0XHRcdC8vY3VzdG9tIHVpIGVsZW1lbnQgZm9yIGdyZXlob3VuZCwgdGhlIHNjaGVtYSBvcHRpb25zIGZyb21cclxuXHRcdFx0Ly90aGlzIGluZm8gcmVxdWVzdCBzaG91bGQgYmUgZ2l2ZW4gdG8gdGhlIFVJLCBzbyB0aGUgdXNlciBjYW5cclxuXHRcdFx0Ly9jaG9vc2UgYmV0d2VlbiB0aGVtLiBUaGUgc2VsZWN0ZWQgb3B0aW9uIGNhbiB0aGVuIGJlXHJcblx0XHRcdC8vZGlyZWN0bHkgcmVxdWVzdGVkIGZyb20gdGhlIHNlcnZlciBpbiB0aGVcclxuXHRcdFx0Ly9Qb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlIHdpdGhvdXQgYXNraW5nIGZvclxyXG5cdFx0XHQvL2F0dHJpYnV0ZXMgdGhhdCB3ZSBhcmUgbm90IGN1cnJlbnRseSB2aXN1YWxpemluZy4gIFdlIGFzc3VtZVxyXG5cdFx0XHQvL1hZWiBhcmUgYWx3YXlzIGF2YWlsYWJsZS5cclxuXHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBbXCJQT1NJVElPTl9DQVJURVNJQU5cIl07XHJcblxyXG5cdFx0XHQvL1RvIGJlIGNhcmVmdWwsIHdlIG9ubHkgYWRkIENPTE9SX1BBQ0tFRCBhcyBhbiBvcHRpb24gaWYgYWxsXHJcblx0XHRcdC8vY29sb3JzIGFyZSBhY3R1YWxseSBmb3VuZC5cclxuXHRcdFx0dmFyIHJlZCA9IGZhbHNlO1xyXG5cdFx0XHR2YXIgZ3JlZW4gPSBmYWxzZTtcclxuXHRcdFx0dmFyIGJsdWUgPSBmYWxzZTtcclxuXHJcblx0XHRcdGdyZXlob3VuZEluZm8uc2NoZW1hLmZvckVhY2goZnVuY3Rpb24oZW50cnkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvL0ludGVuc2l0eSBhbmQgQ2xhc3NpZmljYXRpb24gYXJlIG9wdGlvbmFsLlxyXG5cdFx0XHRcdGlmKGVudHJ5Lm5hbWUgPT09IFwiSW50ZW5zaXR5XCIpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0YXR0cmlidXRlcy5wdXNoKFwiSU5URU5TSVRZXCIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZihlbnRyeS5uYW1lID09PSBcIkNsYXNzaWZpY2F0aW9uXCIpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0YXR0cmlidXRlcy5wdXNoKFwiQ0xBU1NJRklDQVRJT05cIik7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRpZihlbnRyeS5uYW1lID09PSBcIlJlZFwiKSByZWQgPSB0cnVlO1xyXG5cdFx0XHRcdGVsc2UgaWYoZW50cnkubmFtZSA9PT0gXCJHcmVlblwiKSBncmVlbiA9IHRydWU7XHJcblx0XHRcdFx0ZWxzZSBpZihlbnRyeS5uYW1lID09PSBcIkJsdWVcIikgYmx1ZSA9IHRydWU7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0aWYocmVkICYmIGdyZWVuICYmIGJsdWUpIGF0dHJpYnV0ZXMucHVzaChcIkNPTE9SX1BBQ0tFRFwiKTtcclxuXHJcblx0XHRcdC8vRmlsbCBpbiBnZW9tZXRyeSBmaWVsZHMuXHJcblx0XHRcdHZhciBwZ2cgPSBuZXcgUG9pbnRDbG91ZEdyZXlob3VuZEdlb21ldHJ5KCk7XHJcblx0XHRcdHBnZy5zZXJ2ZXJVUkwgPSBzZXJ2ZXJVUkw7XHJcblx0XHRcdHBnZy5zcGFjaW5nID0gKGJvdW5kc1szXSAtIGJvdW5kc1swXSkgLyBNYXRoLnBvdygyLCBiYXNlRGVwdGgpO1xyXG5cdFx0XHRwZ2cuYmFzZURlcHRoID0gYmFzZURlcHRoO1xyXG5cdFx0XHRwZ2cuaGllcmFyY2h5U3RlcFNpemUgPSBISUVSQVJDSFlfU1RFUF9TSVpFO1xyXG5cclxuXHRcdFx0cGdnLnNjaGVtYSA9IEdyZXlob3VuZFV0aWxzLmNyZWF0ZVNjaGVtYShhdHRyaWJ1dGVzKTtcclxuXHRcdFx0dmFyIHBvaW50U2l6ZSA9IEdyZXlob3VuZFV0aWxzLnBvaW50U2l6ZUZyb20ocGdnLnNjaGVtYSk7XHJcblxyXG5cdFx0XHRwZ2cucG9pbnRBdHRyaWJ1dGVzID0gbmV3IFBvaW50QXR0cmlidXRlcyhhdHRyaWJ1dGVzKTtcclxuXHRcdFx0cGdnLnBvaW50QXR0cmlidXRlcy5ieXRlU2l6ZSA9IHBvaW50U2l6ZTtcclxuXHJcblx0XHRcdHZhciBib3VuZGluZ0JveCA9IG5ldyBUSFJFRS5Cb3gzKFxyXG5cdFx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KGJvdW5kcywgMCksXHJcblx0XHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoKS5mcm9tQXJyYXkoYm91bmRzLCAzKVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0dmFyIG9mZnNldCA9IGJvdW5kaW5nQm94Lm1pbi5jbG9uZSgpO1xyXG5cclxuXHRcdFx0Ym91bmRpbmdCb3gubWF4LnN1Yihib3VuZGluZ0JveC5taW4pO1xyXG5cdFx0XHRib3VuZGluZ0JveC5taW4uc2V0KDAsIDAsIDApO1xyXG5cclxuXHRcdFx0cGdnLnByb2plY3Rpb24gPSBncmV5aG91bmRJbmZvLnNycztcclxuXHRcdFx0cGdnLmJvdW5kaW5nQm94ID0gYm91bmRpbmdCb3g7XHJcblx0XHRcdHBnZy5ib3VuZGluZ1NwaGVyZSA9IGJvdW5kaW5nQm94LmdldEJvdW5kaW5nU3BoZXJlKG5ldyBUSFJFRS5TcGhlcmUoKSk7XHJcblxyXG5cdFx0XHRwZ2cuc2NhbGUgPSBzY2FsZTtcclxuXHRcdFx0cGdnLm9mZnNldCA9IG9mZnNldDtcclxuXHRcdFx0cGdnLmxvYWRlciA9IG5ldyBHcmV5aG91bmRCaW5hcnlMb2FkZXIodmVyc2lvbiwgYm91bmRpbmdCb3gsIHBnZy5zY2FsZSk7XHJcblxyXG5cdFx0XHR2YXIgbm9kZXMgPSB7fTtcclxuXHJcblx0XHRcdC8vbG9hZCByb290XHJcblx0XHRcdHZhciBuYW1lID0gXCJyXCI7XHJcblxyXG5cdFx0XHR2YXIgcm9vdCA9IG5ldyBQb2ludENsb3VkR3JleWhvdW5kR2VvbWV0cnlOb2RlKG5hbWUsIHBnZywgYm91bmRpbmdCb3gsIHNjYWxlLCBvZmZzZXQpO1xyXG5cdFx0XHRyb290LmxldmVsID0gMDtcclxuXHRcdFx0cm9vdC5oYXNDaGlsZHJlbiA9IHRydWU7XHJcblx0XHRcdHJvb3QubnVtUG9pbnRzID0gZ3JleWhvdW5kSW5mby5udW1Qb2ludHM7XHJcblx0XHRcdHJvb3Quc3BhY2luZyA9IHBnZy5zcGFjaW5nO1xyXG5cdFx0XHRwZ2cucm9vdCA9IHJvb3Q7XHJcblx0XHRcdHBnZy5yb290LmxvYWQoKTtcclxuXHRcdFx0bm9kZXNbbmFtZV0gPSByb290O1xyXG5cdFxyXG5cdFx0XHRwZ2cubm9kZXMgPSBub2RlcztcclxuXHJcblx0XHRcdEdyZXlob3VuZFV0aWxzLmdldE5vcm1hbGl6YXRpb24oc2VydmVyVVJMLCBncmV5aG91bmRJbmZvLmJhc2VEZXB0aCxcclxuXHRcdFx0XHRmdW5jdGlvbihfLCBub3JtYWxpemUpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0aWYobm9ybWFsaXplLmNvbG9yKSBwZ2cubm9ybWFsaXplLmNvbG9yID0gdHJ1ZTtcclxuXHRcdFx0XHRcdGlmKG5vcm1hbGl6ZS5pbnRlbnNpdHkpIHBnZy5ub3JtYWxpemUuaW50ZW5zaXR5ID0gdHJ1ZTtcclxuXHJcblx0XHRcdFx0XHRjYWxsYmFjayhwZ2cpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0KTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRjYXRjaChlKVxyXG5cdHtcclxuXHRcdGNvbnNvbGUubG9nKFwiUG90cmVlOiBMb2FkaW5nIGZhaWxlZC5cIiwgdXJsLCBlKTtcclxuXHRcdGNhbGxiYWNrKCk7XHJcblx0fVxyXG59O1xyXG5cclxuR3JleWhvdW5kTG9hZGVyLmxvYWRQb2ludEF0dHJpYnV0ZXMgPSBmdW5jdGlvbihtbm8pXHJcbntcclxuXHR2YXIgZnBhID0gbW5vLnBvaW50QXR0cmlidXRlcztcclxuXHR2YXIgcGEgPSBuZXcgUG9pbnRBdHRyaWJ1dGVzKCk7XHJcblxyXG5cdGZvcih2YXIgaSA9IDA7IGkgPCBmcGEubGVuZ3RoOyBpKyspXHJcblx0e1xyXG5cdFx0dmFyIHBvaW50QXR0cmlidXRlID0gUG9pbnRBdHRyaWJ1dGVbZnBhW2ldXTtcclxuXHRcdHBhLmFkZChwb2ludEF0dHJpYnV0ZSk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gcGE7XHJcbn07XHJcblxyXG5HcmV5aG91bmRMb2FkZXIuY3JlYXRlQ2hpbGRBQUJCID0gZnVuY3Rpb24oYWFiYiwgY2hpbGRJbmRleClcclxue1xyXG5cdHZhciBtaW4gPSBhYWJiLm1pbjtcclxuXHR2YXIgbWF4ID0gYWFiYi5tYXg7XHJcblx0dmFyIGRIYWxmTGVuZ3RoID0gbmV3IFRIUkVFLlZlY3RvcjMoKS5jb3B5KG1heCkuc3ViKG1pbikubXVsdGlwbHlTY2FsYXIoMC41KTtcclxuXHR2YXIgeEhhbGZMZW5ndGggPSBuZXcgVEhSRUUuVmVjdG9yMyhkSGFsZkxlbmd0aC54LCAwLCAwKTtcclxuXHR2YXIgeUhhbGZMZW5ndGggPSBuZXcgVEhSRUUuVmVjdG9yMygwLCBkSGFsZkxlbmd0aC55LCAwKTtcclxuXHR2YXIgekhhbGZMZW5ndGggPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCBkSGFsZkxlbmd0aC56KTtcclxuXHJcblx0dmFyIGNtaW4gPSBtaW47XHJcblx0dmFyIGNtYXggPSBuZXcgVEhSRUUuVmVjdG9yMygpLmFkZChtaW4pLmFkZChkSGFsZkxlbmd0aCk7XHJcblxyXG5cdGlmKGNoaWxkSW5kZXggPT09IDEpXHJcblx0e1xyXG5cdFx0bWluID0gbmV3IFRIUkVFLlZlY3RvcjMoKS5jb3B5KGNtaW4pLmFkZCh6SGFsZkxlbmd0aCk7XHJcblx0XHRtYXggPSBuZXcgVEhSRUUuVmVjdG9yMygpLmNvcHkoY21heCkuYWRkKHpIYWxmTGVuZ3RoKTtcclxuXHR9XHJcblx0ZWxzZSBpZihjaGlsZEluZGV4ID09PSAzKVxyXG5cdHtcclxuXHRcdG1pbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuY29weShjbWluKS5hZGQoekhhbGZMZW5ndGgpLmFkZCh5SGFsZkxlbmd0aCk7XHJcblx0XHRtYXggPSBuZXcgVEhSRUUuVmVjdG9yMygpLmNvcHkoY21heCkuYWRkKHpIYWxmTGVuZ3RoKS5hZGQoeUhhbGZMZW5ndGgpO1xyXG5cdH1cclxuXHRlbHNlIGlmKGNoaWxkSW5kZXggPT09IDApXHJcblx0e1xyXG5cdFx0bWluID0gY21pbjtcclxuXHRcdG1heCA9IGNtYXg7XHJcblx0fVxyXG5cdGVsc2UgaWYoY2hpbGRJbmRleCA9PT0gMilcclxuXHR7XHJcblx0XHRtaW4gPSBuZXcgVEhSRUUuVmVjdG9yMygpLmNvcHkoY21pbikuYWRkKHlIYWxmTGVuZ3RoKTtcclxuXHRcdG1heCA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuY29weShjbWF4KS5hZGQoeUhhbGZMZW5ndGgpO1xyXG5cdH1cclxuXHRlbHNlIGlmKGNoaWxkSW5kZXggPT09IDUpXHJcblx0e1xyXG5cdFx0bWluID0gbmV3IFRIUkVFLlZlY3RvcjMoKS5jb3B5KGNtaW4pLmFkZCh6SGFsZkxlbmd0aCkuYWRkKHhIYWxmTGVuZ3RoKTtcclxuXHRcdG1heCA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuY29weShjbWF4KS5hZGQoekhhbGZMZW5ndGgpLmFkZCh4SGFsZkxlbmd0aCk7XHJcblx0fVxyXG5cdGVsc2UgaWYoY2hpbGRJbmRleCA9PT0gNylcclxuXHR7XHJcblx0XHRtaW4gPSBuZXcgVEhSRUUuVmVjdG9yMygpLmNvcHkoY21pbikuYWRkKGRIYWxmTGVuZ3RoKTtcclxuXHRcdG1heCA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuY29weShjbWF4KS5hZGQoZEhhbGZMZW5ndGgpO1xyXG5cdH1cclxuXHRlbHNlIGlmKGNoaWxkSW5kZXggPT09IDQpXHJcblx0e1xyXG5cdFx0bWluID0gbmV3IFRIUkVFLlZlY3RvcjMoKS5jb3B5KGNtaW4pLmFkZCh4SGFsZkxlbmd0aCk7XHJcblx0XHRtYXggPSBuZXcgVEhSRUUuVmVjdG9yMygpLmNvcHkoY21heCkuYWRkKHhIYWxmTGVuZ3RoKTtcclxuXHR9XHJcblx0ZWxzZSBpZihjaGlsZEluZGV4ID09PSA2KVxyXG5cdHtcclxuXHRcdG1pbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuY29weShjbWluKS5hZGQoeEhhbGZMZW5ndGgpLmFkZCh5SGFsZkxlbmd0aCk7XHJcblx0XHRtYXggPSBuZXcgVEhSRUUuVmVjdG9yMygpLmNvcHkoY21heCkuYWRkKHhIYWxmTGVuZ3RoKS5hZGQoeUhhbGZMZW5ndGgpO1xyXG5cdH1cclxuXHJcblx0cmV0dXJuIG5ldyBUSFJFRS5Cb3gzKG1pbiwgbWF4KTtcclxufTtcclxuXHJcbmV4cG9ydCB7R3JleWhvdW5kTG9hZGVyfTsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmltcG9ydCB7UG9pbnRBdHRyaWJ1dGVOYW1lc30gZnJvbSBcIi4uL1BvaW50QXR0cmlidXRlcy5qc1wiO1xyXG5pbXBvcnQge1ZlcnNpb25VdGlsc30gZnJvbSBcIi4uL3V0aWxzL1ZlcnNpb25VdGlscy5qc1wiO1xyXG5pbXBvcnQge1dvcmtlck1hbmFnZXJ9IGZyb20gXCIuLi91dGlscy9Xb3JrZXJNYW5hZ2VyLmpzXCI7XHJcbmltcG9ydCB7R2xvYmFsfSBmcm9tIFwiLi4vR2xvYmFsLmpzXCI7XHJcbmltcG9ydCB7IFhIUkZhY3RvcnkgfSBmcm9tICcuLi9YSFJGYWN0b3J5LmpzJztcclxuXHJcbmNsYXNzIEJpbmFyeUxvYWRlclxyXG57XHJcblx0Y29uc3RydWN0b3IodmVyc2lvbiwgYm91bmRpbmdCb3gsIHNjYWxlKVxyXG5cdHtcclxuXHRcdGlmKHR5cGVvZih2ZXJzaW9uKSA9PT0gXCJzdHJpbmdcIilcclxuXHRcdHtcclxuXHRcdFx0dGhpcy52ZXJzaW9uID0gbmV3IFZlcnNpb25VdGlscyh2ZXJzaW9uKTtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0dGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gYm91bmRpbmdCb3g7XHJcblx0XHR0aGlzLnNjYWxlID0gc2NhbGU7XHJcblx0fVxyXG5cclxuXHRsb2FkKG5vZGUpXHJcblx0e1xyXG5cdFx0aWYobm9kZS5sb2FkZWQpXHJcblx0XHR7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgdXJsID0gbm9kZS5nZXRVUkwoKTtcclxuXHJcblx0XHRpZih0aGlzLnZlcnNpb24uZXF1YWxPckhpZ2hlcihcIjEuNFwiKSlcclxuXHRcdHtcclxuXHRcdFx0dXJsICs9IFwiLmJpblwiO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHR2YXIgeGhyID0gWEhSRmFjdG9yeS5jcmVhdGVYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0eGhyLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcclxuXHRcdHhoci5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XHJcblx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZShcInRleHQvcGxhaW47IGNoYXJzZXQ9eC11c2VyLWRlZmluZWRcIik7XHJcblx0XHR4aHIub25sb2FkID0gZnVuY3Rpb24oKVxyXG5cdFx0e1xyXG5cdFx0XHR0cnlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHNlbGYucGFyc2Uobm9kZSwgeGhyLnJlc3BvbnNlKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjYXRjaChlKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJQb3RyZWU6IEV4Y2VwdGlvbiB0aHJvd24gcGFyc2luZyBwb2ludHMuXCIsIGUpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdFx0eGhyLm9uZXJyb3IgPSBmdW5jdGlvbihldmVudClcclxuXHRcdHtcclxuXHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKFwiUG90cmVlOiBGYWlsZWQgdG8gbG9hZCBmaWxlLlwiLCB4aHIsIHVybCk7XHJcblx0XHR9O1xyXG5cclxuXHRcdHhoci5zZW5kKG51bGwpO1xyXG5cdH07XHJcblxyXG5cdHBhcnNlKG5vZGUsIGJ1ZmZlcilcclxuXHR7XHJcblx0XHR2YXIgcG9pbnRBdHRyaWJ1dGVzID0gbm9kZS5wY29HZW9tZXRyeS5wb2ludEF0dHJpYnV0ZXM7XHJcblx0XHR2YXIgbnVtUG9pbnRzID0gYnVmZmVyLmJ5dGVMZW5ndGggLyBub2RlLnBjb0dlb21ldHJ5LnBvaW50QXR0cmlidXRlcy5ieXRlU2l6ZTtcclxuXHJcblx0XHRpZih0aGlzLnZlcnNpb24udXBUbyhcIjEuNVwiKSlcclxuXHRcdHtcclxuXHRcdFx0bm9kZS5udW1Qb2ludHMgPSBudW1Qb2ludHM7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIG1lc3NhZ2UgPVxyXG5cdFx0e1xyXG5cdFx0XHRidWZmZXI6IGJ1ZmZlcixcclxuXHRcdFx0cG9pbnRBdHRyaWJ1dGVzOiBwb2ludEF0dHJpYnV0ZXMsXHJcblx0XHRcdHZlcnNpb246IHRoaXMudmVyc2lvbi52ZXJzaW9uLFxyXG5cdFx0XHRtaW46IFtub2RlLmJvdW5kaW5nQm94Lm1pbi54LCBub2RlLmJvdW5kaW5nQm94Lm1pbi55LCBub2RlLmJvdW5kaW5nQm94Lm1pbi56XSxcclxuXHRcdFx0b2Zmc2V0OiBbbm9kZS5wY29HZW9tZXRyeS5vZmZzZXQueCwgbm9kZS5wY29HZW9tZXRyeS5vZmZzZXQueSwgbm9kZS5wY29HZW9tZXRyeS5vZmZzZXQuel0sXHJcblx0XHRcdHNjYWxlOiB0aGlzLnNjYWxlLFxyXG5cdFx0XHRzcGFjaW5nOiBub2RlLnNwYWNpbmcsXHJcblx0XHRcdGhhc0NoaWxkcmVuOiBub2RlLmhhc0NoaWxkcmVuLFxyXG5cdFx0XHRuYW1lOiBub2RlLm5hbWVcclxuXHRcdH07XHJcblxyXG5cdFx0R2xvYmFsLndvcmtlclBvb2wucnVuVGFzayhXb3JrZXJNYW5hZ2VyLkJJTkFSWV9ERUNPREVSLCBmdW5jdGlvbihlKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgZGF0YSA9IGUuZGF0YTtcclxuXHJcblx0XHRcdGlmKGRhdGEuZXJyb3IgIT09IHVuZGVmaW5lZClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmctLTtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiUG90cmVlOiBCaW5hcnkgd29ya2VyIGVycm9yLlwiLCBkYXRhKTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBidWZmZXJzID0gZGF0YS5hdHRyaWJ1dGVCdWZmZXJzO1xyXG5cdFx0XHR2YXIgdGlnaHRCb3VuZGluZ0JveCA9IG5ldyBUSFJFRS5Cb3gzKG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KGRhdGEudGlnaHRCb3VuZGluZ0JveC5taW4pLCBuZXcgVEhSRUUuVmVjdG9yMygpLmZyb21BcnJheShkYXRhLnRpZ2h0Qm91bmRpbmdCb3gubWF4KSk7XHJcblx0XHRcdHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xyXG5cclxuXHRcdFx0Zm9yKHZhciBwcm9wZXJ0eSBpbiBidWZmZXJzKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIGJ1ZmZlciA9IGJ1ZmZlcnNbcHJvcGVydHldLmJ1ZmZlcjtcclxuXHJcblx0XHRcdFx0aWYocGFyc2VJbnQocHJvcGVydHkpID09PSBQb2ludEF0dHJpYnV0ZU5hbWVzLlBPU0lUSU9OX0NBUlRFU0lBTilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyKSwgMykpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmKHBhcnNlSW50KHByb3BlcnR5KSA9PT0gUG9pbnRBdHRyaWJ1dGVOYW1lcy5DT0xPUl9QQUNLRUQpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwiY29sb3JcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgVWludDhBcnJheShidWZmZXIpLCA0LCB0cnVlKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYocGFyc2VJbnQocHJvcGVydHkpID09PSBQb2ludEF0dHJpYnV0ZU5hbWVzLklOVEVOU0lUWSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJpbnRlbnNpdHlcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlciksIDEpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZihwYXJzZUludChwcm9wZXJ0eSkgPT09IFBvaW50QXR0cmlidXRlTmFtZXMuQ0xBU1NJRklDQVRJT04pXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwiY2xhc3NpZmljYXRpb25cIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgVWludDhBcnJheShidWZmZXIpLCAxKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYocGFyc2VJbnQocHJvcGVydHkpID09PSBQb2ludEF0dHJpYnV0ZU5hbWVzLk5PUk1BTF9TUEhFUkVNQVBQRUQpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwibm9ybWFsXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheShidWZmZXIpLCAzKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYocGFyc2VJbnQocHJvcGVydHkpID09PSBQb2ludEF0dHJpYnV0ZU5hbWVzLk5PUk1BTF9PQ1QxNilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJub3JtYWxcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlciksIDMpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZSBpZihwYXJzZUludChwcm9wZXJ0eSkgPT09IFBvaW50QXR0cmlidXRlTmFtZXMuTk9STUFMKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcIm5vcm1hbFwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyKSwgMykpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmKHBhcnNlSW50KHByb3BlcnR5KSA9PT0gUG9pbnRBdHRyaWJ1dGVOYW1lcy5JTkRJQ0VTKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciBidWZmZXJBdHRyaWJ1dGUgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBVaW50OEFycmF5KGJ1ZmZlciksIDQpO1xyXG5cdFx0XHRcdFx0YnVmZmVyQXR0cmlidXRlLm5vcm1hbGl6ZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwiaW5kaWNlc1wiLCBidWZmZXJBdHRyaWJ1dGUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmKHBhcnNlSW50KHByb3BlcnR5KSA9PT0gUG9pbnRBdHRyaWJ1dGVOYW1lcy5TUEFDSU5HKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciBidWZmZXJBdHRyaWJ1dGUgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkoYnVmZmVyKSwgMSk7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJzcGFjaW5nXCIsIGJ1ZmZlckF0dHJpYnV0ZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aWdodEJvdW5kaW5nQm94Lm1heC5zdWIodGlnaHRCb3VuZGluZ0JveC5taW4pO1xyXG5cdFx0XHR0aWdodEJvdW5kaW5nQm94Lm1pbi5zZXQoMCwgMCwgMCk7XHJcblxyXG5cdFx0XHR2YXIgbnVtUG9pbnRzID0gZS5kYXRhLmJ1ZmZlci5ieXRlTGVuZ3RoIC8gcG9pbnRBdHRyaWJ1dGVzLmJ5dGVTaXplO1xyXG5cclxuXHRcdFx0bm9kZS5udW1Qb2ludHMgPSBudW1Qb2ludHM7XHJcblx0XHRcdG5vZGUuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcclxuXHRcdFx0bm9kZS5tZWFuID0gbmV3IFRIUkVFLlZlY3RvcjMoLi4uZGF0YS5tZWFuKTtcclxuXHRcdFx0bm9kZS50aWdodEJvdW5kaW5nQm94ID0gdGlnaHRCb3VuZGluZ0JveDtcclxuXHRcdFx0bm9kZS5sb2FkZWQgPSB0cnVlO1xyXG5cdFx0XHRub2RlLmxvYWRpbmcgPSBmYWxzZTtcclxuXHRcdFx0bm9kZS5lc3RpbWF0ZWRTcGFjaW5nID0gZGF0YS5lc3RpbWF0ZWRTcGFjaW5nO1xyXG5cdFx0XHRHbG9iYWwubnVtTm9kZXNMb2FkaW5nLS07XHJcblx0XHR9LCBtZXNzYWdlLCBbbWVzc2FnZS5idWZmZXJdKTtcclxuXHR9O1xyXG59O1xyXG5cclxuZXhwb3J0IHtCaW5hcnlMb2FkZXJ9O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7V29ya2VyTWFuYWdlcn0gZnJvbSBcIi4uL3V0aWxzL1dvcmtlck1hbmFnZXIuanNcIjtcclxuaW1wb3J0IHtHbG9iYWx9IGZyb20gXCIuLi9HbG9iYWwuanNcIjtcclxuXHJcbnZhciBwb2ludEZvcm1hdFJlYWRlcnMgPVxyXG5bXHJcblx0ZnVuY3Rpb24oZHYpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0XCJwb3NpdGlvblwiOiBbIGR2LmdldEludDMyKDAsIHRydWUpLCBkdi5nZXRJbnQzMig0LCB0cnVlKSwgZHYuZ2V0SW50MzIoOCwgdHJ1ZSldLFxyXG5cdFx0XHRcImludGVuc2l0eVwiOiBkdi5nZXRVaW50MTYoMTIsIHRydWUpLFxyXG5cdFx0XHRcImNsYXNzaWZpY2F0aW9uXCI6IGR2LmdldFVpbnQ4KDE2LCB0cnVlKVxyXG5cdFx0fTtcclxuXHR9LFxyXG5cdGZ1bmN0aW9uKGR2KVxyXG5cdHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdFwicG9zaXRpb25cIjogWyBkdi5nZXRJbnQzMigwLCB0cnVlKSwgZHYuZ2V0SW50MzIoNCwgdHJ1ZSksIGR2LmdldEludDMyKDgsIHRydWUpXSxcclxuXHRcdFx0XCJpbnRlbnNpdHlcIjogZHYuZ2V0VWludDE2KDEyLCB0cnVlKSxcclxuXHRcdFx0XCJjbGFzc2lmaWNhdGlvblwiOiBkdi5nZXRVaW50OCgxNiwgdHJ1ZSlcclxuXHRcdH07XHJcblx0fSxcclxuXHRmdW5jdGlvbihkdilcclxuXHR7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcInBvc2l0aW9uXCI6IFsgZHYuZ2V0SW50MzIoMCwgdHJ1ZSksIGR2LmdldEludDMyKDQsIHRydWUpLCBkdi5nZXRJbnQzMig4LCB0cnVlKV0sXHJcblx0XHRcdFwiaW50ZW5zaXR5XCI6IGR2LmdldFVpbnQxNigxMiwgdHJ1ZSksXHJcblx0XHRcdFwiY2xhc3NpZmljYXRpb25cIjogZHYuZ2V0VWludDgoMTYsIHRydWUpLFxyXG5cdFx0XHRcImNvbG9yXCI6IFtkdi5nZXRVaW50MTYoMjAsIHRydWUpLCBkdi5nZXRVaW50MTYoMjIsIHRydWUpLCBkdi5nZXRVaW50MTYoMjQsIHRydWUpXVxyXG5cdFx0fTtcclxuXHR9LFxyXG5cdGZ1bmN0aW9uKGR2KVxyXG5cdHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdFwicG9zaXRpb25cIjogWyBkdi5nZXRJbnQzMigwLCB0cnVlKSwgZHYuZ2V0SW50MzIoNCwgdHJ1ZSksIGR2LmdldEludDMyKDgsIHRydWUpXSxcclxuXHRcdFx0XCJpbnRlbnNpdHlcIjogZHYuZ2V0VWludDE2KDEyLCB0cnVlKSxcclxuXHRcdFx0XCJjbGFzc2lmaWNhdGlvblwiOiBkdi5nZXRVaW50OCgxNiwgdHJ1ZSksXHJcblx0XHRcdFwiY29sb3JcIjogW2R2LmdldFVpbnQxNigyOCwgdHJ1ZSksIGR2LmdldFVpbnQxNigzMCwgdHJ1ZSksIGR2LmdldFVpbnQxNigzMiwgdHJ1ZSldXHJcblx0XHR9O1xyXG5cdH1cclxuXTtcclxuXHJcbmZ1bmN0aW9uIHJlYWRBcyhidWYsIFR5cGUsIG9mZnNldCwgY291bnQpXHJcbntcclxuXHRjb3VudCA9IChjb3VudCA9PT0gdW5kZWZpbmVkIHx8IGNvdW50ID09PSAwID8gMSA6IGNvdW50KTtcclxuXHR2YXIgc3ViID0gYnVmLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgVHlwZS5CWVRFU19QRVJfRUxFTUVOVCAqIGNvdW50KTtcclxuXHJcblx0dmFyIHIgPSBuZXcgVHlwZShzdWIpO1xyXG5cdGlmKGNvdW50ID09PSB1bmRlZmluZWQgfHwgY291bnQgPT09IDEpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHJbMF07XHJcblx0fVxyXG5cclxuXHR2YXIgcmV0ID0gW107XHJcblx0Zm9yKHZhciBpID0gMCA7IGkgPCBjb3VudCA7IGkgKyspXHJcblx0e1xyXG5cdFx0cmV0LnB1c2gocltpXSk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gcmV0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUxBU0hlYWRlcihhcnJheWJ1ZmZlcilcclxue1xyXG5cdHZhciBkYXRhID0ge307XHJcblxyXG5cdGRhdGEucG9pbnRzT2Zmc2V0ID0gcmVhZEFzKGFycmF5YnVmZmVyLCBVaW50MzJBcnJheSwgMzIqMyk7XHJcblx0ZGF0YS5wb2ludHNGb3JtYXRJZCA9IHJlYWRBcyhhcnJheWJ1ZmZlciwgVWludDhBcnJheSwgMzIqMys4KTtcclxuXHRkYXRhLnBvaW50c1N0cnVjdFNpemUgPSByZWFkQXMoYXJyYXlidWZmZXIsIFVpbnQxNkFycmF5LCAzMiozKzgrMSk7XHJcblx0ZGF0YS5wb2ludHNDb3VudCA9IHJlYWRBcyhhcnJheWJ1ZmZlciwgVWludDMyQXJyYXksIDMyKjMgKyAxMSk7XHJcblxyXG5cdHZhciBzdGFydCA9IDMyKjMgKyAzNTtcclxuXHRkYXRhLnNjYWxlID0gcmVhZEFzKGFycmF5YnVmZmVyLCBGbG9hdDY0QXJyYXksIHN0YXJ0LCAzKTsgc3RhcnQgKz0gMjQ7IC8vIDgqM1xyXG5cdGRhdGEub2Zmc2V0ID0gcmVhZEFzKGFycmF5YnVmZmVyLCBGbG9hdDY0QXJyYXksIHN0YXJ0LCAzKTsgc3RhcnQgKz0gMjQ7XHJcblxyXG5cdHZhciBib3VuZHMgPSByZWFkQXMoYXJyYXlidWZmZXIsIEZsb2F0NjRBcnJheSwgc3RhcnQsIDYpOyBzdGFydCArPSA0ODsgLy8gOCo2O1xyXG5cdGRhdGEubWF4cyA9IFtib3VuZHNbMF0sIGJvdW5kc1syXSwgYm91bmRzWzRdXTtcclxuXHRkYXRhLm1pbnMgPSBbYm91bmRzWzFdLCBib3VuZHNbM10sIGJvdW5kc1s1XV07XHJcblxyXG5cdHJldHVybiBkYXRhO1xyXG59XHJcblxyXG4vLyBMQVMgTG9hZGVyXHJcbi8vIExvYWRzIHVuY29tcHJlc3NlZCBmaWxlc1xyXG4vL1xyXG5mdW5jdGlvbiBMQVNMb2FkZXIoYXJyYXlidWZmZXIpXHJcbntcclxuXHR0aGlzLmFycmF5YnVmZmVyID0gYXJyYXlidWZmZXI7XHJcbn07XHJcblxyXG5MQVNMb2FkZXIucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbigpXHJcbntcclxuXHQvLyBub3RoaW5nIG5lZWRzIHRvIGJlIGRvbmUgdG8gb3BlbiB0aGlzIGZpbGVcclxuXHQvL1xyXG5cdHRoaXMucmVhZE9mZnNldCA9IDA7XHJcblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlcywgcmVqKVxyXG5cdHtcclxuXHRcdHNldFRpbWVvdXQocmVzLCAwKTtcclxuXHR9KTtcclxufTtcclxuXHJcbkxBU0xvYWRlci5wcm90b3R5cGUuZ2V0SGVhZGVyID0gZnVuY3Rpb24oKVxyXG57XHJcblx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzLCByZWopXHJcblx0e1xyXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbigpXHJcblx0XHR7XHJcblx0XHRcdHNlbGYuaGVhZGVyID0gcGFyc2VMQVNIZWFkZXIoc2VsZi5hcnJheWJ1ZmZlcik7XHJcblx0XHRcdHJlcyhzZWxmLmhlYWRlcik7XHJcblx0XHR9LCAwKTtcclxuXHR9KTtcclxufTtcclxuXHJcbkxBU0xvYWRlci5wcm90b3R5cGUucmVhZERhdGEgPSBmdW5jdGlvbihjb3VudCwgb2Zmc2V0LCBza2lwKVxyXG57XHJcblx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzLCByZWopXHJcblx0e1xyXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbigpXHJcblx0XHR7XHJcblx0XHRcdGlmKCFzZWxmLmhlYWRlcilcclxuXHRcdFx0XHRyZXR1cm4gcmVqKG5ldyBFcnJvcihcIkNhbm5vdCBzdGFydCByZWFkaW5nIGRhdGEgdGlsbCBhIGhlYWRlciByZXF1ZXN0IGlzIGlzc3VlZFwiKSk7XHJcblxyXG5cdFx0XHR2YXIgc3RhcnQ7XHJcblx0XHRcdGlmKHNraXAgPD0gMSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNvdW50ID0gTWF0aC5taW4oY291bnQsIHNlbGYuaGVhZGVyLnBvaW50c0NvdW50IC0gc2VsZi5yZWFkT2Zmc2V0KTtcclxuXHRcdFx0XHRzdGFydCA9IHNlbGYuaGVhZGVyLnBvaW50c09mZnNldCArIHNlbGYucmVhZE9mZnNldCAqIHNlbGYuaGVhZGVyLnBvaW50c1N0cnVjdFNpemU7XHJcblx0XHRcdFx0dmFyIGVuZCA9IHN0YXJ0ICsgY291bnQgKiBzZWxmLmhlYWRlci5wb2ludHNTdHJ1Y3RTaXplO1xyXG5cdFx0XHRcdHJlcyhcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRidWZmZXI6IHNlbGYuYXJyYXlidWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCksXHJcblx0XHRcdFx0XHRjb3VudDogY291bnQsXHJcblx0XHRcdFx0XHRoYXNNb3JlRGF0YTogc2VsZi5yZWFkT2Zmc2V0ICsgY291bnQgPCBzZWxmLmhlYWRlci5wb2ludHNDb3VudFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHNlbGYucmVhZE9mZnNldCArPSBjb3VudDtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHR2YXIgcG9pbnRzVG9SZWFkID0gTWF0aC5taW4oY291bnQgKiBza2lwLCBzZWxmLmhlYWRlci5wb2ludHNDb3VudCAtIHNlbGYucmVhZE9mZnNldCk7XHJcblx0XHRcdFx0dmFyIGJ1ZmZlclNpemUgPSBNYXRoLmNlaWwocG9pbnRzVG9SZWFkIC8gc2tpcCk7XHJcblx0XHRcdFx0dmFyIHBvaW50c1JlYWQgPSAwO1xyXG5cclxuXHRcdFx0XHR2YXIgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyU2l6ZSAqIHNlbGYuaGVhZGVyLnBvaW50c1N0cnVjdFNpemUpO1xyXG5cclxuXHRcdFx0XHRmb3IodmFyIGkgPSAwIDsgaSA8IHBvaW50c1RvUmVhZCA7IGkrKylcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRpZihpICUgc2tpcCA9PT0gMClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0c3RhcnQgPSBzZWxmLmhlYWRlci5wb2ludHNPZmZzZXQgKyBzZWxmLnJlYWRPZmZzZXQgKiBzZWxmLmhlYWRlci5wb2ludHNTdHJ1Y3RTaXplO1xyXG5cdFx0XHRcdFx0XHR2YXIgc3JjID0gbmV3IFVpbnQ4QXJyYXkoc2VsZi5hcnJheWJ1ZmZlciwgc3RhcnQsIHNlbGYuaGVhZGVyLnBvaW50c1N0cnVjdFNpemUpO1xyXG5cclxuXHRcdFx0XHRcdFx0YnVmLnNldChzcmMsIHBvaW50c1JlYWQgKiBzZWxmLmhlYWRlci5wb2ludHNTdHJ1Y3RTaXplKTtcclxuXHRcdFx0XHRcdFx0cG9pbnRzUmVhZCArKztcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRzZWxmLnJlYWRPZmZzZXQgKys7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXMoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0YnVmZmVyOiBidWYuYnVmZmVyLFxyXG5cdFx0XHRcdFx0Y291bnQ6IHBvaW50c1JlYWQsXHJcblx0XHRcdFx0XHRoYXNNb3JlRGF0YTogc2VsZi5yZWFkT2Zmc2V0IDwgc2VsZi5oZWFkZXIucG9pbnRzQ291bnRcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fSwgMCk7XHJcblx0fSk7XHJcbn07XHJcblxyXG5MQVNMb2FkZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKVxyXG57XHJcblx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXMsIHJlailcclxuXHR7XHJcblx0XHRzZWxmLmFycmF5YnVmZmVyID0gbnVsbDtcclxuXHRcdHNldFRpbWVvdXQocmVzLCAwKTtcclxuXHR9KTtcclxufTtcclxuXHJcbi8vIExBWiBMb2FkZXJcclxuLy8gVXNlcyBOYUNMIG1vZHVsZSB0byBsb2FkIExBWiBmaWxlc1xyXG4vL1xyXG5mdW5jdGlvbiBMQVpMb2FkZXIoYXJyYXlidWZmZXIpXHJcbntcclxuXHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdHRoaXMuYXJyYXlidWZmZXIgPSBhcnJheWJ1ZmZlcjtcclxuXHR0aGlzLm5leHRDQiA9IG51bGw7XHJcblxyXG5cdHRoaXMuZG9yciA9IGZ1bmN0aW9uKHJlcSwgY2IpXHJcblx0e1xyXG5cdFx0c2VsZi5uZXh0Q0IgPSBjYjtcclxuXHRcdFxyXG5cdFx0R2xvYmFsLndvcmtlclBvb2wucnVuVGFzayhXb3JrZXJNYW5hZ2VyLkxBU19MQVosIGZ1bmN0aW9uKGUpXHJcblx0XHR7XHJcblx0XHRcdGlmKHNlbGYubmV4dENCICE9PSBudWxsKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c2VsZi5uZXh0Q0IoZS5kYXRhKTtcclxuXHRcdFx0XHRzZWxmLm5leHRDQiA9IG51bGw7XHJcblx0XHRcdH1cclxuXHRcdH0sIHJlcSk7XHJcblx0fTtcclxufTtcclxuXHJcbkxBWkxvYWRlci5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKClcclxue1xyXG5cdC8vIG5vdGhpbmcgbmVlZHMgdG8gYmUgZG9uZSB0byBvcGVuIHRoaXMgZmlsZVxyXG5cdHZhciBzZWxmID0gdGhpcztcclxuXHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzLCByZWopXHJcblx0e1xyXG5cdFx0c2VsZi5kb3JyKHt0eXBlOlwib3BlblwiLCBhcnJheWJ1ZmZlcjogc2VsZi5hcnJheWJ1ZmZlcn0sIGZ1bmN0aW9uKHIpXHJcblx0XHR7XHJcblx0XHRcdGlmKHIuc3RhdHVzICE9PSAxKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmV0dXJuIHJlaihuZXcgRXJyb3IoXCJGYWlsZWQgdG8gb3BlbiBmaWxlXCIpKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmVzKHRydWUpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn07XHJcblxyXG5MQVpMb2FkZXIucHJvdG90eXBlLmdldEhlYWRlciA9IGZ1bmN0aW9uKClcclxue1xyXG5cdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlcywgcmVqKVxyXG5cdHtcclxuXHRcdHNlbGYuZG9ycih7dHlwZTonaGVhZGVyJ30sIGZ1bmN0aW9uKHIpXHJcblx0XHR7XHJcblx0XHRcdGlmKHIuc3RhdHVzICE9PSAxKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cmV0dXJuIHJlaihuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZ2V0IGhlYWRlclwiKSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJlcyhyLmhlYWRlcik7XHJcblx0XHR9KTtcclxuXHR9KTtcclxufTtcclxuXHJcbkxBWkxvYWRlci5wcm90b3R5cGUucmVhZERhdGEgPSBmdW5jdGlvbihjb3VudCwgb2Zmc2V0LCBza2lwKVxyXG57XHJcblx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzLCByZWopXHJcblx0e1xyXG5cdFx0c2VsZi5kb3JyKHt0eXBlOidyZWFkJywgY291bnQ6IGNvdW50LCBvZmZzZXQ6IG9mZnNldCwgc2tpcDogc2tpcH0sIGZ1bmN0aW9uKHIpXHJcblx0XHR7XHJcblx0XHRcdGlmKHIuc3RhdHVzICE9PSAxKVxyXG5cdFx0XHRcdHJldHVybiByZWoobmV3IEVycm9yKFwiRmFpbGVkIHRvIHJlYWQgZGF0YVwiKSk7XHJcblx0XHRcdHJlcyh7XHJcblx0XHRcdFx0YnVmZmVyOiByLmJ1ZmZlcixcclxuXHRcdFx0XHRjb3VudDogci5jb3VudCxcclxuXHRcdFx0XHRoYXNNb3JlRGF0YTogci5oYXNNb3JlRGF0YVxyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59O1xyXG5cclxuTEFaTG9hZGVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKClcclxue1xyXG5cdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlcywgcmVqKVxyXG5cdHtcclxuXHRcdHNlbGYuZG9ycih7dHlwZTonY2xvc2UnfSwgZnVuY3Rpb24ocilcclxuXHRcdHtcclxuXHRcdFx0aWYoci5zdGF0dXMgIT09IDEpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXR1cm4gcmVqKG5ldyBFcnJvcihcIkZhaWxlZCB0byBjbG9zZSBmaWxlXCIpKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmVzKHRydWUpO1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn07XHJcblxyXG4vLyBBIHNpbmdsZSBjb25zaXN0ZW50IGludGVyZmFjZSBmb3IgbG9hZGluZyBMQVMvTEFaIGZpbGVzXHJcbmZ1bmN0aW9uIExBU0ZpbGUoYXJyYXlidWZmZXIpXHJcbntcclxuXHR0aGlzLmFycmF5YnVmZmVyID0gYXJyYXlidWZmZXI7XHJcblxyXG5cdHRoaXMuZGV0ZXJtaW5lVmVyc2lvbigpO1xyXG5cdGlmKHRoaXMudmVyc2lvbiA+IDEyKVxyXG5cdHtcclxuXHRcdHRocm93IG5ldyBFcnJvcihcIk9ubHkgZmlsZSB2ZXJzaW9ucyA8PSAxLjIgYXJlIHN1cHBvcnRlZCBhdCB0aGlzIHRpbWVcIik7XHJcblx0fVxyXG5cclxuXHR0aGlzLmRldGVybWluZUZvcm1hdCgpO1xyXG5cdGlmKHBvaW50Rm9ybWF0UmVhZGVyc1t0aGlzLmZvcm1hdElkXSA9PT0gdW5kZWZpbmVkKVxyXG5cdHtcclxuXHRcdHRocm93IG5ldyBFcnJvcihcIlRoZSBwb2ludCBmb3JtYXQgSUQgaXMgbm90IHN1cHBvcnRlZFwiKTtcclxuXHR9XHJcblxyXG5cdHRoaXMubG9hZGVyID0gdGhpcy5pc0NvbXByZXNzZWQgPyBuZXcgTEFaTG9hZGVyKHRoaXMuYXJyYXlidWZmZXIpIDogbmV3IExBU0xvYWRlcih0aGlzLmFycmF5YnVmZmVyKTtcclxufTtcclxuXHJcbkxBU0ZpbGUucHJvdG90eXBlLmRldGVybWluZUZvcm1hdCA9IGZ1bmN0aW9uKClcclxue1xyXG5cdHZhciBmb3JtYXRJZCA9IHJlYWRBcyh0aGlzLmFycmF5YnVmZmVyLCBVaW50OEFycmF5LCAzMiozKzgpO1xyXG5cdHZhciBiaXRfNyA9IChmb3JtYXRJZCAmIDB4ODApID4+IDc7XHJcblx0dmFyIGJpdF82ID0gKGZvcm1hdElkICYgMHg0MCkgPj4gNjtcclxuXHJcblx0aWYoYml0XzcgPT09IDEgJiYgYml0XzYgPT09IDEpXHJcblx0e1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiT2xkIHN0eWxlIGNvbXByZXNzaW9uIG5vdCBzdXBwb3J0ZWRcIik7XHJcblx0fVxyXG5cclxuXHR0aGlzLmZvcm1hdElkID0gZm9ybWF0SWQgJiAweDNmO1xyXG5cdHRoaXMuaXNDb21wcmVzc2VkID0gKGJpdF83ID09PSAxIHx8IGJpdF82ID09PSAxKTtcclxufTtcclxuXHJcbkxBU0ZpbGUucHJvdG90eXBlLmRldGVybWluZVZlcnNpb24gPSBmdW5jdGlvbigpXHJcbntcclxuXHR2YXIgdmVyID0gbmV3IEludDhBcnJheSh0aGlzLmFycmF5YnVmZmVyLCAyNCwgMik7XHJcblx0dGhpcy52ZXJzaW9uID0gdmVyWzBdICogMTAgKyB2ZXJbMV07XHJcblx0dGhpcy52ZXJzaW9uQXNTdHJpbmcgPSB2ZXJbMF0gKyBcIi5cIiArIHZlclsxXTtcclxufTtcclxuXHJcbkxBU0ZpbGUucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbigpXHJcbntcclxuXHRyZXR1cm4gdGhpcy5sb2FkZXIub3BlbigpO1xyXG59O1xyXG5cclxuTEFTRmlsZS5wcm90b3R5cGUuZ2V0SGVhZGVyID0gZnVuY3Rpb24oKVxyXG57XHJcblx0cmV0dXJuIHRoaXMubG9hZGVyLmdldEhlYWRlcigpO1xyXG59O1xyXG5cclxuTEFTRmlsZS5wcm90b3R5cGUucmVhZERhdGEgPSBmdW5jdGlvbihjb3VudCwgc3RhcnQsIHNraXApXHJcbntcclxuXHRyZXR1cm4gdGhpcy5sb2FkZXIucmVhZERhdGEoY291bnQsIHN0YXJ0LCBza2lwKTtcclxufTtcclxuXHJcbkxBU0ZpbGUucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKVxyXG57XHJcblx0cmV0dXJuIHRoaXMubG9hZGVyLmNsb3NlKCk7XHJcbn07XHJcblxyXG4vLyBEZWNvZGVzIExBUyByZWNvcmRzIGludG8gcG9pbnRzXHJcbmZ1bmN0aW9uIExBU0RlY29kZXIoYnVmZmVyLCBwb2ludEZvcm1hdElELCBwb2ludFNpemUsIHBvaW50c0NvdW50LCBzY2FsZSwgb2Zmc2V0LCBtaW5zLCBtYXhzKVxyXG57XHJcblx0dGhpcy5hcnJheWIgPSBidWZmZXI7XHJcblx0dGhpcy5kZWNvZGVyID0gcG9pbnRGb3JtYXRSZWFkZXJzW3BvaW50Rm9ybWF0SURdO1xyXG5cdHRoaXMucG9pbnRzQ291bnQgPSBwb2ludHNDb3VudDtcclxuXHR0aGlzLnBvaW50U2l6ZSA9IHBvaW50U2l6ZTtcclxuXHR0aGlzLnNjYWxlID0gc2NhbGU7XHJcblx0dGhpcy5vZmZzZXQgPSBvZmZzZXQ7XHJcblx0dGhpcy5taW5zID0gbWlucztcclxuXHR0aGlzLm1heHMgPSBtYXhzO1xyXG59O1xyXG5cclxuTEFTRGVjb2Rlci5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbihpbmRleClcclxue1xyXG5cdGlmKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLnBvaW50c0NvdW50KVxyXG5cdHtcclxuXHRcdHRocm93IG5ldyBFcnJvcihcIlBvaW50IGluZGV4IG91dCBvZiByYW5nZVwiKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiB0aGlzLmRlY29kZXIobmV3IERhdGFWaWV3KHRoaXMuYXJyYXliLCBpbmRleCAqIHRoaXMucG9pbnRTaXplLCB0aGlzLnBvaW50U2l6ZSkpO1xyXG59O1xyXG5cclxuZXhwb3J0IHtMQVNMb2FkZXIsIExBWkxvYWRlciwgTEFTRmlsZSwgTEFTRGVjb2Rlcn07IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5pbXBvcnQgeyBWZXJzaW9uVXRpbHMgfSBmcm9tIFwiLi4vdXRpbHMvVmVyc2lvblV0aWxzLmpzXCI7XHJcbmltcG9ydCB7IFdvcmtlck1hbmFnZXIgfSBmcm9tIFwiLi4vdXRpbHMvV29ya2VyTWFuYWdlci5qc1wiO1xyXG5pbXBvcnQgeyBMQVNMb2FkZXIsIExBWkxvYWRlciwgTEFTRmlsZSwgTEFTRGVjb2RlciB9IGZyb20gXCIuL0xBU0xvYWRlci5qc1wiO1xyXG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tIFwiLi4vR2xvYmFsLmpzXCI7XHJcbmltcG9ydCB7IFhIUkZhY3RvcnkgfSBmcm9tIFwiLi4vWEhSRmFjdG9yeS5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIGxhc2xheiBjb2RlIHRha2VuIGFuZCBhZGFwdGVkIGZyb20gcGxhcy5pbyBqcy1sYXNsYXpcclxuICpcdGh0dHA6Ly9wbGFzLmlvL1xyXG4gKiAgaHR0cHM6Ly9naXRodWIuY29tL3Zlcm1hL3BsYXNpb1xyXG4gKlxyXG4gKiBUaGFua3MgdG8gVWRheSBWZXJtYSBhbmQgSG93YXJkIEJ1dGxlclxyXG4gKi9cclxuY2xhc3MgTEFTTEFaTG9hZGVyIHtcclxuXHRjb25zdHJ1Y3Rvcih2ZXJzaW9uKSB7XHJcblx0XHRpZiAodHlwZW9mICh2ZXJzaW9uKSA9PT0gXCJzdHJpbmdcIikge1xyXG5cdFx0XHR0aGlzLnZlcnNpb24gPSBuZXcgVmVyc2lvblV0aWxzKHZlcnNpb24pO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdHRoaXMudmVyc2lvbiA9IHZlcnNpb247XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRsb2FkKG5vZGUpIHtcclxuXHRcdGlmIChub2RlLmxvYWRlZCkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHBvaW50QXR0cmlidXRlcyA9IG5vZGUucGNvR2VvbWV0cnkucG9pbnRBdHRyaWJ1dGVzO1xyXG5cdFx0dmFyIHVybCA9IG5vZGUuZ2V0VVJMKCk7XHJcblxyXG5cdFx0aWYgKHRoaXMudmVyc2lvbi5lcXVhbE9ySGlnaGVyKFwiMS40XCIpKSB7XHJcblx0XHRcdHVybCArPSBcIi5cIiArIHBvaW50QXR0cmlidXRlcy50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHR2YXIgeGhyID0gWEhSRmFjdG9yeS5jcmVhdGVYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0eGhyLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcclxuXHRcdHhoci5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XHJcblx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZShcInRleHQvcGxhaW47IGNoYXJzZXQ9eC11c2VyLWRlZmluZWRcIik7XHJcblx0XHR4aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRpZiAoeGhyLnJlc3BvbnNlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0c2VsZi5wYXJzZShub2RlLCB4aHIucmVzcG9uc2UpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRjYXRjaCAoZSkge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihcIlBvdHJlZTogRXhjZXB0aW9uIHRocm93biBwYXJzaW5nIHBvaW50cy5cIiwgZSk7XHJcblx0XHRcdFx0XHRHbG9iYWwubnVtTm9kZXNMb2FkaW5nLS07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmctLTtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIlBvdHJlZTogTEFTTEFaTG9hZGVyIHhociByZXNwb25zZSBpcyBub3QgYSBBcnJheUJ1ZmZlci5cIik7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0XHR4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIlBvdHJlZTogTEFTTEFaTG9hZGVyIGZhaWxlZCB0byBsb2FkIGZpbGUsIFwiICsgeGhyLnN0YXR1cyArIFwiLCBmaWxlOiBcIiArIHVybCk7XHJcblx0XHR9O1xyXG5cdFx0eGhyLnNlbmQobnVsbCk7XHJcblx0fVxyXG5cclxuXHRwYXJzZShub2RlLCBidWZmZXIpIHtcclxuXHRcdHZhciBsZiA9IG5ldyBMQVNGaWxlKGJ1ZmZlcik7XHJcblx0XHR2YXIgaGFuZGxlciA9IG5ldyBMQVNMQVpCYXRjaGVyKG5vZGUpO1xyXG5cclxuXHRcdGxmLm9wZW4oKS50aGVuKG1zZyA9PiB7XHJcblx0XHRcdGxmLmlzT3BlbiA9IHRydWU7XHJcblx0XHRcdHJldHVybiBsZjtcclxuXHRcdH0pLnRoZW4obGYgPT4ge1xyXG5cdFx0XHRyZXR1cm4gbGYuZ2V0SGVhZGVyKCkudGhlbihmdW5jdGlvbiAoaCkge1xyXG5cdFx0XHRcdHJldHVybiBbbGYsIGhdO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pLnRoZW4odiA9PiB7XHJcblx0XHRcdGxldCBsZiA9IHZbMF07XHJcblx0XHRcdGxldCBoZWFkZXIgPSB2WzFdO1xyXG5cdFx0XHRsZXQgc2tpcCA9IDE7XHJcblx0XHRcdGxldCB0b3RhbFJlYWQgPSAwO1xyXG5cdFx0XHRsZXQgdG90YWxUb1JlYWQgPSAoc2tpcCA8PSAxID8gaGVhZGVyLnBvaW50c0NvdW50IDogaGVhZGVyLnBvaW50c0NvdW50IC8gc2tpcCk7XHJcblxyXG5cdFx0XHR2YXIgcmVhZGVyID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdGxldCBwID0gbGYucmVhZERhdGEoMTAwMDAwMCwgMCwgc2tpcCk7XHJcblxyXG5cdFx0XHRcdHJldHVybiBwLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuXHRcdFx0XHRcdGhhbmRsZXIucHVzaChuZXcgTEFTRGVjb2RlcihkYXRhLmJ1ZmZlcixcclxuXHRcdFx0XHRcdFx0aGVhZGVyLnBvaW50c0Zvcm1hdElkLFxyXG5cdFx0XHRcdFx0XHRoZWFkZXIucG9pbnRzU3RydWN0U2l6ZSxcclxuXHRcdFx0XHRcdFx0ZGF0YS5jb3VudCxcclxuXHRcdFx0XHRcdFx0aGVhZGVyLnNjYWxlLFxyXG5cdFx0XHRcdFx0XHRoZWFkZXIub2Zmc2V0LFxyXG5cdFx0XHRcdFx0XHRoZWFkZXIubWlucywgaGVhZGVyLm1heHMpKTtcclxuXHJcblx0XHRcdFx0XHR0b3RhbFJlYWQgKz0gZGF0YS5jb3VudDtcclxuXHJcblx0XHRcdFx0XHRpZiAoZGF0YS5oYXNNb3JlRGF0YSkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVhZGVyKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRcdFx0aGVhZGVyLnRvdGFsUmVhZCA9IHRvdGFsUmVhZDtcclxuXHRcdFx0XHRcdFx0aGVhZGVyLnZlcnNpb25Bc1N0cmluZyA9IGxmLnZlcnNpb25Bc1N0cmluZztcclxuXHRcdFx0XHRcdFx0aGVhZGVyLmlzQ29tcHJlc3NlZCA9IGxmLmlzQ29tcHJlc3NlZDtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIFtsZiwgaGVhZGVyLCBoYW5kbGVyXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdHJldHVybiByZWFkZXIoKTtcclxuXHRcdH0pLnRoZW4odiA9PiB7XHJcblx0XHRcdGxldCBsZiA9IHZbMF07XHJcblxyXG5cdFx0XHQvL0Nsb3NlIGl0XHJcblx0XHRcdHJldHVybiBsZi5jbG9zZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdGxmLmlzT3BlbiA9IGZhbHNlO1xyXG5cdFx0XHRcdHJldHVybiB2LnNsaWNlKDEpO1xyXG5cdFx0XHR9KS5jYXRjaChlID0+IHtcclxuXHRcdFx0XHQvL0lmIHRoZXJlIHdhcyBhIGNhbmNlbGxhdGlvbiwgbWFrZSBzdXJlIHRoZSBmaWxlIGlzIGNsb3NlZCwgaWYgdGhlIGZpbGUgaXMgb3BlbiBjbG9zZSBhbmQgdGhlbiBmYWlsXHJcblx0XHRcdFx0aWYgKGxmLmlzT3Blbikge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGxmLmNsb3NlKCkudGhlbihmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRcdGxmLmlzT3BlbiA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRocm93IGU7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSkuY2F0Y2gobXNnID0+IHtcclxuXHRcdFx0Y29uc29sZS5lcnJvcihcIlBvdHJlZTogRmFpbGVkIHRvIG9wZW4gZmlsZTpcIiwgbXNnKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0aGFuZGxlKG5vZGUsIHVybCkgeyB9XHJcbn07XHJcblxyXG5jbGFzcyBMQVNMQVpCYXRjaGVyIHtcclxuXHRjb25zdHJ1Y3Rvcihub2RlKSB7XHJcblx0XHR0aGlzLm5vZGUgPSBub2RlO1xyXG5cdH1cclxuXHJcblx0cHVzaChkYXRhKSB7XHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0dmFyIG1lc3NhZ2UgPVxyXG5cdFx0e1xyXG5cdFx0XHRidWZmZXI6IGRhdGEuYXJyYXliLFxyXG5cdFx0XHRudW1Qb2ludHM6IGRhdGEucG9pbnRzQ291bnQsXHJcblx0XHRcdHBvaW50U2l6ZTogZGF0YS5wb2ludFNpemUsXHJcblx0XHRcdHBvaW50Rm9ybWF0SUQ6IDIsXHJcblx0XHRcdHNjYWxlOiBkYXRhLnNjYWxlLFxyXG5cdFx0XHRvZmZzZXQ6IGRhdGEub2Zmc2V0LFxyXG5cdFx0XHRtaW5zOiBkYXRhLm1pbnMsXHJcblx0XHRcdG1heHM6IGRhdGEubWF4c1xyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgd29ya2VyID0gR2xvYmFsLndvcmtlclBvb2wuZ2V0V29ya2VyKFdvcmtlck1hbmFnZXIuTEFTX0RFQ09ERVIpO1xyXG5cdFx0d29ya2VyLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XHJcblx0XHRcdHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xyXG5cdFx0XHR2YXIgbnVtUG9pbnRzID0gZGF0YS5wb2ludHNDb3VudDtcclxuXHJcblx0XHRcdHZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkFycmF5KGUuZGF0YS5wb3NpdGlvbik7XHJcblx0XHRcdHZhciBjb2xvcnMgPSBuZXcgVWludDhBcnJheShlLmRhdGEuY29sb3IpO1xyXG5cdFx0XHR2YXIgaW50ZW5zaXRpZXMgPSBuZXcgRmxvYXQzMkFycmF5KGUuZGF0YS5pbnRlbnNpdHkpO1xyXG5cdFx0XHR2YXIgY2xhc3NpZmljYXRpb25zID0gbmV3IFVpbnQ4QXJyYXkoZS5kYXRhLmNsYXNzaWZpY2F0aW9uKTtcclxuXHRcdFx0dmFyIHJldHVybk51bWJlcnMgPSBuZXcgVWludDhBcnJheShlLmRhdGEucmV0dXJuTnVtYmVyKTtcclxuXHRcdFx0dmFyIG51bWJlck9mUmV0dXJucyA9IG5ldyBVaW50OEFycmF5KGUuZGF0YS5udW1iZXJPZlJldHVybnMpO1xyXG5cdFx0XHR2YXIgcG9pbnRTb3VyY2VJRHMgPSBuZXcgVWludDE2QXJyYXkoZS5kYXRhLnBvaW50U291cmNlSUQpO1xyXG5cdFx0XHR2YXIgaW5kaWNlcyA9IG5ldyBVaW50OEFycmF5KGUuZGF0YS5pbmRpY2VzKTtcclxuXHJcblx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcInBvc2l0aW9uXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocG9zaXRpb25zLCAzKSk7XHJcblx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcImNvbG9yXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoY29sb3JzLCA0LCB0cnVlKSk7XHJcblx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcImludGVuc2l0eVwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGludGVuc2l0aWVzLCAxKSk7XHJcblx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcImNsYXNzaWZpY2F0aW9uXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoY2xhc3NpZmljYXRpb25zLCAxKSk7XHJcblx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcInJldHVybk51bWJlclwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHJldHVybk51bWJlcnMsIDEpKTtcclxuXHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwibnVtYmVyT2ZSZXR1cm5zXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobnVtYmVyT2ZSZXR1cm5zLCAxKSk7XHJcblx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcInBvaW50U291cmNlSURcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShwb2ludFNvdXJjZUlEcywgMSkpO1xyXG5cdFx0XHQvL2dlb21ldHJ5LnNldEF0dHJpYnV0ZShcIm5vcm1hbFwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG5ldyBGbG9hdDMyQXJyYXkobnVtUG9pbnRzICogMyksIDMpKTtcclxuXHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwiaW5kaWNlc1wiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGluZGljZXMsIDQpKTtcclxuXHRcdFx0Z2VvbWV0cnkuYXR0cmlidXRlcy5pbmRpY2VzLm5vcm1hbGl6ZWQgPSB0cnVlO1xyXG5cclxuXHRcdFx0dmFyIHRpZ2h0Qm91bmRpbmdCb3ggPSBuZXcgVEhSRUUuQm94M1xyXG5cdFx0XHRcdChcclxuXHRcdFx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KGUuZGF0YS50aWdodEJvdW5kaW5nQm94Lm1pbiksXHJcblx0XHRcdFx0XHRuZXcgVEhSRUUuVmVjdG9yMygpLmZyb21BcnJheShlLmRhdGEudGlnaHRCb3VuZGluZ0JveC5tYXgpXHJcblx0XHRcdFx0KTtcclxuXHJcblx0XHRcdGdlb21ldHJ5LmJvdW5kaW5nQm94ID0gc2VsZi5ub2RlLmJvdW5kaW5nQm94O1xyXG5cdFx0XHRzZWxmLm5vZGUudGlnaHRCb3VuZGluZ0JveCA9IHRpZ2h0Qm91bmRpbmdCb3g7XHJcblxyXG5cdFx0XHRzZWxmLm5vZGUuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcclxuXHRcdFx0c2VsZi5ub2RlLm51bVBvaW50cyA9IG51bVBvaW50cztcclxuXHRcdFx0c2VsZi5ub2RlLmxvYWRlZCA9IHRydWU7XHJcblx0XHRcdHNlbGYubm9kZS5sb2FkaW5nID0gZmFsc2U7XHJcblx0XHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmctLTtcclxuXHRcdFx0c2VsZi5ub2RlLm1lYW4gPSBuZXcgVEhSRUUuVmVjdG9yMyguLi5lLmRhdGEubWVhbik7XHJcblxyXG5cdFx0XHRHbG9iYWwud29ya2VyUG9vbC5yZXR1cm5Xb3JrZXIoV29ya2VyTWFuYWdlci5MQVNfREVDT0RFUiwgd29ya2VyKTtcclxuXHRcdH07XHJcblxyXG5cdFx0d29ya2VyLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIFttZXNzYWdlLmJ1ZmZlcl0pO1xyXG5cdH07XHJcbn07XHJcblxyXG5leHBvcnQgeyBMQVNMQVpMb2FkZXIgfTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5pbXBvcnQge1BPQ0xvYWRlcn0gZnJvbSBcIi4uLy4uL2xvYWRlcnMvUE9DTG9hZGVyLmpzXCI7XHJcbmltcG9ydCB7R2xvYmFsfSBmcm9tIFwiLi4vLi4vR2xvYmFsLmpzXCI7XHJcbmltcG9ydCB7UG9pbnRDbG91ZFRyZWUsIFBvaW50Q2xvdWRUcmVlTm9kZX0gZnJvbSBcIi4uL1BvaW50Q2xvdWRUcmVlLmpzXCI7XHJcbmltcG9ydCB7WEhSRmFjdG9yeX0gZnJvbSBcIi4uLy4uL1hIUkZhY3RvcnkuanNcIjtcclxuXHJcbmNsYXNzIFBvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeVxyXG57XHJcblx0Y29uc3RydWN0b3IoKVxyXG5cdHtcclxuXHRcdHRoaXMudXJsID0gbnVsbDtcclxuXHRcdHRoaXMub2N0cmVlRGlyID0gbnVsbDtcclxuXHRcdHRoaXMuc3BhY2luZyA9IDA7XHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcclxuXHRcdHRoaXMucm9vdCA9IG51bGw7XHJcblx0XHR0aGlzLm5vZGVzID0gbnVsbDtcclxuXHRcdHRoaXMucG9pbnRBdHRyaWJ1dGVzID0gbnVsbDtcclxuXHRcdHRoaXMuaGllcmFyY2h5U3RlcFNpemUgPSAtMTtcclxuXHRcdHRoaXMubG9hZGVyID0gbnVsbDtcclxuXHR9XHJcbn07XHJcblxyXG5jbGFzcyBQb2ludENsb3VkT2N0cmVlR2VvbWV0cnlOb2RlIGV4dGVuZHMgUG9pbnRDbG91ZFRyZWVOb2RlXHJcbntcclxuXHRjb25zdHJ1Y3RvcihuYW1lLCBwY29HZW9tZXRyeSwgYm91bmRpbmdCb3gpXHJcblx0e1xyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmlkID0gUG9pbnRDbG91ZE9jdHJlZUdlb21ldHJ5Tm9kZS5JRENvdW50Kys7XHJcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdFx0dGhpcy5pbmRleCA9IHBhcnNlSW50KG5hbWUuY2hhckF0KG5hbWUubGVuZ3RoIC0gMSkpO1xyXG5cdFx0dGhpcy5wY29HZW9tZXRyeSA9IHBjb0dlb21ldHJ5O1xyXG5cdFx0dGhpcy5nZW9tZXRyeSA9IG51bGw7XHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gYm91bmRpbmdCb3g7XHJcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gYm91bmRpbmdCb3guZ2V0Qm91bmRpbmdTcGhlcmUobmV3IFRIUkVFLlNwaGVyZSgpKTtcclxuXHRcdHRoaXMuY2hpbGRyZW4gPSB7fTtcclxuXHRcdHRoaXMubnVtUG9pbnRzID0gMDtcclxuXHRcdHRoaXMubGV2ZWwgPSBudWxsO1xyXG5cdFx0dGhpcy5sb2FkZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMub25lVGltZURpc3Bvc2VIYW5kbGVycyA9IFtdO1xyXG5cdH1cclxuXHJcblx0aXNHZW9tZXRyeU5vZGUoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHJcblx0Z2V0TGV2ZWwoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmxldmVsO1xyXG5cdH1cclxuXHJcblx0aXNUcmVlTm9kZSgpXHJcblx0e1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHJcblx0aXNMb2FkZWQoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmxvYWRlZDtcclxuXHR9XHJcblxyXG5cdGdldEJvdW5kaW5nU3BoZXJlKClcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5ib3VuZGluZ1NwaGVyZTtcclxuXHR9XHJcblxyXG5cdGdldEJvdW5kaW5nQm94KClcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5ib3VuZGluZ0JveDtcclxuXHR9XHJcblxyXG5cdGdldENoaWxkcmVuKClcclxuXHR7XHJcblx0XHR2YXIgY2hpbGRyZW4gPSBbXTtcclxuXHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgODsgaSsrKVxyXG5cdFx0e1xyXG5cdFx0XHRpZih0aGlzLmNoaWxkcmVuW2ldKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBjaGlsZHJlbjtcclxuXHR9XHJcblxyXG5cdGdldFVSTCgpXHJcblx0e1xyXG5cdFx0dmFyIHVybCA9IFwiXCI7XHJcblx0XHR2YXIgdmVyc2lvbiA9IHRoaXMucGNvR2VvbWV0cnkubG9hZGVyLnZlcnNpb247XHJcblxyXG5cdFx0aWYodmVyc2lvbi5lcXVhbE9ySGlnaGVyKFwiMS41XCIpKVxyXG5cdFx0e1xyXG5cdFx0XHR1cmwgPSB0aGlzLnBjb0dlb21ldHJ5Lm9jdHJlZURpciArIFwiL1wiICsgdGhpcy5nZXRIaWVyYXJjaHlQYXRoKCkgKyBcIi9cIiArIHRoaXMubmFtZTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYodmVyc2lvbi5lcXVhbE9ySGlnaGVyKFwiMS40XCIpKVxyXG5cdFx0e1xyXG5cdFx0XHR1cmwgPSB0aGlzLnBjb0dlb21ldHJ5Lm9jdHJlZURpciArIFwiL1wiICsgdGhpcy5uYW1lO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZih2ZXJzaW9uLnVwVG8oXCIxLjNcIikpXHJcblx0XHR7XHJcblx0XHRcdHVybCA9IHRoaXMucGNvR2VvbWV0cnkub2N0cmVlRGlyICsgXCIvXCIgKyB0aGlzLm5hbWU7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHVybDtcclxuXHR9XHJcblxyXG5cdGdldEhpZXJhcmNoeVBhdGgoKVxyXG5cdHtcclxuXHRcdHZhciBwYXRoID0gXCJyL1wiO1xyXG5cdFx0dmFyIGhpZXJhcmNoeVN0ZXBTaXplID0gdGhpcy5wY29HZW9tZXRyeS5oaWVyYXJjaHlTdGVwU2l6ZTtcclxuXHRcdHZhciBpbmRpY2VzID0gdGhpcy5uYW1lLnN1YnN0cigxKTtcclxuXHJcblx0XHR2YXIgbnVtUGFydHMgPSBNYXRoLmZsb29yKGluZGljZXMubGVuZ3RoIC8gaGllcmFyY2h5U3RlcFNpemUpO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG51bVBhcnRzOyBpKyspXHJcblx0XHR7XHJcblx0XHRcdHBhdGggKz0gaW5kaWNlcy5zdWJzdHIoaSAqIGhpZXJhcmNoeVN0ZXBTaXplLCBoaWVyYXJjaHlTdGVwU2l6ZSkgKyBcIi9cIjtcclxuXHRcdH1cclxuXHJcblx0XHRwYXRoID0gcGF0aC5zbGljZSgwLCAtMSk7XHJcblxyXG5cdFx0cmV0dXJuIHBhdGg7XHJcblx0fVxyXG5cclxuXHRhZGRDaGlsZChjaGlsZClcclxuXHR7XHJcblx0XHR0aGlzLmNoaWxkcmVuW2NoaWxkLmluZGV4XSA9IGNoaWxkO1xyXG5cdFx0Y2hpbGQucGFyZW50ID0gdGhpcztcclxuXHR9XHJcblxyXG5cdGxvYWQoKVxyXG5cdHtcclxuXHRcdGlmKHRoaXMubG9hZGluZyA9PT0gdHJ1ZSB8fCB0aGlzLmxvYWRlZCA9PT0gdHJ1ZSB8fCBHbG9iYWwubnVtTm9kZXNMb2FkaW5nID49IEdsb2JhbC5tYXhOb2Rlc0xvYWRpbmcpXHJcblx0XHR7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLmxvYWRpbmcgPSB0cnVlO1xyXG5cdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZysrO1xyXG5cclxuXHRcdHRyeVxyXG5cdFx0e1xyXG5cdFx0XHRpZih0aGlzLnBjb0dlb21ldHJ5LmxvYWRlci52ZXJzaW9uLmVxdWFsT3JIaWdoZXIoXCIxLjVcIikpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRpZigodGhpcy5sZXZlbCAlIHRoaXMucGNvR2VvbWV0cnkuaGllcmFyY2h5U3RlcFNpemUpID09PSAwICYmIHRoaXMuaGFzQ2hpbGRyZW4pXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dGhpcy5sb2FkSGllcmFjaHlUaGVuUG9pbnRzKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0aGlzLmxvYWRQb2ludHMoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dGhpcy5sb2FkUG9pbnRzKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGNhdGNoKGUpXHJcblx0XHR7XHJcblx0XHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmctLTtcclxuXHRcdFx0Y29uc29sZS5lcnJvcihcIlBvdHJlZTogRXhjZXB0aW9uIHRocm93biBsb2FkaW5nIHBvaW50cyBmaWxlLlwiLCBlKTtcclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRsb2FkUG9pbnRzKClcclxuXHR7XHJcblx0XHR0aGlzLnBjb0dlb21ldHJ5LmxvYWRlci5sb2FkKHRoaXMpO1xyXG5cdH1cclxuXHJcblx0bG9hZEhpZXJhY2h5VGhlblBvaW50cygpXHJcblx0e1xyXG5cdFx0dmFyIG5vZGUgPSB0aGlzO1xyXG5cclxuXHRcdHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uKG5vZGUsIGhidWZmZXIpXHJcblx0XHR7XHJcblx0XHRcdHZhciB2aWV3ID0gbmV3IERhdGFWaWV3KGhidWZmZXIpO1xyXG5cclxuXHRcdFx0dmFyIHN0YWNrID0gW107XHJcblx0XHRcdHZhciBjaGlsZHJlbiA9IHZpZXcuZ2V0VWludDgoMCk7XHJcblx0XHRcdHZhciBudW1Qb2ludHMgPSB2aWV3LmdldFVpbnQzMigxLCB0cnVlKTtcclxuXHRcdFx0bm9kZS5udW1Qb2ludHMgPSBudW1Qb2ludHM7XHJcblx0XHRcdHN0YWNrLnB1c2goe2NoaWxkcmVuOiBjaGlsZHJlbiwgbnVtUG9pbnRzOiBudW1Qb2ludHMsIG5hbWU6IG5vZGUubmFtZX0pO1xyXG5cclxuXHRcdFx0dmFyIGRlY29kZWQgPSBbXTtcclxuXHRcdFx0dmFyIG9mZnNldCA9IDU7XHJcblxyXG5cdFx0XHR3aGlsZShzdGFjay5sZW5ndGggPiAwKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIHNub2RlID0gc3RhY2suc2hpZnQoKTtcclxuXHRcdFx0XHR2YXIgbWFzayA9IDE7XHJcblx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IDg7IGkrKylcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRpZigoc25vZGUuY2hpbGRyZW4gJiBtYXNrKSAhPT0gMClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0dmFyIGNoaWxkTmFtZSA9IHNub2RlLm5hbWUgKyBpO1xyXG5cdFx0XHRcdFx0XHR2YXIgY2hpbGRDaGlsZHJlbiA9IHZpZXcuZ2V0VWludDgob2Zmc2V0KTtcclxuXHRcdFx0XHRcdFx0dmFyIGNoaWxkTnVtUG9pbnRzID0gdmlldy5nZXRVaW50MzIob2Zmc2V0ICsgMSwgdHJ1ZSk7XHJcblxyXG5cdFx0XHRcdFx0XHRzdGFjay5wdXNoKHtjaGlsZHJlbjogY2hpbGRDaGlsZHJlbiwgbnVtUG9pbnRzOiBjaGlsZE51bVBvaW50cywgbmFtZTogY2hpbGROYW1lfSk7XHJcblx0XHRcdFx0XHRcdGRlY29kZWQucHVzaCh7Y2hpbGRyZW46IGNoaWxkQ2hpbGRyZW4sIG51bVBvaW50czogY2hpbGROdW1Qb2ludHMsIG5hbWU6IGNoaWxkTmFtZX0pO1xyXG5cclxuXHRcdFx0XHRcdFx0b2Zmc2V0ICs9IDU7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0bWFzayA9IG1hc2sgKiAyO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYob2Zmc2V0ID09PSBoYnVmZmVyLmJ5dGVMZW5ndGgpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgbm9kZXMgPSB7fTtcclxuXHRcdFx0bm9kZXNbbm9kZS5uYW1lXSA9IG5vZGU7XHJcblx0XHRcdHZhciBwY28gPSBub2RlLnBjb0dlb21ldHJ5O1xyXG5cclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlY29kZWQubGVuZ3RoOyBpKyspXHJcblx0XHRcdHtcclxuXHRcdFx0XHR2YXIgbmFtZSA9IGRlY29kZWRbaV0ubmFtZTtcclxuXHRcdFx0XHR2YXIgZGVjb2RlZE51bVBvaW50cyA9IGRlY29kZWRbaV0ubnVtUG9pbnRzO1xyXG5cdFx0XHRcdHZhciBpbmRleCA9IHBhcnNlSW50KG5hbWUuY2hhckF0KG5hbWUubGVuZ3RoIC0gMSkpO1xyXG5cdFx0XHRcdHZhciBwYXJlbnROYW1lID0gbmFtZS5zdWJzdHJpbmcoMCwgbmFtZS5sZW5ndGggLSAxKTtcclxuXHRcdFx0XHR2YXIgcGFyZW50Tm9kZSA9IG5vZGVzW3BhcmVudE5hbWVdO1xyXG5cdFx0XHRcdHZhciBsZXZlbCA9IG5hbWUubGVuZ3RoIC0gMTtcclxuXHRcdFx0XHR2YXIgYm91bmRpbmdCb3ggPSBQT0NMb2FkZXIuY3JlYXRlQ2hpbGRBQUJCKHBhcmVudE5vZGUuYm91bmRpbmdCb3gsIGluZGV4KTtcclxuXHJcblx0XHRcdFx0dmFyIGN1cnJlbnROb2RlID0gbmV3IFBvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeU5vZGUobmFtZSwgcGNvLCBib3VuZGluZ0JveCk7XHJcblx0XHRcdFx0Y3VycmVudE5vZGUubGV2ZWwgPSBsZXZlbDtcclxuXHRcdFx0XHRjdXJyZW50Tm9kZS5udW1Qb2ludHMgPSBkZWNvZGVkTnVtUG9pbnRzO1xyXG5cdFx0XHRcdGN1cnJlbnROb2RlLmhhc0NoaWxkcmVuID0gZGVjb2RlZFtpXS5jaGlsZHJlbiA+IDA7XHJcblx0XHRcdFx0Y3VycmVudE5vZGUuc3BhY2luZyA9IHBjby5zcGFjaW5nIC8gTWF0aC5wb3coMiwgbGV2ZWwpO1xyXG5cdFx0XHRcdHBhcmVudE5vZGUuYWRkQ2hpbGQoY3VycmVudE5vZGUpO1xyXG5cdFx0XHRcdG5vZGVzW25hbWVdID0gY3VycmVudE5vZGU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdG5vZGUubG9hZFBvaW50cygpO1xyXG5cdFx0fTtcclxuXHRcdFxyXG5cdFx0aWYoKG5vZGUubGV2ZWwgJSBub2RlLnBjb0dlb21ldHJ5LmhpZXJhcmNoeVN0ZXBTaXplKSA9PT0gMClcclxuXHRcdHtcclxuXHRcdFx0dmFyIGh1cmwgPSBub2RlLnBjb0dlb21ldHJ5Lm9jdHJlZURpciArIFwiL1wiICsgbm9kZS5nZXRIaWVyYXJjaHlQYXRoKCkgKyBcIi9cIiArIG5vZGUubmFtZSArIFwiLmhyY1wiO1xyXG5cdFx0XHR2YXIgeGhyID0gWEhSRmFjdG9yeS5jcmVhdGVYTUxIdHRwUmVxdWVzdCgpO1xyXG5cdFx0XHR4aHIub3BlbihcIkdFVFwiLCBodXJsLCB0cnVlKTtcclxuXHRcdFx0eGhyLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcclxuXHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkXCIpO1xyXG5cdFx0XHR4aHIub25sb2FkID0gZnVuY3Rpb24oZXZlbnQpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0cnlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRjYWxsYmFjayhub2RlLCB4aHIucmVzcG9uc2UpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRjYXRjaChlKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmctLTtcclxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJQb3RyZWU6IEV4Y2VwdGlvbiB0aHJvd24gcGFyc2luZyBwb2ludHMuXCIsIGUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdFx0eGhyLm9uZXJyb3IgPSBmdW5jdGlvbihldmVudClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmctLTtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiUG90cmVlOiBGYWlsZWQgdG8gbG9hZCBmaWxlLlwiLCB4aHIuc3RhdHVzLCBodXJsLCBldmVudCk7XHJcblx0XHRcdH1cclxuXHRcdFx0eGhyLnNlbmQobnVsbCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXROdW1Qb2ludHMoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLm51bVBvaW50cztcclxuXHR9XHJcblxyXG5cdGRpc3Bvc2UoKVxyXG5cdHtcclxuXHRcdGlmKHRoaXMuZ2VvbWV0cnkgJiYgdGhpcy5wYXJlbnQgIT0gbnVsbClcclxuXHRcdHtcclxuXHRcdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcblx0XHRcdHRoaXMuZ2VvbWV0cnkgPSBudWxsO1xyXG5cdFx0XHR0aGlzLmxvYWRlZCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMub25lVGltZURpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZhciBoYW5kbGVyID0gdGhpcy5vbmVUaW1lRGlzcG9zZUhhbmRsZXJzW2ldO1xyXG5cdFx0XHRcdGhhbmRsZXIoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHR0aGlzLm9uZVRpbWVEaXNwb3NlSGFuZGxlcnMgPSBbXTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG59XHJcblxyXG5Qb2ludENsb3VkT2N0cmVlR2VvbWV0cnlOb2RlLklEQ291bnQgPSAwO1xyXG5cclxuT2JqZWN0LmFzc2lnbihQb2ludENsb3VkT2N0cmVlR2VvbWV0cnlOb2RlLnByb3RvdHlwZSwgVEhSRUUuRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSk7XHJcblxyXG5leHBvcnQge1BvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeSwgUG9pbnRDbG91ZE9jdHJlZUdlb21ldHJ5Tm9kZX07IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5pbXBvcnQge0JpbmFyeUxvYWRlcn0gZnJvbSBcIi4vQmluYXJ5TG9hZGVyLmpzXCI7XHJcbmltcG9ydCB7TEFTTEFaTG9hZGVyfSBmcm9tIFwiLi9MQVNMQVpMb2FkZXIuanNcIjtcclxuaW1wb3J0IHtQb2ludEF0dHJpYnV0ZXMsIFBvaW50QXR0cmlidXRlfSBmcm9tIFwiLi4vUG9pbnRBdHRyaWJ1dGVzLmpzXCI7XHJcbmltcG9ydCB7UG9pbnRDbG91ZE9jdHJlZUdlb21ldHJ5LCBQb2ludENsb3VkT2N0cmVlR2VvbWV0cnlOb2RlfSBmcm9tIFwiLi4vcG9pbnRjbG91ZC9nZW9tZXRyaWVzL1BvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeS5qc1wiO1xyXG5pbXBvcnQge1ZlcnNpb25VdGlsc30gZnJvbSBcIi4uL3V0aWxzL1ZlcnNpb25VdGlscy5qc1wiO1xyXG5pbXBvcnQge0dsb2JhbH0gZnJvbSBcIi4uL0dsb2JhbC5qc1wiO1xyXG5pbXBvcnQge1hIUkZhY3Rvcnl9IGZyb20gXCIuLi9YSFJGYWN0b3J5LmpzXCI7XHJcblxyXG4vKipcclxuICogQGNsYXNzIExvYWRzIG1ubyBmaWxlcyBhbmQgcmV0dXJucyBhIFBvaW50Y2xvdWRPY3RyZWVcclxuICogZm9yIGEgZGVzY3JpcHRpb24gb2YgdGhlIG1ubyBiaW5hcnkgZmlsZSBmb3JtYXQsIHJlYWQgbW5vRmlsZUZvcm1hdC50eHRcclxuICpcclxuICogQGF1dGhvciBNYXJrdXMgU2NodWV0elxyXG4gKi9cclxuY2xhc3MgUE9DTG9hZGVyXHJcbntcclxuXHQvKipcclxuXHQgKiBAcmV0dXJuIGEgcG9pbnQgY2xvdWQgb2N0cmVlIHdpdGggdGhlIHJvb3Qgbm9kZSBkYXRhIGxvYWRlZC5cclxuXHQgKiBsb2FkaW5nIG9mIGRlc2NlbmRhbnRzIGhhcHBlbnMgYXN5bmNocm9ub3VzbHkgd2hlbiB0aGV5XCJyZSBuZWVkZWRcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSB1cmxcclxuXHQgKiBAcGFyYW0gbG9hZGluZ0ZpbmlzaGVkTGlzdGVuZXIgZXhlY3V0ZWQgYWZ0ZXIgbG9hZGluZyB0aGUgYmluYXJ5IGhhcyBiZWVuIGZpbmlzaGVkXHJcblx0ICovXHJcblx0c3RhdGljIGxvYWQodXJsLCBjYWxsYmFjaylcclxuXHR7XHJcblx0XHR2YXIgcGNvID0gbmV3IFBvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeSgpO1xyXG5cdFx0cGNvLnVybCA9IHVybDtcclxuXHRcdFxyXG5cdFx0dmFyIHhociA9IFhIUkZhY3RvcnkuY3JlYXRlWE1MSHR0cFJlcXVlc3QoKTtcclxuXHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpblwiKTtcclxuXHRcdHhoci5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XHJcblx0XHR4aHIub25sb2FkID0gZnVuY3Rpb24oKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgZGF0YSA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XHJcblx0XHRcdHZhciB2ZXJzaW9uID0gbmV3IFZlcnNpb25VdGlscyhkYXRhLnZlcnNpb24pO1xyXG5cclxuXHRcdFx0Ly9Bc3N1bWUgZGlyIGFzIGFic29sdXRlIGlmIGl0IHN0YXJ0cyB3aXRoIGh0dHBcclxuXHRcdFx0aWYoZGF0YS5vY3RyZWVEaXIuaW5kZXhPZihcImh0dHBcIikgPT09IDApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRwY28ub2N0cmVlRGlyID0gZGF0YS5vY3RyZWVEaXI7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cGNvLm9jdHJlZURpciA9IHVybCArIFwiLy4uL1wiICsgZGF0YS5vY3RyZWVEaXI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHBjby5zcGFjaW5nID0gZGF0YS5zcGFjaW5nO1xyXG5cdFx0XHRwY28uaGllcmFyY2h5U3RlcFNpemUgPSBkYXRhLmhpZXJhcmNoeVN0ZXBTaXplO1xyXG5cdFx0XHRwY28ucG9pbnRBdHRyaWJ1dGVzID0gZGF0YS5wb2ludEF0dHJpYnV0ZXM7XHJcblxyXG5cdFx0XHR2YXIgbWluID0gbmV3IFRIUkVFLlZlY3RvcjMoZGF0YS5ib3VuZGluZ0JveC5seCwgZGF0YS5ib3VuZGluZ0JveC5seSwgZGF0YS5ib3VuZGluZ0JveC5seik7XHJcblx0XHRcdHZhciBtYXggPSBuZXcgVEhSRUUuVmVjdG9yMyhkYXRhLmJvdW5kaW5nQm94LnV4LCBkYXRhLmJvdW5kaW5nQm94LnV5LCBkYXRhLmJvdW5kaW5nQm94LnV6KTtcclxuXHRcdFx0dmFyIGJvdW5kaW5nQm94ID0gbmV3IFRIUkVFLkJveDMobWluLCBtYXgpO1xyXG5cdFx0XHR2YXIgdGlnaHRCb3VuZGluZ0JveCA9IGJvdW5kaW5nQm94LmNsb25lKCk7XHJcblxyXG5cdFx0XHRpZihkYXRhLnRpZ2h0Qm91bmRpbmdCb3gpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0aWdodEJvdW5kaW5nQm94Lm1pbi5jb3B5KG5ldyBUSFJFRS5WZWN0b3IzKGRhdGEudGlnaHRCb3VuZGluZ0JveC5seCwgZGF0YS50aWdodEJvdW5kaW5nQm94Lmx5LCBkYXRhLnRpZ2h0Qm91bmRpbmdCb3gubHopKTtcclxuXHRcdFx0XHR0aWdodEJvdW5kaW5nQm94Lm1heC5jb3B5KG5ldyBUSFJFRS5WZWN0b3IzKGRhdGEudGlnaHRCb3VuZGluZ0JveC51eCwgZGF0YS50aWdodEJvdW5kaW5nQm94LnV5LCBkYXRhLnRpZ2h0Qm91bmRpbmdCb3gudXopKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIG9mZnNldCA9IG1pbi5jbG9uZSgpO1xyXG5cclxuXHRcdFx0Ym91bmRpbmdCb3gubWluLnN1YihvZmZzZXQpO1xyXG5cdFx0XHRib3VuZGluZ0JveC5tYXguc3ViKG9mZnNldCk7XHJcblxyXG5cdFx0XHR0aWdodEJvdW5kaW5nQm94Lm1pbi5zdWIob2Zmc2V0KTtcclxuXHRcdFx0dGlnaHRCb3VuZGluZ0JveC5tYXguc3ViKG9mZnNldCk7XHJcblxyXG5cdFx0XHRwY28ucHJvamVjdGlvbiA9IGRhdGEucHJvamVjdGlvbjtcclxuXHRcdFx0cGNvLmJvdW5kaW5nQm94ID0gYm91bmRpbmdCb3g7XHJcblx0XHRcdHBjby50aWdodEJvdW5kaW5nQm94ID0gdGlnaHRCb3VuZGluZ0JveDtcclxuXHRcdFx0cGNvLmJvdW5kaW5nU3BoZXJlID0gYm91bmRpbmdCb3guZ2V0Qm91bmRpbmdTcGhlcmUobmV3IFRIUkVFLlNwaGVyZSgpKTtcclxuXHRcdFx0cGNvLnRpZ2h0Qm91bmRpbmdTcGhlcmUgPSB0aWdodEJvdW5kaW5nQm94LmdldEJvdW5kaW5nU3BoZXJlKG5ldyBUSFJFRS5TcGhlcmUoKSk7XHJcblx0XHRcdHBjby5vZmZzZXQgPSBvZmZzZXQ7XHJcblxyXG5cdFx0XHQvL1NlbGVjdCB0aGUgYXBwcm9waWF0ZSBsb2FkZXJcclxuXHRcdFx0aWYoZGF0YS5wb2ludEF0dHJpYnV0ZXMgPT09IFwiTEFTXCIgfHwgZGF0YS5wb2ludEF0dHJpYnV0ZXMgPT09IFwiTEFaXCIpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRwY28ubG9hZGVyID0gbmV3IExBU0xBWkxvYWRlcihkYXRhLnZlcnNpb24pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHBjby5sb2FkZXIgPSBuZXcgQmluYXJ5TG9hZGVyKGRhdGEudmVyc2lvbiwgYm91bmRpbmdCb3gsIGRhdGEuc2NhbGUpO1xyXG5cdFx0XHRcdHBjby5wb2ludEF0dHJpYnV0ZXMgPSBuZXcgUG9pbnRBdHRyaWJ1dGVzKHBjby5wb2ludEF0dHJpYnV0ZXMpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2YXIgbm9kZXMgPSB7fTtcclxuXHRcdFx0dmFyIG5hbWUgPSBcInJcIjtcclxuXHJcblx0XHRcdHZhciByb290ID0gbmV3IFBvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeU5vZGUobmFtZSwgcGNvLCBib3VuZGluZ0JveCk7XHJcblx0XHRcdHJvb3QubGV2ZWwgPSAwO1xyXG5cdFx0XHRyb290Lmhhc0NoaWxkcmVuID0gdHJ1ZTtcclxuXHRcdFx0cm9vdC5zcGFjaW5nID0gcGNvLnNwYWNpbmc7XHJcblx0XHRcdHJvb3QubnVtUG9pbnRzID0gdmVyc2lvbi51cFRvKFwiMS41XCIpID8gZGF0YS5oaWVyYXJjaHlbMF1bMV0gOiAwO1xyXG5cclxuXHRcdFx0cGNvLnJvb3QgPSByb290O1xyXG5cdFx0XHRwY28ucm9vdC5sb2FkKCk7XHJcblx0XHRcdG5vZGVzW25hbWVdID0gcm9vdDtcclxuXHJcblx0XHRcdC8vTG9hZCByZW1haW5pbmcgaGllcmFyY2h5XHJcblx0XHRcdGlmKHZlcnNpb24udXBUbyhcIjEuNFwiKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGZvcih2YXIgaSA9IDE7IGkgPCBkYXRhLmhpZXJhcmNoeS5sZW5ndGg7IGkrKylcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR2YXIgbmFtZSA9IGRhdGEuaGllcmFyY2h5W2ldWzBdO1xyXG5cdFx0XHRcdFx0dmFyIG51bVBvaW50cyA9IGRhdGEuaGllcmFyY2h5W2ldWzFdO1xyXG5cdFx0XHRcdFx0dmFyIGluZGV4ID0gcGFyc2VJbnQobmFtZS5jaGFyQXQobmFtZS5sZW5ndGggLSAxKSk7XHJcblx0XHRcdFx0XHR2YXIgcGFyZW50TmFtZSA9IG5hbWUuc3Vic3RyaW5nKDAsIG5hbWUubGVuZ3RoIC0gMSk7XHJcblx0XHRcdFx0XHR2YXIgcGFyZW50Tm9kZSA9IG5vZGVzW3BhcmVudE5hbWVdO1xyXG5cdFx0XHRcdFx0dmFyIGxldmVsID0gbmFtZS5sZW5ndGggLSAxO1xyXG5cdFx0XHRcdFx0dmFyIGJvdW5kaW5nQm94ID0gUE9DTG9hZGVyLmNyZWF0ZUNoaWxkQUFCQihwYXJlbnROb2RlLmJvdW5kaW5nQm94LCBpbmRleCk7XHJcblxyXG5cdFx0XHRcdFx0dmFyIG5vZGUgPSBuZXcgUG9pbnRDbG91ZE9jdHJlZUdlb21ldHJ5Tm9kZShuYW1lLCBwY28sIGJvdW5kaW5nQm94KTtcclxuXHRcdFx0XHRcdG5vZGUubGV2ZWwgPSBsZXZlbDtcclxuXHRcdFx0XHRcdG5vZGUubnVtUG9pbnRzID0gbnVtUG9pbnRzO1xyXG5cdFx0XHRcdFx0bm9kZS5zcGFjaW5nID0gcGNvLnNwYWNpbmcgLyBNYXRoLnBvdygyLCBsZXZlbCk7XHJcblx0XHRcdFx0XHRwYXJlbnROb2RlLmFkZENoaWxkKG5vZGUpO1xyXG5cdFx0XHRcdFx0bm9kZXNbbmFtZV0gPSBub2RlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRwY28ubm9kZXMgPSBub2RlcztcclxuXHJcblx0XHRcdGNhbGxiYWNrKHBjbyk7XHJcblx0XHR9O1xyXG5cclxuXHRcdHhoci5vbmVycm9yID0gZnVuY3Rpb24oZXZlbnQpXHJcblx0XHR7XHJcblx0XHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmctLTtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJQb3RyZWU6IGxvYWRpbmcgZmlsZSBmYWlsZWQuXCIsIHVybCwgZXZlbnQpO1xyXG5cdFx0XHRjYWxsYmFjaygpO1xyXG5cdFx0fTtcclxuXHJcblx0XHR4aHIuc2VuZChudWxsKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBsb2FkUG9pbnRBdHRyaWJ1dGVzKG1ubylcclxuXHR7XHJcblx0XHR2YXIgZnBhID0gbW5vLnBvaW50QXR0cmlidXRlcztcclxuXHRcdHZhciBwYSA9IG5ldyBQb2ludEF0dHJpYnV0ZXMoKTtcclxuXHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZnBhLmxlbmd0aDsgaSsrKVxyXG5cdFx0e1xyXG5cdFx0XHRwYS5hZGQoUG9pbnRBdHRyaWJ1dGVbZnBhW2ldXSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHBhO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGNyZWF0ZUNoaWxkQUFCQihhYWJiLCBpbmRleClcclxuXHR7XHJcblx0XHR2YXIgbWluID0gYWFiYi5taW4uY2xvbmUoKTtcclxuXHRcdHZhciBtYXggPSBhYWJiLm1heC5jbG9uZSgpO1xyXG5cdFx0dmFyIHNpemUgPSBuZXcgVEhSRUUuVmVjdG9yMygpLnN1YlZlY3RvcnMobWF4LCBtaW4pO1xyXG5cclxuXHRcdGlmKChpbmRleCAmIDBiMDAwMSkgPiAwKVxyXG5cdFx0e1xyXG5cdFx0XHRtaW4ueiArPSBzaXplLnogLyAyO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHRtYXgueiAtPSBzaXplLnogLyAyO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmKChpbmRleCAmIDBiMDAxMCkgPiAwKVxyXG5cdFx0e1xyXG5cdFx0XHRtaW4ueSArPSBzaXplLnkgLyAyO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHRtYXgueSAtPSBzaXplLnkgLyAyO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmKChpbmRleCAmIDBiMDEwMCkgPiAwKVxyXG5cdFx0e1xyXG5cdFx0XHRtaW4ueCArPSBzaXplLnggLyAyO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHRtYXgueCAtPSBzaXplLnggLyAyO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBuZXcgVEhSRUUuQm94MyhtaW4sIG1heCk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQge1BPQ0xvYWRlcn07IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5pbXBvcnQge0dsb2JhbH0gZnJvbSBcIi4uLy4uL0dsb2JhbC5qc1wiO1xyXG5pbXBvcnQge1dvcmtlck1hbmFnZXJ9IGZyb20gXCIuLi8uLi91dGlscy9Xb3JrZXJNYW5hZ2VyLmpzXCI7XHJcbmltcG9ydCB7WEhSRmFjdG9yeX0gZnJvbSBcIi4uLy4uL1hIUkZhY3RvcnkuanNcIjtcclxuXHJcbmNsYXNzIEVwdEJpbmFyeUxvYWRlclxyXG57XHJcblx0bG9hZChub2RlKVxyXG5cdHtcclxuXHRcdGlmKG5vZGUubG9hZGVkKSByZXR1cm47XHJcblxyXG5cdFx0dmFyIHVybCA9IG5vZGUudXJsKCkgKyBcIi5iaW5cIjtcclxuXHRcdFxyXG5cdFx0dmFyIHhociA9IFhIUkZhY3RvcnkuY3JlYXRlWE1MSHR0cFJlcXVlc3QoKTtcclxuXHRcdHhoci5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XHJcblx0XHR4aHIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xyXG5cdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkXCIpO1xyXG5cdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+XHJcblx0XHR7XHJcblx0XHRcdGlmKHhoci5yZWFkeVN0YXRlID09PSA0KVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYoeGhyLnN0YXR1cyA9PT0gMjAwKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciBidWZmZXIgPSB4aHIucmVzcG9uc2U7XHJcblx0XHRcdFx0XHR0aGlzLnBhcnNlKG5vZGUsIGJ1ZmZlcik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIkZhaWxlZCBcIiArIHVybCArIFwiOiBcIiArIHhoci5zdGF0dXMpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHR0cnlcclxuXHRcdHtcclxuXHRcdFx0eGhyLnNlbmQobnVsbCk7XHJcblx0XHR9XHJcblx0XHRjYXRjaCAoZSlcclxuXHRcdHtcclxuXHRcdFx0Y29uc29sZS5sb2coXCJGYWlsZWQgcmVxdWVzdDogXCIgKyBlKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHBhcnNlKG5vZGUsIGJ1ZmZlcilcclxuXHR7XHJcblx0XHR2YXIgd29ya2VyID0gR2xvYmFsLndvcmtlclBvb2wuZ2V0V29ya2VyKFdvcmtlck1hbmFnZXIuRVBUX0JJTkFSWV9ERUNPREVSKTtcclxuXHJcblx0XHR3b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24oZSlcclxuXHRcdHtcclxuXHRcdFx0dmFyIGcgPSBuZXcgVEhSRUUuQnVmZmVyR2VvbWV0cnkoKTtcclxuXHRcdFx0dmFyIG51bVBvaW50cyA9IGUuZGF0YS5udW1Qb2ludHM7XHJcblxyXG5cdFx0XHR2YXIgcG9zaXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KGUuZGF0YS5wb3NpdGlvbik7XHJcblx0XHRcdGcuc2V0QXR0cmlidXRlKFwicG9zaXRpb25cIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbiwgMykpO1xyXG5cclxuXHRcdFx0dmFyIGluZGljZXMgPSBuZXcgVWludDhBcnJheShlLmRhdGEuaW5kaWNlcyk7XHJcblx0XHRcdGcuc2V0QXR0cmlidXRlKFwiaW5kaWNlc1wiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGluZGljZXMsIDQpKTtcclxuXHJcblx0XHRcdGlmKGUuZGF0YS5jb2xvcilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZhciBjb2xvciA9IG5ldyBVaW50OEFycmF5KGUuZGF0YS5jb2xvcik7XHJcblx0XHRcdFx0Zy5zZXRBdHRyaWJ1dGUoXCJjb2xvclwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGNvbG9yLCA0LCB0cnVlKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoZS5kYXRhLmludGVuc2l0eSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZhciBpbnRlbnNpdHkgPSBuZXcgRmxvYXQzMkFycmF5KGUuZGF0YS5pbnRlbnNpdHkpO1xyXG5cdFx0XHRcdGcuc2V0QXR0cmlidXRlKFwiaW50ZW5zaXR5XCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoaW50ZW5zaXR5LCAxKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoZS5kYXRhLmNsYXNzaWZpY2F0aW9uKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIGNsYXNzaWZpY2F0aW9uID0gbmV3IFVpbnQ4QXJyYXkoZS5kYXRhLmNsYXNzaWZpY2F0aW9uKTtcclxuXHRcdFx0XHRnLnNldEF0dHJpYnV0ZShcImNsYXNzaWZpY2F0aW9uXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoY2xhc3NpZmljYXRpb24sIDEpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZihlLmRhdGEucmV0dXJuTnVtYmVyKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIHJldHVybk51bWJlciA9IG5ldyBVaW50OEFycmF5KGUuZGF0YS5yZXR1cm5OdW1iZXIpO1xyXG5cdFx0XHRcdGcuc2V0QXR0cmlidXRlKFwicmV0dXJuTnVtYmVyXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocmV0dXJuTnVtYmVyLCAxKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoZS5kYXRhLm51bWJlck9mUmV0dXJucylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZhciBudW1iZXJPZlJldHVybnMgPSBuZXcgVWludDhBcnJheShlLmRhdGEubnVtYmVyT2ZSZXR1cm5zKTtcclxuXHRcdFx0XHRnLnNldEF0dHJpYnV0ZShcIm51bWJlck9mUmV0dXJuc1wiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKG51bWJlck9mUmV0dXJucywgMSkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKGUuZGF0YS5wb2ludFNvdXJjZUlkKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIHBvaW50U291cmNlSWQgPSBuZXcgVWludDE2QXJyYXkoZS5kYXRhLnBvaW50U291cmNlSWQpO1xyXG5cdFx0XHRcdGcuc2V0QXR0cmlidXRlKFwicG9pbnRTb3VyY2VJRFwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHBvaW50U291cmNlSWQsIDEpKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Zy5hdHRyaWJ1dGVzLmluZGljZXMubm9ybWFsaXplZCA9IHRydWU7XHJcblxyXG5cdFx0XHR2YXIgdGlnaHRCb3VuZGluZ0JveCA9IG5ldyBUSFJFRS5Cb3gzKFxyXG5cdFx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKCkuZnJvbUFycmF5KGUuZGF0YS50aWdodEJvdW5kaW5nQm94Lm1pbiksXHJcblx0XHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoKS5mcm9tQXJyYXkoZS5kYXRhLnRpZ2h0Qm91bmRpbmdCb3gubWF4KVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0bm9kZS5kb25lTG9hZGluZyhnLCB0aWdodEJvdW5kaW5nQm94LCBudW1Qb2ludHMsIG5ldyBUSFJFRS5WZWN0b3IzKC4uLmUuZGF0YS5tZWFuKSk7XHJcblxyXG5cdFx0XHRHbG9iYWwud29ya2VyUG9vbC5yZXR1cm5Xb3JrZXIoV29ya2VyTWFuYWdlci5FUFRfQklOQVJZX0RFQ09ERVIsIHdvcmtlcik7XHJcblx0XHR9O1xyXG5cclxuXHRcdHZhciB0b0FycmF5ID0gKHYpID0+IFt2LngsIHYueSwgdi56XTtcclxuXHRcdHZhciBtZXNzYWdlID0ge1xyXG5cdFx0XHRidWZmZXI6IGJ1ZmZlcixcclxuXHRcdFx0c2NoZW1hOiBub2RlLmVwdC5zY2hlbWEsXHJcblx0XHRcdHNjYWxlOiBub2RlLmVwdC5lcHRTY2FsZSxcclxuXHRcdFx0b2Zmc2V0OiBub2RlLmVwdC5lcHRPZmZzZXQsXHJcblx0XHRcdG1pbnM6IHRvQXJyYXkobm9kZS5rZXkuYi5taW4pXHJcblx0XHR9O1xyXG5cclxuXHRcdHdvcmtlci5wb3N0TWVzc2FnZShtZXNzYWdlLCBbbWVzc2FnZS5idWZmZXJdKTtcclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQge0VwdEJpbmFyeUxvYWRlcn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxuaW1wb3J0IHtHbG9iYWx9IGZyb20gXCIuLi8uLi9HbG9iYWwuanNcIjtcclxuaW1wb3J0IHtMQVNGaWxlLCBMQVNEZWNvZGVyfSBmcm9tIFwiLi4vTEFTTG9hZGVyLmpzXCI7XHJcbmltcG9ydCB7V29ya2VyTWFuYWdlcn0gZnJvbSBcIi4uLy4uL3V0aWxzL1dvcmtlck1hbmFnZXIuanNcIjtcclxuaW1wb3J0IHtYSFJGYWN0b3J5fSBmcm9tIFwiLi4vLi4vWEhSRmFjdG9yeS5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIGxhc2xheiBjb2RlIHRha2VuIGFuZCBhZGFwdGVkIGZyb20gcGxhcy5pbyBqcy1sYXNsYXpcclxuICpcdGh0dHA6Ly9wbGFzLmlvL1xyXG4gKlx0aHR0cHM6Ly9naXRodWIuY29tL3Zlcm1hL3BsYXNpb1xyXG4gKlxyXG4gKiBUaGFua3MgdG8gVWRheSBWZXJtYSBhbmQgSG93YXJkIEJ1dGxlclxyXG4gKlxyXG4gKi9cclxuY2xhc3MgRXB0TGFzemlwTG9hZGVyXHJcbntcclxuXHRsb2FkKG5vZGUpXHJcblx0e1xyXG5cdFx0aWYobm9kZS5sb2FkZWQpXHJcblx0XHR7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgdXJsID0gbm9kZS51cmwoKSArIFwiLmxhelwiO1xyXG5cclxuXHRcdHZhciB4aHIgPSBYSFJGYWN0b3J5LmNyZWF0ZVhNTEh0dHBSZXF1ZXN0KCk7XHJcblx0XHR4aHIub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpO1xyXG5cdFx0eGhyLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcclxuXHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZFwiKTtcclxuXHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PlxyXG5cdFx0e1xyXG5cdFx0XHRpZih4aHIucmVhZHlTdGF0ZSA9PT0gNClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGlmKHhoci5zdGF0dXMgPT09IDIwMClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR2YXIgYnVmZmVyID0geGhyLnJlc3BvbnNlO1xyXG5cdFx0XHRcdFx0dGhpcy5wYXJzZShub2RlLCBidWZmZXIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJGYWlsZWQgXCIgKyB1cmwgKyBcIjogXCIgKyB4aHIuc3RhdHVzKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0eGhyLnNlbmQobnVsbCk7XHJcblx0fVxyXG5cclxuXHRwYXJzZShub2RlLCBidWZmZXIpXHJcblx0e1xyXG5cdFx0dmFyIGxmID0gbmV3IExBU0ZpbGUoYnVmZmVyKTtcclxuXHRcdHZhciBoYW5kbGVyID0gbmV3IEVwdExhekJhdGNoZXIobm9kZSk7XHJcblxyXG5cdFx0bGYub3BlbigpXHJcblx0XHQudGhlbigoKSA9PlxyXG5cdFx0e1xyXG5cdFx0XHRsZi5pc09wZW4gPSB0cnVlO1xyXG5cdFx0XHRyZXR1cm4gbGYuZ2V0SGVhZGVyKCk7XHJcblx0XHR9KVxyXG5cdFx0LnRoZW4oKGhlYWRlcikgPT5cclxuXHRcdHtcclxuXHRcdFx0dmFyIGkgPSAwO1xyXG5cdFx0XHR2YXIgbnAgPSBoZWFkZXIucG9pbnRzQ291bnQ7XHJcblxyXG5cdFx0XHR2YXIgdG9BcnJheSA9ICh2KSA9PiBbdi54LCB2LnksIHYuel07XHJcblx0XHRcdHZhciBtaW5zID0gdG9BcnJheShub2RlLmtleS5iLm1pbik7XHJcblx0XHRcdHZhciBtYXhzID0gdG9BcnJheShub2RlLmtleS5iLm1heCk7XHJcblxyXG5cdFx0XHR2YXIgcmVhZCA9ICgpID0+XHJcblx0XHRcdHtcclxuXHRcdFx0XHR2YXIgcCA9IGxmLnJlYWREYXRhKDEwMDAwMDAsIDAsIDEpO1xyXG5cdFx0XHRcdHJldHVybiBwLnRoZW4oZnVuY3Rpb24gKGRhdGEpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIGQgPSBuZXcgTEFTRGVjb2RlcihcclxuXHRcdFx0XHRcdFx0XHRkYXRhLmJ1ZmZlcixcclxuXHRcdFx0XHRcdFx0XHRoZWFkZXIucG9pbnRzRm9ybWF0SWQsXHJcblx0XHRcdFx0XHRcdFx0aGVhZGVyLnBvaW50c1N0cnVjdFNpemUsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5jb3VudCxcclxuXHRcdFx0XHRcdFx0XHRoZWFkZXIuc2NhbGUsXHJcblx0XHRcdFx0XHRcdFx0aGVhZGVyLm9mZnNldCxcclxuXHRcdFx0XHRcdFx0XHRtaW5zLFxyXG5cdFx0XHRcdFx0XHRcdG1heHMpO1xyXG5cdFx0XHRcdFx0ZC5leHRyYUJ5dGVzID0gaGVhZGVyLmV4dHJhQnl0ZXM7XHJcblx0XHRcdFx0XHRkLnBvaW50c0Zvcm1hdElkID0gaGVhZGVyLnBvaW50c0Zvcm1hdElkO1xyXG5cdFx0XHRcdFx0aGFuZGxlci5wdXNoKGQpO1xyXG5cclxuXHRcdFx0XHRcdGkgKz0gZGF0YS5jb3VudDtcclxuXHJcblx0XHRcdFx0XHRpZihkYXRhLmhhc01vcmVEYXRhKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVhZCgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRoZWFkZXIudG90YWxSZWFkID0gaTtcclxuXHRcdFx0XHRcdFx0aGVhZGVyLnZlcnNpb25Bc1N0cmluZyA9IGxmLnZlcnNpb25Bc1N0cmluZztcclxuXHRcdFx0XHRcdFx0aGVhZGVyLmlzQ29tcHJlc3NlZCA9IGxmLmlzQ29tcHJlc3NlZDtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRyZXR1cm4gcmVhZCgpO1xyXG5cdFx0fSlcclxuXHRcdC50aGVuKCgpID0+IGxmLmNsb3NlKCkpXHJcblx0XHQudGhlbigoKSA9PiBsZi5pc09wZW4gPSBmYWxzZSlcclxuXHRcdC5jYXRjaCgoZXJyKSA9PlxyXG5cdFx0e1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIkVycm9yIHJlYWRpbmcgTEFaOlwiLCBlcnIpO1xyXG5cdFx0XHRpZihsZi5pc09wZW4pXHJcblx0XHRcdHtcclxuXHRcdFx0XHRsZi5jbG9zZSgpLnRoZW4oKCkgPT5cclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRsZi5pc09wZW4gPSBmYWxzZTtcclxuXHRcdFx0XHRcdHRocm93IGVycjtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHRocm93IGVycjtcclxuXHRcdH0pO1xyXG5cdH1cclxufTtcclxuXHJcbmNsYXNzIEVwdExhekJhdGNoZXJcclxue1xyXG5cdGNvbnN0cnVjdG9yKG5vZGUpXHJcblx0e1xyXG5cdFx0dGhpcy5ub2RlID0gbm9kZTtcclxuXHR9XHJcblxyXG5cdHB1c2gobGFzKVxyXG5cdHtcclxuXHRcdHZhciB3b3JrZXIgPSBHbG9iYWwud29ya2VyUG9vbC5nZXRXb3JrZXIoV29ya2VyTWFuYWdlci5FUFRfTEFTX1pJUF9ERUNPREVSKTtcclxuXHJcblx0XHR3b3JrZXIub25tZXNzYWdlID0gKGUpID0+XHJcblx0XHR7XHJcblx0XHRcdHZhciBnID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XHJcblx0XHRcdHZhciBudW1Qb2ludHMgPSBsYXMucG9pbnRzQ291bnQ7XHJcblxyXG5cdFx0XHR2YXIgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShlLmRhdGEucG9zaXRpb24pO1xyXG5cdFx0XHR2YXIgY29sb3JzID0gbmV3IFVpbnQ4QXJyYXkoZS5kYXRhLmNvbG9yKTtcclxuXHJcblx0XHRcdHZhciBpbnRlbnNpdGllcyA9IG5ldyBGbG9hdDMyQXJyYXkoZS5kYXRhLmludGVuc2l0eSk7XHJcblx0XHRcdHZhciBjbGFzc2lmaWNhdGlvbnMgPSBuZXcgVWludDhBcnJheShlLmRhdGEuY2xhc3NpZmljYXRpb24pO1xyXG5cdFx0XHR2YXIgcmV0dXJuTnVtYmVycyA9IG5ldyBVaW50OEFycmF5KGUuZGF0YS5yZXR1cm5OdW1iZXIpO1xyXG5cdFx0XHR2YXIgbnVtYmVyT2ZSZXR1cm5zID0gbmV3IFVpbnQ4QXJyYXkoZS5kYXRhLm51bWJlck9mUmV0dXJucyk7XHJcblx0XHRcdHZhciBwb2ludFNvdXJjZUlEcyA9IG5ldyBVaW50MTZBcnJheShlLmRhdGEucG9pbnRTb3VyY2VJRCk7XHJcblx0XHRcdHZhciBpbmRpY2VzID0gbmV3IFVpbnQ4QXJyYXkoZS5kYXRhLmluZGljZXMpO1xyXG5cclxuXHRcdFx0Zy5zZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHBvc2l0aW9ucywgMykpO1xyXG5cdFx0XHRnLnNldEF0dHJpYnV0ZShcImNvbG9yXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoY29sb3JzLCA0LCB0cnVlKSk7XHJcblx0XHRcdGcuc2V0QXR0cmlidXRlKFwiaW50ZW5zaXR5XCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoaW50ZW5zaXRpZXMsIDEpKTtcclxuXHRcdFx0Zy5zZXRBdHRyaWJ1dGUoXCJjbGFzc2lmaWNhdGlvblwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGNsYXNzaWZpY2F0aW9ucywgMSkpO1xyXG5cdFx0XHRnLnNldEF0dHJpYnV0ZShcInJldHVybk51bWJlclwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHJldHVybk51bWJlcnMsIDEpKTtcclxuXHRcdFx0Zy5zZXRBdHRyaWJ1dGUoXCJudW1iZXJPZlJldHVybnNcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShudW1iZXJPZlJldHVybnMsIDEpKTtcclxuXHRcdFx0Zy5zZXRBdHRyaWJ1dGUoXCJwb2ludFNvdXJjZUlEXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUocG9pbnRTb3VyY2VJRHMsIDEpKTtcclxuXHRcdFx0Zy5zZXRBdHRyaWJ1dGUoXCJpbmRpY2VzXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoaW5kaWNlcywgNCkpO1xyXG5cdFx0XHRnLmF0dHJpYnV0ZXMuaW5kaWNlcy5ub3JtYWxpemVkID0gdHJ1ZTtcclxuXHJcblx0XHRcdHZhciB0aWdodEJvdW5kaW5nQm94ID0gbmV3IFRIUkVFLkJveDMoXHJcblx0XHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoKS5mcm9tQXJyYXkoZS5kYXRhLnRpZ2h0Qm91bmRpbmdCb3gubWluKSxcclxuXHRcdFx0XHRuZXcgVEhSRUUuVmVjdG9yMygpLmZyb21BcnJheShlLmRhdGEudGlnaHRCb3VuZGluZ0JveC5tYXgpXHJcblx0XHRcdCk7XHJcblxyXG5cdFx0XHR0aGlzLm5vZGUuZG9uZUxvYWRpbmcoZywgdGlnaHRCb3VuZGluZ0JveCwgbnVtUG9pbnRzLCBuZXcgVEhSRUUuVmVjdG9yMyguLi5lLmRhdGEubWVhbikpO1xyXG5cclxuXHRcdFx0R2xvYmFsLndvcmtlclBvb2wucmV0dXJuV29ya2VyKFdvcmtlck1hbmFnZXIuRVBUX0xBU19aSVBfREVDT0RFUiwgd29ya2VyKTtcclxuXHRcdH07XHJcblxyXG5cdFx0dmFyIG1lc3NhZ2UgPSB7XHJcblx0XHRcdGJ1ZmZlcjogbGFzLmFycmF5YixcclxuXHRcdFx0bnVtUG9pbnRzOiBsYXMucG9pbnRzQ291bnQsXHJcblx0XHRcdHBvaW50U2l6ZTogbGFzLnBvaW50U2l6ZSxcclxuXHRcdFx0cG9pbnRGb3JtYXRJRDogbGFzLnBvaW50c0Zvcm1hdElkLFxyXG5cdFx0XHRzY2FsZTogbGFzLnNjYWxlLFxyXG5cdFx0XHRvZmZzZXQ6IGxhcy5vZmZzZXQsXHJcblx0XHRcdG1pbnM6IGxhcy5taW5zLFxyXG5cdFx0XHRtYXhzOiBsYXMubWF4c1xyXG5cdFx0fTtcclxuXHJcblx0XHR3b3JrZXIucG9zdE1lc3NhZ2UobWVzc2FnZSwgW21lc3NhZ2UuYnVmZmVyXSk7XHJcblx0fTtcclxufTtcclxuXHJcbmV4cG9ydCB7RXB0TGFzemlwTG9hZGVyLCBFcHRMYXpCYXRjaGVyfTtcclxuIiwiXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmltcG9ydCB7RXB0QmluYXJ5TG9hZGVyfSBmcm9tIFwiLi4vLi4vbG9hZGVycy9lcHQvRXB0QmluYXJ5TG9hZGVyXCI7XHJcbmltcG9ydCB7RXB0TGFzemlwTG9hZGVyfSBmcm9tIFwiLi4vLi4vbG9hZGVycy9lcHQvRXB0TGFzemlwTG9hZGVyXCI7XHJcbmltcG9ydCB7VmVyc2lvblV0aWxzfSBmcm9tIFwiLi4vLi4vdXRpbHMvVmVyc2lvblV0aWxzLmpzXCI7XHJcbmltcG9ydCB7UG9pbnRDbG91ZFRyZWVOb2RlfSBmcm9tIFwiLi4vUG9pbnRDbG91ZFRyZWUuanNcIjtcclxuaW1wb3J0IHtHbG9iYWx9IGZyb20gXCIuLi8uLi9HbG9iYWwuanNcIjtcclxuaW1wb3J0IHtYSFJGYWN0b3J5fSBmcm9tIFwiLi4vLi4vWEhSRmFjdG9yeS5qc1wiO1xyXG5cclxuY2xhc3MgVXRpbHNcclxue1xyXG5cdHN0YXRpYyB0b1ZlY3RvcjModiwgb2Zmc2V0KVxyXG5cdHtcclxuXHRcdHJldHVybiBuZXcgVEhSRUUuVmVjdG9yMygpLmZyb21BcnJheSh2LCBvZmZzZXQgfHwgMCk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgdG9Cb3gzKGIpXHJcblx0e1xyXG5cdFx0cmV0dXJuIG5ldyBUSFJFRS5Cb3gzKFV0aWxzLnRvVmVjdG9yMyhiKSwgVXRpbHMudG9WZWN0b3IzKGIsIDMpKTtcclxuXHR9O1xyXG5cclxuXHRzdGF0aWMgZmluZERpbShzY2hlbWEsIG5hbWUpXHJcblx0e1xyXG5cdFx0dmFyIGRpbSA9IHNjaGVtYS5maW5kKChkaW0pID0+IGRpbS5uYW1lID09IG5hbWUpO1xyXG5cdFx0aWYoIWRpbSkgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZpbmQgXCIgKyBuYW1lICsgXCIgaW4gc2NoZW1hXCIpO1xyXG5cdFx0cmV0dXJuIGRpbTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBzcGhlcmVGcm9tKGIpXHJcblx0e1xyXG5cdFx0cmV0dXJuIGIuZ2V0Qm91bmRpbmdTcGhlcmUobmV3IFRIUkVFLlNwaGVyZSgpKTtcclxuXHR9XHJcbn07XHJcblxyXG5jbGFzcyBQb2ludENsb3VkRXB0R2VvbWV0cnlcclxue1xyXG5cdGNvbnN0cnVjdG9yKHVybCwgaW5mbylcclxuXHR7XHJcblx0XHRsZXQgdmVyc2lvbiA9IGluZm8udmVyc2lvbjtcclxuXHRcdGxldCBzY2hlbWEgPSBpbmZvLnNjaGVtYTtcclxuXHRcdGxldCBib3VuZHMgPSBpbmZvLmJvdW5kcztcclxuXHRcdGxldCBib3VuZHNDb25mb3JtaW5nID0gaW5mby5ib3VuZHNDb25mb3JtaW5nO1xyXG5cclxuXHRcdGxldCB4eXogPSBbXHJcblx0XHRcdFV0aWxzLmZpbmREaW0oc2NoZW1hLCBcIlhcIiksXHJcblx0XHRcdFV0aWxzLmZpbmREaW0oc2NoZW1hLCBcIllcIiksXHJcblx0XHRcdFV0aWxzLmZpbmREaW0oc2NoZW1hLCBcIlpcIilcclxuXHRcdF07XHJcblx0XHRsZXQgc2NhbGUgPSB4eXoubWFwKChkKSA9PiBkLnNjYWxlIHx8IDEpO1xyXG5cdFx0bGV0IG9mZnNldCA9IHh5ei5tYXAoKGQpID0+IGQub2Zmc2V0IHx8IDApO1xyXG5cclxuXHRcdHRoaXMuZXB0U2NhbGUgPSBVdGlscy50b1ZlY3RvcjMoc2NhbGUpO1xyXG5cdFx0dGhpcy5lcHRPZmZzZXQgPSBVdGlscy50b1ZlY3RvcjMob2Zmc2V0KTtcclxuXHJcblx0XHR0aGlzLnVybCA9IHVybDtcclxuXHRcdHRoaXMuaW5mbyA9IGluZm87XHJcblx0XHR0aGlzLnR5cGUgPSBcImVwdFwiO1xyXG5cclxuXHRcdHRoaXMuc2NoZW1hID0gc2NoZW1hO1xyXG5cdFx0dGhpcy5zcGFuID0gaW5mby5zcGFuIHx8IGluZm8udGlja3M7XHJcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gVXRpbHMudG9Cb3gzKGJvdW5kcyk7XHJcblx0XHR0aGlzLnRpZ2h0Qm91bmRpbmdCb3ggPSBVdGlscy50b0JveDMoYm91bmRzQ29uZm9ybWluZyk7XHJcblx0XHR0aGlzLm9mZnNldCA9IFV0aWxzLnRvVmVjdG9yMyhbMCwgMCwgMF0pO1xyXG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IFV0aWxzLnNwaGVyZUZyb20odGhpcy5ib3VuZGluZ0JveCk7XHJcblx0XHR0aGlzLnRpZ2h0Qm91bmRpbmdTcGhlcmUgPSBVdGlscy5zcGhlcmVGcm9tKHRoaXMudGlnaHRCb3VuZGluZ0JveCk7XHJcblx0XHR0aGlzLnZlcnNpb24gPSBuZXcgVmVyc2lvblV0aWxzKFwiMS42XCIpO1xyXG5cclxuXHRcdHRoaXMucHJvamVjdGlvbiA9IG51bGw7XHJcblx0XHR0aGlzLmZhbGxiYWNrUHJvamVjdGlvbiA9IG51bGw7XHJcblxyXG5cdFx0aWYoaW5mby5zcnMgJiYgaW5mby5zcnMuaG9yaXpvbnRhbClcclxuXHRcdHtcclxuXHRcdFx0dGhpcy5wcm9qZWN0aW9uID0gaW5mby5zcnMuYXV0aG9yaXR5ICsgXCI6XCIgKyBpbmZvLnNycy5ob3Jpem9udGFsO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmKGluZm8uc3JzLndrdClcclxuXHRcdHtcclxuXHRcdFx0aWYoIXRoaXMucHJvamVjdGlvbikgdGhpcy5wcm9qZWN0aW9uID0gaW5mby5zcnMud2t0O1xyXG5cdFx0XHRlbHNlIHRoaXMuZmFsbGJhY2tQcm9qZWN0aW9uID0gaW5mby5zcnMud2t0O1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMucG9pbnRBdHRyaWJ1dGVzID0gXCJMQVpcIjtcclxuXHRcdHRoaXMuc3BhY2luZyA9XHJcblx0XHRcdCh0aGlzLmJvdW5kaW5nQm94Lm1heC54IC0gdGhpcy5ib3VuZGluZ0JveC5taW4ueCkgLyB0aGlzLnNwYW47XHJcblxyXG5cdFx0bGV0IGhpZXJhcmNoeVR5cGUgPSBpbmZvLmhpZXJhcmNoeVR5cGUgfHwgXCJqc29uXCI7XHJcblxyXG5cdFx0bGV0IGRhdGFUeXBlID0gaW5mby5kYXRhVHlwZSB8fCBcImxhc3ppcFwiO1xyXG5cdFx0dGhpcy5sb2FkZXIgPSBkYXRhVHlwZSA9PSBcImJpbmFyeVwiID8gbmV3IEVwdEJpbmFyeUxvYWRlcigpIDogbmV3IEVwdExhc3ppcExvYWRlcigpO1xyXG5cdH1cclxufTtcclxuXHJcbmNsYXNzIEVwdEtleVxyXG57XHJcblx0Y29uc3RydWN0b3IoZXB0LCBiLCBkLCB4LCB5LCB6KVxyXG5cdHtcclxuXHRcdHRoaXMuZXB0ID0gZXB0O1xyXG5cdFx0dGhpcy5iID0gYjtcclxuXHRcdHRoaXMuZCA9IGQ7XHJcblx0XHR0aGlzLnggPSB4IHx8IDA7XHJcblx0XHR0aGlzLnkgPSB5IHx8IDA7XHJcblx0XHR0aGlzLnogPSB6IHx8IDA7XHJcblx0fVxyXG5cclxuXHRuYW1lKClcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5kICsgXCItXCIgKyB0aGlzLnggKyBcIi1cIiArIHRoaXMueSArIFwiLVwiICsgdGhpcy56O1xyXG5cdH1cclxuXHJcblx0c3RlcChhLCBiLCBjKVxyXG5cdHtcclxuXHRcdGxldCBtaW4gPSB0aGlzLmIubWluLmNsb25lKCk7XHJcblx0XHRsZXQgbWF4ID0gdGhpcy5iLm1heC5jbG9uZSgpO1xyXG5cdFx0bGV0IGRzdCA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuc3ViVmVjdG9ycyhtYXgsIG1pbik7XHJcblxyXG5cdFx0aWYoYSkgbWluLnggKz0gZHN0LnggLyAyO1xyXG5cdFx0ZWxzZSBtYXgueCAtPSBkc3QueCAvIDI7XHJcblxyXG5cdFx0aWYoYikgbWluLnkgKz0gZHN0LnkgLyAyO1xyXG5cdFx0ZWxzZSBtYXgueSAtPSBkc3QueSAvIDI7XHJcblxyXG5cdFx0aWYoYykgbWluLnogKz0gZHN0LnogLyAyO1xyXG5cdFx0ZWxzZSBtYXgueiAtPSBkc3QueiAvIDI7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBFcHRLZXkoXHJcblx0XHRcdFx0dGhpcy5lcHQsXHJcblx0XHRcdFx0bmV3IFRIUkVFLkJveDMobWluLCBtYXgpLFxyXG5cdFx0XHRcdHRoaXMuZCArIDEsXHJcblx0XHRcdFx0dGhpcy54ICogMiArIGEsXHJcblx0XHRcdFx0dGhpcy55ICogMiArIGIsXHJcblx0XHRcdFx0dGhpcy56ICogMiArIGMpO1xyXG5cdH1cclxuXHJcblx0Y2hpbGRyZW4oKVxyXG5cdHtcclxuXHRcdHZhciByZXN1bHQgPSBbXTtcclxuXHRcdGZvciAodmFyIGEgPSAwOyBhIDwgMjsgKythKVxyXG5cdFx0e1xyXG5cdFx0XHRmb3IgKHZhciBiID0gMDsgYiA8IDI7ICsrYilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGZvciAodmFyIGMgPSAwOyBjIDwgMjsgKytjKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciBhZGQgPSB0aGlzLnN0ZXAoYSwgYiwgYykubmFtZSgpO1xyXG5cdFx0XHRcdFx0aWYoIXJlc3VsdC5pbmNsdWRlcyhhZGQpKSByZXN1bHQgPSByZXN1bHQuY29uY2F0KGFkZCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxufVxyXG5cclxuY2xhc3MgUG9pbnRDbG91ZEVwdEdlb21ldHJ5Tm9kZSBleHRlbmRzIFBvaW50Q2xvdWRUcmVlTm9kZVxyXG57XHJcblx0Y29uc3RydWN0b3IoZXB0LCBiLCBkLCB4LCB5LCB6KSB7XHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuZXB0ID0gZXB0O1xyXG5cdFx0dGhpcy5rZXkgPSBuZXcgRXB0S2V5KFxyXG5cdFx0XHRcdHRoaXMuZXB0LFxyXG5cdFx0XHRcdGIgfHwgdGhpcy5lcHQuYm91bmRpbmdCb3gsXHJcblx0XHRcdFx0ZCB8fCAwLFxyXG5cdFx0XHRcdHgsXHJcblx0XHRcdFx0eSxcclxuXHRcdFx0XHR6KTtcclxuXHJcblx0XHR0aGlzLmlkID0gUG9pbnRDbG91ZEVwdEdlb21ldHJ5Tm9kZS5JRENvdW50Kys7XHJcblx0XHR0aGlzLmdlb21ldHJ5ID0gbnVsbDtcclxuXHRcdHRoaXMuYm91bmRpbmdCb3ggPSB0aGlzLmtleS5iO1xyXG5cdFx0dGhpcy50aWdodEJvdW5kaW5nQm94ID0gdGhpcy5ib3VuZGluZ0JveDtcclxuXHRcdHRoaXMuc3BhY2luZyA9IHRoaXMuZXB0LnNwYWNpbmcgLyBNYXRoLnBvdygyLCB0aGlzLmtleS5kKTtcclxuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBVdGlscy5zcGhlcmVGcm9tKHRoaXMuYm91bmRpbmdCb3gpO1xyXG5cclxuXHRcdC8vIFRoZXNlIGFyZSBzZXQgZHVyaW5nIGhpZXJhcmNoeSBsb2FkaW5nLlxyXG5cdFx0dGhpcy5oYXNDaGlsZHJlbiA9IGZhbHNlO1xyXG5cdFx0dGhpcy5jaGlsZHJlbiA9IHsgfTtcclxuXHRcdHRoaXMubnVtUG9pbnRzID0gLTE7XHJcblxyXG5cdFx0dGhpcy5sZXZlbCA9IHRoaXMua2V5LmQ7XHJcblx0XHR0aGlzLmxvYWRlZCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcblx0XHR0aGlzLm9uZVRpbWVEaXNwb3NlSGFuZGxlcnMgPSBbXTtcclxuXHJcblx0XHRsZXQgayA9IHRoaXMua2V5O1xyXG5cdFx0dGhpcy5uYW1lID0gdGhpcy50b1BvdHJlZU5hbWUoay5kLCBrLngsIGsueSwgay56KTtcclxuXHRcdHRoaXMuaW5kZXggPSBwYXJzZUludCh0aGlzLm5hbWUuY2hhckF0KHRoaXMubmFtZS5sZW5ndGggLSAxKSk7XHJcblx0fVxyXG5cclxuXHRpc0dlb21ldHJ5Tm9kZSgpe3JldHVybiB0cnVlO31cclxuXHRnZXRMZXZlbCgpe3JldHVybiB0aGlzLmxldmVsO31cclxuXHRpc1RyZWVOb2RlKCl7cmV0dXJuIGZhbHNlO31cclxuXHRpc0xvYWRlZCgpe3JldHVybiB0aGlzLmxvYWRlZDt9XHJcblx0Z2V0Qm91bmRpbmdTcGhlcmUoKXtyZXR1cm4gdGhpcy5ib3VuZGluZ1NwaGVyZTt9XHJcblx0Z2V0Qm91bmRpbmdCb3goKXtyZXR1cm4gdGhpcy5ib3VuZGluZ0JveDt9XHJcblx0dXJsKCl7cmV0dXJuIHRoaXMuZXB0LnVybCArIFwiZXB0LWRhdGEvXCIgKyB0aGlzLmZpbGVuYW1lKCk7fVxyXG5cdGdldE51bVBvaW50cygpe3JldHVybiB0aGlzLm51bVBvaW50czt9XHJcblx0ZmlsZW5hbWUoKXtyZXR1cm4gdGhpcy5rZXkubmFtZSgpO31cclxuXHJcblx0Z2V0Q2hpbGRyZW4oKVxyXG5cdHtcclxuXHRcdGxldCBjaGlsZHJlbiA9IFtdO1xyXG5cclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgODsgaSsrKSB7XHJcblx0XHRcdGlmKHRoaXMuY2hpbGRyZW5baV0pIHtcclxuXHRcdFx0XHRjaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRyZW5baV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGNoaWxkcmVuO1xyXG5cdH1cclxuXHJcblx0YWRkQ2hpbGQoY2hpbGQpXHJcblx0e1xyXG5cdFx0dGhpcy5jaGlsZHJlbltjaGlsZC5pbmRleF0gPSBjaGlsZDtcclxuXHRcdGNoaWxkLnBhcmVudCA9IHRoaXM7XHJcblx0fVxyXG5cclxuXHRsb2FkKClcclxuXHR7XHJcblx0XHRpZih0aGlzLmxvYWRlZCB8fCB0aGlzLmxvYWRpbmcgfHwgR2xvYmFsLm51bU5vZGVzTG9hZGluZyA+PSBHbG9iYWwubWF4Tm9kZXNMb2FkaW5nKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5sb2FkaW5nID0gdHJ1ZTtcclxuXHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmcrKztcclxuXHJcblx0XHRpZih0aGlzLm51bVBvaW50cyA9PT0gLTEpXHJcblx0XHR7XHJcblx0XHRcdHRoaXMubG9hZEhpZXJhcmNoeSgpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5sb2FkUG9pbnRzKCk7XHJcblx0fVxyXG5cclxuXHRsb2FkUG9pbnRzKClcclxuXHR7XHJcblx0XHR0aGlzLmVwdC5sb2FkZXIubG9hZCh0aGlzKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIGxvYWRIaWVyYXJjaHkoKVxyXG5cdHtcclxuXHRcdGxldCBub2RlcyA9IHsgfTtcclxuXHRcdG5vZGVzW3RoaXMuZmlsZW5hbWUoKV0gPSB0aGlzO1xyXG5cdFx0dGhpcy5oYXNDaGlsZHJlbiA9IGZhbHNlO1xyXG5cclxuXHRcdGxldCBlcHRIaWVyYXJjaHlGaWxlID0gYCR7dGhpcy5lcHQudXJsfWVwdC1oaWVyYXJjaHkvJHt0aGlzLmZpbGVuYW1lKCl9Lmpzb25gO1xyXG5cclxuXHRcdGxldCByZXNwb25zZSA9IGF3YWl0IFhIUkZhY3RvcnkuZmV0Y2goZXB0SGllcmFyY2h5RmlsZSk7XHJcblx0XHRsZXQgaGllciA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHJcblx0XHQvLyBTaW5jZSB3ZSB3YW50IHRvIHRyYXZlcnNlIHRvcC1kb3duLCBhbmQgMTAgY29tZXNcclxuXHRcdC8vIGxleGljb2dyYXBoaWNhbGx5IGJlZm9yZSA5IChmb3IgZXhhbXBsZSksIGRvIGEgZGVlcCBzb3J0LlxyXG5cdFx0dmFyIGtleXMgPSBPYmplY3Qua2V5cyhoaWVyKS5zb3J0KChhLCBiKSA9PiB7XHJcblx0XHRcdGxldCBbZGEsIHhhLCB5YSwgemFdID0gYS5zcGxpdChcIi1cIikubWFwKChuKSA9PiBwYXJzZUludChuLCAxMCkpO1xyXG5cdFx0XHRsZXQgW2RiLCB4YiwgeWIsIHpiXSA9IGIuc3BsaXQoXCItXCIpLm1hcCgobikgPT4gcGFyc2VJbnQobiwgMTApKTtcclxuXHRcdFx0aWYoZGEgPCBkYikgcmV0dXJuIC0xOyBpZihkYSA+IGRiKSByZXR1cm4gMTtcclxuXHRcdFx0aWYoeGEgPCB4YikgcmV0dXJuIC0xOyBpZih4YSA+IHhiKSByZXR1cm4gMTtcclxuXHRcdFx0aWYoeWEgPCB5YikgcmV0dXJuIC0xOyBpZih5YSA+IHliKSByZXR1cm4gMTtcclxuXHRcdFx0aWYoemEgPCB6YikgcmV0dXJuIC0xOyBpZih6YSA+IHpiKSByZXR1cm4gMTtcclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9KTtcclxuXHJcblx0XHRrZXlzLmZvckVhY2goKHYpID0+IHtcclxuXHRcdFx0bGV0IFtkLCB4LCB5LCB6XSA9IHYuc3BsaXQoXCItXCIpLm1hcCgobikgPT4gcGFyc2VJbnQobiwgMTApKTtcclxuXHRcdFx0bGV0IGEgPSB4ICYgMSwgYiA9IHkgJiAxLCBjID0geiAmIDE7XHJcblx0XHRcdGxldCBwYXJlbnROYW1lID1cclxuXHRcdFx0XHQoZCAtIDEpICsgXCItXCIgKyAoeCA+PiAxKSArIFwiLVwiICsgKHkgPj4gMSkgKyBcIi1cIiArICh6ID4+IDEpO1xyXG5cclxuXHRcdFx0bGV0IHBhcmVudE5vZGUgPSBub2Rlc1twYXJlbnROYW1lXTtcclxuXHRcdFx0aWYoIXBhcmVudE5vZGUpIHJldHVybjtcclxuXHRcdFx0cGFyZW50Tm9kZS5oYXNDaGlsZHJlbiA9IHRydWU7XHJcblxyXG5cdFx0XHRsZXQga2V5ID0gcGFyZW50Tm9kZS5rZXkuc3RlcChhLCBiLCBjKTtcclxuXHJcblx0XHRcdGxldCBub2RlID0gbmV3IFBvaW50Q2xvdWRFcHRHZW9tZXRyeU5vZGUoXHJcblx0XHRcdFx0XHR0aGlzLmVwdCxcclxuXHRcdFx0XHRcdGtleS5iLFxyXG5cdFx0XHRcdFx0a2V5LmQsXHJcblx0XHRcdFx0XHRrZXkueCxcclxuXHRcdFx0XHRcdGtleS55LFxyXG5cdFx0XHRcdFx0a2V5LnopO1xyXG5cclxuXHRcdFx0bm9kZS5sZXZlbCA9IGQ7XHJcblx0XHRcdG5vZGUubnVtUG9pbnRzID0gaGllclt2XTtcclxuXHJcblx0XHRcdHBhcmVudE5vZGUuYWRkQ2hpbGQobm9kZSk7XHJcblx0XHRcdG5vZGVzW2tleS5uYW1lKCldID0gbm9kZTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0ZG9uZUxvYWRpbmcoYnVmZmVyR2VvbWV0cnksIHRpZ2h0Qm91bmRpbmdCb3gsIG5wLCBtZWFuKVxyXG5cdHtcclxuXHRcdGJ1ZmZlckdlb21ldHJ5LmJvdW5kaW5nQm94ID0gdGhpcy5ib3VuZGluZ0JveDtcclxuXHRcdHRoaXMuZ2VvbWV0cnkgPSBidWZmZXJHZW9tZXRyeTtcclxuXHRcdHRoaXMudGlnaHRCb3VuZGluZ0JveCA9IHRpZ2h0Qm91bmRpbmdCb3g7XHJcblx0XHR0aGlzLm51bVBvaW50cyA9IG5wO1xyXG5cdFx0dGhpcy5tZWFuID0gbWVhbjtcclxuXHRcdHRoaXMubG9hZGVkID0gdHJ1ZTtcclxuXHRcdHRoaXMubG9hZGluZyA9IGZhbHNlO1xyXG5cdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdH1cclxuXHJcblx0dG9Qb3RyZWVOYW1lKGQsIHgsIHksIHopXHJcblx0e1xyXG5cdFx0dmFyIG5hbWUgPSBcInJcIjtcclxuXHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGQ7ICsraSlcclxuXHRcdHtcclxuXHRcdFx0dmFyIHNoaWZ0ID0gZCAtIGkgLSAxO1xyXG5cdFx0XHR2YXIgbWFzayA9IDEgPDwgc2hpZnQ7XHJcblx0XHRcdHZhciBzdGVwID0gMDtcclxuXHJcblx0XHRcdGlmKHggJiBtYXNrKSBzdGVwICs9IDQ7XHJcblx0XHRcdGlmKHkgJiBtYXNrKSBzdGVwICs9IDI7XHJcblx0XHRcdGlmKHogJiBtYXNrKSBzdGVwICs9IDE7XHJcblxyXG5cdFx0XHRuYW1lICs9IHN0ZXA7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5hbWU7XHJcblx0fVxyXG5cclxuXHRkaXNwb3NlKClcclxuXHR7XHJcblx0XHRpZih0aGlzLmdlb21ldHJ5ICYmIHRoaXMucGFyZW50ICE9IG51bGwpXHJcblx0XHR7XHJcblx0XHRcdHRoaXMuZ2VvbWV0cnkuZGlzcG9zZSgpO1xyXG5cdFx0XHR0aGlzLmdlb21ldHJ5ID0gbnVsbDtcclxuXHRcdFx0dGhpcy5sb2FkZWQgPSBmYWxzZTtcclxuXHJcblx0XHRcdC8vIHRoaXMuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiBcImRpc3Bvc2VcIiB9ICk7XHJcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vbmVUaW1lRGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaSsrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bGV0IGhhbmRsZXIgPSB0aGlzLm9uZVRpbWVEaXNwb3NlSGFuZGxlcnNbaV07XHJcblx0XHRcdFx0aGFuZGxlcigpO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHR0aGlzLm9uZVRpbWVEaXNwb3NlSGFuZGxlcnMgPSBbXTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcblBvaW50Q2xvdWRFcHRHZW9tZXRyeU5vZGUuSURDb3VudCA9IDA7XHJcblxyXG5leHBvcnQge1BvaW50Q2xvdWRFcHRHZW9tZXRyeSwgUG9pbnRDbG91ZEVwdEdlb21ldHJ5Tm9kZSwgRXB0S2V5fTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQge1BvaW50Q2xvdWRFcHRHZW9tZXRyeSwgUG9pbnRDbG91ZEVwdEdlb21ldHJ5Tm9kZX0gZnJvbSBcIi4uL3BvaW50Y2xvdWQvZ2VvbWV0cmllcy9Qb2ludENsb3VkRXB0R2VvbWV0cnkuanNcIjtcclxuaW1wb3J0IHsgWEhSRmFjdG9yeSB9IGZyb20gXCIuLi9YSFJGYWN0b3J5LmpzXCI7XHJcblxyXG4vKipcclxuICogQGF1dGhvciBDb25ub3IgTWFubmluZ1xyXG4gKi9cclxuY2xhc3MgRXB0TG9hZGVyXHJcbntcclxuXHRzdGF0aWMgYXN5bmMgbG9hZChmaWxlLCBjYWxsYmFjaylcclxuXHR7XHJcblx0XHR2YXIgcmVzcG9uc2UgPSBhd2FpdCBYSFJGYWN0b3J5LmZldGNoKGZpbGUpO1xyXG5cdFx0dmFyIGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcblx0XHR2YXIgdXJsID0gZmlsZS5zdWJzdHIoMCwgZmlsZS5sYXN0SW5kZXhPZihcImVwdC5qc29uXCIpKTtcclxuXHJcblx0XHR2YXIgZ2VvbWV0cnkgPSBuZXcgUG9pbnRDbG91ZEVwdEdlb21ldHJ5KHVybCwganNvbik7XHJcblx0XHR2YXIgcm9vdCA9IG5ldyBQb2ludENsb3VkRXB0R2VvbWV0cnlOb2RlKGdlb21ldHJ5KTtcclxuXHRcdGdlb21ldHJ5LnJvb3QgPSByb290O1xyXG5cdFx0Z2VvbWV0cnkucm9vdC5sb2FkKCk7XHJcblxyXG5cdFx0Y2FsbGJhY2soZ2VvbWV0cnkpO1xyXG5cdH1cclxufTtcclxuXHJcbmV4cG9ydCB7RXB0TG9hZGVyfTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmNsYXNzIEhlbHBlclV0aWxzIHtcclxuXHQvKipcclxuXHQgKiBDcmVhdGUgYSBuZXcgZGF0YSB0ZXh0dXJlIHdpdGggYSBzb2xpZCBjb2xvci5cclxuXHQgKi9cclxuXHRzdGF0aWMgZ2VuZXJhdGVEYXRhVGV4dHVyZSh3aWR0aCwgaGVpZ2h0LCBjb2xvcikge1xyXG5cdFx0dmFyIHNpemUgPSB3aWR0aCAqIGhlaWdodDtcclxuXHRcdHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoNCAqIHdpZHRoICogaGVpZ2h0KTtcclxuXHJcblx0XHR2YXIgciA9IE1hdGguZmxvb3IoY29sb3IuciAqIDI1NSk7XHJcblx0XHR2YXIgZyA9IE1hdGguZmxvb3IoY29sb3IuZyAqIDI1NSk7XHJcblx0XHR2YXIgYiA9IE1hdGguZmxvb3IoY29sb3IuYiAqIDI1NSk7XHJcblxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcclxuXHRcdFx0ZGF0YVtpICogM10gPSByO1xyXG5cdFx0XHRkYXRhW2kgKiAzICsgMV0gPSBnO1xyXG5cdFx0XHRkYXRhW2kgKiAzICsgMl0gPSBiO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciB0ZXh0dXJlID0gbmV3IFRIUkVFLkRhdGFUZXh0dXJlKGRhdGEsIHdpZHRoLCBoZWlnaHQsIFRIUkVFLlJHQkFGb3JtYXQpO1xyXG5cdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblx0XHR0ZXh0dXJlLm1hZ0ZpbHRlciA9IFRIUkVFLk5lYXJlc3RGaWx0ZXI7XHJcblxyXG5cdFx0cmV0dXJuIHRleHR1cmU7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogQ29tcHV0ZSBhIHRyYW5zZm9ybWVkIGJvdWRpbmcgYm94IGZyb20gYW4gb3JpZ2luYWwgYm94IGFuZCBhIHRyYW5zZm9ybSBtYXRyaXguXHJcblx0ICovXHJcblx0c3RhdGljIGNvbXB1dGVUcmFuc2Zvcm1lZEJvdW5kaW5nQm94KGJveCwgdHJhbnNmb3JtKSB7XHJcblx0XHR2YXIgdmVydGljZXMgPSBbXHJcblx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKGJveC5taW4ueCwgYm94Lm1pbi55LCBib3gubWluLnopLmFwcGx5TWF0cml4NCh0cmFuc2Zvcm0pLFxyXG5cdFx0XHRuZXcgVEhSRUUuVmVjdG9yMyhib3gubWluLngsIGJveC5taW4ueSwgYm94Lm1pbi56KS5hcHBseU1hdHJpeDQodHJhbnNmb3JtKSxcclxuXHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoYm94Lm1heC54LCBib3gubWluLnksIGJveC5taW4ueikuYXBwbHlNYXRyaXg0KHRyYW5zZm9ybSksXHJcblx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKGJveC5taW4ueCwgYm94Lm1heC55LCBib3gubWluLnopLmFwcGx5TWF0cml4NCh0cmFuc2Zvcm0pLFxyXG5cdFx0XHRuZXcgVEhSRUUuVmVjdG9yMyhib3gubWluLngsIGJveC5taW4ueSwgYm94Lm1heC56KS5hcHBseU1hdHJpeDQodHJhbnNmb3JtKSxcclxuXHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoYm94Lm1pbi54LCBib3gubWF4LnksIGJveC5tYXgueikuYXBwbHlNYXRyaXg0KHRyYW5zZm9ybSksXHJcblx0XHRcdG5ldyBUSFJFRS5WZWN0b3IzKGJveC5tYXgueCwgYm94Lm1heC55LCBib3gubWluLnopLmFwcGx5TWF0cml4NCh0cmFuc2Zvcm0pLFxyXG5cdFx0XHRuZXcgVEhSRUUuVmVjdG9yMyhib3gubWF4LngsIGJveC5taW4ueSwgYm94Lm1heC56KS5hcHBseU1hdHJpeDQodHJhbnNmb3JtKSxcclxuXHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoYm94Lm1heC54LCBib3gubWF4LnksIGJveC5tYXgueikuYXBwbHlNYXRyaXg0KHRyYW5zZm9ybSlcclxuXHRcdF07XHJcblxyXG5cdFx0dmFyIGJvdW5kaW5nQm94ID0gbmV3IFRIUkVFLkJveDMoKTtcclxuXHRcdGJvdW5kaW5nQm94LnNldEZyb21Qb2ludHModmVydGljZXMpO1xyXG5cclxuXHRcdHJldHVybiBib3VuZGluZ0JveDtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIGFuIGFycmF5IG9mIG9iamVjdHMgZGVzY3JpYmluZyBhbGwgb2YgdGhlIHBvaW50cyBjb250YWluZWQgd2l0aGluXHJcblx0ICogdGhlIHNwZWNpZmllZCBub2RlLCBpbmNsdWRpbmcgdGhlaXIgd29ybGQgcG9zaXRpb24gYW5kIGFsbCBhdmFpbGFibGUgYXR0cmlidXRlc1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBub2RlVG9Qb2ludHMobm9kZSwgcGFyYW1zID0ge30pIHtcclxuXHRcdGlmICghbm9kZSkge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRwZXJmb3JtYW5jZS5tYXJrKCdub2RlVG9Qb2ludHMtc3RhcnQnKTtcclxuXHJcblx0XHRjb25zdCB7IGNvdW50IH0gPSBub2RlLmdlb21ldHJ5Tm9kZS5nZW9tZXRyeS5hdHRyaWJ1dGVzLmluZGljZXM7XHJcblx0XHRjb25zdCBwb2ludHMgPSBbXTtcclxuXHJcblx0XHRmb3IgKGxldCBwb2ludEluZGV4ID0gMDsgcG9pbnRJbmRleCA8IGNvdW50OyBwb2ludEluZGV4KyspIHtcclxuXHRcdFx0Y29uc3QgcG9pbnQgPSB0aGlzLm5vZGVUb1BvaW50KG5vZGUsIHBvaW50SW5kZXgsIHBhcmFtcyk7XHJcblx0XHRcdGlmIChwb2ludCkge1xyXG5cdFx0XHRcdHBvaW50cy5wdXNoKHBvaW50KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHBlcmZvcm1hbmNlLm1lYXN1cmUoJ25vZGVUb1BvaW50cycsICdub2RlVG9Qb2ludHMtc3RhcnQnKTtcclxuXHJcblx0XHRyZXR1cm4gcG9pbnRzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmV0dXJucyBhbiBvYmplY3QgZGVzY3JpYmluZyB0aGUgcG9pbnQgd2l0aGluIHRoZSBub2RlIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXgsXHJcblx0ICogaW5jbHVkaW5nIGl0cyB3b3JsZCBwb3NpdGlvbiBhbmQgYWxsIGF2YWlsYWJsZSBhdHRyaWJ1dGVzXHJcblx0ICovXHJcblx0c3RhdGljIG5vZGVUb1BvaW50KG5vZGUsIHBvaW50SW5kZXggPSAwLCBwYXJhbXMgPSB7fSkge1xyXG5cdFx0aWYgKCFub2RlKSB7XHJcblx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0fVxyXG5cclxuXHRcdHBlcmZvcm1hbmNlLm1hcmsoJ25vZGVUb1BvaW50LXN0YXJ0Jyk7XHJcblxyXG5cdFx0Y29uc3QgYXR0cmlidXRlcyA9IG5ldyBNYXAoT2JqZWN0LmVudHJpZXMobm9kZS5nZW9tZXRyeU5vZGUuZ2VvbWV0cnkuYXR0cmlidXRlcykpO1xyXG5cdFx0Y29uc3QgcG9pbnQgPSB7fTtcclxuXHJcblx0XHRmb3IgKGNvbnN0IFthdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVdIG9mIGF0dHJpYnV0ZXMpIHtcclxuXHRcdFx0bGV0IHZhbHVlO1xyXG5cclxuXHRcdFx0c3dpdGNoIChhdHRyaWJ1dGVOYW1lKSB7XHJcblx0XHRcdFx0Y2FzZSAncG9zaXRpb24nOiB7XHJcblx0XHRcdFx0XHRsZXQgeCA9IGF0dHJpYnV0ZS5hcnJheVszICogcG9pbnRJbmRleCArIDBdO1xyXG5cdFx0XHRcdFx0bGV0IHkgPSBhdHRyaWJ1dGUuYXJyYXlbMyAqIHBvaW50SW5kZXggKyAxXTtcclxuXHRcdFx0XHRcdGxldCB6ID0gYXR0cmlidXRlLmFycmF5WzMgKiBwb2ludEluZGV4ICsgMl07XHJcblx0XHRcdFx0XHR2YWx1ZSA9IG5ldyBUSFJFRS5WZWN0b3IzKHgsIHksIHopO1xyXG5cdFx0XHRcdFx0dmFsdWUuYXBwbHlNYXRyaXg0KG5vZGUuc2NlbmVOb2RlLm1hdHJpeFdvcmxkKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Y2FzZSAnaW5kaWNlcyc6IHtcclxuXHRcdFx0XHRcdC8vIElnbm9yZWRcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0ZGVmYXVsdDoge1xyXG5cdFx0XHRcdFx0bGV0IHZhbHVlcyA9IGF0dHJpYnV0ZS5hcnJheS5zbGljZShhdHRyaWJ1dGUuaXRlbVNpemUgKiBwb2ludEluZGV4LCBhdHRyaWJ1dGUuaXRlbVNpemUgKiAocG9pbnRJbmRleCArIDEpKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoYXR0cmlidXRlLnBvdHJlZSkge1xyXG5cdFx0XHRcdFx0XHRjb25zdCB7IHNjYWxlLCBvZmZzZXQgfSA9IGF0dHJpYnV0ZS5wb3RyZWU7XHJcblx0XHRcdFx0XHRcdHZhbHVlcyA9IHZhbHVlcy5tYXAodiA9PiB2IC8gc2NhbGUgKyBvZmZzZXQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdHN3aXRjaCAoYXR0cmlidXRlTmFtZSkge1xyXG5cdFx0XHRcdFx0XHRjYXNlICdjb2xvcic6XHJcblx0XHRcdFx0XHRcdFx0Y29uc3QgcmdiID0gWy4uLnZhbHVlc10ubWFwKHYgPT4gdiAvIDI1NSk7XHJcblx0XHRcdFx0XHRcdFx0dmFsdWUgPSBuZXcgQ29sb3IoLi4ucmdiKTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlcy5sZW5ndGggPT09IDEgPyB2YWx1ZXNbMF0gOiB2YWx1ZXM7XHJcblx0XHRcdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHBhcmFtcy5hdHRyaWJ1dGVGaWx0ZXIgJiYgIXBhcmFtcy5hdHRyaWJ1dGVGaWx0ZXIoYXR0cmlidXRlTmFtZSwgdmFsdWUpKSB7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHBvaW50W2F0dHJpYnV0ZU5hbWVdID0gdmFsdWU7XHJcblx0XHR9XHJcblxyXG5cdFx0cGVyZm9ybWFuY2UubWVhc3VyZSgnbm9kZVRvUG9pbnQnLCAnbm9kZVRvUG9pbnQtc3RhcnQnKTtcclxuXHJcblx0XHRyZXR1cm4gcG9pbnQ7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIGFuIG9iamVjdCBkZXNjcmliaW5nIHRoZSBuZWFyZXJzIHBvaW50IHRvIHRoZSBzZWxlY3RlZCBJbnRlcnNlY3Rpb24sXHJcblx0ICogaW5jbHVkaW5nIGl0J3Mgd29ybGQgcG9zaXRpb24gYW5kIGFsbCBhdmFpbGFibGUgYXR0cmlidXRlc1xyXG5cdCAqXHJcblx0ICogQHBhcmFtIHtUSFJFRS5JbnRlcnNlY3Rpb259IGludGVyc2VjdGlvblxyXG5cdCAqIEByZXR1cm5zXHJcblx0ICovXHJcblx0c3RhdGljIGludGVyc2VjdGlvblRvUG9pbnQoaW50ZXJzZWN0aW9uKSB7XHJcblx0XHRpZiAoIWludGVyc2VjdGlvbikge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRwZXJmb3JtYW5jZS5tYXJrKCdpbnRlcnNlY3Rpb25Ub1BvaW50LXN0YXJ0Jyk7XHJcblxyXG5cdFx0Y29uc3Qgbm9kZSA9IHtcclxuXHRcdFx0Z2VvbWV0cnlOb2RlOiB7XHJcblx0XHRcdFx0Z2VvbWV0cnk6IGludGVyc2VjdGlvbi5vYmplY3QuZ2VvbWV0cnlcclxuXHRcdFx0fSxcclxuXHRcdFx0c2NlbmVOb2RlOiBpbnRlcnNlY3Rpb24ub2JqZWN0LFxyXG5cdFx0fTtcclxuXHJcblx0XHRjb25zdCBwb2ludHMgPSBbXTtcclxuXHRcdGNvbnN0IHsgY291bnQgfSA9IGludGVyc2VjdGlvbi5vYmplY3QuZ2VvbWV0cnkuYXR0cmlidXRlcy5pbmRpY2VzO1xyXG5cclxuXHRcdGZvciAobGV0IHBvaW50SW5kZXggPSAwOyBwb2ludEluZGV4IDwgY291bnQ7IHBvaW50SW5kZXgrKykge1xyXG5cdFx0XHRjb25zdCBwb2ludCA9IHRoaXMubm9kZVRvUG9pbnQobm9kZSwgcG9pbnRJbmRleCk7XHJcblx0XHRcdHBvaW50cy5wdXNoKHBvaW50KTtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgZGlzdGFuY2UgPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG5cdFx0bGV0IGluZGV4ID0gMDtcclxuXHJcblx0XHRwb2ludHMuZm9yRWFjaCgocG9pbnQsIGkpID0+IHtcclxuXHRcdFx0Y29uc3QgZCA9IGludGVyc2VjdGlvbi5wb2ludC5kaXN0YW5jZVRvKHBvaW50LnBvc2l0aW9uKTtcclxuXHRcdFx0aWYgKGQgPCBkaXN0YW5jZSkge1xyXG5cdFx0XHRcdGRpc3RhbmNlID0gZDtcclxuXHRcdFx0XHRpbmRleCA9IGk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHBlcmZvcm1hbmNlLm1lYXN1cmUoJ2ludGVyc2VjdGlvblRvUG9pbnQnLCAnaW50ZXJzZWN0aW9uVG9Qb2ludC1zdGFydCcpO1xyXG5cclxuXHRcdHJldHVybiBwb2ludHNbaW5kZXhdO1xyXG5cdH1cclxuXHJcbn07XHJcblxyXG5leHBvcnQgeyBIZWxwZXJVdGlscyB9OyIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxuLy9cclxuLy90byBnZXQgYSByZWFkeSB0byB1c2UgZ3JhZGllbnQgYXJyYXkgZnJvbSBhIGNocm9tYS5qcyBncmFkaWVudDpcclxuLy9odHRwOi8vZ2thLmdpdGh1Yi5pby9jaHJvbWEuanMvXHJcbi8vXHJcbi8vdmFyIHN0b3BzID0gW107XHJcbi8vZm9yKHZhciBpID0gMDsgaSA8PSAxMDsgaSsrKXtcclxuLy9cdHZhciByYW5nZSA9IGNocm9tYS5zY2FsZShbXCJ5ZWxsb3dcIiwgXCJuYXZ5XCJdKS5tb2RlKFwibGNoXCIpLmRvbWFpbihbMTAsMF0pKGkpLl9yZ2JcclxuLy9cdFx0LnNsaWNlKDAsIDMpXHJcbi8vXHRcdC5tYXAodiA9PiAodiAvIDI1NSkudG9GaXhlZCg0KSlcclxuLy9cdFx0LmpvaW4oXCIsIFwiKTtcclxuLy9cclxuLy9cdHZhciBsaW5lID0gYFske2kgLyAxMH0sIG5ldyBUSFJFRS5Db2xvcigke3JhbmdlfSldLGA7XHJcbi8vXHJcbi8vXHRzdG9wcy5wdXNoKGxpbmUpO1xyXG4vL31cclxuLy9zdG9wcy5qb2luKFwiXFxuXCIpO1xyXG5cclxuLy90byBnZXQgYSByZWFkeSB0byB1c2UgZ3JhZGllbnQgYXJyYXkgZnJvbSBtYXRwbG90bGliOlxyXG4vL2ltcG9ydCBtYXRwbG90bGliLnB5cGxvdCBhcyBwbHRcclxuLy9pbXBvcnQgbWF0cGxvdGxpYi5jb2xvcnMgYXMgY29sb3JzXHJcbi8vXHJcbi8vbm9ybSA9IGNvbG9ycy5Ob3JtYWxpemUodm1pbj0wLHZtYXg9MSlcclxuLy9jbWFwID0gcGx0LmNtLnZpcmlkaXNcclxuLy9cclxuLy9mb3IgaSBpbiByYW5nZSgwLDExKTpcclxuLy8gICB1ID0gaSAvIDEwXHJcbi8vICAgcmdiID0gY21hcChub3JtKHUpKVswOjNdXHJcbi8vICAgcmdiID0gW1wiezA6LjNmfVwiLmZvcm1hdCh2KSBmb3IgdiBpbiByZ2JdXHJcbi8vICAgcmdiID0gXCJbXCIgKyBzdHIodSkgKyBcIiwgbmV3IFRIUkVFLkNvbG9yKFwiICsgIFwiLCBcIi5qb2luKHJnYikgKyBcIildLFwiXHJcbi8vICAgcHJpbnQocmdiKVxyXG5cclxudmFyIEdyYWRpZW50cyA9IHtcclxuXHRSQUlOQk9XOiBbXHJcblx0XHRbMCwgbmV3IFRIUkVFLkNvbG9yKDAuMjc4LCAwLCAwLjcxNCldLFxyXG5cdFx0WzEgLyA2LCBuZXcgVEhSRUUuQ29sb3IoMCwgMCwgMSldLFxyXG5cdFx0WzIgLyA2LCBuZXcgVEhSRUUuQ29sb3IoMCwgMSwgMSldLFxyXG5cdFx0WzMgLyA2LCBuZXcgVEhSRUUuQ29sb3IoMCwgMSwgMCldLFxyXG5cdFx0WzQgLyA2LCBuZXcgVEhSRUUuQ29sb3IoMSwgMSwgMCldLFxyXG5cdFx0WzUgLyA2LCBuZXcgVEhSRUUuQ29sb3IoMSwgMC42NCwgMCldLFxyXG5cdFx0WzEsIG5ldyBUSFJFRS5Db2xvcigxLCAwLCAwKV1cclxuXHRdLFxyXG5cdC8vRnJvbSBjaHJvbWEgc3BlY3RyYWwgaHR0cDovL2drYS5naXRodWIuaW8vY2hyb21hLmpzL1xyXG5cdFNQRUNUUkFMOiBbXHJcblx0XHRbMCwgbmV3IFRIUkVFLkNvbG9yKDAuMzY4NiwgMC4zMDk4LCAwLjYzNTMpXSxcclxuXHRcdFswLjEsIG5ldyBUSFJFRS5Db2xvcigwLjE5NjEsIDAuNTMzMywgMC43NDEyKV0sXHJcblx0XHRbMC4yLCBuZXcgVEhSRUUuQ29sb3IoMC40MDAwLCAwLjc2MDgsIDAuNjQ3MSldLFxyXG5cdFx0WzAuMywgbmV3IFRIUkVFLkNvbG9yKDAuNjcwNiwgMC44NjY3LCAwLjY0MzEpXSxcclxuXHRcdFswLjQsIG5ldyBUSFJFRS5Db2xvcigwLjkwMjAsIDAuOTYwOCwgMC41OTYxKV0sXHJcblx0XHRbMC41LCBuZXcgVEhSRUUuQ29sb3IoMS4wMDAwLCAxLjAwMDAsIDAuNzQ5MCldLFxyXG5cdFx0WzAuNiwgbmV3IFRIUkVFLkNvbG9yKDAuOTk2MSwgMC44Nzg0LCAwLjU0NTEpXSxcclxuXHRcdFswLjcsIG5ldyBUSFJFRS5Db2xvcigwLjk5MjIsIDAuNjgyNCwgMC4zODA0KV0sXHJcblx0XHRbMC44LCBuZXcgVEhSRUUuQ29sb3IoMC45NTY5LCAwLjQyNzUsIDAuMjYyNyldLFxyXG5cdFx0WzAuOSwgbmV3IFRIUkVFLkNvbG9yKDAuODM1MywgMC4yNDMxLCAwLjMwOTgpXSxcclxuXHRcdFsxLCBuZXcgVEhSRUUuQ29sb3IoMC42MTk2LCAwLjAwMzksIDAuMjU4OCldXHJcblx0XSxcclxuXHRQTEFTTUE6IFtcclxuXHRcdFswLjAsIG5ldyBUSFJFRS5Db2xvcigwLjI0MSwgMC4wMTUsIDAuNjEwKV0sXHJcblx0XHRbMC4xLCBuZXcgVEhSRUUuQ29sb3IoMC4zODcsIDAuMDAxLCAwLjY1NCldLFxyXG5cdFx0WzAuMiwgbmV3IFRIUkVFLkNvbG9yKDAuNTI0LCAwLjAyNSwgMC42NTMpXSxcclxuXHRcdFswLjMsIG5ldyBUSFJFRS5Db2xvcigwLjY1MSwgMC4xMjUsIDAuNTk2KV0sXHJcblx0XHRbMC40LCBuZXcgVEhSRUUuQ29sb3IoMC43NTIsIDAuMjI3LCAwLjUxMyldLFxyXG5cdFx0WzAuNSwgbmV3IFRIUkVFLkNvbG9yKDAuODM3LCAwLjMyOSwgMC40MzEpXSxcclxuXHRcdFswLjYsIG5ldyBUSFJFRS5Db2xvcigwLjkwNywgMC40MzUsIDAuMzUzKV0sXHJcblx0XHRbMC43LCBuZXcgVEhSRUUuQ29sb3IoMC45NjMsIDAuNTU0LCAwLjI3MildLFxyXG5cdFx0WzAuOCwgbmV3IFRIUkVFLkNvbG9yKDAuOTkyLCAwLjY4MSwgMC4xOTUpXSxcclxuXHRcdFswLjksIG5ldyBUSFJFRS5Db2xvcigwLjk4NywgMC44MjIsIDAuMTQ0KV0sXHJcblx0XHRbMS4wLCBuZXcgVEhSRUUuQ29sb3IoMC45NDAsIDAuOTc1LCAwLjEzMSldXHJcblx0XSxcclxuXHRZRUxMT1dfR1JFRU46IFtcclxuXHRcdFswLCBuZXcgVEhSRUUuQ29sb3IoMC4xNjQ3LCAwLjI4MjQsIDAuMzQ1MSldLFxyXG5cdFx0WzAuMSwgbmV3IFRIUkVFLkNvbG9yKDAuMTMzOCwgMC4zNTU1LCAwLjQyMjcpXSxcclxuXHRcdFswLjIsIG5ldyBUSFJFRS5Db2xvcigwLjA2MTAsIDAuNDMxOSwgMC40ODY0KV0sXHJcblx0XHRbMC4zLCBuZXcgVEhSRUUuQ29sb3IoMC4wMDAwLCAwLjUwOTksIDAuNTMxOSldLFxyXG5cdFx0WzAuNCwgbmV3IFRIUkVFLkNvbG9yKDAuMDAwMCwgMC41ODgxLCAwLjU1NjkpXSxcclxuXHRcdFswLjUsIG5ldyBUSFJFRS5Db2xvcigwLjEzNzAsIDAuNjY1MCwgMC41NjE0KV0sXHJcblx0XHRbMC42LCBuZXcgVEhSRUUuQ29sb3IoMC4yOTA2LCAwLjczOTUsIDAuNTQ3NyldLFxyXG5cdFx0WzAuNywgbmV3IFRIUkVFLkNvbG9yKDAuNDQ1MywgMC44MDk5LCAwLjUyMDEpXSxcclxuXHRcdFswLjgsIG5ldyBUSFJFRS5Db2xvcigwLjYxMDIsIDAuODc0OCwgMC40ODUwKV0sXHJcblx0XHRbMC45LCBuZXcgVEhSRUUuQ29sb3IoMC43ODgzLCAwLjkzMjMsIDAuNDUxNCldLFxyXG5cdFx0WzEsIG5ldyBUSFJFRS5Db2xvcigwLjk4MDQsIDAuOTgwNCwgMC40MzE0KV1cclxuXHRdLFxyXG5cdFZJUklESVM6IFtcclxuXHRcdFswLjAsIG5ldyBUSFJFRS5Db2xvcigwLjI2NywgMC4wMDUsIDAuMzI5KV0sXHJcblx0XHRbMC4xLCBuZXcgVEhSRUUuQ29sb3IoMC4yODMsIDAuMTQxLCAwLjQ1OCldLFxyXG5cdFx0WzAuMiwgbmV3IFRIUkVFLkNvbG9yKDAuMjU0LCAwLjI2NSwgMC41MzApXSxcclxuXHRcdFswLjMsIG5ldyBUSFJFRS5Db2xvcigwLjIwNywgMC4zNzIsIDAuNTUzKV0sXHJcblx0XHRbMC40LCBuZXcgVEhSRUUuQ29sb3IoMC4xNjQsIDAuNDcxLCAwLjU1OCldLFxyXG5cdFx0WzAuNSwgbmV3IFRIUkVFLkNvbG9yKDAuMTI4LCAwLjU2NywgMC41NTEpXSxcclxuXHRcdFswLjYsIG5ldyBUSFJFRS5Db2xvcigwLjEzNSwgMC42NTksIDAuNTE4KV0sXHJcblx0XHRbMC43LCBuZXcgVEhSRUUuQ29sb3IoMC4yNjcsIDAuNzQ5LCAwLjQ0MSldLFxyXG5cdFx0WzAuOCwgbmV3IFRIUkVFLkNvbG9yKDAuNDc4LCAwLjgyMSwgMC4zMTgpXSxcclxuXHRcdFswLjksIG5ldyBUSFJFRS5Db2xvcigwLjc0MSwgMC44NzMsIDAuMTUwKV0sXHJcblx0XHRbMS4wLCBuZXcgVEhSRUUuQ29sb3IoMC45OTMsIDAuOTA2LCAwLjE0NCldXHJcblx0XSxcclxuXHRJTkZFUk5POiBbXHJcblx0XHRbMC4wLCBuZXcgVEhSRUUuQ29sb3IoMC4wNzcsIDAuMDQyLCAwLjIwNildLFxyXG5cdFx0WzAuMSwgbmV3IFRIUkVFLkNvbG9yKDAuMjI1LCAwLjAzNiwgMC4zODgpXSxcclxuXHRcdFswLjIsIG5ldyBUSFJFRS5Db2xvcigwLjM3MywgMC4wNzQsIDAuNDMyKV0sXHJcblx0XHRbMC4zLCBuZXcgVEhSRUUuQ29sb3IoMC41MjIsIDAuMTI4LCAwLjQyMCldLFxyXG5cdFx0WzAuNCwgbmV3IFRIUkVFLkNvbG9yKDAuNjY1LCAwLjE4MiwgMC4zNzApXSxcclxuXHRcdFswLjUsIG5ldyBUSFJFRS5Db2xvcigwLjc5NywgMC4yNTUsIDAuMjg3KV0sXHJcblx0XHRbMC42LCBuZXcgVEhSRUUuQ29sb3IoMC45MDIsIDAuMzY0LCAwLjE4NCldLFxyXG5cdFx0WzAuNywgbmV3IFRIUkVFLkNvbG9yKDAuOTY5LCAwLjUxNiwgMC4wNjMpXSxcclxuXHRcdFswLjgsIG5ldyBUSFJFRS5Db2xvcigwLjk4OCwgMC42ODMsIDAuMDcyKV0sXHJcblx0XHRbMC45LCBuZXcgVEhSRUUuQ29sb3IoMC45NjEsIDAuODU5LCAwLjI5OCldLFxyXG5cdFx0WzEuMCwgbmV3IFRIUkVFLkNvbG9yKDAuOTg4LCAwLjk5OCwgMC42NDUpXVxyXG5cdF0sXHJcblx0R1JBWVNDQUxFOiBbXHJcblx0XHRbMCwgbmV3IFRIUkVFLkNvbG9yKDAsIDAsIDApXSxcclxuXHRcdFsxLCBuZXcgVEhSRUUuQ29sb3IoMSwgMSwgMSldXHJcblx0XVxyXG59O1xyXG5cclxuZXhwb3J0IHtHcmFkaWVudHN9O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmNvbnN0IGdsc2wgPSBzdHJpbmdzID0+IHN0cmluZ3MucmF3WzBdO1xyXG5cclxudmFyIFNoYWRlcnMgPSB7fTtcclxuXHJcbi8vcG9pbnRjbG91ZC52c1xyXG5TaGFkZXJzLnZlcnRleCA9IGdsc2xgXHJcbnByZWNpc2lvbiBoaWdocCBmbG9hdDtcclxucHJlY2lzaW9uIGhpZ2hwIGludDtcclxuXHJcbiNkZWZpbmUgTUFYX0NMSVBfUE9MWUdPTlMgOFxyXG5cclxuYCArIFRIUkVFLlNoYWRlckNodW5rLmNvbW1vbiArIGBcclxuYCArIFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4ICsgZ2xzbGBcclxuXHJcbmF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xyXG5hdHRyaWJ1dGUgdmVjMyBjb2xvcjtcclxuYXR0cmlidXRlIGZsb2F0IGludGVuc2l0eTtcclxuYXR0cmlidXRlIGZsb2F0IGNsYXNzaWZpY2F0aW9uO1xyXG5hdHRyaWJ1dGUgZmxvYXQgcmV0dXJuTnVtYmVyO1xyXG5hdHRyaWJ1dGUgZmxvYXQgbnVtYmVyT2ZSZXR1cm5zO1xyXG5hdHRyaWJ1dGUgZmxvYXQgcG9pbnRTb3VyY2VJRDtcclxuYXR0cmlidXRlIHZlYzQgaW5kaWNlcztcclxuYXR0cmlidXRlIGZsb2F0IHNwYWNpbmc7XHJcblxyXG51bmlmb3JtIG1hdDQgbW9kZWxNYXRyaXg7XHJcbnVuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7XHJcbnVuaWZvcm0gbWF0NCBwcm9qZWN0aW9uTWF0cml4O1xyXG51bmlmb3JtIG1hdDQgdmlld01hdHJpeDtcclxudW5pZm9ybSBtYXQ0IHVWaWV3SW52O1xyXG5cclxudW5pZm9ybSBmbG9hdCB1U2NyZWVuV2lkdGg7XHJcbnVuaWZvcm0gZmxvYXQgdVNjcmVlbkhlaWdodDtcclxuLy8gI2RlZmluZSB1U2NyZWVuV2lkdGggMTEwNy4wXHJcbi8vICNkZWZpbmUgdVNjcmVlbkhlaWdodCA3NzQuMFxyXG5cclxudW5pZm9ybSBmbG9hdCBmb3Y7XHJcbnVuaWZvcm0gZmxvYXQgbmVhcjtcclxudW5pZm9ybSBmbG9hdCBmYXI7XHJcblxyXG51bmlmb3JtIGJvb2wgdURlYnVnO1xyXG5cclxudW5pZm9ybSBib29sIHVVc2VPcnRob2dyYXBoaWNDYW1lcmE7XHJcbnVuaWZvcm0gZmxvYXQgdU9ydGhvV2lkdGg7XHJcbnVuaWZvcm0gZmxvYXQgdU9ydGhvSGVpZ2h0O1xyXG5cclxuI2RlZmluZSBDTElQVEFTS19OT05FIDBcclxuI2RlZmluZSBDTElQVEFTS19ISUdITElHSFQgMVxyXG4jZGVmaW5lIENMSVBUQVNLX1NIT1dfSU5TSURFIDJcclxuI2RlZmluZSBDTElQVEFTS19TSE9XX09VVFNJREUgM1xyXG5cclxuI2RlZmluZSBDTElQTUVUSE9EX0lOU0lERV9BTlkgMFxyXG4jZGVmaW5lIENMSVBNRVRIT0RfSU5TSURFX0FMTCAxXHJcblxyXG51bmlmb3JtIGludCBjbGlwVGFzaztcclxudW5pZm9ybSBpbnQgY2xpcE1ldGhvZDtcclxuXHJcbiNpZiBkZWZpbmVkKG51bV9jbGlwYm94ZXMpICYmIG51bV9jbGlwYm94ZXMgPiAwXHJcblx0dW5pZm9ybSBtYXQ0IGNsaXBCb3hlc1tudW1fY2xpcGJveGVzXTtcclxuI2VuZGlmXHJcblxyXG4jaWYgZGVmaW5lZChudW1fY2xpcHNwaGVyZXMpICYmIG51bV9jbGlwc3BoZXJlcyA+IDBcclxuXHR1bmlmb3JtIG1hdDQgdUNsaXBTcGhlcmVzW251bV9jbGlwc3BoZXJlc107XHJcbiNlbmRpZlxyXG5cclxuI2lmIGRlZmluZWQobnVtX2NsaXBwb2x5Z29ucykgJiYgbnVtX2NsaXBwb2x5Z29ucyA+IDBcclxuXHR1bmlmb3JtIGludCB1Q2xpcFBvbHlnb25WQ291bnRbbnVtX2NsaXBwb2x5Z29uc107XHJcblx0dW5pZm9ybSB2ZWMzIHVDbGlwUG9seWdvblZlcnRpY2VzW251bV9jbGlwcG9seWdvbnMgKiA4XTtcclxuXHR1bmlmb3JtIG1hdDQgdUNsaXBQb2x5Z29uV1ZQW251bV9jbGlwcG9seWdvbnNdO1xyXG4jZW5kaWZcclxuXHJcbnVuaWZvcm0gZmxvYXQgc2l6ZTtcclxudW5pZm9ybSBmbG9hdCBtaW5TaXplO1xyXG51bmlmb3JtIGZsb2F0IG1heFNpemU7XHJcblxyXG51bmlmb3JtIGZsb2F0IHVQQ0luZGV4O1xyXG51bmlmb3JtIGZsb2F0IHVPY3RyZWVTcGFjaW5nO1xyXG51bmlmb3JtIGZsb2F0IHVOb2RlU3BhY2luZztcclxudW5pZm9ybSBmbG9hdCB1T2N0cmVlU2l6ZTtcclxudW5pZm9ybSB2ZWMzIHVCQlNpemU7XHJcbnVuaWZvcm0gZmxvYXQgdUxldmVsO1xyXG51bmlmb3JtIGZsb2F0IHVWTlN0YXJ0O1xyXG51bmlmb3JtIGJvb2wgdUlzTGVhZk5vZGU7XHJcblxyXG51bmlmb3JtIHZlYzMgdUNvbG9yO1xyXG51bmlmb3JtIGZsb2F0IHVPcGFjaXR5O1xyXG5cclxudW5pZm9ybSB2ZWMyIGVsZXZhdGlvblJhbmdlO1xyXG51bmlmb3JtIHZlYzIgaW50ZW5zaXR5UmFuZ2U7XHJcbnVuaWZvcm0gZmxvYXQgaW50ZW5zaXR5R2FtbWE7XHJcbnVuaWZvcm0gZmxvYXQgaW50ZW5zaXR5Q29udHJhc3Q7XHJcbnVuaWZvcm0gZmxvYXQgaW50ZW5zaXR5QnJpZ2h0bmVzcztcclxudW5pZm9ybSBmbG9hdCByZ2JHYW1tYTtcclxudW5pZm9ybSBmbG9hdCByZ2JDb250cmFzdDtcclxudW5pZm9ybSBmbG9hdCByZ2JCcmlnaHRuZXNzO1xyXG51bmlmb3JtIGZsb2F0IHVUcmFuc2l0aW9uO1xyXG51bmlmb3JtIGZsb2F0IHdSR0I7XHJcbnVuaWZvcm0gZmxvYXQgd0ludGVuc2l0eTtcclxudW5pZm9ybSBmbG9hdCB3RWxldmF0aW9uO1xyXG51bmlmb3JtIGZsb2F0IHdDbGFzc2lmaWNhdGlvbjtcclxudW5pZm9ybSBmbG9hdCB3UmV0dXJuTnVtYmVyO1xyXG51bmlmb3JtIGZsb2F0IHdTb3VyY2VJRDtcclxuXHJcbnVuaWZvcm0gdmVjMyB1U2hhZG93Q29sb3I7XHJcblxyXG51bmlmb3JtIHNhbXBsZXIyRCB2aXNpYmxlTm9kZXM7XHJcbnVuaWZvcm0gc2FtcGxlcjJEIGdyYWRpZW50O1xyXG51bmlmb3JtIHNhbXBsZXIyRCBjbGFzc2lmaWNhdGlvbkxVVDtcclxuXHJcbiNpZiBkZWZpbmVkKG51bV9jbGlwcGxhbmVzKSAmJiBudW1fY2xpcHBsYW5lcyA+IDAgXHJcblxyXG51bmlmb3JtIHZlYzQgY2xpcFBsYW5lc1tudW1fY2xpcHBsYW5lc107XHJcblxyXG5ib29sIGlzQ2xpcHBlZCh2ZWMzIHBvaW50KSB7XHJcblx0Ym9vbCBjbGlwcGVkID0gZmFsc2U7XHJcblx0Zm9yIChpbnQgaSA9IDA7IGkgPCBudW1fY2xpcHBsYW5lczsgKytpKSB7XHJcblx0XHR2ZWM0IHAgPSBjbGlwUGxhbmVzW2ldO1xyXG5cdFx0Y2xpcHBlZCA9IGNsaXBwZWQgfHwgZG90KC1wb2ludCwgcC54eXopID4gcC53O1xyXG5cdH1cclxuXHRyZXR1cm4gY2xpcHBlZDtcclxufVxyXG5cclxuI2Vsc2VcclxuXHJcbmJvb2wgaXNDbGlwcGVkKHZlYzMgcG9pbnQpIHtcclxuXHRyZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbiNlbmRpZlxyXG5cclxuI2lmIGRlZmluZWQobnVtX3NoYWRvd21hcHMpICYmIG51bV9zaGFkb3dtYXBzID4gMFxyXG5cdHVuaWZvcm0gc2FtcGxlcjJEIHVTaGFkb3dNYXBbbnVtX3NoYWRvd21hcHNdO1xyXG5cdHVuaWZvcm0gbWF0NCB1U2hhZG93V29ybGRWaWV3W251bV9zaGFkb3dtYXBzXTtcclxuXHR1bmlmb3JtIG1hdDQgdVNoYWRvd1Byb2pbbnVtX3NoYWRvd21hcHNdO1xyXG4jZW5kaWZcclxuXHJcbiNpZiBkZWZpbmVkIG51bV9oaWRkZW5jbGFzc2lmaWNhdGlvbnMgJiYgbnVtX2hpZGRlbmNsYXNzaWZpY2F0aW9ucyA+IDBcclxuXHR1bmlmb3JtIGZsb2F0IGhpZGRlbkNsYXNzaWZpY2F0aW9uc1tudW1faGlkZGVuY2xhc3NpZmljYXRpb25zXTtcclxuI2VuZGlmXHJcblxyXG4jaWYgZGVmaW5lZCBudW1faGlkZGVucG9pbnRzb3VyY2VpZHMgJiYgbnVtX2hpZGRlbnBvaW50c291cmNlaWRzID4gMFxyXG4gIHVuaWZvcm0gc2FtcGxlcjJEIGhpZGRlblBvaW50U291cmNlSURzO1xyXG4jZW5kaWZcclxuXHJcbnVuaWZvcm0gZmxvYXQgc2VsZWN0ZWRQb2ludFNvdXJjZUlEO1xyXG51bmlmb3JtIHZlYzMgc2VsZWN0ZWRQb2ludFNvdXJjZUlEQ29sb3I7XHJcblxyXG52YXJ5aW5nIHZlYzMgdkNvbG9yO1xyXG52YXJ5aW5nIGZsb2F0IHZMb2dEZXB0aDtcclxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XHJcbnZhcnlpbmcgZmxvYXQgdlJhZGl1cztcclxudmFyeWluZyBmbG9hdCB2UG9pbnRTaXplO1xyXG5cclxuZmxvYXQgcm91bmQoZmxvYXQgbnVtYmVyKVxyXG57XHJcblx0cmV0dXJuIGZsb29yKG51bWJlciArIDAuNSk7XHJcbn1cclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vT0NUUkVFXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4jaWYgKGRlZmluZWQoYWRhcHRpdmVfcG9pbnRfc2l6ZSkgfHwgZGVmaW5lZChjb2xvcl90eXBlX2xvZCkpICYmIGRlZmluZWQodHJlZV90eXBlX29jdHJlZSlcclxuXHJcblx0LyoqXHJcblx0ICogbnVtYmVyIG9mIDEtYml0cyB1cCB0byBpbmNsdXNpdmUgaW5kZXggcG9zaXRpb25cclxuXHQgKiBudW1iZXIgaXMgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIGFuIGludGVnZXIgaW4gdGhlIHJhbmdlIDAtMjU1XHJcblx0ICovXHJcblx0aW50IG51bWJlck9mT25lcyhpbnQgbnVtYmVyLCBpbnQgaW5kZXgpXHJcblx0e1xyXG5cdFx0aW50IG51bU9uZXMgPSAwO1xyXG5cdFx0aW50IHRtcCA9IDEyODtcclxuXHJcblx0XHRmb3IoaW50IGkgPSA3OyBpID49IDA7IGktLSlcclxuXHRcdHtcclxuXHRcdFx0aWYobnVtYmVyID49IHRtcClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdG51bWJlciA9IG51bWJlciAtIHRtcDtcclxuXHJcblx0XHRcdFx0aWYoaSA8PSBpbmRleClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRudW1PbmVzKys7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0bXAgPSB0bXAgLyAyO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBudW1PbmVzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogY2hlY2tzIHdoZXRoZXIgdGhlIGJpdCBhdCBpbmRleCBpcyAxXHJcblx0ICogbnVtYmVyIGlzIHRyZWF0ZWQgYXMgaWYgaXQgd2VyZSBhbiBpbnRlZ2VyIGluIHRoZSByYW5nZSAwLTI1NVxyXG5cdCAqL1xyXG5cdGJvb2wgaXNCaXRTZXQoaW50IG51bWJlciwgaW50IGluZGV4KVxyXG5cdHtcclxuXHRcdC8vd2VpcmQgbXVsdGkgZWxzZSBpZiBkdWUgdG8gbGFjayBvZiBwcm9wZXIgYXJyYXksIGludCBhbmQgYml0d2lzZSBzdXBwb3J0IGluIFdlYkdMIDEuMFxyXG5cdFx0aW50IHBvd2kgPSAxO1xyXG5cclxuXHRcdGlmKGluZGV4ID09IDApXHJcblx0XHR7XHJcblx0XHRcdHBvd2kgPSAxO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihpbmRleCA9PSAxKVxyXG5cdFx0e1xyXG5cdFx0XHRwb3dpID0gMjtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoaW5kZXggPT0gMilcclxuXHRcdHtcclxuXHRcdFx0cG93aSA9IDQ7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKGluZGV4ID09IDMpXHJcblx0XHR7XHJcblx0XHRcdHBvd2kgPSA4O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihpbmRleCA9PSA0KVxyXG5cdFx0e1xyXG5cdFx0XHRwb3dpID0gMTY7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKGluZGV4ID09IDUpXHJcblx0XHR7XHJcblx0XHRcdHBvd2kgPSAzMjtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYoaW5kZXggPT0gNilcclxuXHRcdHtcclxuXHRcdFx0cG93aSA9IDY0O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihpbmRleCA9PSA3KVxyXG5cdFx0e1xyXG5cdFx0XHRwb3dpID0gMTI4O1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0aW50IG5kcCA9IG51bWJlciAvIHBvd2k7XHJcblxyXG5cdFx0cmV0dXJuIG1vZChmbG9hdChuZHApLCAyLjApICE9IDAuMDtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIGZpbmQgdGhlIExPRCBhdCB0aGUgcG9pbnQgcG9zaXRpb25cclxuXHQgKi9cclxuXHRmbG9hdCBnZXRMT0QoKVxyXG5cdHtcclxuXHRcdHZlYzMgb2Zmc2V0ID0gdmVjMygwLjAsIDAuMCwgMC4wKTtcclxuXHRcdGludCBpT2Zmc2V0ID0gaW50KHVWTlN0YXJ0KTtcclxuXHRcdGZsb2F0IGRlcHRoID0gdUxldmVsO1xyXG5cclxuXHRcdGZvcihmbG9hdCBpID0gMC4wOyBpIDw9IDMwLjA7IGkrKylcclxuXHRcdHtcclxuXHRcdFx0ZmxvYXQgbm9kZVNpemVBdExldmVsID0gdU9jdHJlZVNpemUgLyBwb3coMi4wLCBpICsgdUxldmVsICsgMC4wKTtcclxuXHJcblx0XHRcdHZlYzMgaW5kZXgzZCA9IChwb3NpdGlvbi1vZmZzZXQpIC8gbm9kZVNpemVBdExldmVsO1xyXG5cdFx0XHRpbmRleDNkID0gZmxvb3IoaW5kZXgzZCArIDAuNSk7XHJcblx0XHRcdGludCBpbmRleCA9IGludChyb3VuZCg0LjAgKiBpbmRleDNkLnggKyAyLjAgKiBpbmRleDNkLnkgKyBpbmRleDNkLnopKTtcclxuXHJcblx0XHRcdHZlYzQgdmFsdWUgPSB0ZXh0dXJlMkQodmlzaWJsZU5vZGVzLCB2ZWMyKGZsb2F0KGlPZmZzZXQpIC8gMjA0OC4wLCAwLjApKTtcclxuXHRcdFx0aW50IG1hc2sgPSBpbnQocm91bmQodmFsdWUuciAqIDI1NS4wKSk7XHJcblxyXG5cdFx0XHRpZihpc0JpdFNldChtYXNrLCBpbmRleCkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvL3RoZXJlIGFyZSBtb3JlIHZpc2libGUgY2hpbGQgbm9kZXMgYXQgdGhpcyBwb3NpdGlvblxyXG5cdFx0XHRcdGludCBhZHZhbmNlRyA9IGludChyb3VuZCh2YWx1ZS5nICogMjU1LjApKSAqIDI1NjtcclxuXHRcdFx0XHRpbnQgYWR2YW5jZUIgPSBpbnQocm91bmQodmFsdWUuYiAqIDI1NS4wKSk7XHJcblx0XHRcdFx0aW50IGFkdmFuY2VDaGlsZCA9IG51bWJlck9mT25lcyhtYXNrLCBpbmRleCAtIDEpO1xyXG5cdFx0XHRcdGludCBhZHZhbmNlID0gYWR2YW5jZUcgKyBhZHZhbmNlQiArIGFkdmFuY2VDaGlsZDtcclxuXHJcblx0XHRcdFx0aU9mZnNldCA9IGlPZmZzZXQgKyBhZHZhbmNlO1xyXG5cclxuXHRcdFx0XHRkZXB0aCsrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8vbm8gbW9yZSB2aXNpYmxlIGNoaWxkIG5vZGVzIGF0IHRoaXMgcG9zaXRpb25cclxuXHRcdFx0XHRyZXR1cm4gdmFsdWUuYSAqIDI1NS4wO1xyXG5cdFx0XHRcdC8vcmV0dXJuIGRlcHRoO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRvZmZzZXQgPSBvZmZzZXQgKyAodmVjMygxLjAsIDEuMCwgMS4wKSAqIG5vZGVTaXplQXRMZXZlbCAqIDAuNSkgKiBpbmRleDNkO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBkZXB0aDtcclxuXHR9XHJcblxyXG5cdGZsb2F0IGdldFNwYWNpbmcoKVxyXG5cdHtcclxuXHRcdHZlYzMgb2Zmc2V0ID0gdmVjMygwLjAsIDAuMCwgMC4wKTtcclxuXHRcdGludCBpT2Zmc2V0ID0gaW50KHVWTlN0YXJ0KTtcclxuXHRcdGZsb2F0IGRlcHRoID0gdUxldmVsO1xyXG5cdFx0ZmxvYXQgc3BhY2luZyA9IHVOb2RlU3BhY2luZztcclxuXHJcblx0XHRmb3IoZmxvYXQgaSA9IDAuMDsgaSA8PSAzMC4wOyBpKyspXHJcblx0XHR7XHJcblx0XHRcdGZsb2F0IG5vZGVTaXplQXRMZXZlbCA9IHVPY3RyZWVTaXplIC8gcG93KDIuMCwgaSArIHVMZXZlbCArIDAuMCk7XHJcblxyXG5cdFx0XHR2ZWMzIGluZGV4M2QgPSAocG9zaXRpb24tb2Zmc2V0KSAvIG5vZGVTaXplQXRMZXZlbDtcclxuXHRcdFx0aW5kZXgzZCA9IGZsb29yKGluZGV4M2QgKyAwLjUpO1xyXG5cdFx0XHRpbnQgaW5kZXggPSBpbnQocm91bmQoNC4wICogaW5kZXgzZC54ICsgMi4wICogaW5kZXgzZC55ICsgaW5kZXgzZC56KSk7XHJcblxyXG5cdFx0XHR2ZWM0IHZhbHVlID0gdGV4dHVyZTJEKHZpc2libGVOb2RlcywgdmVjMihmbG9hdChpT2Zmc2V0KSAvIDIwNDguMCwgMC4wKSk7XHJcblx0XHRcdGludCBtYXNrID0gaW50KHJvdW5kKHZhbHVlLnIgKiAyNTUuMCkpO1xyXG5cdFx0XHRmbG9hdCBzcGFjaW5nRmFjdG9yID0gdmFsdWUuYTtcclxuXHJcblx0XHRcdGlmKGkgPiAwLjApXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzcGFjaW5nID0gc3BhY2luZyAvICgyNTUuMCAqIHNwYWNpbmdGYWN0b3IpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZihpc0JpdFNldChtYXNrLCBpbmRleCkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvL3RoZXJlIGFyZSBtb3JlIHZpc2libGUgY2hpbGQgbm9kZXMgYXQgdGhpcyBwb3NpdGlvblxyXG5cdFx0XHRcdGludCBhZHZhbmNlRyA9IGludChyb3VuZCh2YWx1ZS5nICogMjU1LjApKSAqIDI1NjtcclxuXHRcdFx0XHRpbnQgYWR2YW5jZUIgPSBpbnQocm91bmQodmFsdWUuYiAqIDI1NS4wKSk7XHJcblx0XHRcdFx0aW50IGFkdmFuY2VDaGlsZCA9IG51bWJlck9mT25lcyhtYXNrLCBpbmRleCAtIDEpO1xyXG5cdFx0XHRcdGludCBhZHZhbmNlID0gYWR2YW5jZUcgKyBhZHZhbmNlQiArIGFkdmFuY2VDaGlsZDtcclxuXHJcblx0XHRcdFx0aU9mZnNldCA9IGlPZmZzZXQgKyBhZHZhbmNlO1xyXG5cclxuXHRcdFx0XHRkZXB0aCsrO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8vbm8gbW9yZSB2aXNpYmxlIGNoaWxkIG5vZGVzIGF0IHRoaXMgcG9zaXRpb25cclxuXHRcdFx0XHRyZXR1cm4gc3BhY2luZztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0b2Zmc2V0ID0gb2Zmc2V0ICsgKHZlYzMoMS4wLCAxLjAsIDEuMCkgKiBub2RlU2l6ZUF0TGV2ZWwgKiAwLjUpICogaW5kZXgzZDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gc3BhY2luZztcclxuXHR9XHJcblxyXG5cdGZsb2F0IGdldFBvaW50U2l6ZUF0dGVudWF0aW9uKClcclxuXHR7XHJcblx0XHRyZXR1cm4gcG93KDIuMCwgZ2V0TE9EKCkpO1xyXG5cdH1cclxuI2VuZGlmXHJcblxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vL0tELVRSRUVcclxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuI2lmIChkZWZpbmVkKGFkYXB0aXZlX3BvaW50X3NpemUpIHx8IGRlZmluZWQoY29sb3JfdHlwZV9sb2QpKSAmJiBkZWZpbmVkKHRyZWVfdHlwZV9rZHRyZWUpXHJcblx0ZmxvYXQgZ2V0TE9EKClcclxuXHR7XHJcblx0XHR2ZWMzIG9mZnNldCA9IHZlYzMoMC4wLCAwLjAsIDAuMCk7XHJcblx0XHRmbG9hdCBpT2Zmc2V0ID0gMC4wO1xyXG5cdFx0ZmxvYXQgZGVwdGggPSAwLjA7XHJcblxyXG5cdFx0dmVjMyBzaXplID0gdUJCU2l6ZTtcclxuXHRcdHZlYzMgcG9zID0gcG9zaXRpb247XHJcblxyXG5cdFx0Zm9yKGZsb2F0IGkgPSAwLjA7IGkgPD0gMTAwMC4wOyBpKyspXHJcblx0XHR7XHJcblx0XHRcdHZlYzQgdmFsdWUgPSB0ZXh0dXJlMkQodmlzaWJsZU5vZGVzLCB2ZWMyKGlPZmZzZXQgLyAyMDQ4LjAsIDAuMCkpO1xyXG5cclxuXHRcdFx0aW50IGNoaWxkcmVuID0gaW50KHZhbHVlLnIgKiAyNTUuMCk7XHJcblx0XHRcdGZsb2F0IG5leHQgPSB2YWx1ZS5nICogMjU1LjA7XHJcblx0XHRcdGludCBzcGxpdCA9IGludCh2YWx1ZS5iICogMjU1LjApO1xyXG5cclxuXHRcdFx0aWYobmV4dCA9PSAwLjApXHJcblx0XHRcdHtcclxuXHRcdFx0IFx0cmV0dXJuIGRlcHRoO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR2ZWMzIHNwbGl0diA9IHZlYzMoMC4wLCAwLjAsIDAuMCk7XHJcblx0XHRcdGlmKHNwbGl0ID09IDEpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRzcGxpdHYueCA9IDEuMDtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKHNwbGl0ID09IDIpXHJcblx0XHRcdHtcclxuXHRcdFx0IFx0c3BsaXR2LnkgPSAxLjA7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZihzcGxpdCA9PSA0KVxyXG5cdFx0XHR7XHJcblx0XHRcdCBcdHNwbGl0di56ID0gMS4wO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpT2Zmc2V0ID0gaU9mZnNldCArIG5leHQ7XHJcblxyXG5cdFx0XHRmbG9hdCBmYWN0b3IgPSBsZW5ndGgocG9zICogc3BsaXR2IC8gc2l6ZSk7XHJcblxyXG5cdFx0XHQvL0xlZnRcclxuXHRcdFx0aWYoZmFjdG9yIDwgMC41KVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0aWYoY2hpbGRyZW4gPT0gMCB8fCBjaGlsZHJlbiA9PSAyKVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHJldHVybiBkZXB0aDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0Ly9SaWdodFxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRwb3MgPSBwb3MgLSBzaXplICogc3BsaXR2ICogMC41O1xyXG5cdFx0XHRcdGlmKGNoaWxkcmVuID09IDAgfHwgY2hpbGRyZW4gPT0gMSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRyZXR1cm4gZGVwdGg7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmKGNoaWxkcmVuID09IDMpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0aU9mZnNldCA9IGlPZmZzZXQgKyAxLjA7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzaXplID0gc2l6ZSAqICgoMS4wIC0gKHNwbGl0diArIDEuMCkgLyAyLjApICsgMC41KTtcclxuXHRcdFx0ZGVwdGgrKztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZGVwdGg7XHJcblx0fVxyXG5cclxuXHRmbG9hdCBnZXRQb2ludFNpemVBdHRlbnVhdGlvbigpXHJcblx0e1xyXG5cdFx0cmV0dXJuIDAuNSAqIHBvdygxLjMsIGdldExPRCgpKTtcclxuXHR9XHJcbiNlbmRpZlxyXG5cclxuLy9mb3JtdWxhIGFkYXB0ZWQgZnJvbTogaHR0cDovL3d3dy5kZnN0dWRpb3MuY28udWsvYXJ0aWNsZXMvcHJvZ3JhbW1pbmcvaW1hZ2UtcHJvZ3JhbW1pbmctYWxnb3JpdGhtcy9pbWFnZS1wcm9jZXNzaW5nLWFsZ29yaXRobXMtcGFydC01LWNvbnRyYXN0LWFkanVzdG1lbnQvXHJcbmZsb2F0IGdldENvbnRyYXN0RmFjdG9yKGZsb2F0IGNvbnRyYXN0KVxyXG57XHJcblx0cmV0dXJuICgxLjAxNTg3MzAxNTg3MzAxNTYgKiAoY29udHJhc3QgKyAxLjApKSAvICgxLjAxNTg3MzAxNTg3MzAxNTYgLSBjb250cmFzdCk7XHJcbn1cclxuXHJcbnZlYzMgZ2V0UkdCKClcclxue1xyXG5cdHZlYzMgcmdiID0gY29sb3I7XHJcblxyXG5cdHJnYiA9IHBvdyhyZ2IsIHZlYzMocmdiR2FtbWEpKTtcclxuXHRyZ2IgPSByZ2IgKyByZ2JCcmlnaHRuZXNzO1xyXG5cdHJnYiA9IGNsYW1wKHJnYiwgMC4wLCAxLjApO1xyXG5cclxuXHRyZXR1cm4gcmdiO1xyXG59XHJcblxyXG5mbG9hdCBnZXRJbnRlbnNpdHkoKVxyXG57XHJcblx0ZmxvYXQgdyA9IChpbnRlbnNpdHkgLSBpbnRlbnNpdHlSYW5nZS54KSAvIChpbnRlbnNpdHlSYW5nZS55IC0gaW50ZW5zaXR5UmFuZ2UueCk7XHJcblx0dyA9IHBvdyh3LCBpbnRlbnNpdHlHYW1tYSk7XHJcblx0dyA9IHcgKyBpbnRlbnNpdHlCcmlnaHRuZXNzO1xyXG5cdHcgPSAodyAtIDAuNSkgKiBnZXRDb250cmFzdEZhY3RvcihpbnRlbnNpdHlDb250cmFzdCkgKyAwLjU7XHJcblx0dyA9IGNsYW1wKHcsIDAuMCwgMS4wKTtcclxuXHJcblx0cmV0dXJuIHc7XHJcbn1cclxuXHJcbnZlYzMgZ2V0RWxldmF0aW9uKClcclxue1xyXG5cdHZlYzQgd29ybGQgPSBtb2RlbE1hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcclxuXHRmbG9hdCB3ID0gKHdvcmxkLnogLSBlbGV2YXRpb25SYW5nZS54KSAvIChlbGV2YXRpb25SYW5nZS55IC0gZWxldmF0aW9uUmFuZ2UueCk7XHJcblx0cmV0dXJuIHRleHR1cmUyRChncmFkaWVudCwgdmVjMih3LDEuMC13KSkucmdiO1xyXG59XHJcblxyXG52ZWM0IGdldENsYXNzaWZpY2F0aW9uKClcclxue1xyXG5cdHZlYzIgdXYgPSB2ZWMyKGNsYXNzaWZpY2F0aW9uIC8gMjU1LjAsIDAuNSk7XHJcblx0cmV0dXJuIHRleHR1cmUyRChjbGFzc2lmaWNhdGlvbkxVVCwgdXYpO1xyXG59XHJcblxyXG52ZWMzIGdldFJldHVybk51bWJlcigpXHJcbntcclxuXHRpZihudW1iZXJPZlJldHVybnMgPT0gMS4wKVxyXG5cdHtcclxuXHRcdHJldHVybiB2ZWMzKDEuMCwgMS4wLCAwLjApO1xyXG5cdH1cclxuXHRlbHNlXHJcblx0e1xyXG5cdFx0aWYocmV0dXJuTnVtYmVyID09IDEuMClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIHZlYzMoMS4wLCAwLjAsIDAuMCk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKHJldHVybk51bWJlciA9PSBudW1iZXJPZlJldHVybnMpXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiB2ZWMzKDAuMCwgMC4wLCAxLjApO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gdmVjMygwLjAsIDEuMCwgMC4wKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbnZlYzMgZ2V0U291cmNlSUQoKVxyXG57XHJcblx0ZmxvYXQgdyA9IG1vZChwb2ludFNvdXJjZUlELCAxMC4wKSAvIDEwLjA7XHJcblx0cmV0dXJuIHRleHR1cmUyRChncmFkaWVudCwgdmVjMih3LDEuMCAtIHcpKS5yZ2I7XHJcbn1cclxuXHJcbnZlYzMgZ2V0Q29tcG9zaXRlQ29sb3IoKVxyXG57XHJcblx0dmVjMyBjO1xyXG5cdGZsb2F0IHc7XHJcblxyXG5cdGMgKz0gd1JHQiAqIGdldFJHQigpO1xyXG5cdHcgKz0gd1JHQjtcclxuXHJcblx0YyArPSB3SW50ZW5zaXR5ICogZ2V0SW50ZW5zaXR5KCkgKiB2ZWMzKDEuMCwgMS4wLCAxLjApO1xyXG5cdHcgKz0gd0ludGVuc2l0eTtcclxuXHJcblx0YyArPSB3RWxldmF0aW9uICogZ2V0RWxldmF0aW9uKCk7XHJcblx0dyArPSB3RWxldmF0aW9uO1xyXG5cclxuXHRjICs9IHdSZXR1cm5OdW1iZXIgKiBnZXRSZXR1cm5OdW1iZXIoKTtcclxuXHR3ICs9IHdSZXR1cm5OdW1iZXI7XHJcblxyXG5cdGMgKz0gd1NvdXJjZUlEICogZ2V0U291cmNlSUQoKTtcclxuXHR3ICs9IHdTb3VyY2VJRDtcclxuXHJcblx0dmVjNCBjbCA9IHdDbGFzc2lmaWNhdGlvbiAqIGdldENsYXNzaWZpY2F0aW9uKCk7XHJcbiAgYyArPSBjbC5hICogY2wucmdiO1xyXG5cdHcgKz0gd0NsYXNzaWZpY2F0aW9uICogY2wuYTtcclxuXHJcblx0YyA9IGMgLyB3O1xyXG5cclxuXHRpZih3ID09IDAuMClcclxuXHR7XHJcblx0XHRnbF9Qb3NpdGlvbiA9IHZlYzQoMTAwLjAsIDEwMC4wLCAxMDAuMCwgMC4wKTtcclxuXHR9XHJcblxyXG5cdHJldHVybiBjO1xyXG59XHJcblxyXG52ZWMzIGdldENvbG9yKClcclxue1xyXG5cdHZlYzMgY29sb3I7XHJcblxyXG5cdCNpZmRlZiBzZWxlY3Rpb25fdHlwZV9jb2xvclxyXG5cdGlmIChwb2ludFNvdXJjZUlEID09IHNlbGVjdGVkUG9pbnRTb3VyY2VJRClcclxuXHR7XHJcblx0XHRyZXR1cm4gc2VsZWN0ZWRQb2ludFNvdXJjZUlEQ29sb3I7XHJcblx0fVxyXG5cdCNlbmRpZlxyXG5cclxuXHQjaWZkZWYgY29sb3JfdHlwZV9yZ2JcclxuXHRcdGNvbG9yID0gZ2V0UkdCKCk7XHJcblx0I2VsaWYgZGVmaW5lZCBjb2xvcl90eXBlX2hlaWdodFxyXG5cdFx0Y29sb3IgPSBnZXRFbGV2YXRpb24oKTtcclxuXHQjZWxpZiBkZWZpbmVkIGNvbG9yX3R5cGVfcmdiX2hlaWdodFxyXG5cdFx0dmVjMyBjSGVpZ2h0ID0gZ2V0RWxldmF0aW9uKCk7XHJcblx0XHRjb2xvciA9ICgxLjAgLSB1VHJhbnNpdGlvbikgKiBnZXRSR0IoKSArIHVUcmFuc2l0aW9uICogY0hlaWdodDtcclxuXHQjZWxpZiBkZWZpbmVkIGNvbG9yX3R5cGVfZGVwdGhcclxuXHRcdGZsb2F0IGxpbmVhckRlcHRoID0gZ2xfUG9zaXRpb24udztcclxuXHRcdGZsb2F0IGV4cERlcHRoID0gKGdsX1Bvc2l0aW9uLnogLyBnbF9Qb3NpdGlvbi53KSAqIDAuNSArIDAuNTtcclxuXHRcdGNvbG9yID0gdmVjMyhsaW5lYXJEZXB0aCwgZXhwRGVwdGgsIDAuMCk7XHJcblx0I2VsaWYgZGVmaW5lZCBjb2xvcl90eXBlX2ludGVuc2l0eVxyXG5cdFx0ZmxvYXQgdyA9IGdldEludGVuc2l0eSgpO1xyXG5cdFx0Y29sb3IgPSB2ZWMzKHcsIHcsIHcpO1xyXG5cdCNlbGlmIGRlZmluZWQgY29sb3JfdHlwZV9pbnRlbnNpdHlfZ3JhZGllbnRcclxuXHRcdGZsb2F0IHcgPSBnZXRJbnRlbnNpdHkoKTtcclxuXHRcdGNvbG9yID0gdGV4dHVyZTJEKGdyYWRpZW50LCB2ZWMyKHcsMS4wLXcpKS5yZ2I7XHJcblx0I2VsaWYgZGVmaW5lZCBjb2xvcl90eXBlX2NvbG9yXHJcblx0XHRjb2xvciA9IHVDb2xvcjtcclxuXHQjZWxpZiBkZWZpbmVkIGNvbG9yX3R5cGVfbG9kXHJcblx0XHRmbG9hdCBkZXB0aCA9IGdldExPRCgpO1xyXG5cdFx0ZmxvYXQgdyA9IGRlcHRoIC8gMTAuMDtcclxuXHRcdGNvbG9yID0gdGV4dHVyZTJEKGdyYWRpZW50LCB2ZWMyKHcsMS4wLXcpKS5yZ2I7XHJcblx0I2VsaWYgZGVmaW5lZCBjb2xvcl90eXBlX3BvaW50X2luZGV4XHJcblx0XHRjb2xvciA9IGluZGljZXMucmdiO1xyXG5cdCNlbGlmIGRlZmluZWQgY29sb3JfdHlwZV9jbGFzc2lmaWNhdGlvblxyXG5cdFx0dmVjNCBjbCA9IGdldENsYXNzaWZpY2F0aW9uKCk7XHJcblx0XHRjb2xvciA9IGNsLnJnYjtcclxuXHQjZWxpZiBkZWZpbmVkIGNvbG9yX3R5cGVfcmV0dXJuX251bWJlclxyXG5cdFx0Y29sb3IgPSBnZXRSZXR1cm5OdW1iZXIoKTtcclxuXHQjZWxpZiBkZWZpbmVkIGNvbG9yX3R5cGVfc291cmNlXHJcblx0XHRjb2xvciA9IGdldFNvdXJjZUlEKCk7XHJcblx0I2VsaWYgZGVmaW5lZCBjb2xvcl90eXBlX25vcm1hbFxyXG5cdFx0Y29sb3IgPSAobW9kZWxNYXRyaXggKiB2ZWM0KG5vcm1hbCwgMC4wKSkueHl6O1xyXG5cdCNlbGlmIGRlZmluZWQgY29sb3JfdHlwZV9waG9uZ1xyXG5cdFx0Y29sb3IgPSBjb2xvcjtcclxuXHQjZWxpZiBkZWZpbmVkIGNvbG9yX3R5cGVfY29tcG9zaXRlXHJcblx0XHRjb2xvciA9IGdldENvbXBvc2l0ZUNvbG9yKCk7XHJcblx0I2VuZGlmXHJcblxyXG5cdGlmIChwb2ludFNvdXJjZUlEID09IHNlbGVjdGVkUG9pbnRTb3VyY2VJRClcclxuXHR7XHJcblx0XHRjb2xvclswXSA9IG1pbihjb2xvclswXSArIDAuMiwgMS4wKTtcclxuXHRcdGNvbG9yWzFdID0gbWluKGNvbG9yWzFdICsgMC4yLCAxLjApO1xyXG5cdFx0Y29sb3JbMl0gPSBtaW4oY29sb3JbMl0gKyAwLjIsIDEuMCk7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gY29sb3I7XHJcbn1cclxuXHJcbmZsb2F0IGdldFBvaW50U2l6ZSgpXHJcbntcclxuXHRmbG9hdCBwb2ludFNpemUgPSAxLjA7XHJcblxyXG5cdGZsb2F0IHNsb3BlID0gdGFuKGZvdiAvIDIuMCk7XHJcblx0ZmxvYXQgcHJvakZhY3RvciA9IC0wLjUgKiB1U2NyZWVuSGVpZ2h0IC8gKHNsb3BlICogdlZpZXdQb3NpdGlvbi56KTtcclxuXHJcblx0ZmxvYXQgciA9IHVPY3RyZWVTcGFjaW5nICogMS43O1xyXG5cdHZSYWRpdXMgPSByO1xyXG5cclxuXHQjaWYgZGVmaW5lZCBmaXhlZF9wb2ludF9zaXplXHJcblx0XHRwb2ludFNpemUgPSBzaXplO1xyXG5cdCNlbGlmIGRlZmluZWQgYXR0ZW51YXRlZF9wb2ludF9zaXplXHJcblx0XHRpZih1VXNlT3J0aG9ncmFwaGljQ2FtZXJhKVxyXG5cdFx0e1xyXG5cdFx0XHRwb2ludFNpemUgPSBzaXplO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHRwb2ludFNpemUgPSBzaXplICogc3BhY2luZyAqIHByb2pGYWN0b3I7XHJcblx0XHR9XHJcblx0I2VsaWYgZGVmaW5lZCBhZGFwdGl2ZV9wb2ludF9zaXplXHJcblx0XHRpZih1VXNlT3J0aG9ncmFwaGljQ2FtZXJhKVxyXG5cdFx0e1xyXG5cdFx0XHRmbG9hdCB3b3JsZFNwYWNlU2l6ZSA9IDEuMCAqIHNpemUgKiByIC8gZ2V0UG9pbnRTaXplQXR0ZW51YXRpb24oKTtcclxuXHRcdFx0cG9pbnRTaXplID0gKHdvcmxkU3BhY2VTaXplIC8gdU9ydGhvV2lkdGgpICogdVNjcmVlbldpZHRoO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHRpZih1SXNMZWFmTm9kZSAmJiBmYWxzZSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHBvaW50U2l6ZSA9IHNpemUgKiBzcGFjaW5nICogcHJvakZhY3RvcjtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdHtcclxuXHRcdFx0XHRmbG9hdCB3b3JsZFNwYWNlU2l6ZSA9IDEuMCAqIHNpemUgKiByIC8gZ2V0UG9pbnRTaXplQXR0ZW51YXRpb24oKTtcclxuXHRcdFx0XHRwb2ludFNpemUgPSB3b3JsZFNwYWNlU2l6ZSAqIHByb2pGYWN0b3I7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHQjZW5kaWZcclxuXHJcblx0cG9pbnRTaXplID0gbWF4KG1pblNpemUsIHBvaW50U2l6ZSk7XHJcblx0cG9pbnRTaXplID0gbWluKG1heFNpemUsIHBvaW50U2l6ZSk7XHJcblxyXG5cdHZSYWRpdXMgPSBwb2ludFNpemUgLyBwcm9qRmFjdG9yO1xyXG5cclxuXHRyZXR1cm4gcG9pbnRTaXplO1xyXG59XHJcblxyXG4jaWYgZGVmaW5lZCBudW1fY2xpcHBvbHlnb25zICYmIG51bV9jbGlwcG9seWdvbnMgPiAwXHJcblx0Ym9vbCBwb2ludEluQ2xpcFBvbHlnb24odmVjMyBwb2ludCwgaW50IHBvbHlJZHgpXHJcblx0e1xyXG5cdFx0bWF0NCB3dnAgPSB1Q2xpcFBvbHlnb25XVlBbcG9seUlkeF07XHJcblxyXG5cdFx0dmVjNCBwb2ludE5EQyA9IHd2cCAqIHZlYzQocG9pbnQsIDEuMCk7XHJcblx0XHRwb2ludE5EQy54eSA9IHBvaW50TkRDLnh5IC8gcG9pbnROREMudztcclxuXHJcblx0XHRpbnQgaiA9IHVDbGlwUG9seWdvblZDb3VudFtwb2x5SWR4XSAtIDE7XHJcblx0XHRib29sIGMgPSBmYWxzZTtcclxuXHRcdGZvcihpbnQgaSA9IDA7IGkgPCA4OyBpKyspXHJcblx0XHR7XHJcblx0XHRcdGlmKGkgPT0gdUNsaXBQb2x5Z29uVkNvdW50W3BvbHlJZHhdKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZlYzMgdmVydGkgPSB1Q2xpcFBvbHlnb25WZXJ0aWNlc1twb2x5SWR4ICogOCArIGldO1xyXG5cdFx0XHR2ZWMzIHZlcnRqID0gdUNsaXBQb2x5Z29uVmVydGljZXNbcG9seUlkeCAqIDggKyBqXTtcclxuXHJcblx0XHRcdGlmKCgodmVydGkueSA+IHBvaW50TkRDLnkpICE9ICh2ZXJ0ai55ID4gcG9pbnROREMueSkpICYmIChwb2ludE5EQy54IDwgKHZlcnRqLngtdmVydGkueCkgKiAocG9pbnROREMueS12ZXJ0aS55KSAvICh2ZXJ0ai55LXZlcnRpLnkpICsgdmVydGkueCkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjID0gIWM7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGogPSBpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBjO1xyXG5cdH1cclxuI2VuZGlmXHJcblxyXG52b2lkIGRvQ2xpcHBpbmcoKVxyXG57XHJcblx0I2lmICFkZWZpbmVkIGNvbG9yX3R5cGVfY29tcG9zaXRlXHJcblx0XHR2ZWM0IGNsID0gZ2V0Q2xhc3NpZmljYXRpb24oKTtcclxuXHRcdGlmKGNsLmEgPT0gMC4wKVxyXG5cdFx0e1xyXG5cdFx0XHRnbF9Qb3NpdGlvbiA9IHZlYzQoMTAwLjAsIDEwMC4wLCAxMDAuMCwgMC4wKTtcclxuXHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHQjZW5kaWZcclxuXHJcblx0aW50IGNsaXBWb2x1bWVzQ291bnQgPSAwO1xyXG5cdGludCBpbnNpZGVDb3VudCA9IDA7XHJcblxyXG5cdCNpZiBkZWZpbmVkKG51bV9jbGlwYm94ZXMpICYmIG51bV9jbGlwYm94ZXMgPiAwXHJcblx0XHRmb3IoaW50IGkgPSAwOyBpIDwgbnVtX2NsaXBib3hlczsgaSsrKVxyXG5cdFx0e1xyXG5cdFx0XHR2ZWM0IGNsaXBQb3NpdGlvbiA9IGNsaXBCb3hlc1tpXSAqIG1vZGVsTWF0cml4ICogdmVjNCggcG9zaXRpb24sIDEuMCApO1xyXG5cdFx0XHRib29sIGluc2lkZSA9IC0wLjUgPD0gY2xpcFBvc2l0aW9uLnggJiYgY2xpcFBvc2l0aW9uLnggPD0gMC41O1xyXG5cdFx0XHRpbnNpZGUgPSBpbnNpZGUgJiYgLTAuNSA8PSBjbGlwUG9zaXRpb24ueSAmJiBjbGlwUG9zaXRpb24ueSA8PSAwLjU7XHJcblx0XHRcdGluc2lkZSA9IGluc2lkZSAmJiAtMC41IDw9IGNsaXBQb3NpdGlvbi56ICYmIGNsaXBQb3NpdGlvbi56IDw9IDAuNTtcclxuXHJcblx0XHRcdGluc2lkZUNvdW50ID0gaW5zaWRlQ291bnQgKyAoaW5zaWRlID8gMSA6IDApO1xyXG5cdFx0XHRjbGlwVm9sdW1lc0NvdW50Kys7XHJcblx0XHR9XHJcblx0I2VuZGlmXHJcblxyXG5cdCNpZiBkZWZpbmVkKG51bV9jbGlwcG9seWdvbnMpICYmIG51bV9jbGlwcG9seWdvbnMgPiAwXHJcblx0XHRmb3IoaW50IGkgPSAwOyBpIDwgbnVtX2NsaXBwb2x5Z29uczsgaSsrKVxyXG5cdFx0e1xyXG5cdFx0XHRib29sIGluc2lkZSA9IHBvaW50SW5DbGlwUG9seWdvbihwb3NpdGlvbiwgaSk7XHJcblxyXG5cdFx0XHRpbnNpZGVDb3VudCA9IGluc2lkZUNvdW50ICsgKGluc2lkZSA/IDEgOiAwKTtcclxuXHRcdFx0Y2xpcFZvbHVtZXNDb3VudCsrO1xyXG5cdFx0fVxyXG5cdCNlbmRpZlxyXG5cclxuXHRib29sIGluc2lkZUFueSA9IGluc2lkZUNvdW50ID4gMDtcclxuXHRib29sIGluc2lkZUFsbCA9IChjbGlwVm9sdW1lc0NvdW50ID4gMCkgJiYgKGNsaXBWb2x1bWVzQ291bnQgPT0gaW5zaWRlQ291bnQpO1xyXG5cclxuXHRpZihjbGlwTWV0aG9kID09IENMSVBNRVRIT0RfSU5TSURFX0FOWSlcclxuXHR7XHJcblx0XHRpZihpbnNpZGVBbnkgJiYgY2xpcFRhc2sgPT0gQ0xJUFRBU0tfSElHSExJR0hUKVxyXG5cdFx0e1xyXG5cdFx0XHR2Q29sb3IuciArPSAwLjU7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKCFpbnNpZGVBbnkgJiYgY2xpcFRhc2sgPT0gQ0xJUFRBU0tfU0hPV19JTlNJREUpXHJcblx0XHR7XHJcblx0XHRcdGdsX1Bvc2l0aW9uID0gdmVjNCgxMDAuMCwgMTAwLjAsIDEwMC4wLCAxLjApO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihpbnNpZGVBbnkgJiYgY2xpcFRhc2sgPT0gQ0xJUFRBU0tfU0hPV19PVVRTSURFKVxyXG5cdFx0e1xyXG5cdFx0XHRnbF9Qb3NpdGlvbiA9IHZlYzQoMTAwLjAsIDEwMC4wLCAxMDAuMCwgMS4wKTtcclxuXHRcdH1cclxuXHR9XHJcblx0ZWxzZSBpZihjbGlwTWV0aG9kID09IENMSVBNRVRIT0RfSU5TSURFX0FMTClcclxuXHR7XHJcblx0XHRpZihpbnNpZGVBbGwgJiYgY2xpcFRhc2sgPT0gQ0xJUFRBU0tfSElHSExJR0hUKVxyXG5cdFx0e1xyXG5cdFx0XHR2Q29sb3IuciArPSAwLjU7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKCFpbnNpZGVBbGwgJiYgY2xpcFRhc2sgPT0gQ0xJUFRBU0tfU0hPV19JTlNJREUpXHJcblx0XHR7XHJcblx0XHRcdGdsX1Bvc2l0aW9uID0gdmVjNCgxMDAuMCwgMTAwLjAsIDEwMC4wLCAxLjApO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZihpbnNpZGVBbGwgJiYgY2xpcFRhc2sgPT0gQ0xJUFRBU0tfU0hPV19PVVRTSURFKVxyXG5cdFx0e1xyXG5cdFx0XHRnbF9Qb3NpdGlvbiA9IHZlYzQoMTAwLjAsIDEwMC4wLCAxMDAuMCwgMS4wKTtcclxuXHRcdH1cclxuXHR9XHJcbn1cclxuXHJcbmJvb2wgaXNIaWRkZW5DbGFzc2lmaWNhdGlvbigpXHJcbntcclxuXHQjaWYgZGVmaW5lZCBudW1faGlkZGVuY2xhc3NpZmljYXRpb25zICYmIG51bV9oaWRkZW5jbGFzc2lmaWNhdGlvbnMgPiAwXHJcblx0Zm9yIChpbnQgaSA9IDA7IGkgPCBudW1faGlkZGVuY2xhc3NpZmljYXRpb25zOyBpKyspXHJcblx0e1xyXG5cdFx0aWYgKGNsYXNzaWZpY2F0aW9uID09IGhpZGRlbkNsYXNzaWZpY2F0aW9uc1tpXSlcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblx0fVxyXG5cdCNlbmRpZlxyXG5cclxuXHRyZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbmJvb2wgaXNIaWRkZW5Qb2ludFNvdXJjZUlEKClcclxue1xyXG5cdCNpZiBkZWZpbmVkIG51bV9oaWRkZW5wb2ludHNvdXJjZWlkcyAmJiBudW1faGlkZGVucG9pbnRzb3VyY2VpZHMgPiAwXHJcblx0ZmxvYXQgeCA9IG1vZChwb2ludFNvdXJjZUlELCAyNTYuMCk7XHJcblx0ZmxvYXQgeSA9IGZsb29yKHBvaW50U291cmNlSUQgLyAyNTYuMCk7XHJcblx0dmVjMiB4eSA9IHZlYzIoeCAvIDI1NS4wLCB5IC8gMjU1LjApO1xyXG5cdGZsb2F0IHIgPSB0ZXh0dXJlMkQoaGlkZGVuUG9pbnRTb3VyY2VJRHMsIHh5KS5yO1xyXG5cclxuXHRyZXR1cm4gciA9PSAxLjA7XHJcblx0I2VuZGlmXHJcblxyXG5cdHJldHVybiBmYWxzZTtcclxufVxyXG5cclxudm9pZCBtYWluKClcclxue1xyXG5cdGlmIChpc0hpZGRlbkNsYXNzaWZpY2F0aW9uKCkgfHwgaXNIaWRkZW5Qb2ludFNvdXJjZUlEKCkpXHJcblx0e1xyXG5cdFx0cmV0dXJuOyAvLyBOb3RlOiAnZGlzY2FyZCcgb25seSBzdXBwb3J0ZWQgaW4gZnJhZ21lbnQgc2hhZGVyc1xyXG5cdH1cclxuXHJcblx0dmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNChwb3NpdGlvbiwgMS4wKTtcclxuXHR2Vmlld1Bvc2l0aW9uID0gbXZQb3NpdGlvbi54eXo7XHJcblx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcclxuXHJcblx0dkxvZ0RlcHRoID0gbG9nMigtbXZQb3NpdGlvbi56KTtcclxuXHJcblx0Ly9QT0lOVCBTSVpFXHJcblx0ZmxvYXQgcG9pbnRTaXplID0gZ2V0UG9pbnRTaXplKCk7XHJcblx0Z2xfUG9pbnRTaXplID0gcG9pbnRTaXplO1xyXG5cdHZQb2ludFNpemUgPSBwb2ludFNpemU7XHJcblx0YCArIFRIUkVFLlNoYWRlckNodW5rLmxvZ2RlcHRoYnVmX3ZlcnRleCArIGdsc2xgXHJcblxyXG5cdC8vQ09MT1JcclxuXHR2Q29sb3IgPSBnZXRDb2xvcigpO1xyXG5cclxuXHQjaWYgZGVmaW5lZCBocV9kZXB0aF9wYXNzXHJcblx0XHRmbG9hdCBvcmlnaW5hbERlcHRoID0gZ2xfUG9zaXRpb24udztcclxuXHRcdGZsb2F0IGFkanVzdGVkRGVwdGggPSBvcmlnaW5hbERlcHRoICsgMi4wICogdlJhZGl1cztcclxuXHRcdGZsb2F0IGFkanVzdCA9IGFkanVzdGVkRGVwdGggLyBvcmlnaW5hbERlcHRoO1xyXG5cclxuXHRcdG12UG9zaXRpb24ueHl6ID0gbXZQb3NpdGlvbi54eXogKiBhZGp1c3Q7XHJcblx0XHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xyXG5cdCNlbmRpZlxyXG5cclxuXHQvL0NMSVBQSU5HXHJcblx0dmVjNCBjbGlwUG9zaXRpb24gPSBtb2RlbE1hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcclxuXHRpZiAoaXNDbGlwcGVkKGNsaXBQb3NpdGlvbi54eXopKSB7XHJcblx0XHRnbF9Qb3NpdGlvbiA9IHZlYzQoMTAwLjAsIDEwMC4wLCAxMDAuMCwgMS4wKTsgLy8gT3V0c2lkZSBjbGlwIHNwYWNlXHJcblx0fSBcclxuXHRkb0NsaXBwaW5nKCk7XHJcblxyXG5cdCNpZiBkZWZpbmVkIG51bV9jbGlwc3BoZXJlcyAmJiBudW1fY2xpcHNwaGVyZXMgPiAwXHJcblx0XHRmb3IoaW50IGkgPSAwOyBpIDwgbnVtX2NsaXBzcGhlcmVzOyBpKyspXHJcblx0XHR7XHJcblx0XHRcdHZlYzQgc3BoZXJlTG9jYWwgPSB1Q2xpcFNwaGVyZXNbaV0gKiBtdlBvc2l0aW9uO1xyXG5cclxuXHRcdFx0ZmxvYXQgZGlzdGFuY2UgPSBsZW5ndGgoc3BoZXJlTG9jYWwueHl6KTtcclxuXHJcblx0XHRcdGlmKGRpc3RhbmNlIDwgMS4wKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0ZmxvYXQgdyA9IGRpc3RhbmNlO1xyXG5cdFx0XHRcdHZlYzMgY0dyYWRpZW50ID0gdGV4dHVyZTJEKGdyYWRpZW50LCB2ZWMyKHcsIDEuMCAtIHcpKS5yZ2I7XHJcblxyXG5cdFx0XHRcdHZDb2xvciA9IGNHcmFkaWVudDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdCNlbmRpZlxyXG5cclxuXHQjaWYgZGVmaW5lZCBudW1fc2hhZG93bWFwcyAmJiBudW1fc2hhZG93bWFwcyA+IDBcclxuXHJcblx0XHRjb25zdCBmbG9hdCBzbV9uZWFyID0gMC4xO1xyXG5cdFx0Y29uc3QgZmxvYXQgc21fZmFyID0gMTAwMDAuMDtcclxuXHJcblx0XHRmb3IoaW50IGkgPSAwOyBpIDwgbnVtX3NoYWRvd21hcHM7IGkrKylcclxuXHRcdHtcclxuXHRcdFx0dmVjMyB2aWV3UG9zID0gKHVTaGFkb3dXb3JsZFZpZXdbaV0gKiB2ZWM0KHBvc2l0aW9uLCAxLjApKS54eXo7XHJcblx0XHRcdGZsb2F0IGRpc3RhbmNlVG9MaWdodCA9IGFicyh2aWV3UG9zLnopO1xyXG5cclxuXHRcdFx0dmVjNCBwcm9qUG9zID0gdVNoYWRvd1Byb2pbaV0gKiB1U2hhZG93V29ybGRWaWV3W2ldICogdmVjNChwb3NpdGlvbiwgMSk7XHJcblx0XHRcdHZlYzMgbmMgPSBwcm9qUG9zLnh5eiAvIHByb2pQb3MudztcclxuXHJcblx0XHRcdGZsb2F0IHUgPSBuYy54ICogMC41ICsgMC41O1xyXG5cdFx0XHRmbG9hdCB2ID0gbmMueSAqIDAuNSArIDAuNTtcclxuXHJcblx0XHRcdHZlYzIgc2FtcGxlU3RlcCA9IHZlYzIoMS4wIC8gKDIuMCoxMDI0LjApLCAxLjAgLyAoMi4wKjEwMjQuMCkpICogMS41O1xyXG5cdFx0XHR2ZWMyIHNhbXBsZUxvY2F0aW9uc1s5XTtcclxuXHJcblx0XHRcdHNhbXBsZUxvY2F0aW9uc1swXSA9IHZlYzIoMC4wLCAwLjApO1xyXG5cdFx0XHRzYW1wbGVMb2NhdGlvbnNbMV0gPSBzYW1wbGVTdGVwO1xyXG5cdFx0XHRzYW1wbGVMb2NhdGlvbnNbMl0gPSAtc2FtcGxlU3RlcDtcclxuXHRcdFx0c2FtcGxlTG9jYXRpb25zWzNdID0gdmVjMihzYW1wbGVTdGVwLngsIC1zYW1wbGVTdGVwLnkpO1xyXG5cdFx0XHRzYW1wbGVMb2NhdGlvbnNbNF0gPSB2ZWMyKC1zYW1wbGVTdGVwLngsIHNhbXBsZVN0ZXAueSk7XHJcblx0XHRcdHNhbXBsZUxvY2F0aW9uc1s1XSA9IHZlYzIoMC4wLCBzYW1wbGVTdGVwLnkpO1xyXG5cdFx0XHRzYW1wbGVMb2NhdGlvbnNbNl0gPSB2ZWMyKDAuMCwgLXNhbXBsZVN0ZXAueSk7XHJcblx0XHRcdHNhbXBsZUxvY2F0aW9uc1s3XSA9IHZlYzIoc2FtcGxlU3RlcC54LCAwLjApO1xyXG5cdFx0XHRzYW1wbGVMb2NhdGlvbnNbOF0gPSB2ZWMyKC1zYW1wbGVTdGVwLngsIDAuMCk7XHJcblxyXG5cdFx0XHRmbG9hdCB2aXNpYmxlU2FtcGxlcyA9IDAuMDtcclxuXHRcdFx0ZmxvYXQgbnVtU2FtcGxlcyA9IDAuMDtcclxuXHJcblx0XHRcdGZsb2F0IGJpYXMgPSB2UmFkaXVzICogMi4wO1xyXG5cclxuXHRcdFx0Zm9yKGludCBqID0gMDsgaiA8IDk7IGorKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZlYzQgZGVwdGhNYXBWYWx1ZSA9IHRleHR1cmUyRCh1U2hhZG93TWFwW2ldLCB2ZWMyKHUsIHYpICsgc2FtcGxlTG9jYXRpb25zW2pdKTtcclxuXHJcblx0XHRcdFx0ZmxvYXQgbGluZWFyRGVwdGhGcm9tU00gPSBkZXB0aE1hcFZhbHVlLnggKyBiaWFzO1xyXG5cdFx0XHRcdGZsb2F0IGxpbmVhckRlcHRoRnJvbVZpZXdlciA9IGRpc3RhbmNlVG9MaWdodDtcclxuXHJcblx0XHRcdFx0aWYobGluZWFyRGVwdGhGcm9tU00gPiBsaW5lYXJEZXB0aEZyb21WaWV3ZXIpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmlzaWJsZVNhbXBsZXMgKz0gMS4wO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0bnVtU2FtcGxlcyArPSAxLjA7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZsb2F0IHZpc2liaWxpdHkgPSB2aXNpYmxlU2FtcGxlcyAvIG51bVNhbXBsZXM7XHJcblxyXG5cdFx0XHRpZih1IDwgMC4wIHx8IHUgPiAxLjAgfHwgdiA8IDAuMCB8fCB2ID4gMS4wIHx8IG5jLnggPCAtMS4wIHx8IG5jLnggPiAxLjAgfHwgbmMueSA8IC0xLjAgfHwgbmMueSA+IDEuMCB8fCBuYy56IDwgLTEuMCB8fCBuYy56ID4gMS4wKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Ly92Q29sb3IgPSB2ZWMzKDAuMCwgMC4wLCAwLjIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZDb2xvciA9IHZDb2xvciAqIHZpc2liaWxpdHkgKyB2Q29sb3IgKiB1U2hhZG93Q29sb3IgKiAoMS4wIC0gdmlzaWJpbGl0eSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0I2VuZGlmXHJcbn1gO1xyXG5cclxuLy9cInBvaW50Y2xvdWQuZnNcIlxyXG5TaGFkZXJzLmZyYWdtZW50ID0gZ2xzbGBcclxuXHJcbiNpZiBkZWZpbmVkIFVTRV9MT0dERVBUSEJVRl9FWFQgfHwgZGVmaW5lZCBwYXJhYm9sb2lkX3BvaW50X3NoYXBlXHJcblx0I2V4dGVuc2lvbiBHTF9FWFRfZnJhZ19kZXB0aCA6IGVuYWJsZVxyXG4jZW5kaWZcclxuXHJcbnByZWNpc2lvbiBoaWdocCBmbG9hdDtcclxucHJlY2lzaW9uIGhpZ2hwIGludDtcclxuXHJcbmAgKyBUSFJFRS5TaGFkZXJDaHVuay5jb21tb24gKyBgXHJcbmAgKyBUSFJFRS5TaGFkZXJDaHVuay5sb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50ICsgZ2xzbGBcclxuXHJcbnVuaWZvcm0gbWF0NCB2aWV3TWF0cml4O1xyXG51bmlmb3JtIG1hdDQgdVZpZXdJbnY7XHJcbnVuaWZvcm0gbWF0NCB1UHJvakludjtcclxudW5pZm9ybSB2ZWMzIGNhbWVyYVBvc2l0aW9uO1xyXG5cclxudW5pZm9ybSBtYXQ0IHByb2plY3Rpb25NYXRyaXg7XHJcbnVuaWZvcm0gZmxvYXQgdU9wYWNpdHk7XHJcblxyXG51bmlmb3JtIGZsb2F0IGJsZW5kSGFyZG5lc3M7XHJcbnVuaWZvcm0gZmxvYXQgYmxlbmREZXB0aFN1cHBsZW1lbnQ7XHJcbnVuaWZvcm0gZmxvYXQgZm92O1xyXG51bmlmb3JtIGZsb2F0IHVTcGFjaW5nO1xyXG51bmlmb3JtIGZsb2F0IG5lYXI7XHJcbnVuaWZvcm0gZmxvYXQgZmFyO1xyXG51bmlmb3JtIGZsb2F0IHVQQ0luZGV4O1xyXG51bmlmb3JtIGZsb2F0IHVTY3JlZW5XaWR0aDtcclxudW5pZm9ybSBmbG9hdCB1U2NyZWVuSGVpZ2h0O1xyXG5cclxudmFyeWluZyB2ZWMzIHZDb2xvcjtcclxudmFyeWluZyBmbG9hdCB2TG9nRGVwdGg7XHJcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xyXG52YXJ5aW5nIGZsb2F0IHZSYWRpdXM7XHJcbnZhcnlpbmcgZmxvYXQgdlBvaW50U2l6ZTtcclxudmFyeWluZyB2ZWMzIHZQb3NpdGlvbjtcclxuXHJcbnZvaWQgbWFpbigpXHJcbntcclxuXHR2ZWMzIGNvbG9yID0gdkNvbG9yO1xyXG5cdGZsb2F0IGRlcHRoID0gZ2xfRnJhZ0Nvb3JkLno7XHJcblxyXG5cdCNpZiBkZWZpbmVkIGNpcmNsZV9wb2ludF9zaGFwZSB8fCBkZWZpbmVkIHBhcmFib2xvaWRfcG9pbnRfc2hhcGVcclxuXHRcdGZsb2F0IHUgPSAoMi4wICogZ2xfUG9pbnRDb29yZC54KSAtIDEuMDtcclxuXHRcdGZsb2F0IHYgPSAoMi4wICogZ2xfUG9pbnRDb29yZC55KSAtIDEuMDtcclxuXHQjZW5kaWZcclxuXHJcblx0I2lmIGRlZmluZWQgY2lyY2xlX3BvaW50X3NoYXBlXHJcblx0XHRmbG9hdCBjYyA9ICh1KnUpICsgKHYqdik7XHJcblx0XHRpZihjYyA+IDEuMClcclxuXHRcdHtcclxuXHRcdFx0ZGlzY2FyZDtcclxuXHRcdH1cclxuXHQjZW5kaWZcclxuXHJcblx0I2lmIGRlZmluZWQgY29sb3JfdHlwZV9wb2ludF9pbmRleFxyXG5cdFx0Z2xfRnJhZ0NvbG9yID0gdmVjNChjb2xvciwgdVBDSW5kZXggLyAyNTUuMCk7XHJcblx0I2Vsc2VcclxuXHRcdGdsX0ZyYWdDb2xvciA9IHZlYzQoY29sb3IsIHVPcGFjaXR5KTtcclxuXHQjZW5kaWZcclxuXHJcblx0I2lmIGRlZmluZWQgcGFyYWJvbG9pZF9wb2ludF9zaGFwZVxyXG5cdFx0ZmxvYXQgd2kgPSAtKCB1KnUgKyB2KnYpO1xyXG5cdFx0dmVjNCBwb3MgPSB2ZWM0KHZWaWV3UG9zaXRpb24sIDEuMCk7XHJcblx0XHRwb3MueiArPSB3aSAqIHZSYWRpdXM7XHJcblx0XHRmbG9hdCBsaW5lYXJEZXB0aCA9IC1wb3MuejtcclxuXHRcdHBvcyA9IHByb2plY3Rpb25NYXRyaXggKiBwb3M7XHJcblx0XHRwb3MgPSBwb3MgLyBwb3MudztcclxuXHRcdGZsb2F0IGV4cERlcHRoID0gcG9zLno7XHJcblx0XHRkZXB0aCA9IChwb3MueiArIDEuMCkgLyAyLjA7XHJcblxyXG5cdFx0Z2xfRnJhZ0RlcHRoRVhUID0gZGVwdGg7XHJcblxyXG5cdFx0I2lmIGRlZmluZWQgY29sb3JfdHlwZV9kZXB0aFxyXG5cdFx0XHRjb2xvci5yID0gbGluZWFyRGVwdGg7XHJcblx0XHRcdGNvbG9yLmcgPSBleHBEZXB0aDtcclxuXHRcdCNlbmRpZlxyXG5cdCNlbmRpZlxyXG5cclxuXHRgICsgVEhSRUUuU2hhZGVyQ2h1bmsubG9nZGVwdGhidWZfZnJhZ21lbnQgKyBnbHNsYFxyXG5cclxuXHQjaWYgZGVmaW5lZCB3ZWlnaHRlZF9zcGxhdHNcclxuXHRcdGZsb2F0IGRpc3RhbmNlID0gMi4wICogbGVuZ3RoKGdsX1BvaW50Q29vcmQueHkgLSAwLjUpO1xyXG5cdFx0ZmxvYXQgd2VpZ2h0ID0gbWF4KDAuMCwgMS4wIC0gZGlzdGFuY2UpO1xyXG5cdFx0d2VpZ2h0ID0gcG93KHdlaWdodCwgMS41KTtcclxuXHJcblx0XHRnbF9GcmFnQ29sb3IuYSA9IHdlaWdodDtcclxuXHRcdGdsX0ZyYWdDb2xvci54eXogPSBnbF9GcmFnQ29sb3IueHl6ICogd2VpZ2h0O1xyXG5cdCNlbmRpZlxyXG59YDtcclxuXHJcbmV4cG9ydCB7IFNoYWRlcnMgfTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5pbXBvcnQgeyBIZWxwZXJVdGlscyB9IGZyb20gXCIuLi8uLi91dGlscy9IZWxwZXJVdGlscy5qc1wiO1xyXG5pbXBvcnQgeyBHcmFkaWVudHMgfSBmcm9tIFwiLi4vLi4vR3JhZGllbnRzLmpzXCI7XHJcbmltcG9ydCB7IFNoYWRlcnMgfSBmcm9tIFwiLi4vLi4vU2hhZGVycy5qc1wiO1xyXG5pbXBvcnQgeyBUcmVlVHlwZSwgUG9pbnRDb2xvclR5cGUsIFBvaW50U2l6ZVR5cGUsIFBvaW50U2hhcGUsIENsYXNzaWZpY2F0aW9uLCBQb2ludFNlbGVjdGlvblR5cGUgfSBmcm9tIFwiLi4vLi4vUG90cmVlLmpzXCI7XHJcblxyXG5jbGFzcyBQb2ludENsb3VkTWF0ZXJpYWwgZXh0ZW5kcyBUSFJFRS5SYXdTaGFkZXJNYXRlcmlhbCB7XHJcblx0Y29uc3RydWN0b3IocGFyYW1ldGVycyA9IHt9KSB7XHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMudmlzaWJsZU5vZGVzVGV4dHVyZSA9IEhlbHBlclV0aWxzLmdlbmVyYXRlRGF0YVRleHR1cmUoMjA0OCwgMSwgbmV3IFRIUkVFLkNvbG9yKDB4ZmZmZmZmKSk7XHJcblx0XHR0aGlzLnZpc2libGVOb2Rlc1RleHR1cmUubWluRmlsdGVyID0gVEhSRUUuTmVhcmVzdEZpbHRlcjtcclxuXHRcdHRoaXMudmlzaWJsZU5vZGVzVGV4dHVyZS5tYWdGaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xyXG5cclxuXHRcdHZhciBnZXRWYWxpZCA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcblx0XHRcdGlmIChhICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRyZXR1cm4gYTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gYjtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgcG9pbnRTaXplID0gZ2V0VmFsaWQocGFyYW1ldGVycy5zaXplLCAxLjApO1xyXG5cdFx0dmFyIG1pblNpemUgPSBnZXRWYWxpZChwYXJhbWV0ZXJzLm1pblNpemUsIDIuMCk7XHJcblx0XHR2YXIgbWF4U2l6ZSA9IGdldFZhbGlkKHBhcmFtZXRlcnMubWF4U2l6ZSwgNTAuMCk7XHJcblx0XHR2YXIgdHJlZVR5cGUgPSBnZXRWYWxpZChwYXJhbWV0ZXJzLnRyZWVUeXBlLCBUcmVlVHlwZS5PQ1RSRUUpO1xyXG5cclxuXHRcdHRoaXMuX3BvaW50U2l6ZVR5cGUgPSBQb2ludFNpemVUeXBlLkZJWEVEO1xyXG5cdFx0dGhpcy5fc2hhcGUgPSBQb2ludFNoYXBlLlNRVUFSRTtcclxuXHRcdHRoaXMuX3BvaW50Q29sb3JUeXBlID0gUG9pbnRDb2xvclR5cGUuUkdCO1xyXG5cdFx0dGhpcy5fdXNlQ2xpcEJveCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5fd2VpZ2h0ZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMuX2dyYWRpZW50ID0gR3JhZGllbnRzLlNQRUNUUkFMO1xyXG5cdFx0dGhpcy5fdHJlZVR5cGUgPSB0cmVlVHlwZTtcclxuXHRcdHRoaXMuX3VzZUVETCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5fc25hcEVuYWJsZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMuX251bVNuYXBzaG90cyA9IDA7XHJcblx0XHR0aGlzLl9kZWZhdWx0SW50ZW5zaXR5UmFuZ2VDaGFuZ2VkID0gZmFsc2U7XHJcblx0XHR0aGlzLl9kZWZhdWx0RWxldmF0aW9uUmFuZ2VDaGFuZ2VkID0gZmFsc2U7XHJcblx0XHR0aGlzLl9wb2ludFNlbGVjdGlvblR5cGUgPSBQb2ludFNlbGVjdGlvblR5cGUuQlJJR0hUTkVTUztcclxuXHJcblx0XHR0aGlzLmNsaXBCb3hlcyA9IFtdO1xyXG5cdFx0dGhpcy5jbGlwUG9seWdvbnMgPSBbXTtcclxuXHJcblx0XHR0aGlzLmdyYWRpZW50VGV4dHVyZSA9IFBvaW50Q2xvdWRNYXRlcmlhbC5nZW5lcmF0ZUdyYWRpZW50VGV4dHVyZSh0aGlzLl9ncmFkaWVudCk7XHJcblx0XHR0aGlzLmxpZ2h0cyA9IGZhbHNlO1xyXG5cdFx0dGhpcy5mb2cgPSBmYWxzZTtcclxuXHRcdHRoaXMuZGVmaW5lcyA9IG5ldyBNYXAoKTtcclxuXHJcblx0XHR0aGlzLmF0dHJpYnV0ZXMgPVxyXG5cdFx0e1xyXG5cdFx0XHRwb3NpdGlvbjogeyB0eXBlOiAnZnYnLCB2YWx1ZTogW10gfSxcclxuXHRcdFx0Y29sb3I6IHsgdHlwZTogJ2Z2JywgdmFsdWU6IFtdIH0sXHJcblx0XHRcdG5vcm1hbDogeyB0eXBlOiAnZnYnLCB2YWx1ZTogW10gfSxcclxuXHRcdFx0aW50ZW5zaXR5OiB7IHR5cGU6ICdmJywgdmFsdWU6IFtdIH0sXHJcblx0XHRcdGNsYXNzaWZpY2F0aW9uOiB7IHR5cGU6ICdmJywgdmFsdWU6IFtdIH0sXHJcblx0XHRcdHJldHVybk51bWJlcjogeyB0eXBlOiAnZicsIHZhbHVlOiBbXSB9LFxyXG5cdFx0XHRudW1iZXJPZlJldHVybnM6IHsgdHlwZTogJ2YnLCB2YWx1ZTogW10gfSxcclxuXHRcdFx0cG9pbnRTb3VyY2VJRDogeyB0eXBlOiAnZicsIHZhbHVlOiBbXSB9LFxyXG5cdFx0XHRpbmRpY2VzOiB7IHR5cGU6ICdmdicsIHZhbHVlOiBbXSB9XHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIE5vdGU6IERvbid0IGZvcmdldCB0byB1cGRhdGUgR3JvdXAucmVuZGVyT2N0cmVlLCB0aGVzZSBhcmUgbm90IHRyYW5zZmVycmVkIHRvIHRoZSBzaGFkZXIgYXV0b21hdGljYWxseSFcclxuXHRcdHRoaXMudW5pZm9ybXMgPVxyXG5cdFx0e1xyXG5cdFx0XHRsZXZlbDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAuMCB9LFxyXG5cdFx0XHR2blN0YXJ0OiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMC4wIH0sXHJcblx0XHRcdHNwYWNpbmc6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAxLjAgfSxcclxuXHRcdFx0YmxlbmRIYXJkbmVzczogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDIuMCB9LFxyXG5cdFx0XHRibGVuZERlcHRoU3VwcGxlbWVudDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAuMCB9LFxyXG5cdFx0XHRmb3Y6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAxLjAgfSxcclxuXHRcdFx0c2NyZWVuV2lkdGg6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAxLjAgfSxcclxuXHRcdFx0c2NyZWVuSGVpZ2h0OiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMS4wIH0sXHJcblx0XHRcdG5lYXI6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwLjEgfSxcclxuXHRcdFx0ZmFyOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMS4wIH0sXHJcblx0XHRcdHVDb2xvcjogeyB0eXBlOiBcImNcIiwgdmFsdWU6IG5ldyBUSFJFRS5Db2xvcigweGZmZmZmZikgfSxcclxuXHRcdFx0dU9wYWNpdHk6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAxLjAgfSxcclxuXHRcdFx0c2l6ZTogeyB0eXBlOiBcImZcIiwgdmFsdWU6IHBvaW50U2l6ZSB9LFxyXG5cdFx0XHRtaW5TaXplOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogbWluU2l6ZSB9LFxyXG5cdFx0XHRtYXhTaXplOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogbWF4U2l6ZSB9LFxyXG5cdFx0XHRvY3RyZWVTaXplOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMCB9LFxyXG5cdFx0XHRiYlNpemU6IHsgdHlwZTogXCJmdlwiLCB2YWx1ZTogWzAsIDAsIDBdIH0sXHJcblx0XHRcdGVsZXZhdGlvblJhbmdlOiB7IHR5cGU6IFwiMmZ2XCIsIHZhbHVlOiBbMCwgMF0gfSxcclxuXHJcblx0XHRcdGNsaXBCb3hDb3VudDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAgfSxcclxuXHRcdFx0Ly9jbGlwU3BoZXJlQ291bnQ6IHt0eXBlOiBcImZcIiwgdmFsdWU6IDB9LFxyXG5cdFx0XHRjbGlwUG9seWdvbkNvdW50OiB7IHR5cGU6IFwiaVwiLCB2YWx1ZTogMCB9LFxyXG5cdFx0XHRjbGlwQm94ZXM6IHsgdHlwZTogXCJNYXRyaXg0ZnZcIiwgdmFsdWU6IFtdIH0sXHJcblx0XHRcdC8vY2xpcFNwaGVyZXM6IHt0eXBlOiBcIk1hdHJpeDRmdlwiLCB2YWx1ZTogW119LFxyXG5cdFx0XHRjbGlwUG9seWdvbnM6IHsgdHlwZTogXCIzZnZcIiwgdmFsdWU6IFtdIH0sXHJcblx0XHRcdGNsaXBQb2x5Z29uVkNvdW50OiB7IHR5cGU6IFwiaXZcIiwgdmFsdWU6IFtdIH0sXHJcblx0XHRcdGNsaXBQb2x5Z29uVlA6IHsgdHlwZTogXCJNYXRyaXg0ZnZcIiwgdmFsdWU6IFtdIH0sXHJcblxyXG5cdFx0XHR2aXNpYmxlTm9kZXM6IHsgdHlwZTogXCJ0XCIsIHZhbHVlOiB0aGlzLnZpc2libGVOb2Rlc1RleHR1cmUgfSxcclxuXHRcdFx0cGNJbmRleDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAgfSxcclxuXHRcdFx0Z3JhZGllbnQ6IHsgdHlwZTogXCJ0XCIsIHZhbHVlOiB0aGlzLmdyYWRpZW50VGV4dHVyZSB9LFxyXG5cdFx0XHRjbGFzc2lmaWNhdGlvbkxVVDogeyB0eXBlOiBcInRcIiwgdmFsdWU6IHRoaXMuY2xhc3NpZmljYXRpb25UZXh0dXJlIH0sXHJcblx0XHRcdHVIUURlcHRoTWFwOiB7IHR5cGU6IFwidFwiLCB2YWx1ZTogbnVsbCB9LFxyXG5cdFx0XHR0b01vZGVsOiB7IHR5cGU6IFwiTWF0cml4NGZcIiwgdmFsdWU6IFtdIH0sXHJcblx0XHRcdGRpZmZ1c2U6IHsgdHlwZTogXCJmdlwiLCB2YWx1ZTogWzEsIDEsIDFdIH0sXHJcblx0XHRcdHRyYW5zaXRpb246IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwLjUgfSxcclxuXHRcdFx0aW50ZW5zaXR5UmFuZ2U6IHsgdHlwZTogXCJmdlwiLCB2YWx1ZTogWzAsIDY1MDAwXSB9LFxyXG5cdFx0XHRpbnRlbnNpdHlHYW1tYTogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDEgfSxcclxuXHRcdFx0aW50ZW5zaXR5Q29udHJhc3Q6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwIH0sXHJcblx0XHRcdGludGVuc2l0eUJyaWdodG5lc3M6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwIH0sXHJcblx0XHRcdHJnYkdhbW1hOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMSB9LFxyXG5cdFx0XHRyZ2JDb250cmFzdDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAgfSxcclxuXHRcdFx0cmdiQnJpZ2h0bmVzczogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAgfSxcclxuXHRcdFx0d1JHQjogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAuNSB9LFxyXG5cdFx0XHR3SW50ZW5zaXR5OiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMCB9LFxyXG5cdFx0XHR3RWxldmF0aW9uOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogMCB9LFxyXG5cdFx0XHR3Q2xhc3NpZmljYXRpb246IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwIH0sXHJcblx0XHRcdHdSZXR1cm5OdW1iZXI6IHsgdHlwZTogXCJmXCIsIHZhbHVlOiAwIH0sXHJcblx0XHRcdHdTb3VyY2VJRDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IDAgfSxcclxuXHRcdFx0dXNlT3J0aG9ncmFwaGljQ2FtZXJhOiB7IHR5cGU6IFwiYlwiLCB2YWx1ZTogZmFsc2UgfSxcclxuXHRcdFx0Y2xpcFRhc2s6IHsgdHlwZTogXCJpXCIsIHZhbHVlOiAxIH0sXHJcblx0XHRcdGNsaXBNZXRob2Q6IHsgdHlwZTogXCJpXCIsIHZhbHVlOiAxIH0sXHJcblx0XHRcdHVTbmFwc2hvdDogeyB0eXBlOiBcInR2XCIsIHZhbHVlOiBbXSB9LFxyXG5cdFx0XHR1U25hcHNob3REZXB0aDogeyB0eXBlOiBcInR2XCIsIHZhbHVlOiBbXSB9LFxyXG5cdFx0XHR1U25hcFZpZXc6IHsgdHlwZTogXCJNYXRyaXg0ZnZcIiwgdmFsdWU6IFtdIH0sXHJcblx0XHRcdHVTbmFwUHJvajogeyB0eXBlOiBcIk1hdHJpeDRmdlwiLCB2YWx1ZTogW10gfSxcclxuXHRcdFx0dVNuYXBQcm9qSW52OiB7IHR5cGU6IFwiTWF0cml4NGZ2XCIsIHZhbHVlOiBbXSB9LFxyXG5cdFx0XHR1U25hcFZpZXdJbnY6IHsgdHlwZTogXCJNYXRyaXg0ZnZcIiwgdmFsdWU6IFtdIH0sXHJcblx0XHRcdHVTaGFkb3dDb2xvcjogeyB0eXBlOiBcIjNmdlwiLCB2YWx1ZTogWzAsIDAsIDBdIH0sXHJcblxyXG5cdFx0XHR1RmlsdGVyUmV0dXJuTnVtYmVyUmFuZ2U6IHsgdHlwZTogXCJmdlwiLCB2YWx1ZTogWzAsIDddIH0sXHJcblx0XHRcdHVGaWx0ZXJOdW1iZXJPZlJldHVybnNSYW5nZTogeyB0eXBlOiBcImZ2XCIsIHZhbHVlOiBbMCwgN10gfSxcclxuXHRcdFx0dUZpbHRlckdQU1RpbWVDbGlwUmFuZ2U6IHsgdHlwZTogXCJmdlwiLCB2YWx1ZTogWzAsIDddIH0sXHJcblxyXG5cdFx0XHRoaWRkZW5DbGFzc2lmaWNhdGlvbnM6IHsgdHlwZTogXCJmdlwiLCB2YWx1ZTogW10gfSxcclxuXHRcdFx0aGlkZGVuUG9pbnRTb3VyY2VJRHM6IHsgdHlwZTogXCJ0XCIsIHZhbHVlOiBudWxsIH0sXHJcblx0XHRcdHNlbGVjdGVkUG9pbnRTb3VyY2VJRDogeyB0eXBlOiBcImZcIiwgdmFsdWU6IC0xIH0sXHJcblx0XHRcdHNlbGVjdGVkUG9pbnRTb3VyY2VJRENvbG9yOiB7IHR5cGU6IFwiM2Z2XCIsIHZhbHVlOiBuZXcgVEhSRUUuQ29sb3IoMC4xMCwgMC42MSwgMC43OCkgfSxcclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy5oaWRkZW5Qb2ludFNvdXJjZUlEcyA9IFtdO1xyXG5cclxuXHRcdHRoaXMuY2xhc3NpZmljYXRpb24gPSBDbGFzc2lmaWNhdGlvbi5ERUZBVUxUO1xyXG5cdFx0dGhpcy5kZWZhdWx0QXR0cmlidXRlVmFsdWVzLm5vcm1hbCA9IFswLCAwLCAwXTtcclxuXHRcdHRoaXMuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcy5jbGFzc2lmaWNhdGlvbiA9IFswLCAwLCAwXTtcclxuXHRcdHRoaXMuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcy5pbmRpY2VzID0gWzAsIDAsIDAsIDBdO1xyXG5cclxuXHRcdHZhciBkZWZpbmVzID0gdGhpcy5nZXREZWZpbmVzKCk7XHJcblx0XHR0aGlzLnZlcnRleFNoYWRlciA9IGRlZmluZXMgKyBTaGFkZXJzLnZlcnRleDtcclxuXHRcdHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBkZWZpbmVzICsgU2hhZGVycy5mcmFnbWVudDtcclxuXHRcdHRoaXMudmVydGV4Q29sb3JzID0gVEhSRUUuVmVydGV4Q29sb3JzO1xyXG5cdH1cclxuXHJcblx0c2V0RGVmaW5lKGtleSwgdmFsdWUpIHtcclxuXHRcdGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsKSB7XHJcblx0XHRcdGlmICh0aGlzLmRlZmluZXMuZ2V0KGtleSkgIT09IHZhbHVlKSB7XHJcblx0XHRcdFx0dGhpcy5kZWZpbmVzLnNldChrZXksIHZhbHVlKTtcclxuXHRcdFx0XHR0aGlzLnVwZGF0ZVNoYWRlclNvdXJjZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0dGhpcy5yZW1vdmVEZWZpbmUoa2V5KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJlbW92ZURlZmluZShrZXkpIHtcclxuXHRcdHRoaXMuZGVmaW5lcy5kZWxldGUoa2V5KTtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZVNoYWRlclNvdXJjZSgpIHtcclxuXHRcdHZhciBkZWZpbmVzID0gdGhpcy5nZXREZWZpbmVzKCk7XHJcblx0XHR0aGlzLnZlcnRleFNoYWRlciA9IGRlZmluZXMgKyBTaGFkZXJzLnZlcnRleDtcclxuXHRcdHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBkZWZpbmVzICsgU2hhZGVycy5mcmFnbWVudDtcclxuXHJcblx0XHRpZiAodGhpcy5vcGFjaXR5ID09PSAxLjApIHtcclxuXHRcdFx0dGhpcy5ibGVuZGluZyA9IFRIUkVFLk5vQmxlbmRpbmc7XHJcblx0XHRcdHRoaXMudHJhbnNwYXJlbnQgPSBmYWxzZTtcclxuXHRcdFx0dGhpcy5kZXB0aFRlc3QgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLmRlcHRoV3JpdGUgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLmRlcHRoRnVuYyA9IFRIUkVFLkxlc3NFcXVhbERlcHRoO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodGhpcy5vcGFjaXR5IDwgMS4wICYmICF0aGlzLnVzZUVETCkge1xyXG5cdFx0XHR0aGlzLmJsZW5kaW5nID0gVEhSRUUuQWRkaXRpdmVCbGVuZGluZztcclxuXHRcdFx0dGhpcy50cmFuc3BhcmVudCA9IHRydWU7XHJcblx0XHRcdHRoaXMuZGVwdGhUZXN0ID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuZGVwdGhXcml0ZSA9IHRydWU7XHJcblx0XHRcdHRoaXMuZGVwdGhGdW5jID0gVEhSRUUuQWx3YXlzRGVwdGg7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMud2VpZ2h0ZWQpIHtcclxuXHRcdFx0dGhpcy5ibGVuZGluZyA9IFRIUkVFLkFkZGl0aXZlQmxlbmRpbmc7XHJcblx0XHRcdHRoaXMudHJhbnNwYXJlbnQgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLmRlcHRoVGVzdCA9IHRydWU7XHJcblx0XHRcdHRoaXMuZGVwdGhXcml0ZSA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cdH1cclxuXHJcblx0b25CZWZvcmVDb21waWxlKHNoYWRlciwgcmVuZGVyZXIpIHtcclxuXHRcdGlmIChyZW5kZXJlci5jYXBhYmlsaXRpZXMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlcikge1xyXG5cdFx0XHR2YXIgZGVmaW5lID0gXCIjZGVmaW5lIFVTRV9MT0dERVBUSEJVRlxcbiNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGX0VYVFxcbiNkZWZpbmUgRVBTSUxPTiAxZS02XFxuXCI7XHJcblx0XHRcdHNoYWRlci5mcmFnbWVudFNoYWRlciA9IGRlZmluZSArIHNoYWRlci5mcmFnbWVudFNoYWRlcjtcclxuXHRcdFx0c2hhZGVyLnZlcnRleFNoYWRlciA9IGRlZmluZSArIHNoYWRlci52ZXJ0ZXhTaGFkZXI7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXREZWZpbmVzKCkge1xyXG5cdFx0dmFyIGRlZmluZXMgPSBbXTtcclxuXHJcblx0XHRpZiAodGhpcy5wb2ludFNpemVUeXBlID09PSBQb2ludFNpemVUeXBlLkZJWEVEKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgZml4ZWRfcG9pbnRfc2l6ZVwiKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHRoaXMucG9pbnRTaXplVHlwZSA9PT0gUG9pbnRTaXplVHlwZS5BVFRFTlVBVEVEKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgYXR0ZW51YXRlZF9wb2ludF9zaXplXCIpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodGhpcy5wb2ludFNpemVUeXBlID09PSBQb2ludFNpemVUeXBlLkFEQVBUSVZFKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgYWRhcHRpdmVfcG9pbnRfc2l6ZVwiKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5zaGFwZSA9PT0gUG9pbnRTaGFwZS5TUVVBUkUpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBzcXVhcmVfcG9pbnRfc2hhcGVcIik7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0aGlzLnNoYXBlID09PSBQb2ludFNoYXBlLkNJUkNMRSkge1xyXG5cdFx0XHRkZWZpbmVzLnB1c2goXCIjZGVmaW5lIGNpcmNsZV9wb2ludF9zaGFwZVwiKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHRoaXMuc2hhcGUgPT09IFBvaW50U2hhcGUuUEFSQUJPTE9JRCkge1xyXG5cdFx0XHRkZWZpbmVzLnB1c2goXCIjZGVmaW5lIHBhcmFib2xvaWRfcG9pbnRfc2hhcGVcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuX3VzZUVETCkge1xyXG5cdFx0XHRkZWZpbmVzLnB1c2goXCIjZGVmaW5lIHVzZV9lZGxcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuX3NuYXBFbmFibGVkKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgc25hcF9lbmFibGVkXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSA9PT0gUG9pbnRDb2xvclR5cGUuUkdCKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgY29sb3JfdHlwZV9yZ2JcIik7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSA9PT0gUG9pbnRDb2xvclR5cGUuQ09MT1IpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX2NvbG9yXCIpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodGhpcy5fcG9pbnRDb2xvclR5cGUgPT09IFBvaW50Q29sb3JUeXBlLkRFUFRIKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgY29sb3JfdHlwZV9kZXB0aFwiKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHRoaXMuX3BvaW50Q29sb3JUeXBlID09PSBQb2ludENvbG9yVHlwZS5IRUlHSFQpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX2hlaWdodFwiKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHRoaXMuX3BvaW50Q29sb3JUeXBlID09PSBQb2ludENvbG9yVHlwZS5JTlRFTlNJVFkpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX2ludGVuc2l0eVwiKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHRoaXMuX3BvaW50Q29sb3JUeXBlID09PSBQb2ludENvbG9yVHlwZS5JTlRFTlNJVFlfR1JBRElFTlQpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX2ludGVuc2l0eV9ncmFkaWVudFwiKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHRoaXMuX3BvaW50Q29sb3JUeXBlID09PSBQb2ludENvbG9yVHlwZS5MT0QpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX2xvZFwiKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHRoaXMuX3BvaW50Q29sb3JUeXBlID09PSBQb2ludENvbG9yVHlwZS5QT0lOVF9JTkRFWCkge1xyXG5cdFx0XHRkZWZpbmVzLnB1c2goXCIjZGVmaW5lIGNvbG9yX3R5cGVfcG9pbnRfaW5kZXhcIik7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSA9PT0gUG9pbnRDb2xvclR5cGUuQ0xBU1NJRklDQVRJT04pIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX2NsYXNzaWZpY2F0aW9uXCIpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodGhpcy5fcG9pbnRDb2xvclR5cGUgPT09IFBvaW50Q29sb3JUeXBlLlJFVFVSTl9OVU1CRVIpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX3JldHVybl9udW1iZXJcIik7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSA9PT0gUG9pbnRDb2xvclR5cGUuU09VUkNFKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgY29sb3JfdHlwZV9zb3VyY2VcIik7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSA9PT0gUG9pbnRDb2xvclR5cGUuTk9STUFMKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgY29sb3JfdHlwZV9ub3JtYWxcIik7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSA9PT0gUG9pbnRDb2xvclR5cGUuUEhPTkcpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX3Bob25nXCIpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodGhpcy5fcG9pbnRDb2xvclR5cGUgPT09IFBvaW50Q29sb3JUeXBlLlJHQl9IRUlHSFQpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBjb2xvcl90eXBlX3JnYl9oZWlnaHRcIik7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSA9PT0gUG9pbnRDb2xvclR5cGUuQ09NUE9TSVRFKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaChcIiNkZWZpbmUgY29sb3JfdHlwZV9jb21wb3NpdGVcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuX3RyZWVUeXBlID09PSBUcmVlVHlwZS5PQ1RSRUUpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSB0cmVlX3R5cGVfb2N0cmVlXCIpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodGhpcy5fdHJlZVR5cGUgPT09IFRyZWVUeXBlLktEVFJFRSkge1xyXG5cdFx0XHRkZWZpbmVzLnB1c2goXCIjZGVmaW5lIHRyZWVfdHlwZV9rZHRyZWVcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMud2VpZ2h0ZWQpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSB3ZWlnaHRlZF9zcGxhdHNcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuaGlkZGVuQ2xhc3NpZmljYXRpb25zLmxlbmd0aCkge1xyXG5cdFx0XHRkZWZpbmVzLnB1c2goYCNkZWZpbmUgbnVtX2hpZGRlbmNsYXNzaWZpY2F0aW9ucyAke3RoaXMuaGlkZGVuQ2xhc3NpZmljYXRpb25zLmxlbmd0aH1gKTtcclxuXHRcdH1cclxuXHRcdGlmICh0aGlzLmhpZGRlblBvaW50U291cmNlSURzLmxlbmd0aCkge1xyXG5cdFx0XHRkZWZpbmVzLnB1c2goYCNkZWZpbmUgbnVtX2hpZGRlbnBvaW50c291cmNlaWRzICR7dGhpcy5oaWRkZW5Qb2ludFNvdXJjZUlEcy5sZW5ndGh9YCk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMucG9pbnRTZWxlY3Rpb25UeXBlID09PSBQb2ludFNlbGVjdGlvblR5cGUuQ09MT1IpIHtcclxuXHRcdFx0ZGVmaW5lcy5wdXNoKFwiI2RlZmluZSBzZWxlY3Rpb25fdHlwZV9jb2xvclwiKTtcclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKHZhciBba2V5LCB2YWx1ZV0gb2YgdGhpcy5kZWZpbmVzKSB7XHJcblx0XHRcdGRlZmluZXMucHVzaCh2YWx1ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGRlZmluZXMuam9pbihcIlxcblwiKTtcclxuXHR9XHJcblxyXG5cdHNldENsaXBCb3hlcyhjbGlwQm94ZXMpIHtcclxuXHRcdGlmICghY2xpcEJveGVzKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgZG9VcGRhdGUgPSAodGhpcy5jbGlwQm94ZXMubGVuZ3RoICE9PSBjbGlwQm94ZXMubGVuZ3RoKSAmJiAoY2xpcEJveGVzLmxlbmd0aCA9PT0gMCB8fCB0aGlzLmNsaXBCb3hlcy5sZW5ndGggPT09IDApO1xyXG5cdFx0dGhpcy51bmlmb3Jtcy5jbGlwQm94Q291bnQudmFsdWUgPSB0aGlzLmNsaXBCb3hlcy5sZW5ndGg7XHJcblx0XHR0aGlzLmNsaXBCb3hlcyA9IGNsaXBCb3hlcztcclxuXHJcblx0XHRpZiAoZG9VcGRhdGUpIHtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnVuaWZvcm1zLmNsaXBCb3hlcy52YWx1ZSA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5jbGlwQm94ZXMubGVuZ3RoICogMTYpO1xyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jbGlwQm94ZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGJveCA9IGNsaXBCb3hlc1tpXTtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy5jbGlwQm94ZXMudmFsdWUuc2V0KGJveC5pbnZlcnNlLmVsZW1lbnRzLCAxNiAqIGkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy51bmlmb3Jtcy5jbGlwQm94ZXMudmFsdWUubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0aWYgKE51bWJlci5pc05hTih0aGlzLnVuaWZvcm1zLmNsaXBCb3hlcy52YWx1ZVtpXSkpIHtcclxuXHRcdFx0XHR0aGlzLnVuaWZvcm1zLmNsaXBCb3hlcy52YWx1ZVtpXSA9IEluZmluaXR5O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzZXRDbGlwUG9seWdvbnMoY2xpcFBvbHlnb25zLCBtYXhQb2x5Z29uVmVydGljZXMpIHtcclxuXHRcdGlmICghY2xpcFBvbHlnb25zKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHRoaXMuY2xpcFBvbHlnb25zID0gY2xpcFBvbHlnb25zO1xyXG5cdFx0dmFyIGRvVXBkYXRlID0gKHRoaXMuY2xpcFBvbHlnb25zLmxlbmd0aCAhPT0gY2xpcFBvbHlnb25zLmxlbmd0aCk7XHJcblx0XHRpZiAoZG9VcGRhdGUpIHtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCBncmFkaWVudCgpIHtcclxuXHRcdHJldHVybiB0aGlzLl9ncmFkaWVudDtcclxuXHR9XHJcblxyXG5cdHNldCBncmFkaWVudCh2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMuX2dyYWRpZW50ICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLl9ncmFkaWVudCA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLmdyYWRpZW50VGV4dHVyZSA9IFBvaW50Q2xvdWRNYXRlcmlhbC5nZW5lcmF0ZUdyYWRpZW50VGV4dHVyZSh0aGlzLl9ncmFkaWVudCk7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuZ3JhZGllbnQudmFsdWUgPSB0aGlzLmdyYWRpZW50VGV4dHVyZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCB1c2VPcnRob2dyYXBoaWNDYW1lcmEoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy51c2VPcnRob2dyYXBoaWNDYW1lcmEudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgdXNlT3J0aG9ncmFwaGljQ2FtZXJhKHZhbHVlKSB7XHJcblx0XHRpZiAodGhpcy51bmlmb3Jtcy51c2VPcnRob2dyYXBoaWNDYW1lcmEudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMudXNlT3J0aG9ncmFwaGljQ2FtZXJhLnZhbHVlID0gdmFsdWU7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgY2xhc3NpZmljYXRpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5fY2xhc3NpZmljYXRpb247XHJcblx0fVxyXG5cclxuXHRzZXQgY2xhc3NpZmljYXRpb24odmFsdWUpIHtcclxuXHRcdHZhciBjb3B5ID0ge307XHJcblx0XHRmb3IgKHZhciBrZXkgb2YgT2JqZWN0LmtleXModmFsdWUpKSB7XHJcblx0XHRcdGNvcHlba2V5XSA9IHZhbHVlW2tleV0uY2xvbmUoKTtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgaXNFcXVhbCA9IGZhbHNlO1xyXG5cdFx0aWYgKHRoaXMuX2NsYXNzaWZpY2F0aW9uID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0aXNFcXVhbCA9IGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdGlzRXF1YWwgPSBPYmplY3Qua2V5cyhjb3B5KS5sZW5ndGggPT09IE9iamVjdC5rZXlzKHRoaXMuX2NsYXNzaWZpY2F0aW9uKS5sZW5ndGg7XHJcblx0XHRcdGZvciAodmFyIGtleSBvZiBPYmplY3Qua2V5cyhjb3B5KSkge1xyXG5cdFx0XHRcdGlzRXF1YWwgPSBpc0VxdWFsICYmIHRoaXMuX2NsYXNzaWZpY2F0aW9uW2tleV0gIT09IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRpc0VxdWFsID0gaXNFcXVhbCAmJiBjb3B5W2tleV0uZXF1YWxzKHRoaXMuX2NsYXNzaWZpY2F0aW9uW2tleV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCFpc0VxdWFsKSB7XHJcblx0XHRcdHRoaXMuX2NsYXNzaWZpY2F0aW9uID0gY29weTtcclxuXHRcdFx0dGhpcy5yZWNvbXB1dGVDbGFzc2lmaWNhdGlvbigpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cmVjb21wdXRlQ2xhc3NpZmljYXRpb24oKSB7XHJcblx0XHR0aGlzLmNsYXNzaWZpY2F0aW9uVGV4dHVyZSA9IFBvaW50Q2xvdWRNYXRlcmlhbC5nZW5lcmF0ZUNsYXNzaWZpY2F0aW9uVGV4dHVyZSh0aGlzLl9jbGFzc2lmaWNhdGlvbik7XHJcblx0XHR0aGlzLnVuaWZvcm1zLmNsYXNzaWZpY2F0aW9uTFVULnZhbHVlID0gdGhpcy5jbGFzc2lmaWNhdGlvblRleHR1cmU7XHJcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0fSk7XHJcblx0fVxyXG5cclxuXHRnZXQgaGlkZGVuQ2xhc3NpZmljYXRpb25zKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMuaGlkZGVuQ2xhc3NpZmljYXRpb25zLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IGhpZGRlbkNsYXNzaWZpY2F0aW9ucyh2YWx1ZSkge1xyXG5cdFx0dmFsdWUgPSB0aGlzLmdldERpc3RpbmN0RlYodmFsdWUpO1xyXG5cdFx0aWYgKEpTT04uc3RyaW5naWZ5KHZhbHVlKSAhPT0gSlNPTi5zdHJpbmdpZnkodGhpcy51bmlmb3Jtcy5oaWRkZW5DbGFzc2lmaWNhdGlvbnMudmFsdWUpKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuaGlkZGVuQ2xhc3NpZmljYXRpb25zLnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMudXBkYXRlU2hhZGVyU291cmNlKCk7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCh7XHJcblx0XHRcdFx0dHlwZTogXCJtYXRlcmlhbF9wcm9wZXJ0eV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IGhpZGRlblBvaW50U291cmNlSURzVGV4dHVyZSgpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLmhpZGRlblBvaW50U291cmNlSURzLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0Z2V0IGhpZGRlblBvaW50U291cmNlSURzKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX2hpZGRlblBvaW50U291cmNlSURzO1xyXG5cdH1cclxuXHJcblx0c2V0IGhpZGRlblBvaW50U291cmNlSURzKHZhbHVlKSB7XHJcblx0XHR2YWx1ZSA9IHRoaXMuZ2V0RGlzdGluY3RGVih2YWx1ZSk7XHJcblx0XHRpZiAoSlNPTi5zdHJpbmdpZnkodmFsdWUpICE9PSBKU09OLnN0cmluZ2lmeSh0aGlzLl9oaWRkZW5Qb2ludFNvdXJjZUlEcykpIHtcclxuXHRcdFx0dGhpcy5faGlkZGVuUG9pbnRTb3VyY2VJRHMgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy5yZWNvbXB1dGVIaWRkZW5Qb2ludFNvdXJjZUlEcygpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0RGlzdGluY3RGVih2YWx1ZSkge1xyXG5cdFx0cmV0dXJuIFsuLi5uZXcgU2V0KHZhbHVlKV0uc29ydCgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogV2ViR0wgZmxvYXRbXSBpcyBvbmx5IGd1YXJhbnRlZWQgdG8gc3VwcG9ydCAxLDAyNCB2YWx1ZXMsIGJleW9uZCB3aGljaCBpdCBjYW4gY3Jhc2gsXHJcblx0ICogc28gd2UgdXBsb2FkIGhpZGRlblBvaW50U291cmNlSURzIGFzIGEgMjU2eDI1NiB0ZXh0dXJlLCB3aGVyZSBlYWNoIHBpeGVsIHJlcHJlc2VudHNcclxuXHQgKiB0aGUgc3RhdGUgb2YgdGhlIDY1LDUzNiBhdmFpbGFibGUgcG9pbnRTb3VyY2VJZHMgKHRoZSBtYXggYWxsb3dlZCBieSBMQVMvUG90cmVlKVxyXG5cdCAqL1xyXG5cdHJlY29tcHV0ZUhpZGRlblBvaW50U291cmNlSURzKCkge1xyXG5cclxuXHRcdGNvbnN0IGhpZGRlblBvaW50U291cmNlSURzID0gdGhpcy5oaWRkZW5Qb2ludFNvdXJjZUlEcztcclxuXHRcdGNvbnN0IHdpZHRoID0gMjU2O1xyXG5cdFx0Y29uc3QgaGVpZ2h0ID0gMjU2O1xyXG5cdFx0Y29uc3Qgc2l6ZSA9IHdpZHRoICogaGVpZ2h0O1xyXG5cdFx0Y29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KDMgKiBzaXplKTtcclxuXHJcblx0XHRoaWRkZW5Qb2ludFNvdXJjZUlEcy5mb3JFYWNoKGlkID0+IHtcclxuXHRcdFx0Y29uc3QgbiA9IGlkICogMztcclxuXHRcdFx0ZGF0YVtuXSA9IDI1NTsgLy8gMjU1IGhlcmUgPT4gdGV4dHVyZTJkKC4uLikuciA9PSAxLjAgaW4gR0xTTFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Y29uc3QgdGV4dHVyZSA9IG5ldyBUSFJFRS5EYXRhVGV4dHVyZShkYXRhLCB3aWR0aCwgaGVpZ2h0LCBUSFJFRS5SR0JGb3JtYXQpO1xyXG5cdFx0dGV4dHVyZS5tYWdGaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xyXG5cdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblxyXG5cdFx0dGhpcy51bmlmb3Jtcy5oaWRkZW5Qb2ludFNvdXJjZUlEcy52YWx1ZSA9IHRleHR1cmU7XHJcblxyXG5cdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCh7XHJcblx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0Z2V0IHNlbGVjdGVkUG9pbnRTb3VyY2VJRCgpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLnNlbGVjdGVkUG9pbnRTb3VyY2VJRC52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBzZWxlY3RlZFBvaW50U291cmNlSUQodmFsdWUpIHtcclxuXHRcdGlmICh2YWx1ZSAhPT0gdGhpcy51bmlmb3Jtcy5zZWxlY3RlZFBvaW50U291cmNlSUQudmFsdWUpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy5zZWxlY3RlZFBvaW50U291cmNlSUQudmFsdWUgPSB2YWx1ZSB8fCAtMTtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KHtcclxuXHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgc2VsZWN0ZWRQb2ludFNvdXJjZUlEQ29sb3IoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5zZWxlY3RlZFBvaW50U291cmNlSURDb2xvci52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBzZWxlY3RlZFBvaW50U291cmNlSURDb2xvcih2YWx1ZSkge1xyXG5cdFx0aWYgKHZhbHVlICE9PSB0aGlzLnVuaWZvcm1zLnNlbGVjdGVkUG9pbnRTb3VyY2VJRENvbG9yLnZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuc2VsZWN0ZWRQb2ludFNvdXJjZUlEQ29sb3IudmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KHtcclxuXHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgbnVtU25hcHNob3RzKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX251bVNuYXBzaG90cztcclxuXHR9XHJcblxyXG5cdHNldCBudW1TbmFwc2hvdHModmFsdWUpIHtcclxuXHRcdHRoaXMuX251bVNuYXBzaG90cyA9IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0Z2V0IHNuYXBFbmFibGVkKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3NuYXBFbmFibGVkO1xyXG5cdH1cclxuXHJcblx0c2V0IHNuYXBFbmFibGVkKHZhbHVlKSB7XHJcblx0XHRpZiAodGhpcy5fc25hcEVuYWJsZWQgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMuX3NuYXBFbmFibGVkID0gdmFsdWU7XHJcblx0XHRcdHRoaXMudXBkYXRlU2hhZGVyU291cmNlKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgc3BhY2luZygpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLnNwYWNpbmcudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgc3BhY2luZyh2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMuc3BhY2luZy52YWx1ZSAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy5zcGFjaW5nLnZhbHVlID0gdmFsdWU7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgdXNlQ2xpcEJveCgpIHtcclxuXHRcdHJldHVybiB0aGlzLl91c2VDbGlwQm94O1xyXG5cdH1cclxuXHJcblx0c2V0IHVzZUNsaXBCb3godmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLl91c2VDbGlwQm94ICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLl91c2VDbGlwQm94ID0gdmFsdWU7XHJcblx0XHRcdHRoaXMudXBkYXRlU2hhZGVyU291cmNlKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgY2xpcFRhc2soKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5jbGlwVGFzay52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBjbGlwVGFzayhtb2RlKSB7XHJcblx0XHR0aGlzLnVuaWZvcm1zLmNsaXBUYXNrLnZhbHVlID0gbW9kZTtcclxuXHR9XHJcblxyXG5cdGdldCBjbGlwTWV0aG9kKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMuY2xpcE1ldGhvZC52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBjbGlwTWV0aG9kKG1vZGUpIHtcclxuXHRcdHRoaXMudW5pZm9ybXMuY2xpcE1ldGhvZC52YWx1ZSA9IG1vZGU7XHJcblx0fVxyXG5cclxuXHRnZXQgd2VpZ2h0ZWQoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5fd2VpZ2h0ZWQ7XHJcblx0fVxyXG5cclxuXHRzZXQgd2VpZ2h0ZWQodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLl93ZWlnaHRlZCAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy5fd2VpZ2h0ZWQgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCBmb3YoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5mb3YudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgZm92KHZhbHVlKSB7XHJcblx0XHRpZiAodGhpcy51bmlmb3Jtcy5mb3YudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuZm92LnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMudXBkYXRlU2hhZGVyU291cmNlKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgc2NyZWVuV2lkdGgoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5zY3JlZW5XaWR0aC52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBzY3JlZW5XaWR0aCh2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMuc2NyZWVuV2lkdGgudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuc2NyZWVuV2lkdGgudmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCBzY3JlZW5IZWlnaHQoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5zY3JlZW5IZWlnaHQudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgc2NyZWVuSGVpZ2h0KHZhbHVlKSB7XHJcblx0XHRpZiAodGhpcy51bmlmb3Jtcy5zY3JlZW5IZWlnaHQudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuc2NyZWVuSGVpZ2h0LnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMudXBkYXRlU2hhZGVyU291cmNlKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgbmVhcigpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLm5lYXIudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgbmVhcih2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMubmVhci52YWx1ZSAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy5uZWFyLnZhbHVlID0gdmFsdWU7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgZmFyKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMuZmFyLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IGZhcih2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMuZmFyLnZhbHVlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLnVuaWZvcm1zLmZhci52YWx1ZSA9IHZhbHVlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IG9wYWNpdHkoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy51T3BhY2l0eS52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBvcGFjaXR5KHZhbHVlKSB7XHJcblx0XHRpZiAodGhpcy51bmlmb3JtcyAmJiB0aGlzLnVuaWZvcm1zLnVPcGFjaXR5KSB7XHJcblx0XHRcdGlmICh0aGlzLnVuaWZvcm1zLnVPcGFjaXR5LnZhbHVlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHRcdHRoaXMudW5pZm9ybXMudU9wYWNpdHkudmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0XHR0aGlzLnVwZGF0ZVNoYWRlclNvdXJjZSgpO1xyXG5cdFx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0dHlwZTogXCJvcGFjaXR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgcG9pbnRDb2xvclR5cGUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5fcG9pbnRDb2xvclR5cGU7XHJcblx0fVxyXG5cclxuXHRzZXQgcG9pbnRDb2xvclR5cGUodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLl9wb2ludENvbG9yVHlwZSAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy5fcG9pbnRDb2xvclR5cGUgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwicG9pbnRfY29sb3JfdHlwZV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgcG9pbnRTaXplVHlwZSgpIHtcclxuXHRcdHJldHVybiB0aGlzLl9wb2ludFNpemVUeXBlO1xyXG5cdH1cclxuXHJcblx0c2V0IHBvaW50U2l6ZVR5cGUodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLl9wb2ludFNpemVUeXBlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLl9wb2ludFNpemVUeXBlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMudXBkYXRlU2hhZGVyU291cmNlKCk7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcInBvaW50X3NpemVfdHlwZV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgdXNlRURMKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3VzZUVETDtcclxuXHR9XHJcblxyXG5cdHNldCB1c2VFREwodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLl91c2VFREwgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMuX3VzZUVETCA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLnVwZGF0ZVNoYWRlclNvdXJjZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IGNvbG9yKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMudUNvbG9yLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IGNvbG9yKHZhbHVlKSB7XHJcblx0XHRpZiAoIXRoaXMudW5pZm9ybXMudUNvbG9yLnZhbHVlLmVxdWFscyh2YWx1ZSkpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy51Q29sb3IudmFsdWUuY29weSh2YWx1ZSk7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcImNvbG9yX2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogXCJtYXRlcmlhbF9wcm9wZXJ0eV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCBzaGFwZSgpIHtcclxuXHRcdHJldHVybiB0aGlzLl9zaGFwZTtcclxuXHR9XHJcblxyXG5cdHNldCBzaGFwZSh2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMuX3NoYXBlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLl9zaGFwZSA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLnVwZGF0ZVNoYWRlclNvdXJjZSgpO1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogXCJwb2ludF9zaGFwZV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgdHJlZVR5cGUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5fdHJlZVR5cGU7XHJcblx0fVxyXG5cclxuXHRzZXQgdHJlZVR5cGUodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLl90cmVlVHlwZSAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy5fdHJlZVR5cGUgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy51cGRhdGVTaGFkZXJTb3VyY2UoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCBiYlNpemUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5iYlNpemUudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgYmJTaXplKHZhbHVlKSB7XHJcblx0XHR0aGlzLnVuaWZvcm1zLmJiU2l6ZS52YWx1ZSA9IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0Z2V0IHNpemUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5zaXplLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IHNpemUodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLnVuaWZvcm1zLnNpemUudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuc2l6ZS52YWx1ZSA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogXCJwb2ludF9zaXplX2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogXCJtYXRlcmlhbF9wcm9wZXJ0eV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCBlbGV2YXRpb25SYW5nZSgpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLmVsZXZhdGlvblJhbmdlLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IGVsZXZhdGlvblJhbmdlKHZhbHVlKSB7XHJcblx0XHR2YXIgY2hhbmdlZCA9IHRoaXMudW5pZm9ybXMuZWxldmF0aW9uUmFuZ2UudmFsdWVbMF0gIT09IHZhbHVlWzBdIHx8XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuZWxldmF0aW9uUmFuZ2UudmFsdWVbMV0gIT09IHZhbHVlWzFdO1xyXG5cdFx0aWYgKGNoYW5nZWQpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy5lbGV2YXRpb25SYW5nZS52YWx1ZSA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLl9kZWZhdWx0RWxldmF0aW9uUmFuZ2VDaGFuZ2VkID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgaGVpZ2h0TWluKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMuZWxldmF0aW9uUmFuZ2UudmFsdWVbMF07XHJcblx0fVxyXG5cclxuXHRzZXQgaGVpZ2h0TWluKHZhbHVlKSB7XHJcblx0XHR0aGlzLmVsZXZhdGlvblJhbmdlID0gW3ZhbHVlLCB0aGlzLmVsZXZhdGlvblJhbmdlWzFdXTtcclxuXHR9XHJcblxyXG5cdGdldCBoZWlnaHRNYXgoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5lbGV2YXRpb25SYW5nZS52YWx1ZVsxXTtcclxuXHR9XHJcblxyXG5cdHNldCBoZWlnaHRNYXgodmFsdWUpIHtcclxuXHRcdHRoaXMuZWxldmF0aW9uUmFuZ2UgPSBbdGhpcy5lbGV2YXRpb25SYW5nZVswXSwgdmFsdWVdO1xyXG5cdH1cclxuXHJcblx0Z2V0IHRyYW5zaXRpb24oKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy50cmFuc2l0aW9uLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IHRyYW5zaXRpb24odmFsdWUpIHtcclxuXHRcdHRoaXMudW5pZm9ybXMudHJhbnNpdGlvbi52YWx1ZSA9IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0Z2V0IGludGVuc2l0eVJhbmdlKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMuaW50ZW5zaXR5UmFuZ2UudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgaW50ZW5zaXR5UmFuZ2UodmFsdWUpIHtcclxuXHRcdGlmICghKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkgJiYgdmFsdWUubGVuZ3RoID09PSAyKSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHZhbHVlWzBdID09PSB0aGlzLnVuaWZvcm1zLmludGVuc2l0eVJhbmdlLnZhbHVlWzBdICYmIHZhbHVlWzFdID09PSB0aGlzLnVuaWZvcm1zLmludGVuc2l0eVJhbmdlLnZhbHVlWzFdKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnVuaWZvcm1zLmludGVuc2l0eVJhbmdlLnZhbHVlID0gdmFsdWU7XHJcblx0XHR0aGlzLl9kZWZhdWx0SW50ZW5zaXR5UmFuZ2VDaGFuZ2VkID0gdHJ1ZTtcclxuXHJcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0fSk7XHJcblx0fVxyXG5cclxuXHRnZXQgaW50ZW5zaXR5R2FtbWEoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5pbnRlbnNpdHlHYW1tYS52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBpbnRlbnNpdHlHYW1tYSh2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMuaW50ZW5zaXR5R2FtbWEudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuaW50ZW5zaXR5R2FtbWEudmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgaW50ZW5zaXR5Q29udHJhc3QoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5pbnRlbnNpdHlDb250cmFzdC52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCBpbnRlbnNpdHlDb250cmFzdCh2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMuaW50ZW5zaXR5Q29udHJhc3QudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMuaW50ZW5zaXR5Q29udHJhc3QudmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgaW50ZW5zaXR5QnJpZ2h0bmVzcygpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLmludGVuc2l0eUJyaWdodG5lc3MudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgaW50ZW5zaXR5QnJpZ2h0bmVzcyh2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMuaW50ZW5zaXR5QnJpZ2h0bmVzcy52YWx1ZSAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy5pbnRlbnNpdHlCcmlnaHRuZXNzLnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IHJnYkdhbW1hKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMucmdiR2FtbWEudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgcmdiR2FtbWEodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLnVuaWZvcm1zLnJnYkdhbW1hLnZhbHVlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLnVuaWZvcm1zLnJnYkdhbW1hLnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IHJnYkNvbnRyYXN0KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMucmdiQ29udHJhc3QudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgcmdiQ29udHJhc3QodmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLnVuaWZvcm1zLnJnYkNvbnRyYXN0LnZhbHVlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLnVuaWZvcm1zLnJnYkNvbnRyYXN0LnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IHJnYkJyaWdodG5lc3MoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy5yZ2JCcmlnaHRuZXNzLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IHJnYkJyaWdodG5lc3ModmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLnVuaWZvcm1zLnJnYkJyaWdodG5lc3MudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMucmdiQnJpZ2h0bmVzcy52YWx1ZSA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogXCJtYXRlcmlhbF9wcm9wZXJ0eV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCB3ZWlnaHRSR0IoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy53UkdCLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IHdlaWdodFJHQih2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMud1JHQi52YWx1ZSAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy53UkdCLnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IHdlaWdodEludGVuc2l0eSgpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLndJbnRlbnNpdHkudmFsdWU7XHJcblx0fVxyXG5cclxuXHRzZXQgd2VpZ2h0SW50ZW5zaXR5KHZhbHVlKSB7XHJcblx0XHRpZiAodGhpcy51bmlmb3Jtcy53SW50ZW5zaXR5LnZhbHVlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLnVuaWZvcm1zLndJbnRlbnNpdHkudmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibWF0ZXJpYWxfcHJvcGVydHlfY2hhbmdlZFwiLFxyXG5cdFx0XHRcdFx0dGFyZ2V0OiB0aGlzXHJcblx0XHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXQgd2VpZ2h0RWxldmF0aW9uKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMud0VsZXZhdGlvbi52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCB3ZWlnaHRFbGV2YXRpb24odmFsdWUpIHtcclxuXHRcdGlmICh0aGlzLnVuaWZvcm1zLndFbGV2YXRpb24udmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMud0VsZXZhdGlvbi52YWx1ZSA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogXCJtYXRlcmlhbF9wcm9wZXJ0eV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCB3ZWlnaHRDbGFzc2lmaWNhdGlvbigpIHtcclxuXHRcdHJldHVybiB0aGlzLnVuaWZvcm1zLndDbGFzc2lmaWNhdGlvbi52YWx1ZTtcclxuXHR9XHJcblxyXG5cdHNldCB3ZWlnaHRDbGFzc2lmaWNhdGlvbih2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMud0NsYXNzaWZpY2F0aW9uLnZhbHVlICE9PSB2YWx1ZSkge1xyXG5cdFx0XHR0aGlzLnVuaWZvcm1zLndDbGFzc2lmaWNhdGlvbi52YWx1ZSA9IHZhbHVlO1xyXG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dHlwZTogXCJtYXRlcmlhbF9wcm9wZXJ0eV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHR0YXJnZXQ6IHRoaXNcclxuXHRcdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGdldCB3ZWlnaHRSZXR1cm5OdW1iZXIoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy51bmlmb3Jtcy53UmV0dXJuTnVtYmVyLnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IHdlaWdodFJldHVybk51bWJlcih2YWx1ZSkge1xyXG5cdFx0aWYgKHRoaXMudW5pZm9ybXMud1JldHVybk51bWJlci52YWx1ZSAhPT0gdmFsdWUpIHtcclxuXHRcdFx0dGhpcy51bmlmb3Jtcy53UmV0dXJuTnVtYmVyLnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0IHdlaWdodFNvdXJjZUlEKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMud1NvdXJjZUlELnZhbHVlO1xyXG5cdH1cclxuXHJcblx0c2V0IHdlaWdodFNvdXJjZUlEKHZhbHVlKSB7XHJcblx0XHRpZiAodGhpcy51bmlmb3Jtcy53U291cmNlSUQudmFsdWUgIT09IHZhbHVlKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXMud1NvdXJjZUlELnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR0eXBlOiBcIm1hdGVyaWFsX3Byb3BlcnR5X2NoYW5nZWRcIixcclxuXHRcdFx0XHRcdHRhcmdldDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0c3RhdGljIGdlbmVyYXRlR3JhZGllbnRUZXh0dXJlKGdyYWRpZW50KSB7XHJcblx0XHR2YXIgc2l6ZSA9IDY0O1xyXG5cclxuXHRcdC8vQ3JlYXRlIGNhbnZhc1xyXG5cdFx0dmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7XHJcblx0XHRjYW52YXMud2lkdGggPSBzaXplO1xyXG5cdFx0Y2FudmFzLmhlaWdodCA9IHNpemU7XHJcblxyXG5cdFx0Ly9HZXQgY29udGV4dFxyXG5cdFx0dmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG5cclxuXHRcdC8vRHJhdyBncmFkaWVudFxyXG5cdFx0Y29udGV4dC5yZWN0KDAsIDAsIHNpemUsIHNpemUpO1xyXG5cdFx0dmFyIGN0eEdyYWRpZW50ID0gY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCBzaXplLCBzaXplKTtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZ3JhZGllbnQubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIHN0ZXAgPSBncmFkaWVudFtpXTtcclxuXHRcdFx0Y3R4R3JhZGllbnQuYWRkQ29sb3JTdG9wKHN0ZXBbMF0sIFwiI1wiICsgc3RlcFsxXS5nZXRIZXhTdHJpbmcoKSk7XHJcblx0XHR9XHJcblx0XHRjb250ZXh0LmZpbGxTdHlsZSA9IGN0eEdyYWRpZW50O1xyXG5cdFx0Y29udGV4dC5maWxsKCk7XHJcblxyXG5cdFx0dmFyIHRleHR1cmUgPSBuZXcgVEhSRUUuQ2FudmFzVGV4dHVyZShjYW52YXMpO1xyXG5cdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcblx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IFRIUkVFLkxpbmVhckZpbHRlcjtcclxuXHJcblx0XHRyZXR1cm4gdGV4dHVyZTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZW5lcmF0ZUNsYXNzaWZpY2F0aW9uVGV4dHVyZShjbGFzc2lmaWNhdGlvbikge1xyXG5cdFx0dmFyIHdpZHRoID0gMjU2O1xyXG5cdFx0dmFyIGhlaWdodCA9IDI1NjtcclxuXHRcdHZhciBzaXplID0gd2lkdGggKiBoZWlnaHQ7XHJcblx0XHR2YXIgZGF0YSA9IG5ldyBVaW50OEFycmF5KDQgKiBzaXplKTtcclxuXHRcdGZvciAodmFyIHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xyXG5cdFx0XHRmb3IgKHZhciB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XHJcblx0XHRcdFx0dmFyIGkgPSB4ICsgd2lkdGggKiB5O1xyXG5cclxuXHRcdFx0XHR2YXIgY29sb3I7XHJcblx0XHRcdFx0aWYgKGNsYXNzaWZpY2F0aW9uW3hdKSB7XHJcblx0XHRcdFx0XHRjb2xvciA9IGNsYXNzaWZpY2F0aW9uW3hdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmIChjbGFzc2lmaWNhdGlvblt4ICUgMzJdKSB7XHJcblx0XHRcdFx0XHRjb2xvciA9IGNsYXNzaWZpY2F0aW9uW3ggJSAzMl07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0Y29sb3IgPSBjbGFzc2lmaWNhdGlvbi5ERUZBVUxUO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRkYXRhWzQgKiBpICsgMF0gPSAyNTUgKiBjb2xvci54O1xyXG5cdFx0XHRcdGRhdGFbNCAqIGkgKyAxXSA9IDI1NSAqIGNvbG9yLnk7XHJcblx0XHRcdFx0ZGF0YVs0ICogaSArIDJdID0gMjU1ICogY29sb3IuejtcclxuXHRcdFx0XHRkYXRhWzQgKiBpICsgM10gPSAyNTUgKiBjb2xvci53O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHR2YXIgdGV4dHVyZSA9IG5ldyBUSFJFRS5EYXRhVGV4dHVyZShkYXRhLCB3aWR0aCwgaGVpZ2h0LCBUSFJFRS5SR0JBRm9ybWF0KTtcclxuXHRcdHRleHR1cmUubWFnRmlsdGVyID0gVEhSRUUuTmVhcmVzdEZpbHRlcjtcclxuXHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xyXG5cclxuXHRcdHJldHVybiB0ZXh0dXJlO1xyXG5cdH1cclxuXHJcblx0ZGlzYWJsZUV2ZW50cygpIHtcclxuXHRcdGlmICh0aGlzLl9oaWRkZW5MaXN0ZW5lcnMgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR0aGlzLl9oaWRkZW5MaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XHJcblx0XHRcdHRoaXMuX2xpc3RlbmVycyA9IHt9O1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZW5hYmxlRXZlbnRzKCkge1xyXG5cdFx0dGhpcy5fbGlzdGVuZXJzID0gdGhpcy5faGlkZGVuTGlzdGVuZXJzO1xyXG5cdFx0dGhpcy5faGlkZGVuTGlzdGVuZXJzID0gdW5kZWZpbmVkO1xyXG5cdH1cclxuXHJcblx0Y29weUZyb20oZnJvbSkge1xyXG5cdFx0Zm9yICh2YXIgbmFtZSBvZiB0aGlzLnVuaWZvcm1zKSB7XHJcblx0XHRcdHRoaXMudW5pZm9ybXNbbmFtZV0udmFsdWUgPSBmcm9tLnVuaWZvcm1zW25hbWVdLnZhbHVlO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbmV4cG9ydCB7IFBvaW50Q2xvdWRNYXRlcmlhbCB9O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmltcG9ydCB7IFBvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeU5vZGUgfSBmcm9tIFwiLi9nZW9tZXRyaWVzL1BvaW50Q2xvdWRPY3RyZWVHZW9tZXRyeS5qc1wiO1xyXG5pbXBvcnQgeyBIZWxwZXJVdGlscyB9IGZyb20gXCIuLi91dGlscy9IZWxwZXJVdGlscy5qc1wiO1xyXG5pbXBvcnQgeyBQb2ludENsb3VkVHJlZSwgUG9pbnRDbG91ZFRyZWVOb2RlIH0gZnJvbSBcIi4vUG9pbnRDbG91ZFRyZWUuanNcIjtcclxuaW1wb3J0IHsgUG9pbnRDbG91ZE1hdGVyaWFsIH0gZnJvbSBcIi4vbWF0ZXJpYWxzL1BvaW50Q2xvdWRNYXRlcmlhbC5qc1wiO1xyXG5pbXBvcnQgeyBQb2ludENvbG9yVHlwZSwgUG9pbnRTaXplVHlwZSwgQ2xpcFRhc2ssIFBvaW50U2hhcGUgfSBmcm9tIFwiLi4vUG90cmVlLmpzXCI7XHJcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gXCIuLi9HbG9iYWwuanNcIjtcclxuXHJcbmNsYXNzIFBvaW50Q2xvdWRPY3RyZWVOb2RlIGV4dGVuZHMgUG9pbnRDbG91ZFRyZWVOb2RlIHtcclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5jaGlsZHJlbiA9IHt9O1xyXG5cdFx0dGhpcy5zY2VuZU5vZGUgPSBudWxsO1xyXG5cdFx0dGhpcy5vY3RyZWUgPSBudWxsO1xyXG5cdH1cclxuXHJcblx0Z2V0TnVtUG9pbnRzKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2VvbWV0cnlOb2RlLm51bVBvaW50cztcclxuXHR9XHJcblxyXG5cdGlzTG9hZGVkKCkge1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRpc1RyZWVOb2RlKCkge1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRpc0dlb21ldHJ5Tm9kZSgpIHtcclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdGdldExldmVsKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2VvbWV0cnlOb2RlLmxldmVsO1xyXG5cdH1cclxuXHJcblx0Z2V0Qm91bmRpbmdTcGhlcmUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5nZW9tZXRyeU5vZGUuYm91bmRpbmdTcGhlcmU7XHJcblx0fVxyXG5cclxuXHRnZXRCb3VuZGluZ0JveCgpIHtcclxuXHRcdHJldHVybiB0aGlzLmdlb21ldHJ5Tm9kZS5ib3VuZGluZ0JveDtcclxuXHR9XHJcblxyXG5cdGdldENoaWxkcmVuKCkge1xyXG5cdFx0bGV0IGNoaWxkcmVuID0gW107XHJcblxyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCA4OyBpKyspIHtcclxuXHRcdFx0aWYgKHRoaXMuY2hpbGRyZW5baV0pIHtcclxuXHRcdFx0XHRjaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRyZW5baV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGNoaWxkcmVuO1xyXG5cdH1cclxuXHJcblx0Z2V0UG9pbnRzSW5Cb3goYm94Tm9kZSkge1xyXG5cclxuXHRcdGlmICghdGhpcy5zY2VuZU5vZGUpIHtcclxuXHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IGJ1ZmZlciA9IHRoaXMuZ2VvbWV0cnlOb2RlLmJ1ZmZlcjtcclxuXHJcblx0XHRsZXQgcG9zT2Zmc2V0ID0gYnVmZmVyLm9mZnNldChcInBvc2l0aW9uXCIpO1xyXG5cdFx0bGV0IHN0cmlkZSA9IGJ1ZmZlci5zdHJpZGU7XHJcblx0XHRsZXQgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIuZGF0YSk7XHJcblxyXG5cdFx0bGV0IHdvcmxkVG9Cb3ggPSBuZXcgVEhSRUUuTWF0cml4NCgpLmdldEludmVyc2UoYm94Tm9kZS5tYXRyaXhXb3JsZCk7XHJcblx0XHRsZXQgb2JqZWN0VG9Cb3ggPSBuZXcgVEhSRUUuTWF0cml4NCgpLm11bHRpcGx5TWF0cmljZXMod29ybGRUb0JveCwgdGhpcy5zY2VuZU5vZGUubWF0cml4V29ybGQpO1xyXG5cclxuXHRcdGxldCBpbkJveCA9IFtdO1xyXG5cclxuXHRcdGxldCBwb3MgPSBuZXcgVEhSRUUuVmVjdG9yNCgpO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXIubnVtRWxlbWVudHM7IGkrKykge1xyXG5cdFx0XHRsZXQgeCA9IHZpZXcuZ2V0RmxvYXQzMihpICogc3RyaWRlICsgcG9zT2Zmc2V0ICsgMCwgdHJ1ZSk7XHJcblx0XHRcdGxldCB5ID0gdmlldy5nZXRGbG9hdDMyKGkgKiBzdHJpZGUgKyBwb3NPZmZzZXQgKyA0LCB0cnVlKTtcclxuXHRcdFx0bGV0IHogPSB2aWV3LmdldEZsb2F0MzIoaSAqIHN0cmlkZSArIHBvc09mZnNldCArIDgsIHRydWUpO1xyXG5cclxuXHRcdFx0cG9zLnNldCh4LCB5LCB6LCAxKTtcclxuXHRcdFx0cG9zLmFwcGx5TWF0cml4NChvYmplY3RUb0JveCk7XHJcblxyXG5cdFx0XHRpZiAoLTAuNSA8IHBvcy54ICYmIHBvcy54IDwgMC41KSB7XHJcblx0XHRcdFx0aWYgKC0wLjUgPCBwb3MueSAmJiBwb3MueSA8IDAuNSkge1xyXG5cdFx0XHRcdFx0aWYgKC0wLjUgPCBwb3MueiAmJiBwb3MueiA8IDAuNSkge1xyXG5cdFx0XHRcdFx0XHRwb3Muc2V0KHgsIHksIHosIDEpLmFwcGx5TWF0cml4NCh0aGlzLnNjZW5lTm9kZS5tYXRyaXhXb3JsZCk7XHJcblx0XHRcdFx0XHRcdGluQm94LnB1c2gobmV3IFRIUkVFLlZlY3RvcjMocG9zLngsIHBvcy55LCBwb3MueikpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBpbkJveDtcclxuXHR9XHJcblxyXG5cdGdldCBuYW1lKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2VvbWV0cnlOb2RlLm5hbWU7XHJcblx0fVxyXG59O1xyXG5cclxuY2xhc3MgUG9pbnRDbG91ZE9jdHJlZSBleHRlbmRzIFBvaW50Q2xvdWRUcmVlIHtcclxuXHRjb25zdHJ1Y3RvcihnZW9tZXRyeSwgbWF0ZXJpYWwpIHtcclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5wb2ludEJ1ZGdldCA9IEluZmluaXR5O1xyXG5cdFx0dGhpcy5wY29HZW9tZXRyeSA9IGdlb21ldHJ5O1xyXG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IHRoaXMucGNvR2VvbWV0cnkuYm91bmRpbmdCb3g7XHJcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gdGhpcy5ib3VuZGluZ0JveC5nZXRCb3VuZGluZ1NwaGVyZShuZXcgVEhSRUUuU3BoZXJlKCkpO1xyXG5cdFx0dGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsIHx8IG5ldyBQb2ludENsb3VkTWF0ZXJpYWwoKTtcclxuXHRcdHRoaXMudmlzaWJsZVBvaW50c1RhcmdldCA9IDIgKiAxMDAwICogMTAwMDtcclxuXHRcdHRoaXMubWluaW11bU5vZGVQaXhlbFNpemUgPSAxNTA7XHJcblx0XHR0aGlzLmxldmVsID0gMDtcclxuXHRcdHRoaXMucG9zaXRpb24uY29weShnZW9tZXRyeS5vZmZzZXQpO1xyXG5cdFx0dGhpcy51cGRhdGVNYXRyaXgoKTtcclxuXHJcblx0XHR0aGlzLnNob3dCb3VuZGluZ0JveCA9IGZhbHNlO1xyXG5cdFx0dGhpcy5ib3VuZGluZ0JveE5vZGVzID0gW107XHJcblx0XHR0aGlzLmxvYWRRdWV1ZSA9IFtdO1xyXG5cdFx0dGhpcy52aXNpYmxlQm91bmRzID0gbmV3IFRIUkVFLkJveDMoKTtcclxuXHRcdHRoaXMudmlzaWJsZU5vZGVzID0gW107XHJcblx0XHR0aGlzLnZpc2libGVHZW9tZXRyeSA9IFtdO1xyXG5cdFx0dGhpcy5nZW5lcmF0ZURFTSA9IGZhbHNlO1xyXG5cdFx0dGhpcy5wcm9maWxlUmVxdWVzdHMgPSBbXTtcclxuXHRcdHRoaXMubmFtZSA9IFwiXCI7XHJcblxyXG5cdFx0dGhpcy50ZW1wVmVjdG9yMyA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcblxyXG5cdFx0bGV0IGJveCA9IFt0aGlzLnBjb0dlb21ldHJ5LnRpZ2h0Qm91bmRpbmdCb3gsIHRoaXMuZ2V0Qm91bmRpbmdCb3hXb3JsZCgpXS5maW5kKHYgPT4gdiAhPT0gdW5kZWZpbmVkKTtcclxuXHJcblx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKHRydWUpO1xyXG5cdFx0Ym94ID0gSGVscGVyVXRpbHMuY29tcHV0ZVRyYW5zZm9ybWVkQm91bmRpbmdCb3goYm94LCB0aGlzLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRsZXQgYk1pbiA9IGJveC5taW4uejtcclxuXHRcdGxldCBiTWF4ID0gYm94Lm1heC56O1xyXG5cdFx0dGhpcy5tYXRlcmlhbC5oZWlnaHRNaW4gPSBiTWluO1xyXG5cdFx0dGhpcy5tYXRlcmlhbC5oZWlnaHRNYXggPSBiTWF4O1xyXG5cclxuXHRcdC8vVE9ETyA8cmVhZCBwcm9qZWN0aW9uIGZyb20gZmlsZSBpbnN0ZWFkPlxyXG5cdFx0dGhpcy5wcm9qZWN0aW9uID0gZ2VvbWV0cnkucHJvamVjdGlvbjtcclxuXHJcblx0XHR0aGlzLnJvb3QgPSB0aGlzLnBjb0dlb21ldHJ5LnJvb3Q7XHJcblx0fVxyXG5cclxuXHRzZXROYW1lKG5hbWUpIHtcclxuXHRcdGlmICh0aGlzLm5hbWUgIT09IG5hbWUpIHtcclxuXHRcdFx0dGhpcy5uYW1lID0gbmFtZTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHR5cGU6IFwibmFtZV9jaGFuZ2VkXCIsXHJcblx0XHRcdFx0XHRuYW1lOiBuYW1lLFxyXG5cdFx0XHRcdFx0cG9pbnRjbG91ZDogdGhpc1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0TmFtZSgpIHtcclxuXHRcdHJldHVybiB0aGlzLm5hbWU7XHJcblx0fVxyXG5cclxuXHR0b1RyZWVOb2RlKGdlb21ldHJ5Tm9kZSwgcGFyZW50KSB7XHJcblx0XHRsZXQgbm9kZSA9IG5ldyBQb2ludENsb3VkT2N0cmVlTm9kZSgpO1xyXG5cclxuXHRcdGxldCBzY2VuZU5vZGUgPSBuZXcgVEhSRUUuUG9pbnRzKGdlb21ldHJ5Tm9kZS5nZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCk7XHJcblx0XHRzY2VuZU5vZGUubmFtZSA9IGdlb21ldHJ5Tm9kZS5uYW1lO1xyXG5cdFx0c2NlbmVOb2RlLnBvc2l0aW9uLmNvcHkoZ2VvbWV0cnlOb2RlLmJvdW5kaW5nQm94Lm1pbik7XHJcblx0XHRzY2VuZU5vZGUuZnJ1c3R1bUN1bGxlZCA9IHRydWU7XHJcblx0XHRzY2VuZU5vZGUub25CZWZvcmVSZW5kZXIgPSAoX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXApID0+IHtcclxuXHRcdFx0aWYgKG1hdGVyaWFsLnByb2dyYW0pIHtcclxuXHRcdFx0XHRfdGhpcy5nZXRDb250ZXh0KCkudXNlUHJvZ3JhbShtYXRlcmlhbC5wcm9ncmFtLnByb2dyYW0pO1xyXG5cclxuXHRcdFx0XHRpZiAobWF0ZXJpYWwucHJvZ3JhbS5nZXRVbmlmb3JtcygpLm1hcC5sZXZlbCkge1xyXG5cdFx0XHRcdFx0bGV0IGxldmVsID0gZ2VvbWV0cnlOb2RlLmdldExldmVsKCk7XHJcblx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtcy5sZXZlbC52YWx1ZSA9IGxldmVsO1xyXG5cdFx0XHRcdFx0bWF0ZXJpYWwucHJvZ3JhbS5nZXRVbmlmb3JtcygpLm1hcC5sZXZlbC5zZXRWYWx1ZShfdGhpcy5nZXRDb250ZXh0KCksIGxldmVsKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICh0aGlzLnZpc2libGVOb2RlVGV4dHVyZU9mZnNldHMgJiYgbWF0ZXJpYWwucHJvZ3JhbS5nZXRVbmlmb3JtcygpLm1hcC52blN0YXJ0KSB7XHJcblx0XHRcdFx0XHRsZXQgdm5TdGFydCA9IHRoaXMudmlzaWJsZU5vZGVUZXh0dXJlT2Zmc2V0cy5nZXQobm9kZSk7XHJcblx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtcy52blN0YXJ0LnZhbHVlID0gdm5TdGFydDtcclxuXHRcdFx0XHRcdG1hdGVyaWFsLnByb2dyYW0uZ2V0VW5pZm9ybXMoKS5tYXAudm5TdGFydC5zZXRWYWx1ZShfdGhpcy5nZXRDb250ZXh0KCksIHZuU3RhcnQpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKG1hdGVyaWFsLnByb2dyYW0uZ2V0VW5pZm9ybXMoKS5tYXAucGNJbmRleCkge1xyXG5cdFx0XHRcdFx0bGV0IGkgPSBub2RlLnBjSW5kZXggPyBub2RlLnBjSW5kZXggOiB0aGlzLnZpc2libGVOb2Rlcy5pbmRleE9mKG5vZGUpO1xyXG5cdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXMucGNJbmRleC52YWx1ZSA9IGk7XHJcblx0XHRcdFx0XHRtYXRlcmlhbC5wcm9ncmFtLmdldFVuaWZvcm1zKCkubWFwLnBjSW5kZXguc2V0VmFsdWUoX3RoaXMuZ2V0Q29udGV4dCgpLCBpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0bm9kZS5nZW9tZXRyeU5vZGUgPSBnZW9tZXRyeU5vZGU7XHJcblx0XHRub2RlLnNjZW5lTm9kZSA9IHNjZW5lTm9kZTtcclxuXHRcdG5vZGUucG9pbnRjbG91ZCA9IHRoaXM7XHJcblx0XHRub2RlLmNoaWxkcmVuID0ge307XHJcblx0XHRmb3IgKGxldCBrZXkgaW4gZ2VvbWV0cnlOb2RlLmNoaWxkcmVuKSB7XHJcblx0XHRcdG5vZGUuY2hpbGRyZW5ba2V5XSA9IGdlb21ldHJ5Tm9kZS5jaGlsZHJlbltrZXldO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghcGFyZW50KSB7XHJcblx0XHRcdHRoaXMucm9vdCA9IG5vZGU7XHJcblx0XHRcdHRoaXMuYWRkKHNjZW5lTm9kZSk7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0bGV0IGNoaWxkSW5kZXggPSBwYXJzZUludChnZW9tZXRyeU5vZGUubmFtZVtnZW9tZXRyeU5vZGUubmFtZS5sZW5ndGggLSAxXSk7XHJcblx0XHRcdHBhcmVudC5zY2VuZU5vZGUuYWRkKHNjZW5lTm9kZSk7XHJcblx0XHRcdHBhcmVudC5jaGlsZHJlbltjaGlsZEluZGV4XSA9IG5vZGU7XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IGRpc3Bvc2VMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0bGV0IGNoaWxkSW5kZXggPSBwYXJzZUludChnZW9tZXRyeU5vZGUubmFtZVtnZW9tZXRyeU5vZGUubmFtZS5sZW5ndGggLSAxXSk7XHJcblx0XHRcdHBhcmVudC5zY2VuZU5vZGUucmVtb3ZlKG5vZGUuc2NlbmVOb2RlKTtcclxuXHRcdFx0cGFyZW50LmNoaWxkcmVuW2NoaWxkSW5kZXhdID0gZ2VvbWV0cnlOb2RlO1xyXG5cdFx0fTtcclxuXHRcdGdlb21ldHJ5Tm9kZS5vbmVUaW1lRGlzcG9zZUhhbmRsZXJzLnB1c2goZGlzcG9zZUxpc3RlbmVyKTtcclxuXHJcblxyXG5cdFx0cmV0dXJuIG5vZGU7XHJcblx0fVxyXG5cclxuXHR1cGRhdGVWaXNpYmxlQm91bmRzKCkge1xyXG5cdFx0bGV0IGxlYWZOb2RlcyA9IFtdO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZpc2libGVOb2Rlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRsZXQgbm9kZSA9IHRoaXMudmlzaWJsZU5vZGVzW2ldO1xyXG5cdFx0XHRsZXQgaXNMZWFmID0gdHJ1ZTtcclxuXHJcblx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xyXG5cdFx0XHRcdGxldCBjaGlsZCA9IG5vZGUuY2hpbGRyZW5bal07XHJcblx0XHRcdFx0aWYgKGNoaWxkIGluc3RhbmNlb2YgUG9pbnRDbG91ZE9jdHJlZU5vZGUpIHtcclxuXHRcdFx0XHRcdGlzTGVhZiA9IGlzTGVhZiAmJiAhY2hpbGQuc2NlbmVOb2RlLnZpc2libGU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYgKGNoaWxkIGluc3RhbmNlb2YgUG9pbnRDbG91ZE9jdHJlZUdlb21ldHJ5Tm9kZSkge1xyXG5cdFx0XHRcdFx0aXNMZWFmID0gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmIChpc0xlYWYpIHtcclxuXHRcdFx0XHRsZWFmTm9kZXMucHVzaChub2RlKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudmlzaWJsZUJvdW5kcy5taW4gPSBuZXcgVEhSRUUuVmVjdG9yMyhJbmZpbml0eSwgSW5maW5pdHksIEluZmluaXR5KTtcclxuXHRcdHRoaXMudmlzaWJsZUJvdW5kcy5tYXggPSBuZXcgVEhSRUUuVmVjdG9yMygtSW5maW5pdHksIC1JbmZpbml0eSwgLUluZmluaXR5KTtcclxuXHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlYWZOb2Rlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRsZXQgbm9kZSA9IGxlYWZOb2Rlc1tpXTtcclxuXHRcdFx0dGhpcy52aXNpYmxlQm91bmRzLmV4cGFuZEJ5UG9pbnQobm9kZS5nZXRCb3VuZGluZ0JveCgpLm1pbik7XHJcblx0XHRcdHRoaXMudmlzaWJsZUJvdW5kcy5leHBhbmRCeVBvaW50KG5vZGUuZ2V0Qm91bmRpbmdCb3goKS5tYXgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0dXBkYXRlTWF0ZXJpYWwobWF0ZXJpYWwsIHZpc2libGVOb2RlcywgY2FtZXJhLCByZW5kZXJlcikge1xyXG5cdFx0bWF0ZXJpYWwuZm92ID0gY2FtZXJhLmZvdiAqIChNYXRoLlBJIC8gMTgwKTtcclxuXHRcdG1hdGVyaWFsLnNjcmVlbldpZHRoID0gcmVuZGVyZXIuZG9tRWxlbWVudC5jbGllbnRXaWR0aDtcclxuXHRcdG1hdGVyaWFsLnNjcmVlbkhlaWdodCA9IHJlbmRlcmVyLmRvbUVsZW1lbnQuY2xpZW50SGVpZ2h0O1xyXG5cdFx0bWF0ZXJpYWwuc3BhY2luZyA9IHRoaXMucGNvR2VvbWV0cnkuc3BhY2luZyAqIE1hdGgubWF4KHRoaXMuc2NhbGUueCwgdGhpcy5zY2FsZS55LCB0aGlzLnNjYWxlLnopO1xyXG5cdFx0bWF0ZXJpYWwubmVhciA9IGNhbWVyYS5uZWFyO1xyXG5cdFx0bWF0ZXJpYWwuZmFyID0gY2FtZXJhLmZhcjtcclxuXHRcdG1hdGVyaWFsLnVuaWZvcm1zLm9jdHJlZVNpemUudmFsdWUgPSB0aGlzLnBjb0dlb21ldHJ5LmJvdW5kaW5nQm94LmdldFNpemUobmV3IFRIUkVFLlZlY3RvcjMoKSkueDtcclxuXHR9XHJcblxyXG5cdGNvbXB1dGVWaXNpYmlsaXR5VGV4dHVyZURhdGEobm9kZXMsIGNhbWVyYSkge1xyXG5cdFx0aWYgKEdsb2JhbC5tZWFzdXJlVGltaW5ncykge1xyXG5cdFx0XHRwZXJmb3JtYW5jZS5tYXJrKFwiY29tcHV0ZVZpc2liaWxpdHlUZXh0dXJlRGF0YS1zdGFydFwiKTtcclxuXHRcdH1cclxuXHJcblx0XHRsZXQgZGF0YSA9IG5ldyBVaW50OEFycmF5KG5vZGVzLmxlbmd0aCAqIDQpO1xyXG5cdFx0bGV0IHZpc2libGVOb2RlVGV4dHVyZU9mZnNldHMgPSBuZXcgTWFwKCk7XHJcblxyXG5cdFx0Ly9jb3B5IGFycmF5XHJcblx0XHRub2RlcyA9IG5vZGVzLnNsaWNlKCk7XHJcblxyXG5cdFx0Ly9zb3J0IGJ5IGxldmVsIGFuZCBpbmRleCwgZS5nLiByLCByMCwgcjMsIHI0LCByMDEsIHIwNywgcjMwLCAuLi5cclxuXHRcdGxldCBzb3J0ID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuXHRcdFx0bGV0IG5hID0gYS5nZW9tZXRyeU5vZGUubmFtZTtcclxuXHRcdFx0bGV0IG5iID0gYi5nZW9tZXRyeU5vZGUubmFtZTtcclxuXHRcdFx0aWYgKG5hLmxlbmd0aCAhPT0gbmIubGVuZ3RoKSByZXR1cm4gbmEubGVuZ3RoIC0gbmIubGVuZ3RoO1xyXG5cdFx0XHRpZiAobmEgPCBuYikgcmV0dXJuIC0xO1xyXG5cdFx0XHRpZiAobmEgPiBuYikgcmV0dXJuIDE7XHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fTtcclxuXHRcdG5vZGVzLnNvcnQoc29ydCk7XHJcblxyXG5cdFx0Ly9jb2RlIHNhbXBsZSB0YWtlbiBmcm9tIHRocmVlLmpzIHNyYy9tYXRoL1JheS5qc1xyXG5cdFx0bGV0IHYxID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHRcdGxldCBpbnRlcnNlY3RTcGhlcmVCYWNrID0gKHJheSwgc3BoZXJlKSA9PiB7XHJcblx0XHRcdHYxLnN1YlZlY3RvcnMoc3BoZXJlLmNlbnRlciwgcmF5Lm9yaWdpbik7XHJcblx0XHRcdGxldCB0Y2EgPSB2MS5kb3QocmF5LmRpcmVjdGlvbik7XHJcblx0XHRcdGxldCBkMiA9IHYxLmRvdCh2MSkgLSB0Y2EgKiB0Y2E7XHJcblx0XHRcdGxldCByYWRpdXMyID0gc3BoZXJlLnJhZGl1cyAqIHNwaGVyZS5yYWRpdXM7XHJcblxyXG5cdFx0XHRpZiAoZDIgPiByYWRpdXMyKSB7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGxldCB0aGMgPSBNYXRoLnNxcnQocmFkaXVzMiAtIGQyKTtcclxuXHJcblx0XHRcdC8vdDEgPSBzZWNvbmQgaW50ZXJzZWN0IHBvaW50IC0gZXhpdCBwb2ludCBvbiBiYWNrIG9mIHNwaGVyZVxyXG5cdFx0XHRsZXQgdDEgPSB0Y2EgKyB0aGM7XHJcblxyXG5cdFx0XHRpZiAodDEgPCAwKSB7XHJcblx0XHRcdFx0cmV0dXJuIG51bGw7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiB0MTtcclxuXHRcdH07XHJcblxyXG5cdFx0bGV0IGxvZFJhbmdlcyA9IG5ldyBNYXAoKTtcclxuXHRcdGxldCBsZWFmTm9kZUxvZFJhbmdlcyA9IG5ldyBNYXAoKTtcclxuXHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGxldCBub2RlID0gbm9kZXNbaV07XHJcblxyXG5cdFx0XHR2aXNpYmxlTm9kZVRleHR1cmVPZmZzZXRzLnNldChub2RlLCBpKTtcclxuXHJcblx0XHRcdGxldCBjaGlsZHJlbiA9IFtdO1xyXG5cdFx0XHRmb3IgKGxldCBqID0gMDsgaiA8IDg7IGorKykge1xyXG5cdFx0XHRcdGxldCBjaGlsZCA9IG5vZGUuY2hpbGRyZW5bal07XHJcblxyXG5cdFx0XHRcdGlmIChjaGlsZCAmJiBjaGlsZC5jb25zdHJ1Y3RvciA9PT0gUG9pbnRDbG91ZE9jdHJlZU5vZGUgJiYgbm9kZXMuaW5jbHVkZXMoY2hpbGQsIGkpKSB7XHJcblx0XHRcdFx0XHRjaGlsZHJlbi5wdXNoKGNoaWxkKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGxldCBzcGFjaW5nID0gbm9kZS5nZW9tZXRyeU5vZGUuZXN0aW1hdGVkU3BhY2luZztcclxuXHRcdFx0bGV0IGlzTGVhZk5vZGU7XHJcblxyXG5cdFx0XHRkYXRhW2kgKiA0ICsgMF0gPSAwO1xyXG5cdFx0XHRkYXRhW2kgKiA0ICsgMV0gPSAwO1xyXG5cdFx0XHRkYXRhW2kgKiA0ICsgMl0gPSAwO1xyXG5cdFx0XHRkYXRhW2kgKiA0ICsgM10gPSBub2RlLmdldExldmVsKCk7XHJcblx0XHRcdGZvciAobGV0IGogPSAwOyBqIDwgY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcclxuXHRcdFx0XHRsZXQgY2hpbGQgPSBjaGlsZHJlbltqXTtcclxuXHRcdFx0XHRsZXQgaW5kZXggPSBwYXJzZUludChjaGlsZC5nZW9tZXRyeU5vZGUubmFtZS5zdWJzdHIoLTEpKTtcclxuXHRcdFx0XHRkYXRhW2kgKiA0ICsgMF0gKz0gTWF0aC5wb3coMiwgaW5kZXgpO1xyXG5cclxuXHRcdFx0XHRpZiAoaiA9PT0gMCkge1xyXG5cdFx0XHRcdFx0bGV0IHZBcnJheUluZGV4ID0gbm9kZXMuaW5kZXhPZihjaGlsZCwgaSk7XHJcblxyXG5cdFx0XHRcdFx0ZGF0YVtpICogNCArIDFdID0gKHZBcnJheUluZGV4IC0gaSkgPj4gODtcclxuXHRcdFx0XHRcdGRhdGFbaSAqIDQgKyAyXSA9ICh2QXJyYXlJbmRleCAtIGkpICUgMjU2O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly9UT0RPIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvblxyXG5cdFx0XHQvL2ZvciBzb21lIHJlYXNvbiwgdGhpcyBwYXJ0IGNhbiBiZSBleHRyZW1lbHkgc2xvdyBpbiBjaHJvbWUgZHVyaW5nIGEgZGVidWdnaW5nIHNlc3Npb24sIGJ1dCBub3QgZHVyaW5nIHByb2ZpbGluZ1xyXG5cdFx0XHRsZXQgYkJveCA9IG5vZGUuZ2V0Qm91bmRpbmdCb3goKS5jbG9uZSgpO1xyXG5cdFx0XHQvL2JCb3guYXBwbHlNYXRyaXg0KG5vZGUuc2NlbmVOb2RlLm1hdHJpeFdvcmxkKTtcclxuXHRcdFx0Ly9iQm94LmFwcGx5TWF0cml4NChjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlKTtcclxuXHRcdFx0bGV0IGJTcGhlcmUgPSBiQm94LmdldEJvdW5kaW5nU3BoZXJlKG5ldyBUSFJFRS5TcGhlcmUoKSk7XHJcblx0XHRcdGJTcGhlcmUuYXBwbHlNYXRyaXg0KG5vZGUuc2NlbmVOb2RlLm1hdHJpeFdvcmxkKTtcclxuXHRcdFx0YlNwaGVyZS5hcHBseU1hdHJpeDQoY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSk7XHJcblxyXG5cdFx0XHRsZXQgcmF5ID0gbmV3IFRIUkVFLlJheShjYW1lcmEucG9zaXRpb24sIGNhbWVyYS5nZXRXb3JsZERpcmVjdGlvbih0aGlzLnRlbXBWZWN0b3IzKSk7XHJcblx0XHRcdGxldCBkaXN0YW5jZSA9IGludGVyc2VjdFNwaGVyZUJhY2socmF5LCBiU3BoZXJlKTtcclxuXHRcdFx0bGV0IGRpc3RhbmNlMiA9IGJTcGhlcmUuY2VudGVyLmRpc3RhbmNlVG8oY2FtZXJhLnBvc2l0aW9uKSArIGJTcGhlcmUucmFkaXVzO1xyXG5cdFx0XHRpZiAoZGlzdGFuY2UgPT09IG51bGwpIHtcclxuXHRcdFx0XHRkaXN0YW5jZSA9IGRpc3RhbmNlMjtcclxuXHRcdFx0fVxyXG5cdFx0XHRkaXN0YW5jZSA9IE1hdGgubWF4KGRpc3RhbmNlLCBkaXN0YW5jZTIpO1xyXG5cclxuXHRcdFx0aWYgKCFsb2RSYW5nZXMuaGFzKG5vZGUuZ2V0TGV2ZWwoKSkpIHtcclxuXHRcdFx0XHRsb2RSYW5nZXMuc2V0KG5vZGUuZ2V0TGV2ZWwoKSwgZGlzdGFuY2UpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdGxldCBwcmV2RGlzdGFuY2UgPSBsb2RSYW5nZXMuZ2V0KG5vZGUuZ2V0TGV2ZWwoKSk7XHJcblx0XHRcdFx0bGV0IG5ld0Rpc3RhbmNlID0gTWF0aC5tYXgocHJldkRpc3RhbmNlLCBkaXN0YW5jZSk7XHJcblx0XHRcdFx0bG9kUmFuZ2VzLnNldChub2RlLmdldExldmVsKCksIG5ld0Rpc3RhbmNlKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCFub2RlLmdlb21ldHJ5Tm9kZS5oYXNDaGlsZHJlbikge1xyXG5cdFx0XHRcdGxldCB2YWx1ZSA9IHtcclxuXHRcdFx0XHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcclxuXHRcdFx0XHRcdGk6IGlcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdGxlYWZOb2RlTG9kUmFuZ2VzLnNldChub2RlLCB2YWx1ZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKGxldCBbbm9kZSwgdmFsdWVdIG9mIGxlYWZOb2RlTG9kUmFuZ2VzKSB7XHJcblx0XHRcdGxldCBsZXZlbCA9IG5vZGUuZ2V0TGV2ZWwoKTtcclxuXHRcdFx0bGV0IGRpc3RhbmNlID0gdmFsdWUuZGlzdGFuY2U7XHJcblx0XHRcdGxldCBpID0gdmFsdWUuaTtcclxuXHJcblx0XHRcdGlmIChsZXZlbCA8IDQpIHtcclxuXHRcdFx0XHRjb250aW51ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRmb3IgKGxldCBbbG9kLCByYW5nZV0gb2YgbG9kUmFuZ2VzKSB7XHJcblx0XHRcdFx0aWYgKGRpc3RhbmNlIDwgcmFuZ2UgKiAxLjIpIHtcclxuXHRcdFx0XHRcdGRhdGFbaSAqIDQgKyAzXSA9IGxvZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoR2xvYmFsLm1lYXN1cmVUaW1pbmdzKSB7XHJcblx0XHRcdHBlcmZvcm1hbmNlLm1hcmsoXCJjb21wdXRlVmlzaWJpbGl0eVRleHR1cmVEYXRhLWVuZFwiKTtcclxuXHRcdFx0cGVyZm9ybWFuY2UubWVhc3VyZShcInJlbmRlci5jb21wdXRlVmlzaWJpbGl0eVRleHR1cmVEYXRhXCIsIFwiY29tcHV0ZVZpc2liaWxpdHlUZXh0dXJlRGF0YS1zdGFydFwiLCBcImNvbXB1dGVWaXNpYmlsaXR5VGV4dHVyZURhdGEtZW5kXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGRhdGE6IGRhdGEsXHJcblx0XHRcdG9mZnNldHM6IHZpc2libGVOb2RlVGV4dHVyZU9mZnNldHNcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHRub2RlSW50ZXJzZWN0c1Byb2ZpbGUobm9kZSwgcHJvZmlsZSkge1xyXG5cdFx0bGV0IGJiV29ybGQgPSBub2RlLmJvdW5kaW5nQm94LmNsb25lKCkuYXBwbHlNYXRyaXg0KHRoaXMubWF0cml4V29ybGQpO1xyXG5cdFx0bGV0IGJzV29ybGQgPSBiYldvcmxkLmdldEJvdW5kaW5nU3BoZXJlKG5ldyBUSFJFRS5TcGhlcmUoKSk7XHJcblxyXG5cdFx0bGV0IGludGVyc2VjdHMgPSBmYWxzZTtcclxuXHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHByb2ZpbGUucG9pbnRzLmxlbmd0aCAtIDE7IGkrKykge1xyXG5cclxuXHRcdFx0bGV0IHN0YXJ0ID0gbmV3IFRIUkVFLlZlY3RvcjMocHJvZmlsZS5wb2ludHNbaSArIDBdLngsIHByb2ZpbGUucG9pbnRzW2kgKyAwXS55LCBic1dvcmxkLmNlbnRlci56KTtcclxuXHRcdFx0bGV0IGVuZCA9IG5ldyBUSFJFRS5WZWN0b3IzKHByb2ZpbGUucG9pbnRzW2kgKyAxXS54LCBwcm9maWxlLnBvaW50c1tpICsgMV0ueSwgYnNXb3JsZC5jZW50ZXIueik7XHJcblxyXG5cdFx0XHRsZXQgY2xvc2VzdCA9IG5ldyBUSFJFRS5MaW5lMyhzdGFydCwgZW5kKS5jbG9zZXN0UG9pbnRUb1BvaW50KGJzV29ybGQuY2VudGVyLCB0cnVlKTtcclxuXHRcdFx0bGV0IGRpc3RhbmNlID0gY2xvc2VzdC5kaXN0YW5jZVRvKGJzV29ybGQuY2VudGVyKTtcclxuXHJcblx0XHRcdGludGVyc2VjdHMgPSBpbnRlcnNlY3RzIHx8IChkaXN0YW5jZSA8IChic1dvcmxkLnJhZGl1cyArIHByb2ZpbGUud2lkdGgpKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gaW50ZXJzZWN0cztcclxuXHR9XHJcblxyXG5cdG5vZGVzT25SYXkobm9kZXMsIHJheSwgcGFyYW1zID0ge30pIHtcclxuXHRcdGxldCBub2Rlc09uUmF5ID0gW107XHJcblx0XHRsZXQgX3JheSA9IHJheS5jbG9uZSgpO1xyXG5cclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0bGV0IG5vZGUgPSBub2Rlc1tpXTtcclxuXHRcdFx0bGV0IHNwaGVyZSA9IG5vZGUuZ2V0Qm91bmRpbmdTcGhlcmUoKS5jbG9uZSgpLmFwcGx5TWF0cml4NChub2RlLnNjZW5lTm9kZS5tYXRyaXhXb3JsZCk7XHJcblx0XHRcdC8vIGxldCBib3ggPSBub2RlLmdldEJvdW5kaW5nQm94KCkuY2xvbmUoKS5hcHBseU1hdHJpeDQobm9kZS5zY2VuZU5vZGUubWF0cml4V29ybGQpO1xyXG5cclxuXHRcdFx0aWYgKF9yYXkuaW50ZXJzZWN0c1NwaGVyZShzcGhlcmUpKSB7IC8vIHx8IF9yYXkuaW50ZXJzZWN0c0JveChib3gpKSB7XHJcblx0XHRcdFx0bm9kZS5kaXN0YW5jZVRvT3JpZ2luID0gc3BoZXJlLmNlbnRlci5kaXN0YW5jZVRvKF9yYXkub3JpZ2luKTtcclxuXHRcdFx0XHRub2Rlc09uUmF5LnB1c2gobm9kZSk7XHJcblxyXG5cdFx0XHRcdGlmIChwYXJhbXMucmVjdXJzaXZlICYmIG5vZGUuY2hpbGRyZW4pIHtcclxuXHRcdFx0XHRcdGNvbnN0IGNoaWxkcmVuID0gT2JqZWN0LnZhbHVlcyhub2RlLmNoaWxkcmVuKS5maWx0ZXIobm9kZSA9PiBub2RlICYmIG5vZGUuc2NlbmVOb2RlKTtcclxuXHRcdFx0XHRcdGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdFx0Y29uc3Qgbm9kZXMgPSB0aGlzLm5vZGVzT25SYXkoY2hpbGRyZW4sIF9yYXksIHBhcmFtcyk7XHJcblx0XHRcdFx0XHRcdG5vZGVzT25SYXkucHVzaCguLi5ub2Rlcyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5vZGVzT25SYXkuc29ydCgoYSwgYikgPT4gYS5kaXN0YW5jZVRvT3JpZ2luIC0gYi5kaXN0YW5jZVRvT3JpZ2luKTtcclxuXHR9XHJcblxyXG5cdHBvaW50c09uUmF5KG5vZGVzLCByYXksIHBhcmFtcyA9IHt9KSB7XHJcblx0XHRjb25zdCBub2Rlc09uUmF5ID0gdGhpcy5ub2Rlc09uUmF5KG5vZGVzLCByYXksIHBhcmFtcyk7XHJcblx0XHRjb25zdCBwb2ludHNPblJheSA9IFtdO1xyXG5cdFx0Y29uc3QgbWF4RGlzdGFuY2UgPSBwYXJhbXMubWF4RGlzdGFuY2UgfHwgMC41O1xyXG5cclxuXHRcdHBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe1xyXG5cdFx0XHRhdHRyaWJ1dGVGaWx0ZXI6IChrZXksIHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0c3dpdGNoIChrZXkpIHtcclxuXHRcdFx0XHRcdGNhc2UgJ3Bvc2l0aW9uJzogcmV0dXJuIHJheS5kaXN0YW5jZVRvUG9pbnQodmFsdWUpIDw9IG1heERpc3RhbmNlO1xyXG5cdFx0XHRcdFx0ZGVmYXVsdDogcmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LCBwYXJhbXMpO1xyXG5cclxuXHRcdGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlc09uUmF5KSB7XHJcblx0XHRcdHBvaW50c09uUmF5LnB1c2goLi4uSGVscGVyVXRpbHMubm9kZVRvUG9pbnRzKG5vZGUsIHBhcmFtcykpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBwb2ludHNPblJheS5zb3J0KChhLCBiKSA9PiBhLmRpc3RhbmNlVG9SYXkgLSBiLmRpc3RhbmNlVG9SYXkpO1xyXG5cdH1cclxuXHJcblx0dXBkYXRlTWF0cml4V29ybGQoZm9yY2UpIHtcclxuXHRcdGlmICh0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPT09IHRydWUpIHRoaXMudXBkYXRlTWF0cml4KCk7XHJcblxyXG5cdFx0aWYgKHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9PT0gdHJ1ZSB8fCBmb3JjZSA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRpZiAoIXRoaXMucGFyZW50KSB7XHJcblx0XHRcdFx0dGhpcy5tYXRyaXhXb3JsZC5jb3B5KHRoaXMubWF0cml4KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXModGhpcy5wYXJlbnQubWF0cml4V29ybGQsIHRoaXMubWF0cml4KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdFx0XHRmb3JjZSA9IHRydWU7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRoaWRlRGVzY2VuZGFudHMob2JqZWN0KSB7XHJcblx0XHRsZXQgc3RhY2sgPSBbXTtcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdGxldCBjaGlsZCA9IG9iamVjdC5jaGlsZHJlbltpXTtcclxuXHRcdFx0aWYgKGNoaWxkLnZpc2libGUpIHtcclxuXHRcdFx0XHRzdGFjay5wdXNoKGNoaWxkKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHdoaWxlIChzdGFjay5sZW5ndGggPiAwKSB7XHJcblx0XHRcdGxldCBvYmplY3QgPSBzdGFjay5zaGlmdCgpO1xyXG5cclxuXHRcdFx0b2JqZWN0LnZpc2libGUgPSBmYWxzZTtcclxuXHJcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0LmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0bGV0IGNoaWxkID0gb2JqZWN0LmNoaWxkcmVuW2ldO1xyXG5cdFx0XHRcdGlmIChjaGlsZC52aXNpYmxlKSB7XHJcblx0XHRcdFx0XHRzdGFjay5wdXNoKGNoaWxkKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdG1vdmVUb09yaWdpbigpIHtcclxuXHRcdHRoaXMucG9zaXRpb24uc2V0KDAsIDAsIDApO1xyXG5cdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCh0cnVlKTtcclxuXHRcdGxldCBib3ggPSB0aGlzLmJvdW5kaW5nQm94O1xyXG5cdFx0bGV0IHRyYW5zZm9ybSA9IHRoaXMubWF0cml4V29ybGQ7XHJcblx0XHRsZXQgdEJveCA9IEhlbHBlclV0aWxzLmNvbXB1dGVUcmFuc2Zvcm1lZEJvdW5kaW5nQm94KGJveCwgdHJhbnNmb3JtKTtcclxuXHJcblx0XHR0aGlzLnBvc2l0aW9uLnNldCgwLCAwLCAwKS5zdWIodEJveC5nZXRDZW50ZXIobmV3IFRIUkVFLlZlY3RvcjMoKSkpO1xyXG5cdH07XHJcblxyXG5cdG1vdmVUb0dyb3VuZFBsYW5lKCkge1xyXG5cdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCh0cnVlKTtcclxuXHRcdGxldCBib3ggPSB0aGlzLmJvdW5kaW5nQm94O1xyXG5cdFx0bGV0IHRyYW5zZm9ybSA9IHRoaXMubWF0cml4V29ybGQ7XHJcblx0XHRsZXQgdEJveCA9IEhlbHBlclV0aWxzLmNvbXB1dGVUcmFuc2Zvcm1lZEJvdW5kaW5nQm94KGJveCwgdHJhbnNmb3JtKTtcclxuXHRcdHRoaXMucG9zaXRpb24ueSArPSAtdEJveC5taW4ueTtcclxuXHR9O1xyXG5cclxuXHRnZXRCb3VuZGluZ0JveFdvcmxkKCkge1xyXG5cdFx0dGhpcy51cGRhdGVNYXRyaXhXb3JsZCh0cnVlKTtcclxuXHRcdGxldCBib3ggPSB0aGlzLmJvdW5kaW5nQm94O1xyXG5cdFx0bGV0IHRyYW5zZm9ybSA9IHRoaXMubWF0cml4V29ybGQ7XHJcblx0XHRsZXQgdEJveCA9IEhlbHBlclV0aWxzLmNvbXB1dGVUcmFuc2Zvcm1lZEJvdW5kaW5nQm94KGJveCwgdHJhbnNmb3JtKTtcclxuXHJcblx0XHRyZXR1cm4gdEJveDtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiByZXR1cm5zIHBvaW50cyBpbnNpZGUgdGhlIHByb2ZpbGUgcG9pbnRzXHJcblx0ICpcclxuXHQgKiBtYXhEZXB0aDpcdFx0c2VhcmNoIHBvaW50cyB1cCB0byB0aGUgZ2l2ZW4gb2N0cmVlIGRlcHRoXHJcblx0ICpcclxuXHQgKlxyXG5cdCAqIFRoZSByZXR1cm4gdmFsdWUgaXMgYW4gYXJyYXkgd2l0aCBhbGwgc2VnbWVudHMgb2YgdGhlIHByb2ZpbGUgcGF0aFxyXG5cdCAqICBsZXQgc2VnbWVudCA9IHtcclxuXHQgKiBcdFx0c3RhcnQ6IFx0VEhSRUUuVmVjdG9yMyxcclxuXHQgKiBcdFx0ZW5kOiBcdFRIUkVFLlZlY3RvcjMsXHJcblx0ICogXHRcdHBvaW50czoge31cclxuXHQgKiBcdFx0cHJvamVjdDogZnVuY3Rpb24oKVxyXG5cdCAqICB9O1xyXG5cdCAqXHJcblx0ICogVGhlIHByb2plY3QoKSBmdW5jdGlvbiBpbnNpZGUgZWFjaCBzZWdtZW50IGNhbiBiZSB1c2VkIHRvIHRyYW5zZm9ybVxyXG5cdCAqIHRoYXQgc2VnbWVudHMgcG9pbnQgY29vcmRpbmF0ZXMgdG8gbGluZSB1cCBhbG9uZyB0aGUgeC1heGlzLlxyXG5cdCAqXHJcblx0ICpcclxuXHQgKi9cclxuXHRnZXRQb2ludHNJblByb2ZpbGUocHJvZmlsZSwgbWF4RGVwdGgsIGNhbGxiYWNrKSB7XHJcblx0XHRpZiAoY2FsbGJhY2spIHtcclxuXHRcdFx0Ly9sZXQgcmVxdWVzdCA9IG5ldyBQb3RyZWUuUHJvZmlsZVJlcXVlc3QodGhpcywgcHJvZmlsZSwgbWF4RGVwdGgsIGNhbGxiYWNrKTtcclxuXHRcdFx0Ly90aGlzLnByb2ZpbGVSZXF1ZXN0cy5wdXNoKHJlcXVlc3QpO1xyXG5cdFx0XHQvL3JldHVybiByZXF1ZXN0O1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCBwb2ludHMgPSB7XHJcblx0XHRcdHNlZ21lbnRzOiBbXSxcclxuXHRcdFx0Ym91bmRpbmdCb3g6IG5ldyBUSFJFRS5Cb3gzKCksXHJcblx0XHRcdHByb2plY3RlZEJvdW5kaW5nQm94OiBuZXcgVEhSRUUuQm94MigpXHJcblx0XHR9O1xyXG5cclxuXHRcdC8vZXZhbHVhdGUgc2VnbWVudHNcclxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcHJvZmlsZS5wb2ludHMubGVuZ3RoIC0gMTsgaSsrKSB7XHJcblx0XHRcdGxldCBzdGFydCA9IHByb2ZpbGUucG9pbnRzW2ldO1xyXG5cdFx0XHRsZXQgZW5kID0gcHJvZmlsZS5wb2ludHNbaSArIDFdO1xyXG5cdFx0XHRsZXQgcHMgPSB0aGlzLmdldFByb2ZpbGUoc3RhcnQsIGVuZCwgcHJvZmlsZS53aWR0aCwgbWF4RGVwdGgpO1xyXG5cclxuXHRcdFx0bGV0IHNlZ21lbnQgPSB7XHJcblx0XHRcdFx0c3RhcnQ6IHN0YXJ0LFxyXG5cdFx0XHRcdGVuZDogZW5kLFxyXG5cdFx0XHRcdHBvaW50czogcHMsXHJcblx0XHRcdFx0cHJvamVjdDogbnVsbFxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0cG9pbnRzLnNlZ21lbnRzLnB1c2goc2VnbWVudCk7XHJcblxyXG5cdFx0XHRwb2ludHMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludChwcy5ib3VuZGluZ0JveC5taW4pO1xyXG5cdFx0XHRwb2ludHMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludChwcy5ib3VuZGluZ0JveC5tYXgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vYWRkIHByb2plY3Rpb24gZnVuY3Rpb25zIHRvIHRoZSBzZWdtZW50c1xyXG5cdFx0bGV0IG1pbGVhZ2UgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMuc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0bGV0IHNlZ21lbnQgPSBwb2ludHMuc2VnbWVudHNbaV07XHJcblx0XHRcdGxldCBzdGFydCA9IHNlZ21lbnQuc3RhcnQ7XHJcblx0XHRcdGxldCBlbmQgPSBzZWdtZW50LmVuZDtcclxuXHJcblx0XHRcdGxldCBwcm9qZWN0ID0gKGZ1bmN0aW9uIChfc3RhcnQsIF9lbmQsIF9taWxlYWdlLCBfYm91bmRpbmdCb3gpIHtcclxuXHRcdFx0XHRsZXQgc3RhcnQgPSBfc3RhcnQ7XHJcblx0XHRcdFx0bGV0IGVuZCA9IF9lbmQ7XHJcblx0XHRcdFx0bGV0IG1pbGVhZ2UgPSBfbWlsZWFnZTtcclxuXHRcdFx0XHRsZXQgYm91bmRpbmdCb3ggPSBfYm91bmRpbmdCb3g7XHJcblxyXG5cdFx0XHRcdGxldCB4QXhpcyA9IG5ldyBUSFJFRS5WZWN0b3IzKDEsIDAsIDApO1xyXG5cdFx0XHRcdGxldCBkaXIgPSBuZXcgVEhSRUUuVmVjdG9yMygpLnN1YlZlY3RvcnMoZW5kLCBzdGFydCk7XHJcblx0XHRcdFx0ZGlyLnkgPSAwO1xyXG5cdFx0XHRcdGRpci5ub3JtYWxpemUoKTtcclxuXHRcdFx0XHRsZXQgYWxwaGEgPSBNYXRoLmFjb3MoeEF4aXMuZG90KGRpcikpO1xyXG5cdFx0XHRcdGlmIChkaXIueiA+IDApIHtcclxuXHRcdFx0XHRcdGFscGhhID0gLWFscGhhO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChwb3NpdGlvbikge1xyXG5cdFx0XHRcdFx0bGV0IHRvT3JpZ2luID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5tYWtlVHJhbnNsYXRpb24oLXN0YXJ0LngsIC1ib3VuZGluZ0JveC5taW4ueSwgLXN0YXJ0LnopO1xyXG5cdFx0XHRcdFx0bGV0IGFsaWduV2l0aFggPSBuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VSb3RhdGlvblkoLWFscGhhKTtcclxuXHRcdFx0XHRcdGxldCBhcHBseU1pbGVhZ2UgPSBuZXcgVEhSRUUuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbihtaWxlYWdlLngsIDAsIDApO1xyXG5cclxuXHRcdFx0XHRcdGxldCBwb3MgPSBwb3NpdGlvbi5jbG9uZSgpO1xyXG5cdFx0XHRcdFx0cG9zLmFwcGx5TWF0cml4NCh0b09yaWdpbik7XHJcblx0XHRcdFx0XHRwb3MuYXBwbHlNYXRyaXg0KGFsaWduV2l0aFgpO1xyXG5cdFx0XHRcdFx0cG9zLmFwcGx5TWF0cml4NChhcHBseU1pbGVhZ2UpO1xyXG5cclxuXHRcdFx0XHRcdHJldHVybiBwb3M7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fShzdGFydCwgZW5kLCBtaWxlYWdlLmNsb25lKCksIHBvaW50cy5ib3VuZGluZ0JveC5jbG9uZSgpKSk7XHJcblxyXG5cdFx0XHRzZWdtZW50LnByb2plY3QgPSBwcm9qZWN0O1xyXG5cclxuXHRcdFx0bWlsZWFnZS54ICs9IG5ldyBUSFJFRS5WZWN0b3IzKHN0YXJ0LngsIDAsIHN0YXJ0LnopLmRpc3RhbmNlVG8obmV3IFRIUkVFLlZlY3RvcjMoZW5kLngsIDAsIGVuZC56KSk7XHJcblx0XHRcdG1pbGVhZ2UueSArPSBlbmQueSAtIHN0YXJ0Lnk7XHJcblx0XHR9XHJcblxyXG5cdFx0cG9pbnRzLnByb2plY3RlZEJvdW5kaW5nQm94Lm1pbi54ID0gMDtcclxuXHRcdHBvaW50cy5wcm9qZWN0ZWRCb3VuZGluZ0JveC5taW4ueSA9IHBvaW50cy5ib3VuZGluZ0JveC5taW4ueTtcclxuXHRcdHBvaW50cy5wcm9qZWN0ZWRCb3VuZGluZ0JveC5tYXgueCA9IG1pbGVhZ2UueDtcclxuXHRcdHBvaW50cy5wcm9qZWN0ZWRCb3VuZGluZ0JveC5tYXgueSA9IHBvaW50cy5ib3VuZGluZ0JveC5tYXgueTtcclxuXHJcblx0XHRyZXR1cm4gcG9pbnRzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogcmV0dXJucyBwb2ludHMgaW5zaWRlIHRoZSBnaXZlbiBwcm9maWxlIGJvdW5kcy5cclxuXHQgKlxyXG5cdCAqIHN0YXJ0OlxyXG5cdCAqIGVuZDpcclxuXHQgKiB3aWR0aDpcclxuXHQgKiBkZXB0aDpcdFx0c2VhcmNoIHBvaW50cyB1cCB0byB0aGUgZ2l2ZW4gb2N0cmVlIGRlcHRoXHJcblx0ICogY2FsbGJhY2s6XHRpZiBzcGVjaWZpZWQsIHBvaW50cyBhcmUgbG9hZGVkIGJlZm9yZSBzZWFyY2hpbmdcclxuXHQgKlxyXG5cdCAqXHJcblx0ICovXHJcblx0Z2V0UHJvZmlsZShzdGFydCwgZW5kLCB3aWR0aCwgZGVwdGgsIGNhbGxiYWNrKSB7XHJcblx0XHQvL2xldCByZXF1ZXN0ID0gbmV3IFBvdHJlZS5Qcm9maWxlUmVxdWVzdChzdGFydCwgZW5kLCB3aWR0aCwgZGVwdGgsIGNhbGxiYWNrKTtcclxuXHRcdC8vdGhpcy5wcm9maWxlUmVxdWVzdHMucHVzaChyZXF1ZXN0KTtcclxuXHR9O1xyXG5cclxuXHRnZXRWaXNpYmxlRXh0ZW50KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMudmlzaWJsZUJvdW5kcy5hcHBseU1hdHJpeDQodGhpcy5tYXRyaXhXb3JsZCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogcGFyYW1zLnBpY2tXaW5kb3dTaXplOlxyXG5cdCAqIFx0TG9vayBmb3IgcG9pbnRzIGluc2lkZSBhIHBpeGVsIHdpbmRvdyBvZiB0aGlzIHNpemUuXHJcblx0ICogXHRVc2Ugb2RkIHZhbHVlczogMSwgMywgNSwgLi4uXHJcblx0ICpcclxuXHQgKiBUT0RPOiBvbmx5IGRyYXcgcGl4ZWxzIHRoYXQgYXJlIGFjdHVhbGx5IHJlYWQgd2l0aCByZWFkUGl4ZWxzKCkuXHJcblx0ICovXHJcblx0cGljayh2aWV3ZXIsIGNhbWVyYSwgcmF5LCBwYXJhbXMgPSB7fSkge1xyXG5cclxuXHRcdGxldCByZW5kZXJlciA9IHZpZXdlci5yZW5kZXJlcjtcclxuXHRcdGxldCBwUmVuZGVyZXIgPSB2aWV3ZXIucFJlbmRlcmVyO1xyXG5cclxuXHRcdHBlcmZvcm1hbmNlLm1hcmsoXCJwaWNrLXN0YXJ0XCIpO1xyXG5cclxuXHRcdGxldCBnZXRWYWwgPSAoYSwgYikgPT4gYSAhPT0gdW5kZWZpbmVkID8gYSA6IGI7XHJcblxyXG5cdFx0bGV0IHBpY2tXaW5kb3dTaXplID0gZ2V0VmFsKHBhcmFtcy5waWNrV2luZG93U2l6ZSwgMTUpO1xyXG5cdFx0bGV0IHBpY2tPdXRzaWRlQ2xpcFJlZ2lvbiA9IGdldFZhbChwYXJhbXMucGlja091dHNpZGVDbGlwUmVnaW9uLCBmYWxzZSk7XHJcblxyXG5cdFx0bGV0IHNpemUgPSByZW5kZXJlci5nZXRTaXplKG5ldyBUSFJFRS5WZWN0b3IyKCkpO1xyXG5cdFx0bGV0IHdpZHRoID0gTWF0aC5jZWlsKGdldFZhbChwYXJhbXMud2lkdGgsIHNpemUueCkpO1xyXG5cdFx0bGV0IGhlaWdodCA9IE1hdGguY2VpbChnZXRWYWwocGFyYW1zLmhlaWdodCwgc2l6ZS55KSk7XHJcblxyXG5cdFx0bGV0IHBvaW50U2l6ZVR5cGUgPSBnZXRWYWwocGFyYW1zLnBvaW50U2l6ZVR5cGUsIFBvaW50U2l6ZVR5cGUuRklYRUQpOyAvL3RoaXMubWF0ZXJpYWwucG9pbnRTaXplVHlwZSk7XHJcblx0XHRsZXQgcG9pbnRTaXplID0gZ2V0VmFsKHBhcmFtcy5wb2ludFNpemUsIDgpO1xyXG5cdFx0bGV0IHBvaW50U2hhcGUgPSBnZXRWYWwocGFyYW1zLnBvaW50U2hhcGUsIFBvaW50U2hhcGUuU1FVQVJFKTtcclxuXHJcblx0XHRsZXQgbm9kZXMgPSB0aGlzLm5vZGVzT25SYXkodGhpcy52aXNpYmxlTm9kZXMsIHJheSk7XHJcblxyXG5cdFx0aWYgKG5vZGVzLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIXRoaXMucGlja1N0YXRlKSB7XHJcblx0XHRcdGxldCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG5cclxuXHRcdFx0bGV0IG1hdGVyaWFsID0gbmV3IFBvaW50Q2xvdWRNYXRlcmlhbCgpO1xyXG5cdFx0XHRtYXRlcmlhbC5wb2ludENvbG9yVHlwZSA9IFBvaW50Q29sb3JUeXBlLlBPSU5UX0lOREVYO1xyXG5cclxuXHRcdFx0bGV0IHJlbmRlclRhcmdldCA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlclRhcmdldChcclxuXHRcdFx0XHQxLCAxLFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdG1pbkZpbHRlcjogVEhSRUUuTGluZWFyRmlsdGVyLFxyXG5cdFx0XHRcdFx0bWFnRmlsdGVyOiBUSFJFRS5OZWFyZXN0RmlsdGVyLFxyXG5cdFx0XHRcdFx0Zm9ybWF0OiBUSFJFRS5SR0JBRm9ybWF0XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0dGhpcy5waWNrU3RhdGUgPSB7IHJlbmRlclRhcmdldCwgbWF0ZXJpYWwsIHNjZW5lIH07XHJcblx0XHR9O1xyXG5cclxuXHRcdGxldCBwaWNrU3RhdGUgPSB0aGlzLnBpY2tTdGF0ZTtcclxuXHRcdGxldCBwaWNrTWF0ZXJpYWwgPSBwaWNrU3RhdGUubWF0ZXJpYWw7XHJcblxyXG5cdFx0Ly9VcGRhdGUgcGljayBtYXRlcmlhbFxyXG5cdFx0cGlja01hdGVyaWFsLnBvaW50U2l6ZVR5cGUgPSBwb2ludFNpemVUeXBlO1xyXG5cdFx0cGlja01hdGVyaWFsLnNoYXBlID0gcG9pbnRTaGFwZTtcclxuXHJcblx0XHRwaWNrTWF0ZXJpYWwuc2l6ZSA9IHBvaW50U2l6ZTtcclxuXHRcdHBpY2tNYXRlcmlhbC51bmlmb3Jtcy5taW5TaXplLnZhbHVlID0gdGhpcy5tYXRlcmlhbC51bmlmb3Jtcy5taW5TaXplLnZhbHVlO1xyXG5cdFx0cGlja01hdGVyaWFsLnVuaWZvcm1zLm1heFNpemUudmFsdWUgPSB0aGlzLm1hdGVyaWFsLnVuaWZvcm1zLm1heFNpemUudmFsdWU7XHJcblx0XHRwaWNrTWF0ZXJpYWwuY2xhc3NpZmljYXRpb24gPSB0aGlzLm1hdGVyaWFsLmNsYXNzaWZpY2F0aW9uO1xyXG5cdFx0aWYgKHBhcmFtcy5waWNrQ2xpcHBlZCkge1xyXG5cdFx0XHRwaWNrTWF0ZXJpYWwuY2xpcEJveGVzID0gdGhpcy5tYXRlcmlhbC5jbGlwQm94ZXM7XHJcblx0XHRcdGlmICh0aGlzLm1hdGVyaWFsLmNsaXBUYXNrID09PSBDbGlwVGFzay5ISUdITElHSFQpIHtcclxuXHRcdFx0XHRwaWNrTWF0ZXJpYWwuY2xpcFRhc2sgPSBDbGlwVGFzay5OT05FO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHBpY2tNYXRlcmlhbC5jbGlwVGFzayA9IHRoaXMubWF0ZXJpYWwuY2xpcFRhc2s7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHBpY2tNYXRlcmlhbC5jbGlwQm94ZXMgPSBbXTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnVwZGF0ZU1hdGVyaWFsKHBpY2tNYXRlcmlhbCwgbm9kZXMsIGNhbWVyYSwgcmVuZGVyZXIpO1xyXG5cclxuXHRcdHBpY2tTdGF0ZS5yZW5kZXJUYXJnZXQuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTtcclxuXHJcblx0XHRsZXQgcGl4ZWxQb3MgPSBuZXcgVEhSRUUuVmVjdG9yMihwYXJhbXMueCwgcGFyYW1zLnkpO1xyXG5cclxuXHRcdGxldCBnbCA9IHJlbmRlcmVyLmdldENvbnRleHQoKTtcclxuXHRcdGdsLmVuYWJsZShnbC5TQ0lTU09SX1RFU1QpO1xyXG5cdFx0Z2wuc2Npc3NvcihcclxuXHRcdFx0cGFyc2VJbnQocGl4ZWxQb3MueCAtIChwaWNrV2luZG93U2l6ZSAtIDEpIC8gMiksXHJcblx0XHRcdHBhcnNlSW50KHBpeGVsUG9zLnkgLSAocGlja1dpbmRvd1NpemUgLSAxKSAvIDIpLFxyXG5cdFx0XHRwYXJzZUludChwaWNrV2luZG93U2l6ZSksXHJcblx0XHRcdHBhcnNlSW50KHBpY2tXaW5kb3dTaXplKVxyXG5cdFx0KTtcclxuXHJcblx0XHRyZW5kZXJlci5zdGF0ZS5idWZmZXJzLmRlcHRoLnNldFRlc3QocGlja01hdGVyaWFsLmRlcHRoVGVzdCk7XHJcblx0XHRyZW5kZXJlci5zdGF0ZS5idWZmZXJzLmRlcHRoLnNldE1hc2socGlja01hdGVyaWFsLmRlcHRoV3JpdGUpO1xyXG5cdFx0cmVuZGVyZXIuc3RhdGUuc2V0QmxlbmRpbmcoVEhSRUUuTm9CbGVuZGluZyk7XHJcblxyXG5cdFx0Ly9SZW5kZXJcclxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldChwaWNrU3RhdGUucmVuZGVyVGFyZ2V0KTtcclxuXHRcdGdsLmNsZWFyQ29sb3IoMCwgMCwgMCwgMCk7XHJcblx0XHRyZW5kZXJlci5jbGVhcih0cnVlLCB0cnVlLCB0cnVlKTtcclxuXHJcblx0XHRsZXQgdG1wID0gdGhpcy5tYXRlcmlhbDtcclxuXHRcdHRoaXMubWF0ZXJpYWwgPSBwaWNrTWF0ZXJpYWw7XHJcblxyXG5cdFx0cFJlbmRlcmVyLnJlbmRlck9jdHJlZShyZW5kZXJlciwgdGhpcywgbm9kZXMsIGNhbWVyYSwgcGlja1N0YXRlLnJlbmRlclRhcmdldCk7XHJcblxyXG5cdFx0dGhpcy5tYXRlcmlhbCA9IHRtcDtcclxuXHJcblx0XHRsZXQgY2xhbXAgPSAobnVtYmVyLCBtaW4sIG1heCkgPT4gTWF0aC5taW4oTWF0aC5tYXgobWluLCBudW1iZXIpLCBtYXgpO1xyXG5cclxuXHRcdGxldCB4ID0gcGFyc2VJbnQoY2xhbXAocGl4ZWxQb3MueCAtIChwaWNrV2luZG93U2l6ZSAtIDEpIC8gMiwgMCwgd2lkdGgpKTtcclxuXHRcdGxldCB5ID0gcGFyc2VJbnQoY2xhbXAocGl4ZWxQb3MueSAtIChwaWNrV2luZG93U2l6ZSAtIDEpIC8gMiwgMCwgaGVpZ2h0KSk7XHJcblx0XHRsZXQgdyA9IHBhcnNlSW50KE1hdGgubWluKHggKyBwaWNrV2luZG93U2l6ZSwgd2lkdGgpIC0geCk7XHJcblx0XHRsZXQgaCA9IHBhcnNlSW50KE1hdGgubWluKHkgKyBwaWNrV2luZG93U2l6ZSwgaGVpZ2h0KSAtIHkpO1xyXG5cclxuXHRcdGxldCBwaXhlbENvdW50ID0gdyAqIGg7XHJcblx0XHRsZXQgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoNCAqIHBpeGVsQ291bnQpO1xyXG5cclxuXHRcdGdsLnJlYWRQaXhlbHMoeCwgeSwgcGlja1dpbmRvd1NpemUsIHBpY2tXaW5kb3dTaXplLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBidWZmZXIpO1xyXG5cclxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldChudWxsKTtcclxuXHRcdHJlbmRlcmVyLnN0YXRlLnJlc2V0KCk7XHJcblx0XHRyZW5kZXJlci5zZXRTY2lzc29yVGVzdChmYWxzZSk7XHJcblx0XHRnbC5kaXNhYmxlKGdsLlNDSVNTT1JfVEVTVCk7XHJcblxyXG5cdFx0bGV0IHBpeGVscyA9IGJ1ZmZlcjtcclxuXHRcdGxldCBpYnVmZmVyID0gbmV3IFVpbnQzMkFycmF5KGJ1ZmZlci5idWZmZXIpO1xyXG5cclxuXHRcdC8vIGZpbmQgY2xvc2VzdCBoaXQgaW5zaWRlIHBpeGVsV2luZG93IGJvdW5kYXJpZXNcclxuXHRcdGxldCBoaXRzID0gW107XHJcblxyXG5cdFx0Zm9yIChsZXQgdSA9IDA7IHUgPCBwaWNrV2luZG93U2l6ZTsgdSsrKSB7XHJcblx0XHRcdGZvciAobGV0IHYgPSAwOyB2IDwgcGlja1dpbmRvd1NpemU7IHYrKykge1xyXG5cdFx0XHRcdGxldCBvZmZzZXQgPSAodSArIHYgKiBwaWNrV2luZG93U2l6ZSk7XHJcblx0XHRcdFx0bGV0IGRpc3RhbmNlID0gTWF0aC5wb3codSAtIChwaWNrV2luZG93U2l6ZSAtIDEpIC8gMiwgMikgKyBNYXRoLnBvdyh2IC0gKHBpY2tXaW5kb3dTaXplIC0gMSkgLyAyLCAyKTtcclxuXHJcblx0XHRcdFx0bGV0IHBjSW5kZXggPSBwaXhlbHNbNCAqIG9mZnNldCArIDNdO1xyXG5cdFx0XHRcdHBpeGVsc1s0ICogb2Zmc2V0ICsgM10gPSAwO1xyXG5cdFx0XHRcdGxldCBwSW5kZXggPSBpYnVmZmVyW29mZnNldF07XHJcblxyXG5cdFx0XHRcdGlmICghKHBjSW5kZXggPT09IDAgJiYgcEluZGV4ID09PSAwKSAmJiAocGNJbmRleCAhPT0gdW5kZWZpbmVkKSAmJiAocEluZGV4ICE9PSB1bmRlZmluZWQpKSB7XHJcblx0XHRcdFx0XHRsZXQgaGl0ID0ge1xyXG5cdFx0XHRcdFx0XHRwSW5kZXg6IHBJbmRleCxcclxuXHRcdFx0XHRcdFx0cGNJbmRleDogcGNJbmRleCxcclxuXHRcdFx0XHRcdFx0ZGlzdGFuY2VUb0NlbnRlcjogZGlzdGFuY2VcclxuXHRcdFx0XHRcdH07XHJcblxyXG5cdFx0XHRcdFx0aWYgKHBhcmFtcy5hbGwpIHtcclxuXHRcdFx0XHRcdFx0aGl0cy5wdXNoKGhpdCk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRpZiAoaGl0cy5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKGRpc3RhbmNlIDwgaGl0c1swXS5kaXN0YW5jZVRvQ2VudGVyKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRoaXRzWzBdID0gaGl0O1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRoaXRzLnB1c2goaGl0KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRmb3IgKGxldCBoaXQgb2YgaGl0cykge1xyXG5cdFx0XHRpZiAoIW5vZGVzW2hpdC5wY0luZGV4XSkge1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRsZXQgcG9pbnQgPSBIZWxwZXJVdGlscy5ub2RlVG9Qb2ludChub2RlLCBoaXQucGNJbmRleCk7XHJcblx0XHRcdGhpdC5wb2ludCA9IHBvaW50O1xyXG5cdFx0fVxyXG5cclxuXHRcdHBlcmZvcm1hbmNlLm1lYXN1cmUoXCJwaWNrXCIsIFwicGljay1zdGFydFwiKTtcclxuXHJcblx0XHRpZiAocGFyYW1zLmFsbCkge1xyXG5cdFx0XHRyZXR1cm4gaGl0c1xyXG5cdFx0XHRcdC5zb3J0KChhLCBiKSA9PiBhLmRpc3RhbmNlVG9DZW50ZXIgLSBiLmRpc3RhbmNlVG9DZW50ZXIpXHJcblx0XHRcdFx0Lm1hcChoaXQgPT4gaGl0LnBvaW50KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGlmIChoaXRzLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJldHVybiBoaXRzWzBdLnBvaW50O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIExvb2tzIGZvciBwb2ludHMgaW4gY2xvc2UgcHJveGltaXR5IHRvIHRoZSBzcGVjaWZpZWQgUmF5LCBhbnl3aGVyZSBhbG9uZ1xyXG5cdCAqIHRoZSBlbnRpcmUgbGVuZ3RoIG9mIHRoZSBSYXkuXHJcblx0ICpcclxuXHQgKiBCeSBkZWZhdWx0LCBhbGwgcG9pbnRzIHdpdGhpbiBwYXJhbXMubWF4RGlzdGFuY2UgKGRlZmF1bHQ6IDAuNSkgb2YgdGhlIFJheVxyXG5cdCAqIGFyZSByZXR1cm5lZC4gU2V0dGluZyBwYXJhbXMuZmlyc3RIaXRPbmx5IHRvIHRydWUgd2lsbCBvbmx5IHJldHVybiB0aGVcclxuXHQgKiBuZWFyZXN0IHBvaW50IHRvIHRoZSBSYXkncyBvcmlnaW4uXHJcblx0ICovXHJcblx0cGlja0FsbChyYXksIHBhcmFtcyA9IHt9KSB7XHJcblx0XHRwZXJmb3JtYW5jZS5tYXJrKCdwaWNrQWxsLXN0YXJ0Jyk7XHJcblxyXG5cdFx0Ly8gVE9ETyBPcHRpbWlzZSB0aGlzIVxyXG5cdFx0Y29uc3QgcG9pbnRzT25SYXkgPSB0aGlzLnBvaW50c09uUmF5KFxyXG5cdFx0XHR0aGlzLnZpc2libGVOb2RlcyxcclxuXHRcdFx0cmF5LFxyXG5cdFx0XHRwYXJhbXMubWF4RGlzdGFuY2UgfHwgMC41LFxyXG5cdFx0XHRwYXJhbXMucmVjdXJzaXZlLFxyXG5cdFx0KTtcclxuXHJcblx0XHRwZXJmb3JtYW5jZS5tZWFzdXJlKCdwaWNrQWxsJywgJ3BpY2tBbGwtc3RhcnQnKTtcclxuXHJcblx0XHRpZiAocGFyYW1zLmZpcnN0SGl0T25seSkge1xyXG5cdFx0XHRjb25zdCBwb2ludCA9IHBvaW50c09uUmF5XHJcblx0XHRcdFx0Lm1hcChwb2ludCA9PiBPYmplY3QuYXNzaWduKHBvaW50LCB7IGRpc3RhbmNlVG9PcmlnaW46IHBvaW50LnBvc2l0aW9uLmRpc3RhbmNlVG8ocmF5Lm9yaWdpbikgfSkpXHJcblx0XHRcdFx0LnNvcnQoKGEsIGIpID0+IGEuZGlzdGFuY2VUb09yaWdpbiAtIGIuZGlzdGFuY2VUb09yaWdpbilcclxuXHRcdFx0XHQuc2hpZnQoKTtcclxuXHJcblx0XHRcdHJldHVybiBwb2ludDtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcG9pbnRzT25SYXk7XHJcblx0fVxyXG5cclxuXHQqZ2V0Rml0dGVkQm94R2VuKGJveE5vZGUpIHtcclxuXHRcdGxldCBzaHJpbmtlZExvY2FsQm91bmRzID0gbmV3IFRIUkVFLkJveDMoKTtcclxuXHRcdGxldCB3b3JsZFRvQm94ID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5nZXRJbnZlcnNlKGJveE5vZGUubWF0cml4V29ybGQpO1xyXG5cclxuXHRcdGZvciAobGV0IG5vZGUgb2YgdGhpcy52aXNpYmxlTm9kZXMpIHtcclxuXHRcdFx0aWYgKCFub2RlLnNjZW5lTm9kZSkge1xyXG5cdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRsZXQgYnVmZmVyID0gbm9kZS5nZW9tZXRyeU5vZGUuYnVmZmVyO1xyXG5cclxuXHRcdFx0bGV0IHBvc09mZnNldCA9IGJ1ZmZlci5vZmZzZXQoXCJwb3NpdGlvblwiKTtcclxuXHRcdFx0bGV0IHN0cmlkZSA9IGJ1ZmZlci5zdHJpZGU7XHJcblx0XHRcdGxldCB2aWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlci5kYXRhKTtcclxuXHJcblx0XHRcdGxldCBvYmplY3RUb0JveCA9IG5ldyBUSFJFRS5NYXRyaXg0KCkubXVsdGlwbHlNYXRyaWNlcyh3b3JsZFRvQm94LCBub2RlLnNjZW5lTm9kZS5tYXRyaXhXb3JsZCk7XHJcblxyXG5cdFx0XHRsZXQgcG9zID0gbmV3IFRIUkVFLlZlY3RvcjQoKTtcclxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXIubnVtRWxlbWVudHM7IGkrKykge1xyXG5cdFx0XHRcdGxldCB4ID0gdmlldy5nZXRGbG9hdDMyKGkgKiBzdHJpZGUgKyBwb3NPZmZzZXQgKyAwLCB0cnVlKTtcclxuXHRcdFx0XHRsZXQgeSA9IHZpZXcuZ2V0RmxvYXQzMihpICogc3RyaWRlICsgcG9zT2Zmc2V0ICsgNCwgdHJ1ZSk7XHJcblx0XHRcdFx0bGV0IHogPSB2aWV3LmdldEZsb2F0MzIoaSAqIHN0cmlkZSArIHBvc09mZnNldCArIDgsIHRydWUpO1xyXG5cclxuXHRcdFx0XHRwb3Muc2V0KHgsIHksIHosIDEpO1xyXG5cdFx0XHRcdHBvcy5hcHBseU1hdHJpeDQob2JqZWN0VG9Cb3gpO1xyXG5cclxuXHRcdFx0XHRpZiAoLTAuNSA8IHBvcy54ICYmIHBvcy54IDwgMC41KSB7XHJcblx0XHRcdFx0XHRpZiAoLTAuNSA8IHBvcy55ICYmIHBvcy55IDwgMC41KSB7XHJcblx0XHRcdFx0XHRcdGlmICgtMC41IDwgcG9zLnogJiYgcG9zLnogPCAwLjUpIHtcclxuXHRcdFx0XHRcdFx0XHRzaHJpbmtlZExvY2FsQm91bmRzLmV4cGFuZEJ5UG9pbnQocG9zKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0eWllbGQ7XHJcblx0XHR9XHJcblxyXG5cclxuXHRcdGxldCBmaXR0ZWRQb3NpdGlvbiA9IHNocmlua2VkTG9jYWxCb3VuZHMuZ2V0Q2VudGVyKG5ldyBUSFJFRS5WZWN0b3IzKCkpLmFwcGx5TWF0cml4NChib3hOb2RlLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRsZXQgZml0dGVkID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XHJcblx0XHRmaXR0ZWQucG9zaXRpb24uY29weShmaXR0ZWRQb3NpdGlvbik7XHJcblx0XHRmaXR0ZWQuc2NhbGUuY29weShib3hOb2RlLnNjYWxlKTtcclxuXHRcdGZpdHRlZC5yb3RhdGlvbi5jb3B5KGJveE5vZGUucm90YXRpb24pO1xyXG5cclxuXHRcdGxldCBkcyA9IG5ldyBUSFJFRS5WZWN0b3IzKCkuc3ViVmVjdG9ycyhzaHJpbmtlZExvY2FsQm91bmRzLm1heCwgc2hyaW5rZWRMb2NhbEJvdW5kcy5taW4pO1xyXG5cdFx0Zml0dGVkLnNjYWxlLm11bHRpcGx5KGRzKTtcclxuXHJcblx0XHR5aWVsZCBmaXR0ZWQ7XHJcblx0fVxyXG5cclxuXHRnZXRGaXR0ZWRCb3goYm94Tm9kZSwgbWF4TGV2ZWwgPSBJbmZpbml0eSkge1xyXG5cdFx0bGV0IHNocmlua2VkTG9jYWxCb3VuZHMgPSBuZXcgVEhSRUUuQm94MygpO1xyXG5cdFx0bGV0IHdvcmxkVG9Cb3ggPSBuZXcgVEhSRUUuTWF0cml4NCgpLmdldEludmVyc2UoYm94Tm9kZS5tYXRyaXhXb3JsZCk7XHJcblxyXG5cdFx0Zm9yIChsZXQgbm9kZSBvZiB0aGlzLnZpc2libGVOb2Rlcykge1xyXG5cdFx0XHRpZiAoIW5vZGUuc2NlbmVOb2RlIHx8IG5vZGUuZ2V0TGV2ZWwoKSA+IG1heExldmVsKSB7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGxldCBidWZmZXIgPSBub2RlLmdlb21ldHJ5Tm9kZS5idWZmZXI7XHJcblxyXG5cdFx0XHRsZXQgcG9zT2Zmc2V0ID0gYnVmZmVyLm9mZnNldChcInBvc2l0aW9uXCIpO1xyXG5cdFx0XHRsZXQgc3RyaWRlID0gYnVmZmVyLnN0cmlkZTtcclxuXHRcdFx0bGV0IHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyLmRhdGEpO1xyXG5cclxuXHRcdFx0bGV0IG9iamVjdFRvQm94ID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5tdWx0aXBseU1hdHJpY2VzKHdvcmxkVG9Cb3gsIG5vZGUuc2NlbmVOb2RlLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRcdGxldCBwb3MgPSBuZXcgVEhSRUUuVmVjdG9yNCgpO1xyXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGJ1ZmZlci5udW1FbGVtZW50czsgaSsrKSB7XHJcblx0XHRcdFx0bGV0IHggPSB2aWV3LmdldEZsb2F0MzIoaSAqIHN0cmlkZSArIHBvc09mZnNldCArIDAsIHRydWUpO1xyXG5cdFx0XHRcdGxldCB5ID0gdmlldy5nZXRGbG9hdDMyKGkgKiBzdHJpZGUgKyBwb3NPZmZzZXQgKyA0LCB0cnVlKTtcclxuXHRcdFx0XHRsZXQgeiA9IHZpZXcuZ2V0RmxvYXQzMihpICogc3RyaWRlICsgcG9zT2Zmc2V0ICsgOCwgdHJ1ZSk7XHJcblxyXG5cdFx0XHRcdHBvcy5zZXQoeCwgeSwgeiwgMSk7XHJcblx0XHRcdFx0cG9zLmFwcGx5TWF0cml4NChvYmplY3RUb0JveCk7XHJcblxyXG5cdFx0XHRcdGlmICgtMC41IDwgcG9zLnggJiYgcG9zLnggPCAwLjUpIHtcclxuXHRcdFx0XHRcdGlmICgtMC41IDwgcG9zLnkgJiYgcG9zLnkgPCAwLjUpIHtcclxuXHRcdFx0XHRcdFx0aWYgKC0wLjUgPCBwb3MueiAmJiBwb3MueiA8IDAuNSkge1xyXG5cdFx0XHRcdFx0XHRcdHNocmlua2VkTG9jYWxCb3VuZHMuZXhwYW5kQnlQb2ludChwb3MpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IGZpdHRlZFBvc2l0aW9uID0gc2hyaW5rZWRMb2NhbEJvdW5kcy5nZXRDZW50ZXIobmV3IFRIUkVFLlZlY3RvcjMoKSkuYXBwbHlNYXRyaXg0KGJveE5vZGUubWF0cml4V29ybGQpO1xyXG5cclxuXHRcdGxldCBmaXR0ZWQgPSBuZXcgVEhSRUUuT2JqZWN0M0QoKTtcclxuXHRcdGZpdHRlZC5wb3NpdGlvbi5jb3B5KGZpdHRlZFBvc2l0aW9uKTtcclxuXHRcdGZpdHRlZC5zY2FsZS5jb3B5KGJveE5vZGUuc2NhbGUpO1xyXG5cdFx0Zml0dGVkLnJvdGF0aW9uLmNvcHkoYm94Tm9kZS5yb3RhdGlvbik7XHJcblxyXG5cdFx0bGV0IGRzID0gbmV3IFRIUkVFLlZlY3RvcjMoKS5zdWJWZWN0b3JzKHNocmlua2VkTG9jYWxCb3VuZHMubWF4LCBzaHJpbmtlZExvY2FsQm91bmRzLm1pbik7XHJcblx0XHRmaXR0ZWQuc2NhbGUubXVsdGlwbHkoZHMpO1xyXG5cclxuXHRcdHJldHVybiBmaXR0ZWQ7XHJcblx0fVxyXG5cclxuXHRnZXQgcHJvZ3Jlc3MoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy52aXNpYmxlTm9kZXMubGVuZ3RoIC8gdGhpcy52aXNpYmxlR2VvbWV0cnkubGVuZ3RoO1xyXG5cdH1cclxuXHJcblx0ZmluZChuYW1lKSB7XHJcblx0XHRsZXQgbm9kZSA9IG51bGw7XHJcblx0XHRmb3IgKGxldCBjaGFyIG9mIG5hbWUpIHtcclxuXHRcdFx0aWYgKGNoYXIgPT09IFwiclwiKSB7XHJcblx0XHRcdFx0bm9kZSA9IHRoaXMucm9vdDtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIHtcclxuXHRcdFx0XHRub2RlID0gbm9kZS5jaGlsZHJlbltjaGFyXTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBub2RlO1xyXG5cdH1cclxufTtcclxuXHJcbmV4cG9ydCB7IFBvaW50Q2xvdWRPY3RyZWUsIFBvaW50Q2xvdWRPY3RyZWVOb2RlIH07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxuaW1wb3J0IHtIZWxwZXJVdGlsc30gZnJvbSBcIi4uL3V0aWxzL0hlbHBlclV0aWxzLmpzXCI7XHJcbmltcG9ydCB7UG9pbnRDbG91ZFRyZWUsIFBvaW50Q2xvdWRUcmVlTm9kZX0gZnJvbSBcIi4vUG9pbnRDbG91ZFRyZWUuanNcIjtcclxuaW1wb3J0IHtQb2ludENvbG9yVHlwZSwgQ2xpcFRhc2t9IGZyb20gXCIuLi9Qb3RyZWUuanNcIjtcclxuaW1wb3J0IHtHbG9iYWx9IGZyb20gXCIuLi9HbG9iYWwuanNcIjtcclxuaW1wb3J0IHtQb2ludENsb3VkTWF0ZXJpYWx9IGZyb20gXCIuL21hdGVyaWFscy9Qb2ludENsb3VkTWF0ZXJpYWwuanNcIjtcclxuaW1wb3J0IHtUcmVlVHlwZSwgUG9pbnRTaXplVHlwZX0gZnJvbSBcIi4uL1BvdHJlZS5qc1wiO1xyXG5cclxuY2xhc3MgUG9pbnRDbG91ZEFyZW5hNEROb2RlIGV4dGVuZHMgUG9pbnRDbG91ZFRyZWVOb2RlXHJcbntcclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLmxlZnQgPSBudWxsO1xyXG5cdFx0dGhpcy5yaWdodCA9IG51bGw7XHJcblx0XHR0aGlzLnNjZW5lTm9kZSA9IG51bGw7XHJcblx0XHR0aGlzLmtkdHJlZSA9IG51bGw7XHJcblx0fVxyXG5cclxuXHRnZXROdW1Qb2ludHMoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmdlb21ldHJ5Tm9kZS5udW1Qb2ludHM7XHJcblx0fVxyXG5cclxuXHRpc0xvYWRlZCgpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fVxyXG5cclxuXHRpc1RyZWVOb2RlKClcclxuXHR7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdGlzR2VvbWV0cnlOb2RlKClcclxuXHR7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRnZXRMZXZlbCgpXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuZ2VvbWV0cnlOb2RlLmxldmVsO1xyXG5cdH1cclxuXHJcblx0Z2V0Qm91bmRpbmdTcGhlcmUoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmdlb21ldHJ5Tm9kZS5ib3VuZGluZ1NwaGVyZTtcclxuXHR9XHJcblxyXG5cdGdldEJvdW5kaW5nQm94KClcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5nZW9tZXRyeU5vZGUuYm91bmRpbmdCb3g7XHJcblx0fVxyXG5cclxuXHR0b1RyZWVOb2RlKGNoaWxkKVxyXG5cdHtcclxuXHRcdHZhciBnZW9tZXRyeU5vZGUgPSBudWxsO1xyXG5cclxuXHRcdGlmKHRoaXMubGVmdCA9PT0gY2hpbGQpXHJcblx0XHR7XHJcblx0XHRcdGdlb21ldHJ5Tm9kZSA9IHRoaXMubGVmdDtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYodGhpcy5yaWdodCA9PT0gY2hpbGQpXHJcblx0XHR7XHJcblx0XHRcdGdlb21ldHJ5Tm9kZSA9IHRoaXMucmlnaHQ7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYoIWdlb21ldHJ5Tm9kZS5sb2FkZWQpXHJcblx0XHR7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR2YXIgbm9kZSA9IG5ldyBQb2ludENsb3VkQXJlbmE0RE5vZGUoKTtcclxuXHRcdHZhciBzY2VuZU5vZGUgPSBUSFJFRS5Qb2ludENsb3VkKGdlb21ldHJ5Tm9kZS5nZW9tZXRyeSwgdGhpcy5rZHRyZWUubWF0ZXJpYWwpO1xyXG5cdFx0c2NlbmVOb2RlLnZpc2libGUgPSBmYWxzZTtcclxuXHJcblx0XHRub2RlLmtkdHJlZSA9IHRoaXMua2R0cmVlO1xyXG5cdFx0bm9kZS5nZW9tZXRyeU5vZGUgPSBnZW9tZXRyeU5vZGU7XHJcblx0XHRub2RlLnNjZW5lTm9kZSA9IHNjZW5lTm9kZTtcclxuXHRcdG5vZGUucGFyZW50ID0gdGhpcztcclxuXHRcdG5vZGUubGVmdCA9IHRoaXMuZ2VvbWV0cnlOb2RlLmxlZnQ7XHJcblx0XHRub2RlLnJpZ2h0ID0gdGhpcy5nZW9tZXRyeU5vZGUucmlnaHQ7XHJcblx0fVxyXG5cclxuXHRnZXRDaGlsZHJlbigpXHJcblx0e1xyXG5cdFx0dmFyIGNoaWxkcmVuID0gW107XHJcblxyXG5cdFx0aWYodGhpcy5sZWZ0KVxyXG5cdFx0e1xyXG5cdFx0XHRjaGlsZHJlbi5wdXNoKHRoaXMubGVmdCk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYodGhpcy5yaWdodClcclxuXHRcdHtcclxuXHRcdFx0Y2hpbGRyZW4ucHVzaCh0aGlzLnJpZ2h0KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gY2hpbGRyZW47XHJcblx0fVxyXG59O1xyXG5cclxuY2xhc3MgUG9pbnRDbG91ZEFyZW5hNEQgZXh0ZW5kcyBQb2ludENsb3VkVHJlZVxyXG57XHJcblx0Y29uc3RydWN0b3IoZ2VvbWV0cnkpXHJcblx0e1xyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLnJvb3QgPSBudWxsO1xyXG5cdFx0aWYoZ2VvbWV0cnkucm9vdClcclxuXHRcdHtcclxuXHRcdFx0dGhpcy5yb290ID0gZ2VvbWV0cnkucm9vdDtcclxuXHRcdH1cclxuXHRcdGVsc2VcclxuXHRcdHtcclxuXHRcdFx0Z2VvbWV0cnkuYWRkRXZlbnRMaXN0ZW5lcihcImhpZXJhcmNoeV9sb2FkZWRcIiwgKCkgPT5cclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRoaXMucm9vdCA9IGdlb21ldHJ5LnJvb3Q7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudmlzaWJsZVBvaW50c1RhcmdldCA9IDIgKiAxMDAwICogMTAwMDtcclxuXHRcdHRoaXMubWluaW11bU5vZGVQaXhlbFNpemUgPSAxNTA7XHJcblxyXG5cdFx0dGhpcy5wb3NpdGlvbi5zdWIoZ2VvbWV0cnkub2Zmc2V0KTtcclxuXHRcdHRoaXMudXBkYXRlTWF0cml4KCk7XHJcblxyXG5cdFx0dGhpcy5udW1WaXNpYmxlTm9kZXMgPSAwO1xyXG5cdFx0dGhpcy5udW1WaXNpYmxlUG9pbnRzID0gMDtcclxuXHJcblx0XHR0aGlzLmJvdW5kaW5nQm94Tm9kZXMgPSBbXTtcclxuXHRcdHRoaXMubG9hZFF1ZXVlID0gW107XHJcblx0XHR0aGlzLnZpc2libGVOb2RlcyA9IFtdO1xyXG5cclxuXHRcdHRoaXMucGNvR2VvbWV0cnkgPSBnZW9tZXRyeTtcclxuXHRcdHRoaXMuYm91bmRpbmdCb3ggPSB0aGlzLnBjb0dlb21ldHJ5LmJvdW5kaW5nQm94O1xyXG5cdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IHRoaXMucGNvR2VvbWV0cnkuYm91bmRpbmdTcGhlcmU7XHJcblx0XHR0aGlzLm1hdGVyaWFsID0gbmV3IFBvaW50Q2xvdWRNYXRlcmlhbChcclxuXHRcdHtcclxuXHRcdFx0dmVydGV4Q29sb3JzOiBUSFJFRS5WZXJ0ZXhDb2xvcnMsXHJcblx0XHRcdHNpemU6IDAuMDUsXHJcblx0XHRcdHRyZWVUeXBlOiBUcmVlVHlwZS5LRFRSRUVcclxuXHRcdH0pO1xyXG5cdFx0dGhpcy5tYXRlcmlhbC5zaXplVHlwZSA9IFBvaW50U2l6ZVR5cGUuQVRURU5VQVRFRDtcclxuXHRcdHRoaXMubWF0ZXJpYWwuc2l6ZSA9IDAuMDU7XHJcblx0XHR0aGlzLnByb2ZpbGVSZXF1ZXN0cyA9IFtdO1xyXG5cdFx0dGhpcy5uYW1lID0gXCJcIjtcclxuXHR9XHJcblxyXG5cdGdldEJvdW5kaW5nQm94V29ybGQoKVxyXG5cdHtcclxuXHRcdHRoaXMudXBkYXRlTWF0cml4V29ybGQodHJ1ZSk7XHJcblx0XHR2YXIgYm94ID0gdGhpcy5ib3VuZGluZ0JveDtcclxuXHRcdHZhciB0cmFuc2Zvcm0gPSB0aGlzLm1hdHJpeFdvcmxkO1xyXG5cdFx0dmFyIHRCb3ggPSBIZWxwZXJVdGlscy5jb21wdXRlVHJhbnNmb3JtZWRCb3VuZGluZ0JveChib3gsIHRyYW5zZm9ybSk7XHJcblxyXG5cdFx0cmV0dXJuIHRCb3g7XHJcblx0fTtcclxuXHJcblx0c2V0TmFtZShuYW1lKVxyXG5cdHtcclxuXHRcdGlmKHRoaXMubmFtZSAhPT0gbmFtZSlcclxuXHRcdHtcclxuXHRcdFx0dGhpcy5uYW1lID0gbmFtZTtcclxuXHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dHlwZTogXCJuYW1lX2NoYW5nZWRcIixcclxuXHRcdFx0XHRuYW1lOiBuYW1lLFxyXG5cdFx0XHRcdHBvaW50Y2xvdWQ6IHRoaXNcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRnZXROYW1lKClcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5uYW1lO1xyXG5cdH1cclxuXHJcblx0Z2V0TGV2ZWwoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmxldmVsO1xyXG5cdH1cclxuXHJcblx0dG9UcmVlTm9kZShnZW9tZXRyeU5vZGUsIHBhcmVudClcclxuXHR7XHJcblx0XHR2YXIgbm9kZSA9IG5ldyBQb2ludENsb3VkQXJlbmE0RE5vZGUoKTtcclxuXHJcblx0XHR2YXIgc2NlbmVOb2RlID0gbmV3IFRIUkVFLlBvaW50cyhnZW9tZXRyeU5vZGUuZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwpO1xyXG5cdFx0c2NlbmVOb2RlLmZydXN0dW1DdWxsZWQgPSB0cnVlO1xyXG5cdFx0c2NlbmVOb2RlLm9uQmVmb3JlUmVuZGVyID0gKF90aGlzLCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwKSA9PlxyXG5cdFx0e1xyXG5cdFx0XHRpZihtYXRlcmlhbC5wcm9ncmFtKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0X3RoaXMuZ2V0Q29udGV4dCgpLnVzZVByb2dyYW0obWF0ZXJpYWwucHJvZ3JhbS5wcm9ncmFtKTtcclxuXHJcblx0XHRcdFx0aWYobWF0ZXJpYWwucHJvZ3JhbS5nZXRVbmlmb3JtcygpLm1hcC5sZXZlbClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR2YXIgbGV2ZWwgPSBnZW9tZXRyeU5vZGUuZ2V0TGV2ZWwoKTtcclxuXHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zLmxldmVsLnZhbHVlID0gbGV2ZWw7XHJcblx0XHRcdFx0XHRtYXRlcmlhbC5wcm9ncmFtLmdldFVuaWZvcm1zKCkubWFwLmxldmVsLnNldFZhbHVlKF90aGlzLmdldENvbnRleHQoKSwgbGV2ZWwpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYodGhpcy52aXNpYmxlTm9kZVRleHR1cmVPZmZzZXRzICYmIG1hdGVyaWFsLnByb2dyYW0uZ2V0VW5pZm9ybXMoKS5tYXAudm5TdGFydClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR2YXIgdm5TdGFydCA9IHRoaXMudmlzaWJsZU5vZGVUZXh0dXJlT2Zmc2V0cy5nZXQobm9kZSk7XHJcblx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtcy52blN0YXJ0LnZhbHVlID0gdm5TdGFydDtcclxuXHRcdFx0XHRcdG1hdGVyaWFsLnByb2dyYW0uZ2V0VW5pZm9ybXMoKS5tYXAudm5TdGFydC5zZXRWYWx1ZShfdGhpcy5nZXRDb250ZXh0KCksIHZuU3RhcnQpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYobWF0ZXJpYWwucHJvZ3JhbS5nZXRVbmlmb3JtcygpLm1hcC5wY0luZGV4KVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHZhciBpID0gbm9kZS5wY0luZGV4ID8gbm9kZS5wY0luZGV4IDogdGhpcy52aXNpYmxlTm9kZXMuaW5kZXhPZihub2RlKTtcclxuXHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zLnBjSW5kZXgudmFsdWUgPSBpO1xyXG5cdFx0XHRcdFx0bWF0ZXJpYWwucHJvZ3JhbS5nZXRVbmlmb3JtcygpLm1hcC5wY0luZGV4LnNldFZhbHVlKF90aGlzLmdldENvbnRleHQoKSwgaSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdG5vZGUuZ2VvbWV0cnlOb2RlID0gZ2VvbWV0cnlOb2RlO1xyXG5cdFx0bm9kZS5zY2VuZU5vZGUgPSBzY2VuZU5vZGU7XHJcblx0XHRub2RlLnBvaW50Y2xvdWQgPSB0aGlzO1xyXG5cdFx0bm9kZS5sZWZ0ID0gZ2VvbWV0cnlOb2RlLmxlZnQ7XHJcblx0XHRub2RlLnJpZ2h0ID0gZ2VvbWV0cnlOb2RlLnJpZ2h0O1xyXG5cclxuXHRcdGlmKCFwYXJlbnQpXHJcblx0XHR7XHJcblx0XHRcdHRoaXMucm9vdCA9IG5vZGU7XHJcblx0XHRcdHRoaXMuYWRkKHNjZW5lTm9kZSk7XHJcblx0XHR9XHJcblx0XHRlbHNlXHJcblx0XHR7XHJcblx0XHRcdHBhcmVudC5zY2VuZU5vZGUuYWRkKHNjZW5lTm9kZSk7XHJcblxyXG5cdFx0XHRpZihwYXJlbnQubGVmdCA9PT0gZ2VvbWV0cnlOb2RlKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cGFyZW50LmxlZnQgPSBub2RlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYocGFyZW50LnJpZ2h0ID09PSBnZW9tZXRyeU5vZGUpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRwYXJlbnQucmlnaHQgPSBub2RlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGRpc3Bvc2VMaXN0ZW5lciA9IGZ1bmN0aW9uKClcclxuXHRcdHtcclxuXHRcdFx0cGFyZW50LnNjZW5lTm9kZS5yZW1vdmUobm9kZS5zY2VuZU5vZGUpO1xyXG5cclxuXHRcdFx0aWYocGFyZW50LmxlZnQgPT09IG5vZGUpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRwYXJlbnQubGVmdCA9IGdlb21ldHJ5Tm9kZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKHBhcmVudC5yaWdodCA9PT0gbm9kZSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHBhcmVudC5yaWdodCA9IGdlb21ldHJ5Tm9kZTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdGdlb21ldHJ5Tm9kZS5vbmVUaW1lRGlzcG9zZUhhbmRsZXJzLnB1c2goZGlzcG9zZUxpc3RlbmVyKTtcclxuXHJcblx0XHRyZXR1cm4gbm9kZTtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZU1hdGVyaWFsKG1hdGVyaWFsLCB2aXNpYmxlTm9kZXMsIGNhbWVyYSwgcmVuZGVyZXIpXHJcblx0e1xyXG5cdFx0bWF0ZXJpYWwuZm92ID0gY2FtZXJhLmZvdiAqIChNYXRoLlBJIC8gMTgwKTtcclxuXHRcdG1hdGVyaWFsLnNjcmVlbldpZHRoID0gcmVuZGVyZXIuZG9tRWxlbWVudC5jbGllbnRXaWR0aDtcclxuXHRcdG1hdGVyaWFsLnNjcmVlbkhlaWdodCA9IHJlbmRlcmVyLmRvbUVsZW1lbnQuY2xpZW50SGVpZ2h0O1xyXG5cdFx0bWF0ZXJpYWwuc3BhY2luZyA9IHRoaXMucGNvR2VvbWV0cnkuc3BhY2luZztcclxuXHRcdG1hdGVyaWFsLm5lYXIgPSBjYW1lcmEubmVhcjtcclxuXHRcdG1hdGVyaWFsLmZhciA9IGNhbWVyYS5mYXI7XHJcblxyXG5cdFx0Ly9yZWR1Y2Ugc2hhZGVyIHNvdXJjZSB1cGRhdGVzIGJ5IHNldHRpbmcgbWF4TGV2ZWwgc2xpZ2h0bHkgaGlnaGVyIHRoYW4gYWN0dWFsbHkgbmVjZXNzYXJ5XHJcblx0XHRpZih0aGlzLm1heExldmVsID4gbWF0ZXJpYWwubGV2ZWxzKVxyXG5cdFx0e1xyXG5cdFx0XHRtYXRlcmlhbC5sZXZlbHMgPSB0aGlzLm1heExldmVsICsgMjtcclxuXHRcdH1cclxuXHJcblx0XHQvL21hdGVyaWFsLnVuaWZvcm1zLm9jdHJlZVNpemUudmFsdWUgPSB0aGlzLmJvdW5kaW5nQm94LnNpemUoKS54O1xyXG5cdFx0dmFyIGJiU2l6ZSA9IHRoaXMuYm91bmRpbmdCb3guZ2V0U2l6ZShuZXcgVEhSRUUuVmVjdG9yMygpKTtcclxuXHRcdG1hdGVyaWFsLmJiU2l6ZSA9IFtiYlNpemUueCwgYmJTaXplLnksIGJiU2l6ZS56XTtcclxuXHR9XHJcblxyXG5cdHVwZGF0ZVZpc2libGVCb3VuZHMoKVxyXG5cdHtcclxuXHJcblx0fVxyXG5cclxuXHRoaWRlRGVzY2VuZGFudHMob2JqZWN0KVxyXG5cdHtcclxuXHRcdHZhciBzdGFjayA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG9iamVjdC5jaGlsZHJlbi5sZW5ndGg7IGkrKylcclxuXHRcdHtcclxuXHRcdFx0dmFyIGNoaWxkID0gb2JqZWN0LmNoaWxkcmVuW2ldO1xyXG5cdFx0XHRpZihjaGlsZC52aXNpYmxlKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0c3RhY2sucHVzaChjaGlsZCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR3aGlsZShzdGFjay5sZW5ndGggPiAwKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgY2hpbGQgPSBzdGFjay5zaGlmdCgpO1xyXG5cclxuXHRcdFx0Y2hpbGQudmlzaWJsZSA9IGZhbHNlO1xyXG5cdFx0XHRpZihjaGlsZC5ib3VuZGluZ0JveE5vZGUpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRjaGlsZC5ib3VuZGluZ0JveE5vZGUudmlzaWJsZSA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgY2hpbGQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspXHJcblx0XHRcdHtcclxuXHRcdFx0XHR2YXIgY2hpbGRPZkNoaWxkID0gY2hpbGQuY2hpbGRyZW5baV07XHJcblx0XHRcdFx0aWYoY2hpbGRPZkNoaWxkLnZpc2libGUpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0c3RhY2sucHVzaChjaGlsZE9mQ2hpbGQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0dXBkYXRlTWF0cml4V29ybGQoZm9yY2UpXHJcblx0e1xyXG5cdFx0Ly9ub2RlLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXMoIG5vZGUucGFyZW50Lm1hdHJpeFdvcmxkLCBub2RlLm1hdHJpeCApO1xyXG5cclxuXHRcdGlmKHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSkgdGhpcy51cGRhdGVNYXRyaXgoKTtcclxuXHJcblx0XHRpZih0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPT09IHRydWUgfHwgZm9yY2UgPT09IHRydWUpXHJcblx0XHR7XHJcblx0XHRcdGlmKHRoaXMucGFyZW50ID09PSB1bmRlZmluZWQpXHJcblx0XHRcdHtcclxuXHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkodGhpcy5tYXRyaXgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHRoaXMubWF0cml4V29ybGQubXVsdGlwbHlNYXRyaWNlcyh0aGlzLnBhcmVudC5tYXRyaXhXb3JsZCwgdGhpcy5tYXRyaXgpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0XHRcdGZvcmNlID0gdHJ1ZTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdG5vZGVzT25SYXkobm9kZXMsIHJheSlcclxuXHR7XHJcblx0XHR2YXIgbm9kZXNPblJheSA9IFtdO1xyXG5cclxuXHRcdHZhciBfcmF5ID0gcmF5LmNsb25lKCk7XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspXHJcblx0XHR7XHJcblx0XHRcdHZhciBub2RlID0gbm9kZXNbaV07XHJcblx0XHRcdHZhciBzcGhlcmUgPSBub2RlLmdldEJvdW5kaW5nU3BoZXJlKG5ldyBUSFJFRS5TcGhlcmUoKSkuY2xvbmUoKS5hcHBseU1hdHJpeDQobm9kZS5zY2VuZU5vZGUubWF0cml4V29ybGQpO1xyXG5cdFx0XHQvL1RPRE8gVW51c2VkOiB2YXIgYm94ID0gbm9kZS5nZXRCb3VuZGluZ0JveCgpLmNsb25lKCkuYXBwbHlNYXRyaXg0KG5vZGUuc2NlbmVOb2RlLm1hdHJpeFdvcmxkKTtcclxuXHJcblx0XHRcdGlmKF9yYXkuaW50ZXJzZWN0c1NwaGVyZShzcGhlcmUpKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0bm9kZXNPblJheS5wdXNoKG5vZGUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vaWYoX3JheS5pc0ludGVyc2VjdGlvbkJveChib3gpKXtcclxuXHRcdFx0Ly9cdG5vZGVzT25SYXkucHVzaChub2RlKTtcclxuXHRcdFx0Ly99XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG5vZGVzT25SYXk7XHJcblx0fVxyXG5cclxuXHRwaWNrKHZpZXdlciwgY2FtZXJhLCByYXksIHBhcmFtcyA9IHt9KVxyXG5cdHtcclxuXHJcblx0XHR2YXIgcmVuZGVyZXIgPSB2aWV3ZXIucmVuZGVyZXI7XHJcblx0XHR2YXIgcFJlbmRlcmVyID0gdmlld2VyLnBSZW5kZXJlcjtcclxuXHJcblx0XHRwZXJmb3JtYW5jZS5tYXJrKFwicGljay1zdGFydFwiKTtcclxuXHJcblx0XHR2YXIgZ2V0VmFsID0gKGEsIGIpID0+IGEgIT09IHVuZGVmaW5lZCA/IGEgOiBiO1xyXG5cclxuXHRcdHZhciBwaWNrV2luZG93U2l6ZSA9IGdldFZhbChwYXJhbXMucGlja1dpbmRvd1NpemUsIDE3KTtcclxuXHRcdHZhciBwaWNrT3V0c2lkZUNsaXBSZWdpb24gPSBnZXRWYWwocGFyYW1zLnBpY2tPdXRzaWRlQ2xpcFJlZ2lvbiwgZmFsc2UpO1xyXG5cclxuXHRcdHZhciBzaXplID0gcmVuZGVyZXIuZ2V0U2l6ZShuZXcgVEhSRUUuVmVjdG9yMygpKTtcclxuXHJcblx0XHR2YXIgd2lkdGggPSBNYXRoLmNlaWwoZ2V0VmFsKHBhcmFtcy53aWR0aCwgc2l6ZS53aWR0aCkpO1xyXG5cdFx0dmFyIGhlaWdodCA9IE1hdGguY2VpbChnZXRWYWwocGFyYW1zLmhlaWdodCwgc2l6ZS5oZWlnaHQpKTtcclxuXHJcblx0XHR2YXIgcG9pbnRTaXplVHlwZSA9IGdldFZhbChwYXJhbXMucG9pbnRTaXplVHlwZSwgdGhpcy5tYXRlcmlhbC5wb2ludFNpemVUeXBlKTtcclxuXHRcdHZhciBwb2ludFNpemUgPSBnZXRWYWwocGFyYW1zLnBvaW50U2l6ZSwgdGhpcy5tYXRlcmlhbC5zaXplKTtcclxuXHJcblx0XHR2YXIgbm9kZXMgPSB0aGlzLm5vZGVzT25SYXkodGhpcy52aXNpYmxlTm9kZXMsIHJheSk7XHJcblxyXG5cdFx0aWYobm9kZXMubGVuZ3RoID09PSAwKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRpZighdGhpcy5waWNrU3RhdGUpXHJcblx0XHR7XHJcblx0XHRcdHZhciBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xyXG5cclxuXHRcdFx0dmFyIG1hdGVyaWFsID0gbmV3IFBvaW50Q2xvdWRNYXRlcmlhbCgpO1xyXG5cdFx0XHRtYXRlcmlhbC5wb2ludENvbG9yVHlwZSA9IFBvaW50Q29sb3JUeXBlLlBPSU5UX0lOREVYO1xyXG5cclxuXHRcdFx0dmFyIHJlbmRlclRhcmdldCA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlclRhcmdldChcclxuXHRcdFx0XHQxLCAxLFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdG1pbkZpbHRlcjogVEhSRUUuTGluZWFyRmlsdGVyLFxyXG5cdFx0XHRcdFx0bWFnRmlsdGVyOiBUSFJFRS5OZWFyZXN0RmlsdGVyLFxyXG5cdFx0XHRcdFx0Zm9ybWF0OiBUSFJFRS5SR0JBRm9ybWF0XHJcblx0XHRcdFx0fVxyXG5cdFx0XHQpO1xyXG5cclxuXHRcdFx0dGhpcy5waWNrU3RhdGUgPSB7XHJcblx0XHRcdFx0cmVuZGVyVGFyZ2V0OiByZW5kZXJUYXJnZXQsXHJcblx0XHRcdFx0bWF0ZXJpYWw6IG1hdGVyaWFsLFxyXG5cdFx0XHRcdHNjZW5lOiBzY2VuZVxyXG5cdFx0XHR9O1xyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgcGlja1N0YXRlID0gdGhpcy5waWNrU3RhdGU7XHJcblx0XHR2YXIgcGlja01hdGVyaWFsID0gcGlja1N0YXRlLm1hdGVyaWFsO1xyXG5cdFx0cGlja01hdGVyaWFsLnBvaW50U2l6ZVR5cGUgPSBwb2ludFNpemVUeXBlO1xyXG5cdFx0cGlja01hdGVyaWFsLnNoYXBlID0gdGhpcy5tYXRlcmlhbC5zaGFwZTtcclxuXHJcblx0XHRwaWNrTWF0ZXJpYWwuc2l6ZSA9IHBvaW50U2l6ZTtcclxuXHRcdHBpY2tNYXRlcmlhbC51bmlmb3Jtcy5taW5TaXplLnZhbHVlID0gdGhpcy5tYXRlcmlhbC51bmlmb3Jtcy5taW5TaXplLnZhbHVlO1xyXG5cdFx0cGlja01hdGVyaWFsLnVuaWZvcm1zLm1heFNpemUudmFsdWUgPSB0aGlzLm1hdGVyaWFsLnVuaWZvcm1zLm1heFNpemUudmFsdWU7XHJcblx0XHRwaWNrTWF0ZXJpYWwuY2xhc3NpZmljYXRpb24gPSB0aGlzLm1hdGVyaWFsLmNsYXNzaWZpY2F0aW9uO1xyXG5cdFx0aWYocGFyYW1zLnBpY2tDbGlwcGVkKVxyXG5cdFx0e1xyXG5cdFx0XHRwaWNrTWF0ZXJpYWwuY2xpcEJveGVzID0gdGhpcy5tYXRlcmlhbC5jbGlwQm94ZXM7XHJcblx0XHRcdGlmKHRoaXMubWF0ZXJpYWwuY2xpcFRhc2sgPT09IENsaXBUYXNrLkhJR0hMSUdIVClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHBpY2tNYXRlcmlhbC5jbGlwVGFzayA9IENsaXBUYXNrLk5PTkU7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cGlja01hdGVyaWFsLmNsaXBUYXNrID0gdGhpcy5tYXRlcmlhbC5jbGlwVGFzaztcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHRwaWNrTWF0ZXJpYWwuY2xpcEJveGVzID0gW107XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy51cGRhdGVNYXRlcmlhbChwaWNrTWF0ZXJpYWwsIG5vZGVzLCBjYW1lcmEsIHJlbmRlcmVyKTtcclxuXHJcblx0XHRwaWNrU3RhdGUucmVuZGVyVGFyZ2V0LnNldFNpemUod2lkdGgsIGhlaWdodCk7XHJcblxyXG5cdFx0dmFyIHBpeGVsUG9zID0gbmV3IFRIUkVFLlZlY3RvcjIocGFyYW1zLngsIHBhcmFtcy55KTtcclxuXHJcblx0XHR2YXIgZ2wgPSByZW5kZXJlci5nZXRDb250ZXh0KCk7XHJcblx0XHRnbC5lbmFibGUoZ2wuU0NJU1NPUl9URVNUKTtcclxuXHRcdGdsLnNjaXNzb3IocGFyc2VJbnQocGl4ZWxQb3MueCAtIChwaWNrV2luZG93U2l6ZSAtIDEpIC8gMiksIHBhcnNlSW50KHBpeGVsUG9zLnkgLSAocGlja1dpbmRvd1NpemUgLSAxKSAvIDIpLCBwYXJzZUludChwaWNrV2luZG93U2l6ZSksIHBhcnNlSW50KHBpY2tXaW5kb3dTaXplKSk7XHJcblxyXG5cdFx0cmVuZGVyZXIuc3RhdGUuYnVmZmVycy5kZXB0aC5zZXRUZXN0KHBpY2tNYXRlcmlhbC5kZXB0aFRlc3QpO1xyXG5cdFx0cmVuZGVyZXIuc3RhdGUuYnVmZmVycy5kZXB0aC5zZXRNYXNrKHBpY2tNYXRlcmlhbC5kZXB0aFdyaXRlKTtcclxuXHRcdHJlbmRlcmVyLnN0YXRlLnNldEJsZW5kaW5nKFRIUkVFLk5vQmxlbmRpbmcpO1xyXG5cclxuXHRcdHJlbmRlcmVyLmNsZWFyVGFyZ2V0KHBpY2tTdGF0ZS5yZW5kZXJUYXJnZXQsIHRydWUsIHRydWUsIHRydWUpO1xyXG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KHBpY2tTdGF0ZS5yZW5kZXJUYXJnZXQpO1xyXG5cdFx0XHJcblx0XHRnbC5jbGVhckNvbG9yKDAsIDAsIDAsIDApO1xyXG5cdFx0cmVuZGVyZXIuY2xlYXJUYXJnZXQocGlja1N0YXRlLnJlbmRlclRhcmdldCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XHJcblxyXG5cdFx0dmFyIHRtcCA9IHRoaXMubWF0ZXJpYWw7XHJcblx0XHR0aGlzLm1hdGVyaWFsID0gcGlja01hdGVyaWFsO1xyXG5cclxuXHRcdHBSZW5kZXJlci5yZW5kZXJPY3RyZWUodGhpcywgbm9kZXMsIGNhbWVyYSwgcGlja1N0YXRlLnJlbmRlclRhcmdldCk7XHJcblxyXG5cdFx0dGhpcy5tYXRlcmlhbCA9IHRtcDtcclxuXHJcblx0XHR2YXIgY2xhbXAgPSAobnVtYmVyLCBtaW4sIG1heCkgPT4gTWF0aC5taW4oTWF0aC5tYXgobWluLCBudW1iZXIpLCBtYXgpO1xyXG5cclxuXHRcdHZhciB4ID0gcGFyc2VJbnQoY2xhbXAocGl4ZWxQb3MueCAtIChwaWNrV2luZG93U2l6ZSAtIDEpIC8gMiwgMCwgd2lkdGgpKTtcclxuXHRcdHZhciB5ID0gcGFyc2VJbnQoY2xhbXAocGl4ZWxQb3MueSAtIChwaWNrV2luZG93U2l6ZSAtIDEpIC8gMiwgMCwgaGVpZ2h0KSk7XHJcblx0XHR2YXIgdyA9IHBhcnNlSW50KE1hdGgubWluKHggKyBwaWNrV2luZG93U2l6ZSwgd2lkdGgpIC0geCk7XHJcblx0XHR2YXIgaCA9IHBhcnNlSW50KE1hdGgubWluKHkgKyBwaWNrV2luZG93U2l6ZSwgaGVpZ2h0KSAtIHkpO1xyXG5cclxuXHRcdHZhciBwaXhlbENvdW50ID0gdyAqIGg7XHJcblx0XHR2YXIgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoNCAqIHBpeGVsQ291bnQpO1xyXG5cclxuXHRcdGdsLnJlYWRQaXhlbHMoeCwgeSwgcGlja1dpbmRvd1NpemUsIHBpY2tXaW5kb3dTaXplLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBidWZmZXIpO1xyXG5cclxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldChudWxsKTtcclxuXHRcdHJlbmRlcmVyLnJlc2V0R0xTdGF0ZSgpO1xyXG5cdFx0cmVuZGVyZXIuc2V0U2Npc3NvclRlc3QoZmFsc2UpO1xyXG5cdFx0Z2wuZGlzYWJsZShnbC5TQ0lTU09SX1RFU1QpO1xyXG5cclxuXHRcdHZhciBwaXhlbHMgPSBidWZmZXI7XHJcblx0XHR2YXIgaWJ1ZmZlciA9IG5ldyBVaW50MzJBcnJheShidWZmZXIuYnVmZmVyKTtcclxuXHJcblx0XHQvL2ZpbmQgY2xvc2VzdCBoaXQgaW5zaWRlIHBpeGVsV2luZG93IGJvdW5kYXJpZXNcclxuXHRcdHZhciBtaW4gPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG5cdFx0dmFyIGhpdHMgPSBbXTtcclxuXHRcdGZvcih2YXIgdSA9IDA7IHUgPCBwaWNrV2luZG93U2l6ZTsgdSsrKVxyXG5cdFx0e1xyXG5cdFx0XHRmb3IodmFyIHYgPSAwOyB2IDwgcGlja1dpbmRvd1NpemU7IHYrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZhciBvZmZzZXQgPSAodSArIHYgKiBwaWNrV2luZG93U2l6ZSk7XHJcblx0XHRcdFx0dmFyIGRpc3RhbmNlID0gTWF0aC5wb3codSAtIChwaWNrV2luZG93U2l6ZSAtIDEpIC8gMiwgMikgKyBNYXRoLnBvdyh2IC0gKHBpY2tXaW5kb3dTaXplIC0gMSkgLyAyLCAyKTtcclxuXHJcblx0XHRcdFx0dmFyIHBjSW5kZXggPSBwaXhlbHNbNCAqIG9mZnNldCArIDNdO1xyXG5cdFx0XHRcdHBpeGVsc1s0ICogb2Zmc2V0ICsgM10gPSAwO1xyXG5cdFx0XHRcdHZhciBwSW5kZXggPSBpYnVmZmVyW29mZnNldF07XHJcblxyXG5cdFx0XHRcdGlmKCEocGNJbmRleCA9PT0gMCAmJiBwSW5kZXggPT09IDApICYmIChwY0luZGV4ICE9PSB1bmRlZmluZWQpICYmIChwSW5kZXggIT09IHVuZGVmaW5lZCkpXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIGhpdCA9IHtcclxuXHRcdFx0XHRcdFx0cEluZGV4OiBwSW5kZXgsXHJcblx0XHRcdFx0XHRcdHBjSW5kZXg6IHBjSW5kZXgsXHJcblx0XHRcdFx0XHRcdGRpc3RhbmNlVG9DZW50ZXI6IGRpc3RhbmNlXHJcblx0XHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRcdGlmKHBhcmFtcy5hbGwpXHJcblx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdGhpdHMucHVzaChoaXQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRpZihoaXRzLmxlbmd0aCA+IDApXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRpZihkaXN0YW5jZSA8IGhpdHNbMF0uZGlzdGFuY2VUb0NlbnRlcilcclxuXHRcdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0XHRoaXRzWzBdID0gaGl0O1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRlbHNlXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRoaXRzLnB1c2goaGl0KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRmb3IodmFyIGhpdCBvZiBoaXRzKVxyXG5cdFx0e1xyXG5cdFx0XHR2YXIgcG9pbnQgPSB7fTtcclxuXHJcblx0XHRcdGlmKCFub2Rlc1toaXQucGNJbmRleF0pXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dmFyIG5vZGUgPSBub2Rlc1toaXQucGNJbmRleF07XHJcblx0XHRcdHZhciBwYyA9IG5vZGUuc2NlbmVOb2RlO1xyXG5cdFx0XHR2YXIgZ2VvbWV0cnkgPSBub2RlLmdlb21ldHJ5Tm9kZS5nZW9tZXRyeTtcclxuXHJcblx0XHRcdGZvcih2YXIgYXR0cmlidXRlTmFtZSBpbiBnZW9tZXRyeS5hdHRyaWJ1dGVzKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIGF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV07XHJcblxyXG5cdFx0XHRcdGlmKGF0dHJpYnV0ZU5hbWUgPT09IFwicG9zaXRpb25cIilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR2YXIgeCA9IGF0dHJpYnV0ZS5hcnJheVszICogaGl0LnBJbmRleCArIDBdO1xyXG5cdFx0XHRcdFx0dmFyIHkgPSBhdHRyaWJ1dGUuYXJyYXlbMyAqIGhpdC5wSW5kZXggKyAxXTtcclxuXHRcdFx0XHRcdHZhciB6ID0gYXR0cmlidXRlLmFycmF5WzMgKiBoaXQucEluZGV4ICsgMl07XHJcblxyXG5cdFx0XHRcdFx0dmFyIHBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoeCwgeSwgeik7XHJcblx0XHRcdFx0XHRwb3NpdGlvbi5hcHBseU1hdHJpeDQocGMubWF0cml4V29ybGQpO1xyXG5cclxuXHRcdFx0XHRcdHBvaW50W2F0dHJpYnV0ZU5hbWVdID0gcG9zaXRpb247XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aGl0LnBvaW50ID0gcG9pbnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0cGVyZm9ybWFuY2UubWFyayhcInBpY2stZW5kXCIpO1xyXG5cdFx0cGVyZm9ybWFuY2UubWVhc3VyZShcInBpY2tcIiwgXCJwaWNrLXN0YXJ0XCIsIFwicGljay1lbmRcIik7XHJcblxyXG5cdFx0aWYocGFyYW1zLmFsbClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIGhpdHMubWFwKGhpdCA9PiBoaXQucG9pbnQpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZVxyXG5cdFx0e1xyXG5cdFx0XHRpZihoaXRzLmxlbmd0aCA9PT0gMClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldHVybiBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2VcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHJldHVybiBoaXRzWzBdLnBvaW50O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRjb21wdXRlVmlzaWJpbGl0eVRleHR1cmVEYXRhKG5vZGVzKVxyXG5cdHtcclxuXHRcdGlmKEdsb2JhbC5tZWFzdXJlVGltaW5ncylcclxuXHRcdHtcclxuXHRcdFx0cGVyZm9ybWFuY2UubWFyayhcImNvbXB1dGVWaXNpYmlsaXR5VGV4dHVyZURhdGEtc3RhcnRcIik7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGRhdGEgPSBuZXcgVWludDhBcnJheShub2Rlcy5sZW5ndGggKiAzKTtcclxuXHRcdHZhciB2aXNpYmxlTm9kZVRleHR1cmVPZmZzZXRzID0gbmV3IE1hcCgpO1xyXG5cclxuXHRcdC8vY29weSBhcnJheVxyXG5cdFx0bm9kZXMgPSBub2Rlcy5zbGljZSgpO1xyXG5cclxuXHRcdC8vc29ydCBieSBsZXZlbCBhbmQgbnVtYmVyXHJcblx0XHR2YXIgc29ydCA9IGZ1bmN0aW9uKGEsIGIpXHJcblx0XHR7XHJcblx0XHRcdHZhciBsYSA9IGEuZ2VvbWV0cnlOb2RlLmxldmVsO1xyXG5cdFx0XHR2YXIgbGIgPSBiLmdlb21ldHJ5Tm9kZS5sZXZlbDtcclxuXHRcdFx0dmFyIG5hID0gYS5nZW9tZXRyeU5vZGUubnVtYmVyO1xyXG5cdFx0XHR2YXIgbmIgPSBiLmdlb21ldHJ5Tm9kZS5udW1iZXI7XHJcblx0XHRcdGlmKGxhICE9PSBsYikgcmV0dXJuIGxhIC0gbGI7XHJcblx0XHRcdGlmKG5hIDwgbmIpIHJldHVybiAtMTtcclxuXHRcdFx0aWYobmEgPiBuYikgcmV0dXJuIDE7XHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fTtcclxuXHRcdG5vZGVzLnNvcnQoc29ydCk7XHJcblxyXG5cdFx0dmFyIHZpc2libGVOb2RlTmFtZXMgPSBbXTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKylcclxuXHRcdHtcclxuXHRcdFx0dmlzaWJsZU5vZGVOYW1lcy5wdXNoKG5vZGVzW2ldLmdlb21ldHJ5Tm9kZS5udW1iZXIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKylcclxuXHRcdHtcclxuXHRcdFx0dmFyIG5vZGUgPSBub2Rlc1tpXTtcclxuXHJcblx0XHRcdHZpc2libGVOb2RlVGV4dHVyZU9mZnNldHMuc2V0KG5vZGUsIGkpO1xyXG5cclxuXHRcdFx0dmFyIGIxID0gMDsgLy9jaGlsZHJlblxyXG5cdFx0XHR2YXIgYjIgPSAwOyAvL29mZnNldCB0byBmaXJzdCBjaGlsZFxyXG5cdFx0XHR2YXIgYjMgPSAwOyAvL3NwbGl0XHJcblxyXG5cdFx0XHRpZihub2RlLmdlb21ldHJ5Tm9kZS5sZWZ0ICYmIHZpc2libGVOb2RlTmFtZXMuaW5kZXhPZihub2RlLmdlb21ldHJ5Tm9kZS5sZWZ0Lm51bWJlcikgPiAwKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0YjEgKz0gMTtcclxuXHRcdFx0XHRiMiA9IHZpc2libGVOb2RlTmFtZXMuaW5kZXhPZihub2RlLmdlb21ldHJ5Tm9kZS5sZWZ0Lm51bWJlcikgLSBpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKG5vZGUuZ2VvbWV0cnlOb2RlLnJpZ2h0ICYmIHZpc2libGVOb2RlTmFtZXMuaW5kZXhPZihub2RlLmdlb21ldHJ5Tm9kZS5yaWdodC5udW1iZXIpID4gMClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGIxICs9IDI7XHJcblx0XHRcdFx0YjIgPSAoYjIgPT09IDApID8gdmlzaWJsZU5vZGVOYW1lcy5pbmRleE9mKG5vZGUuZ2VvbWV0cnlOb2RlLnJpZ2h0Lm51bWJlcikgLSBpIDogYjI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmKG5vZGUuZ2VvbWV0cnlOb2RlLnNwbGl0ID09PSBcIlhcIilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGIzID0gMTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKG5vZGUuZ2VvbWV0cnlOb2RlLnNwbGl0ID09PSBcIllcIilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGIzID0gMjtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKG5vZGUuZ2VvbWV0cnlOb2RlLnNwbGl0ID09PSBcIlpcIilcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGIzID0gNDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZGF0YVtpICogMyArIDBdID0gYjE7XHJcblx0XHRcdGRhdGFbaSAqIDMgKyAxXSA9IGIyO1xyXG5cdFx0XHRkYXRhW2kgKiAzICsgMl0gPSBiMztcclxuXHRcdH1cclxuXHJcblx0XHRpZihHbG9iYWwubWVhc3VyZVRpbWluZ3MpXHJcblx0XHR7XHJcblx0XHRcdHBlcmZvcm1hbmNlLm1hcmsoXCJjb21wdXRlVmlzaWJpbGl0eVRleHR1cmVEYXRhLWVuZFwiKTtcclxuXHRcdFx0cGVyZm9ybWFuY2UubWVhc3VyZShcInJlbmRlci5jb21wdXRlVmlzaWJpbGl0eVRleHR1cmVEYXRhXCIsIFwiY29tcHV0ZVZpc2liaWxpdHlUZXh0dXJlRGF0YS1zdGFydFwiLCBcImNvbXB1dGVWaXNpYmlsaXR5VGV4dHVyZURhdGEtZW5kXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGRhdGE6IGRhdGEsXHJcblx0XHRcdG9mZnNldHM6IHZpc2libGVOb2RlVGV4dHVyZU9mZnNldHNcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHRnZXQgcHJvZ3Jlc3MoKVxyXG5cdHtcclxuXHRcdGlmKHRoaXMucGNvR2VvbWV0cnkucm9vdClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmcgPiAwID8gMCA6IDE7XHJcblx0XHR9XHJcblx0XHRlbHNlXHJcblx0XHR7XHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbmV4cG9ydCB7UG9pbnRDbG91ZEFyZW5hNEQsIFBvaW50Q2xvdWRBcmVuYTRETm9kZX07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxuaW1wb3J0IHtQb2ludEF0dHJpYnV0ZXMsIFBvaW50QXR0cmlidXRlfSBmcm9tIFwiLi4vLi4vUG9pbnRBdHRyaWJ1dGVzLmpzXCI7XHJcbmltcG9ydCB7R2xvYmFsfSBmcm9tIFwiLi4vLi4vR2xvYmFsLmpzXCI7XHJcbmltcG9ydCB7WEhSRmFjdG9yeX0gZnJvbSBcIi4uLy4uL1hIUkZhY3RvcnkuanNcIjtcclxuXHJcbmNsYXNzIFBvaW50Q2xvdWRBcmVuYTRER2VvbWV0cnlOb2RlXHJcbntcclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdFx0dGhpcy5sZWZ0ID0gbnVsbDtcclxuXHRcdHRoaXMucmlnaHQgPSBudWxsO1xyXG5cdFx0dGhpcy5ib3VuZGluZ0JveCA9IG51bGw7XHJcblx0XHR0aGlzLm51bWJlciA9IG51bGw7XHJcblx0XHR0aGlzLnBjb0dlb21ldHJ5ID0gbnVsbDtcclxuXHRcdHRoaXMubG9hZGVkID0gZmFsc2U7XHJcblx0XHR0aGlzLm51bVBvaW50cyA9IDA7XHJcblx0XHR0aGlzLmxldmVsID0gMDtcclxuXHRcdHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuXHRcdHRoaXMub25lVGltZURpc3Bvc2VIYW5kbGVycyA9IFtdO1xyXG5cdH1cclxuXHJcblx0aXNHZW9tZXRyeU5vZGUoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHJcblx0aXNUcmVlTm9kZSgpXHJcblx0e1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHJcblx0aXNMb2FkZWQoKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLmxvYWRlZDtcclxuXHR9XHJcblxyXG5cdGdldEJvdW5kaW5nU3BoZXJlKClcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5ib3VuZGluZ1NwaGVyZTtcclxuXHR9XHJcblxyXG5cdGdldEJvdW5kaW5nQm94KClcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5ib3VuZGluZ0JveDtcclxuXHR9XHJcblxyXG5cdGdldENoaWxkcmVuKClcclxuXHR7XHJcblx0XHR2YXIgY2hpbGRyZW4gPSBbXTtcclxuXHJcblx0XHRpZih0aGlzLmxlZnQpXHJcblx0XHR7XHJcblx0XHRcdGNoaWxkcmVuLnB1c2godGhpcy5sZWZ0KTtcclxuXHRcdH1cclxuXHJcblx0XHRpZih0aGlzLnJpZ2h0KVxyXG5cdFx0e1xyXG5cdFx0XHRjaGlsZHJlbi5wdXNoKHRoaXMucmlnaHQpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBjaGlsZHJlbjtcclxuXHR9XHJcblxyXG5cdGdldExldmVsKClcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5sZXZlbDtcclxuXHR9XHJcblxyXG5cdGxvYWQoKVxyXG5cdHtcclxuXHRcdGlmKHRoaXMubG9hZGVkIHx8IHRoaXMubG9hZGluZylcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmKEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmcgPj0gR2xvYmFsLm1heE5vZGVzTG9hZGluZylcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMubG9hZGluZyA9IHRydWU7XHJcblxyXG5cdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZysrO1xyXG5cclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdHZhciB1cmwgPSB0aGlzLnBjb0dlb21ldHJ5LnVybCArIFwiP25vZGU9XCIgKyB0aGlzLm51bWJlcjtcclxuXHRcdFxyXG5cdFx0dmFyIHhociA9IFhIUkZhY3RvcnkuY3JlYXRlWE1MSHR0cFJlcXVlc3QoKTtcclxuXHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpblwiKTtcclxuXHRcdHhoci5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XHJcblx0XHR4aHIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xyXG5cdFx0eGhyLm9ubG9hZCA9IGZ1bmN0aW9uKClcclxuXHRcdHtcclxuXHRcdFx0dHJ5XHJcblx0XHRcdHtcclxuXHRcdFx0XHR2YXIgYnVmZmVyID0geGhyLnJlc3BvbnNlO1xyXG5cdFx0XHRcdHZhciBzb3VyY2VWaWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XHJcblx0XHRcdFx0dmFyIG51bVBvaW50cyA9IGJ1ZmZlci5ieXRlTGVuZ3RoIC8gMTc7XHJcblx0XHRcdFx0dmFyIGJ5dGVzUGVyUG9pbnQgPSAyODtcclxuXHJcblx0XHRcdFx0dmFyIGRhdGEgPSBuZXcgQXJyYXlCdWZmZXIobnVtUG9pbnRzICogYnl0ZXNQZXJQb2ludCk7XHJcblx0XHRcdFx0dmFyIHRhcmdldFZpZXcgPSBuZXcgRGF0YVZpZXcoZGF0YSk7XHJcblxyXG5cdFx0XHRcdHZhciBhdHRyaWJ1dGVzID0gW1xyXG5cdFx0XHRcdFx0UG9pbnRBdHRyaWJ1dGUuUE9TSVRJT05fQ0FSVEVTSUFOLFxyXG5cdFx0XHRcdFx0UG9pbnRBdHRyaWJ1dGUuUkdCQV9QQUNLRUQsXHJcblx0XHRcdFx0XHRQb2ludEF0dHJpYnV0ZS5JTlRFTlNJVFksXHJcblx0XHRcdFx0XHRQb2ludEF0dHJpYnV0ZS5DTEFTU0lGSUNBVElPTixcclxuXHRcdFx0XHRdO1xyXG5cclxuXHRcdFx0XHR2YXIgcG9zaXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KG51bVBvaW50cyAqIDMpO1xyXG5cdFx0XHRcdHZhciBjb2xvciA9IG5ldyBVaW50OEFycmF5KG51bVBvaW50cyAqIDQpO1xyXG5cdFx0XHRcdHZhciBpbnRlbnNpdGllcyA9IG5ldyBGbG9hdDMyQXJyYXkobnVtUG9pbnRzKTtcclxuXHRcdFx0XHR2YXIgY2xhc3NpZmljYXRpb25zID0gbmV3IFVpbnQ4QXJyYXkobnVtUG9pbnRzKTtcclxuXHRcdFx0XHR2YXIgaW5kaWNlcyA9IG5ldyBBcnJheUJ1ZmZlcihudW1Qb2ludHMgKiA0KTtcclxuXHRcdFx0XHR2YXIgdTMySW5kaWNlcyA9IG5ldyBVaW50MzJBcnJheShpbmRpY2VzKTtcclxuXHJcblx0XHRcdFx0dmFyIHRpZ2h0Qm91bmRpbmdCb3ggPSBuZXcgVEhSRUUuQm94MygpO1xyXG5cclxuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbnVtUG9pbnRzOyBpKyspXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIHggPSBzb3VyY2VWaWV3LmdldEZsb2F0MzIoaSAqIDE3ICsgMCwgdHJ1ZSkgKyBzZWxmLmJvdW5kaW5nQm94Lm1pbi54O1xyXG5cdFx0XHRcdFx0dmFyIHkgPSBzb3VyY2VWaWV3LmdldEZsb2F0MzIoaSAqIDE3ICsgNCwgdHJ1ZSkgKyBzZWxmLmJvdW5kaW5nQm94Lm1pbi55O1xyXG5cdFx0XHRcdFx0dmFyIHogPSBzb3VyY2VWaWV3LmdldEZsb2F0MzIoaSAqIDE3ICsgOCwgdHJ1ZSkgKyBzZWxmLmJvdW5kaW5nQm94Lm1pbi56O1xyXG5cclxuXHRcdFx0XHRcdHZhciByID0gc291cmNlVmlldy5nZXRVaW50OChpICogMTcgKyAxMiwgdHJ1ZSk7XHJcblx0XHRcdFx0XHR2YXIgZyA9IHNvdXJjZVZpZXcuZ2V0VWludDgoaSAqIDE3ICsgMTMsIHRydWUpO1xyXG5cdFx0XHRcdFx0dmFyIGIgPSBzb3VyY2VWaWV3LmdldFVpbnQ4KGkgKiAxNyArIDE0LCB0cnVlKTtcclxuXHJcblx0XHRcdFx0XHR2YXIgaW50ZW5zaXR5ID0gc291cmNlVmlldy5nZXRVaW50OChpICogMTcgKyAxNSwgdHJ1ZSk7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGNsYXNzaWZpY2F0aW9uID0gc291cmNlVmlldy5nZXRVaW50OChpICogMTcgKyAxNiwgdHJ1ZSk7XHJcblxyXG5cdFx0XHRcdFx0dGlnaHRCb3VuZGluZ0JveC5leHBhbmRCeVBvaW50KG5ldyBUSFJFRS5WZWN0b3IzKHgsIHksIHopKTtcclxuXHJcblx0XHRcdFx0XHRwb3NpdGlvbltpICogMyArIDBdID0geDtcclxuXHRcdFx0XHRcdHBvc2l0aW9uW2kgKiAzICsgMV0gPSB5O1xyXG5cdFx0XHRcdFx0cG9zaXRpb25baSAqIDMgKyAyXSA9IHo7XHJcblxyXG5cdFx0XHRcdFx0Y29sb3JbaSAqIDQgKyAwXSA9IHI7XHJcblx0XHRcdFx0XHRjb2xvcltpICogNCArIDFdID0gZztcclxuXHRcdFx0XHRcdGNvbG9yW2kgKiA0ICsgMl0gPSBiO1xyXG5cdFx0XHRcdFx0Y29sb3JbaSAqIDQgKyAzXSA9IDI1NTtcclxuXHJcblx0XHRcdFx0XHRpbnRlbnNpdGllc1tpXSA9IGludGVuc2l0eTtcclxuXHRcdFx0XHRcdGNsYXNzaWZpY2F0aW9uc1tpXSA9IGNsYXNzaWZpY2F0aW9uO1xyXG5cclxuXHRcdFx0XHRcdHUzMkluZGljZXNbaV0gPSBpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XHJcblx0XHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwicG9zaXRpb25cIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShwb3NpdGlvbiwgMykpO1xyXG5cdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcImNvbG9yXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoY29sb3IsIDQsIHRydWUpKTtcclxuXHRcdFx0XHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJpbnRlbnNpdHlcIiwgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShpbnRlbnNpdGllcywgMSkpO1xyXG5cdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZShcImNsYXNzaWZpY2F0aW9uXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoY2xhc3NpZmljYXRpb25zLCAxKSk7XHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIGJ1ZmZlckF0dHJpYnV0ZSA9IG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IFVpbnQ4QXJyYXkoaW5kaWNlcyksIDQsIHRydWUpO1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKFwiaW5kaWNlc1wiLCBidWZmZXJBdHRyaWJ1dGUpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0c2VsZi5nZW9tZXRyeSA9IGdlb21ldHJ5O1xyXG5cdFx0XHRcdHNlbGYubnVtUG9pbnRzID0gbnVtUG9pbnRzO1xyXG5cdFx0XHRcdHNlbGYubG9hZGVkID0gdHJ1ZTtcclxuXHRcdFx0XHRzZWxmLmxvYWRpbmcgPSBmYWxzZTtcclxuXHRcdFx0XHRHbG9iYWwubnVtTm9kZXNMb2FkaW5nLS07XHJcblx0XHRcdH1cclxuXHRcdFx0Y2F0Y2goZSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoXCJQb3RyZWU6IEV4Y2VwdGlvbiB0aHJvd24gcGFyc2luZyBwb2ludHMuXCIsIGUpO1xyXG5cdFx0XHRcdEdsb2JhbC5udW1Ob2Rlc0xvYWRpbmctLTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH07XHJcblx0XHR4aHIub25lcnJvciA9IGZ1bmN0aW9uKClcclxuXHRcdHtcclxuXHRcdFx0R2xvYmFsLm51bU5vZGVzTG9hZGluZy0tO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhcIlBvdHJlZTogRmFpbGVkIHRvIGxvYWQgZmlsZSwgXCIgKyB4aHIuc3RhdHVzICsgXCIsIGZpbGU6IFwiICsgdXJsKTtcclxuXHRcdH07XHJcblx0XHR4aHIuc2VuZChudWxsKTtcclxuXHR9XHJcblxyXG5cdGRpc3Bvc2UoKVxyXG5cdHtcclxuXHRcdGlmKHRoaXMuZ2VvbWV0cnkgJiYgdGhpcy5wYXJlbnQgIT0gbnVsbClcclxuXHRcdHtcclxuXHRcdFx0dGhpcy5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcblx0XHRcdHRoaXMuZ2VvbWV0cnkgPSBudWxsO1xyXG5cdFx0XHR0aGlzLmxvYWRlZCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0Ly90aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogXCJkaXNwb3NlXCIgfSApO1xyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5vbmVUaW1lRGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaSsrKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0dmFyIGhhbmRsZXIgPSB0aGlzLm9uZVRpbWVEaXNwb3NlSGFuZGxlcnNbaV07XHJcblx0XHRcdFx0aGFuZGxlcigpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMub25lVGltZURpc3Bvc2VIYW5kbGVycyA9IFtdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2V0TnVtUG9pbnRzKClcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5udW1Qb2ludHM7XHJcblx0fVxyXG59O1xyXG5cclxuY2xhc3MgUG9pbnRDbG91ZEFyZW5hNERHZW9tZXRyeSBleHRlbmRzIFRIUkVFLkV2ZW50RGlzcGF0Y2hlclxyXG57XHJcblx0Y29uc3RydWN0b3IoKVxyXG5cdHtcclxuXHRcdHN1cGVyKCk7XHJcblxyXG5cdFx0dGhpcy5udW1Qb2ludHMgPSAwO1xyXG5cdFx0dGhpcy52ZXJzaW9uID0gMDtcclxuXHRcdHRoaXMuYm91bmRpbmdCb3ggPSBudWxsO1xyXG5cdFx0dGhpcy5udW1Ob2RlcyA9IDA7XHJcblx0XHR0aGlzLm5hbWUgPSBudWxsO1xyXG5cdFx0dGhpcy5wcm92aWRlciA9IG51bGw7XHJcblx0XHR0aGlzLnVybCA9IG51bGw7XHJcblx0XHR0aGlzLnJvb3QgPSBudWxsO1xyXG5cdFx0dGhpcy5sZXZlbHMgPSAwO1xyXG5cdFx0dGhpcy5fc3BhY2luZyA9IG51bGw7XHJcblx0XHR0aGlzLnBvaW50QXR0cmlidXRlcyA9IG5ldyBQb2ludEF0dHJpYnV0ZXMoW1xyXG5cdFx0XHRcIlBPU0lUSU9OX0NBUlRFU0lBTlwiLFxyXG5cdFx0XHRcIkNPTE9SX1BBQ0tFRFwiXHJcblx0XHRdKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBsb2FkKHVybCwgY2FsbGJhY2spXHJcblx0e1xyXG5cdFx0dmFyIHhociA9IFhIUkZhY3RvcnkuY3JlYXRlWE1MSHR0cFJlcXVlc3QoKTtcclxuXHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpblwiKTtcclxuXHRcdHhoci5vcGVuKFwiR0VUXCIsIHVybCArIFwiP2luZm9cIiwgdHJ1ZSk7XHJcblxyXG5cdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKClcclxuXHRcdHtcclxuXHRcdFx0dHJ5XHJcblx0XHRcdHtcclxuXHRcdFx0XHRpZih4aHIucmVhZHlTdGF0ZSA9PT0gNCAmJiB4aHIuc3RhdHVzID09PSAyMDApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIHJlc3BvbnNlID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcclxuXHJcblx0XHRcdFx0XHR2YXIgZ2VvbWV0cnkgPSBuZXcgUG9pbnRDbG91ZEFyZW5hNERHZW9tZXRyeSgpO1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkudXJsID0gdXJsO1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkubmFtZSA9IHJlc3BvbnNlLk5hbWU7XHJcblx0XHRcdFx0XHRnZW9tZXRyeS5wcm92aWRlciA9IHJlc3BvbnNlLlByb3ZpZGVyO1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkubnVtTm9kZXMgPSByZXNwb25zZS5Ob2RlcztcclxuXHRcdFx0XHRcdGdlb21ldHJ5Lm51bVBvaW50cyA9IHJlc3BvbnNlLlBvaW50cztcclxuXHRcdFx0XHRcdGdlb21ldHJ5LnZlcnNpb24gPSByZXNwb25zZS5WZXJzaW9uO1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuYm91bmRpbmdCb3ggPSBuZXcgVEhSRUUuQm94MyhcclxuXHRcdFx0XHRcdFx0bmV3IFRIUkVFLlZlY3RvcjMoKS5mcm9tQXJyYXkocmVzcG9uc2UuQm91bmRpbmdCb3guc2xpY2UoMCwgMykpLFxyXG5cdFx0XHRcdFx0XHRuZXcgVEhSRUUuVmVjdG9yMygpLmZyb21BcnJheShyZXNwb25zZS5Cb3VuZGluZ0JveC5zbGljZSgzLCA2KSlcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRpZihyZXNwb25zZS5TcGFjaW5nKVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRnZW9tZXRyeS5zcGFjaW5nID0gcmVzcG9uc2UuU3BhY2luZztcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR2YXIgb2Zmc2V0ID0gZ2VvbWV0cnkuYm91bmRpbmdCb3gubWluLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoLTEpO1xyXG5cclxuXHRcdFx0XHRcdGdlb21ldHJ5LmJvdW5kaW5nQm94Lm1pbi5hZGQob2Zmc2V0KTtcclxuXHRcdFx0XHRcdGdlb21ldHJ5LmJvdW5kaW5nQm94Lm1heC5hZGQob2Zmc2V0KTtcclxuXHRcdFx0XHRcdGdlb21ldHJ5Lm9mZnNldCA9IG9mZnNldDtcclxuXHJcblx0XHRcdFx0XHR2YXIgY2VudGVyID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcclxuXHRcdFx0XHRcdGdlb21ldHJ5LmJvdW5kaW5nQm94LmdldENlbnRlcihjZW50ZXIpO1xyXG5cdFx0XHRcdFx0dmFyIHJhZGl1cyA9IGdlb21ldHJ5LmJvdW5kaW5nQm94LmdldFNpemUobmV3IFRIUkVFLlZlY3RvcjMoKSkubGVuZ3RoKCkgLyAyO1xyXG5cdFx0XHRcdFx0Z2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPSBuZXcgVEhSRUUuU3BoZXJlKGNlbnRlciwgcmFkaXVzKTtcclxuXHJcblx0XHRcdFx0XHRnZW9tZXRyeS5sb2FkSGllcmFyY2h5KCk7XHJcblxyXG5cdFx0XHRcdFx0Y2FsbGJhY2soZ2VvbWV0cnkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmKHhoci5yZWFkeVN0YXRlID09PSA0KVxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdGNhbGxiYWNrKG51bGwpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRjYXRjaChlKVxyXG5cdFx0XHR7XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcihlLm1lc3NhZ2UpO1xyXG5cdFx0XHRcdGNhbGxiYWNrKG51bGwpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHRcdHhoci5zZW5kKG51bGwpO1xyXG5cdH07XHJcblxyXG5cdGxvYWRIaWVyYXJjaHkoKVxyXG5cdHtcclxuXHRcdHZhciB1cmwgPSB0aGlzLnVybCArIFwiP3RyZWVcIjtcclxuXHRcdFxyXG5cdFx0dmFyIHhociA9IFhIUkZhY3RvcnkuY3JlYXRlWE1MSHR0cFJlcXVlc3QoKTtcclxuXHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpblwiKTtcclxuXHRcdHhoci5vcGVuKFwiR0VUXCIsIHVybCwgdHJ1ZSk7XHJcblx0XHR4aHIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xyXG5cclxuXHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PlxyXG5cdFx0e1xyXG5cdFx0XHRpZighKHhoci5yZWFkeVN0YXRlID09PSA0ICYmIHhoci5zdGF0dXMgPT09IDIwMCkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBidWZmZXIgPSB4aHIucmVzcG9uc2U7XHJcblx0XHRcdHZhciBudW1Ob2RlcyA9IGJ1ZmZlci5ieXRlTGVuZ3RoIC8gMztcclxuXHRcdFx0dmFyIHZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmZmVyKTtcclxuXHRcdFx0dmFyIHN0YWNrID0gW107XHJcblx0XHRcdHZhciByb290ID0gbnVsbDtcclxuXHJcblx0XHRcdHZhciBsZXZlbHMgPSAwO1xyXG5cclxuXHRcdFx0Ly9UT0RPIERlYnVnOiB2YXIgc3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHRcdFx0Ly9yZWFkIGhpZXJhcmNoeVxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbnVtTm9kZXM7IGkrKylcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZhciBtYXNrID0gdmlldy5nZXRVaW50OChpICogMyArIDAsIHRydWUpO1xyXG5cclxuXHRcdFx0XHR2YXIgaGFzTGVmdCA9IChtYXNrICYgMSkgPiAwO1xyXG5cdFx0XHRcdHZhciBoYXNSaWdodCA9IChtYXNrICYgMikgPiAwO1xyXG5cdFx0XHRcdHZhciBzcGxpdFggPSAobWFzayAmIDQpID4gMDtcclxuXHRcdFx0XHR2YXIgc3BsaXRZID0gKG1hc2sgJiA4KSA+IDA7XHJcblx0XHRcdFx0dmFyIHNwbGl0WiA9IChtYXNrICYgMTYpID4gMDtcclxuXHRcdFx0XHR2YXIgc3BsaXQgPSBudWxsO1xyXG5cdFx0XHRcdGlmKHNwbGl0WClcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzcGxpdCA9IFwiWFwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGlmKHNwbGl0WSlcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRzcGxpdCA9IFwiWVwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZihzcGxpdFopXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0c3BsaXQgPSBcIlpcIjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHZhciBub2RlID0gbmV3IFBvaW50Q2xvdWRBcmVuYTRER2VvbWV0cnlOb2RlKCk7XHJcblx0XHRcdFx0bm9kZS5oYXNMZWZ0ID0gaGFzTGVmdDtcclxuXHRcdFx0XHRub2RlLmhhc1JpZ2h0ID0gaGFzUmlnaHQ7XHJcblx0XHRcdFx0bm9kZS5zcGxpdCA9IHNwbGl0O1xyXG5cdFx0XHRcdG5vZGUuaXNMZWFmID0gIWhhc0xlZnQgJiYgIWhhc1JpZ2h0O1xyXG5cdFx0XHRcdG5vZGUubnVtYmVyID0gaTtcclxuXHRcdFx0XHRub2RlLmxlZnQgPSBudWxsO1xyXG5cdFx0XHRcdG5vZGUucmlnaHQgPSBudWxsO1xyXG5cdFx0XHRcdG5vZGUucGNvR2VvbWV0cnkgPSB0aGlzO1xyXG5cdFx0XHRcdG5vZGUubGV2ZWwgPSBzdGFjay5sZW5ndGg7XHJcblx0XHRcdFx0bGV2ZWxzID0gTWF0aC5tYXgobGV2ZWxzLCBub2RlLmxldmVsKTtcclxuXHJcblx0XHRcdFx0XHJcblxyXG5cdFx0XHRcdGlmKHN0YWNrLmxlbmd0aCA+IDApXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0dmFyIHBhcmVudCA9IHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdO1xyXG5cdFx0XHRcdFx0bm9kZS5ib3VuZGluZ0JveCA9IHBhcmVudC5ib3VuZGluZ0JveC5jbG9uZSgpO1xyXG5cdFx0XHRcdFx0dmFyIHBhcmVudEJCU2l6ZSA9IHBhcmVudC5ib3VuZGluZ0JveC5nZXRTaXplKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG5cclxuXHRcdFx0XHRcdGlmKHBhcmVudC5oYXNMZWZ0ICYmICFwYXJlbnQubGVmdClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0cGFyZW50LmxlZnQgPSBub2RlO1xyXG5cdFx0XHRcdFx0XHRwYXJlbnQuY2hpbGRyZW4ucHVzaChub2RlKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmKHBhcmVudC5zcGxpdCA9PT0gXCJYXCIpXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRub2RlLmJvdW5kaW5nQm94Lm1heC54ID0gbm9kZS5ib3VuZGluZ0JveC5taW4ueCArIHBhcmVudEJCU2l6ZS54IC8gMjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRlbHNlIGlmKHBhcmVudC5zcGxpdCA9PT0gXCJZXCIpXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRub2RlLmJvdW5kaW5nQm94Lm1heC55ID0gbm9kZS5ib3VuZGluZ0JveC5taW4ueSArIHBhcmVudEJCU2l6ZS55IC8gMjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRlbHNlIGlmKHBhcmVudC5zcGxpdCA9PT0gXCJaXCIpXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRub2RlLmJvdW5kaW5nQm94Lm1heC56ID0gbm9kZS5ib3VuZGluZ0JveC5taW4ueiArIHBhcmVudEJCU2l6ZS56IC8gMjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdHZhciBjZW50ZXIgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xyXG5cdFx0XHRcdFx0XHRub2RlLmJvdW5kaW5nQm94LmdldENlbnRlcihjZW50ZXIpO1xyXG5cdFx0XHRcdFx0XHR2YXIgcmFkaXVzID0gbm9kZS5ib3VuZGluZ0JveC5nZXRTaXplKG5ldyBUSFJFRS5WZWN0b3IzKCkpLmxlbmd0aCgpIC8gMjtcclxuXHRcdFx0XHRcdFx0bm9kZS5ib3VuZGluZ1NwaGVyZSA9IG5ldyBUSFJFRS5TcGhlcmUoY2VudGVyLCByYWRpdXMpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRwYXJlbnQucmlnaHQgPSBub2RlO1xyXG5cdFx0XHRcdFx0XHRwYXJlbnQuY2hpbGRyZW4ucHVzaChub2RlKTtcclxuXHJcblx0XHRcdFx0XHRcdGlmKHBhcmVudC5zcGxpdCA9PT0gXCJYXCIpXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRub2RlLmJvdW5kaW5nQm94Lm1pbi54ID0gbm9kZS5ib3VuZGluZ0JveC5taW4ueCArIHBhcmVudEJCU2l6ZS54IC8gMjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRlbHNlIGlmKHBhcmVudC5zcGxpdCA9PT0gXCJZXCIpXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRub2RlLmJvdW5kaW5nQm94Lm1pbi55ID0gbm9kZS5ib3VuZGluZ0JveC5taW4ueSArIHBhcmVudEJCU2l6ZS55IC8gMjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRlbHNlIGlmKHBhcmVudC5zcGxpdCA9PT0gXCJaXCIpXHJcblx0XHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0XHRub2RlLmJvdW5kaW5nQm94Lm1pbi56ID0gbm9kZS5ib3VuZGluZ0JveC5taW4ueiArIHBhcmVudEJCU2l6ZS56IC8gMjtcclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0dmFyIGNlbnRlciA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcblx0XHRcdFx0XHRcdG5vZGUuYm91bmRpbmdCb3guZ2V0Q2VudGVyKGNlbnRlcik7XHJcblx0XHRcdFx0XHRcdHZhciByYWRpdXMgPSBub2RlLmJvdW5kaW5nQm94LmdldFNpemUobmV3IFRIUkVFLlZlY3RvcjMoKSkubGVuZ3RoKCkgLyAyO1xyXG5cdFx0XHRcdFx0XHRub2RlLmJvdW5kaW5nU3BoZXJlID0gbmV3IFRIUkVFLlNwaGVyZShjZW50ZXIsIHJhZGl1cyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHRyb290ID0gbm9kZTtcclxuXHRcdFx0XHRcdHJvb3QuYm91bmRpbmdCb3ggPSB0aGlzLmJvdW5kaW5nQm94LmNsb25lKCk7XHJcblxyXG5cdFx0XHRcdFx0dmFyIGNlbnRlciA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XHJcblx0XHRcdFx0XHRyb290LmJvdW5kaW5nQm94LmdldENlbnRlcihjZW50ZXIpO1xyXG5cdFx0XHRcdFx0dmFyIHJhZGl1cyA9IHJvb3QuYm91bmRpbmdCb3guZ2V0U2l6ZShuZXcgVEhSRUUuVmVjdG9yMygpKS5sZW5ndGgoKSAvIDI7XHJcblx0XHRcdFx0XHRyb290LmJvdW5kaW5nU3BoZXJlID0gbmV3IFRIUkVFLlNwaGVyZShjZW50ZXIsIHJhZGl1cyk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR2YXIgYmJTaXplID0gbm9kZS5ib3VuZGluZ0JveC5nZXRTaXplKG5ldyBUSFJFRS5WZWN0b3IzKCkpO1xyXG5cdFx0XHRcdG5vZGUuc3BhY2luZyA9ICgoYmJTaXplLnggKyBiYlNpemUueSArIGJiU2l6ZS56KSAvIDMpIC8gNzU7XHJcblx0XHRcdFx0bm9kZS5lc3RpbWF0ZWRTcGFjaW5nID0gbm9kZS5zcGFjaW5nO1xyXG5cclxuXHRcdFx0XHRzdGFjay5wdXNoKG5vZGUpO1xyXG5cclxuXHRcdFx0XHRpZihub2RlLmlzTGVhZilcclxuXHRcdFx0XHR7XHJcblx0XHRcdFx0XHR2YXIgZG9uZSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0d2hpbGUoIWRvbmUgJiYgc3RhY2subGVuZ3RoID4gMClcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0c3RhY2sucG9wKCk7XHJcblxyXG5cdFx0XHRcdFx0XHR2YXIgdG9wID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XHJcblxyXG5cdFx0XHRcdFx0XHRkb25lID0gc3RhY2subGVuZ3RoID4gMCAmJiB0b3AuaGFzUmlnaHQgJiYgdG9wLnJpZ2h0ID09IG51bGw7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLnJvb3QgPSByb290O1xyXG5cdFx0XHR0aGlzLmxldmVscyA9IGxldmVscztcclxuXHJcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudChcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHR5cGU6IFwiaGllcmFyY2h5X2xvYWRlZFwiXHJcblx0XHRcdH0pO1xyXG5cdFx0fTtcclxuXHJcblx0XHR4aHIuc2VuZChudWxsKTtcclxuXHR9O1xyXG5cclxuXHRnZXQgc3BhY2luZygpXHJcblx0e1xyXG5cdFx0aWYodGhpcy5fc3BhY2luZylcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuX3NwYWNpbmc7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKHRoaXMucm9vdClcclxuXHRcdHtcclxuXHRcdFx0cmV0dXJuIHRoaXMucm9vdC5zcGFjaW5nO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0c2V0IHNwYWNpbmcodmFsdWUpXHJcblx0e1xyXG5cdFx0dGhpcy5fc3BhY2luZyA9IHZhbHVlO1xyXG5cdH1cclxufTtcclxuXHJcbmV4cG9ydCB7UG9pbnRDbG91ZEFyZW5hNERHZW9tZXRyeSwgUG9pbnRDbG91ZEFyZW5hNERHZW9tZXRyeU5vZGV9O1xyXG4iLCIvKlxyXG4qKiBCaW5hcnkgSGVhcCBpbXBsZW1lbnRhdGlvbiBpbiBKYXZhc2NyaXB0XHJcbioqIEZyb206IGh0dHA6Ly9lbG9xdWVudGphdmFzY3JpcHQubmV0LzFzdF9lZGl0aW9uL2FwcGVuZGl4Mi5odG1sdFxyXG4qKlxyXG4qKiBDb3B5cmlnaHQgKGMpIDIwMDcgTWFyaWpuIEhhdmVyYmVrZSwgbGFzdCBtb2RpZmllZCBvbiBOb3ZlbWJlciAyOCAyMDEzLlxyXG4qKlxyXG4qKiBMaWNlbnNlZCB1bmRlciBhIENyZWF0aXZlIENvbW1vbnMgYXR0cmlidXRpb24tbm9uY29tbWVyY2lhbCBsaWNlbnNlLiBcclxuKiogQWxsIGNvZGUgaW4gdGhpcyBib29rIG1heSBhbHNvIGJlIGNvbnNpZGVyZWQgbGljZW5zZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2UuXHJcbiovXHJcblxyXG5mdW5jdGlvbiBCaW5hcnlIZWFwKHNjb3JlRnVuY3Rpb24pXHJcbntcclxuXHR0aGlzLmNvbnRlbnQgPSBbXTtcclxuXHR0aGlzLnNjb3JlRnVuY3Rpb24gPSBzY29yZUZ1bmN0aW9uO1xyXG59XHJcblxyXG5CaW5hcnlIZWFwLnByb3RvdHlwZSA9XHJcbntcclxuXHRwdXNoOiBmdW5jdGlvbihlbGVtZW50KVxyXG5cdHtcclxuXHRcdC8vIEFkZCB0aGUgbmV3IGVsZW1lbnQgdG8gdGhlIGVuZCBvZiB0aGUgYXJyYXkuXHJcblx0XHR0aGlzLmNvbnRlbnQucHVzaChlbGVtZW50KTtcclxuXHRcdC8vIEFsbG93IGl0IHRvIGJ1YmJsZSB1cC5cclxuXHRcdHRoaXMuYnViYmxlVXAodGhpcy5jb250ZW50Lmxlbmd0aCAtIDEpO1xyXG5cdH0sXHJcblxyXG5cdHBvcDogZnVuY3Rpb24oKVxyXG5cdHtcclxuXHRcdC8vIFN0b3JlIHRoZSBmaXJzdCBlbGVtZW50IHNvIHdlIGNhbiByZXR1cm4gaXQgbGF0ZXIuXHJcblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5jb250ZW50WzBdO1xyXG5cdFx0Ly8gR2V0IHRoZSBlbGVtZW50IGF0IHRoZSBlbmQgb2YgdGhlIGFycmF5LlxyXG5cdFx0dmFyIGVuZCA9IHRoaXMuY29udGVudC5wb3AoKTtcclxuXHRcdC8vIElmIHRoZXJlIGFyZSBhbnkgZWxlbWVudHMgbGVmdCwgcHV0IHRoZSBlbmQgZWxlbWVudCBhdCB0aGVcclxuXHRcdC8vIHN0YXJ0LCBhbmQgbGV0IGl0IHNpbmsgZG93bi5cclxuXHRcdGlmKHRoaXMuY29udGVudC5sZW5ndGggPiAwKVxyXG5cdFx0e1xyXG5cdFx0XHR0aGlzLmNvbnRlbnRbMF0gPSBlbmQ7XHJcblx0XHRcdHRoaXMuc2lua0Rvd24oMCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH0sXHJcblxyXG5cdHJlbW92ZTogZnVuY3Rpb24obm9kZSlcclxuXHR7XHJcblx0XHR2YXIgbGVuZ3RoID0gdGhpcy5jb250ZW50Lmxlbmd0aDtcclxuXHRcdC8vIFRvIHJlbW92ZSBhIHZhbHVlLCB3ZSBtdXN0IHNlYXJjaCB0aHJvdWdoIHRoZSBhcnJheSB0byBmaW5kXHJcblx0XHQvLyBpdC5cclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKylcclxuXHRcdHtcclxuXHRcdFx0aWYodGhpcy5jb250ZW50W2ldICE9IG5vZGUpIGNvbnRpbnVlO1xyXG5cdFx0XHQvLyBXaGVuIGl0IGlzIGZvdW5kLCB0aGUgcHJvY2VzcyBzZWVuIGluICdwb3AnIGlzIHJlcGVhdGVkXHJcblx0XHRcdC8vIHRvIGZpbGwgdXAgdGhlIGhvbGUuXHJcblx0XHRcdHZhciBlbmQgPSB0aGlzLmNvbnRlbnQucG9wKCk7XHJcblx0XHRcdC8vIElmIHRoZSBlbGVtZW50IHdlIHBvcHBlZCB3YXMgdGhlIG9uZSB3ZSBuZWVkZWQgdG8gcmVtb3ZlLFxyXG5cdFx0XHQvLyB3ZSdyZSBkb25lLlxyXG5cdFx0XHRpZihpID09IGxlbmd0aCAtIDEpIGJyZWFrO1xyXG5cdFx0XHQvLyBPdGhlcndpc2UsIHdlIHJlcGxhY2UgdGhlIHJlbW92ZWQgZWxlbWVudCB3aXRoIHRoZSBwb3BwZWRcclxuXHRcdFx0Ly8gb25lLCBhbmQgYWxsb3cgaXQgdG8gZmxvYXQgdXAgb3Igc2luayBkb3duIGFzIGFwcHJvcHJpYXRlLlxyXG5cdFx0XHR0aGlzLmNvbnRlbnRbaV0gPSBlbmQ7XHJcblx0XHRcdHRoaXMuYnViYmxlVXAoaSk7XHJcblx0XHRcdHRoaXMuc2lua0Rvd24oaSk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdH0sXHJcblxyXG5cdHNpemU6IGZ1bmN0aW9uKClcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5jb250ZW50Lmxlbmd0aDtcclxuXHR9LFxyXG5cclxuXHRidWJibGVVcDogZnVuY3Rpb24obilcclxuXHR7XHJcblx0XHQvLyBGZXRjaCB0aGUgZWxlbWVudCB0aGF0IGhhcyB0byBiZSBtb3ZlZC5cclxuXHRcdHZhciBlbGVtZW50ID0gdGhpcy5jb250ZW50W25dLCBzY29yZSA9IHRoaXMuc2NvcmVGdW5jdGlvbihlbGVtZW50KTtcclxuXHRcdC8vIFdoZW4gYXQgMCwgYW4gZWxlbWVudCBjYW4gbm90IGdvIHVwIGFueSBmdXJ0aGVyLlxyXG5cdFx0d2hpbGUobiA+IDApXHJcblx0XHR7XHJcblx0XHRcdC8vIENvbXB1dGUgdGhlIHBhcmVudCBlbGVtZW50J3MgaW5kZXgsIGFuZCBmZXRjaCBpdC5cclxuXHRcdFx0dmFyIHBhcmVudE4gPSBNYXRoLmZsb29yKChuICsgMSkgLyAyKSAtIDEsXHJcblx0XHRcdHBhcmVudCA9IHRoaXMuY29udGVudFtwYXJlbnROXTtcclxuXHRcdFx0Ly8gSWYgdGhlIHBhcmVudCBoYXMgYSBsZXNzZXIgc2NvcmUsIHRoaW5ncyBhcmUgaW4gb3JkZXIgYW5kIHdlXHJcblx0XHRcdC8vIGFyZSBkb25lLlxyXG5cdFx0XHRpZihzY29yZSA+PSB0aGlzLnNjb3JlRnVuY3Rpb24ocGFyZW50KSlcclxuXHRcdFx0XHRicmVhaztcclxuXHJcblx0XHRcdC8vIE90aGVyd2lzZSwgc3dhcCB0aGUgcGFyZW50IHdpdGggdGhlIGN1cnJlbnQgZWxlbWVudCBhbmRcclxuXHRcdFx0Ly8gY29udGludWUuXHJcblx0XHRcdHRoaXMuY29udGVudFtwYXJlbnROXSA9IGVsZW1lbnQ7XHJcblx0XHRcdHRoaXMuY29udGVudFtuXSA9IHBhcmVudDtcclxuXHRcdFx0biA9IHBhcmVudE47XHJcblx0XHR9XHJcblx0fSxcclxuXHJcblx0c2lua0Rvd246IGZ1bmN0aW9uKG4pXHJcblx0e1xyXG5cdFx0Ly8gTG9vayB1cCB0aGUgdGFyZ2V0IGVsZW1lbnQgYW5kIGl0cyBzY29yZS5cclxuXHRcdHZhciBsZW5ndGggPSB0aGlzLmNvbnRlbnQubGVuZ3RoLFxyXG5cdFx0ZWxlbWVudCA9IHRoaXMuY29udGVudFtuXSxcclxuXHRcdGVsZW1TY29yZSA9IHRoaXMuc2NvcmVGdW5jdGlvbihlbGVtZW50KTtcclxuXHJcblx0XHR3aGlsZSh0cnVlKVxyXG5cdFx0e1xyXG5cdFx0XHQvLyBDb21wdXRlIHRoZSBpbmRpY2VzIG9mIHRoZSBjaGlsZCBlbGVtZW50cy5cclxuXHRcdFx0dmFyIGNoaWxkMk4gPSAobiArIDEpICogMiwgY2hpbGQxTiA9IGNoaWxkMk4gLSAxO1xyXG5cdFx0XHQvLyBUaGlzIGlzIHVzZWQgdG8gc3RvcmUgdGhlIG5ldyBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCxcclxuXHRcdFx0Ly8gaWYgYW55LlxyXG5cdFx0XHR2YXIgc3dhcCA9IG51bGw7XHJcblx0XHRcdC8vIElmIHRoZSBmaXJzdCBjaGlsZCBleGlzdHMgKGlzIGluc2lkZSB0aGUgYXJyYXkpLi4uXHJcblx0XHRcdGlmKGNoaWxkMU4gPCBsZW5ndGgpXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvLyBMb29rIGl0IHVwIGFuZCBjb21wdXRlIGl0cyBzY29yZS5cclxuXHRcdFx0XHR2YXIgY2hpbGQxID0gdGhpcy5jb250ZW50W2NoaWxkMU5dLFxyXG5cdFx0XHRcdGNoaWxkMVNjb3JlID0gdGhpcy5zY29yZUZ1bmN0aW9uKGNoaWxkMSk7XHJcblx0XHRcdFx0Ly8gSWYgdGhlIHNjb3JlIGlzIGxlc3MgdGhhbiBvdXIgZWxlbWVudCdzLCB3ZSBuZWVkIHRvIHN3YXAuXHJcblx0XHRcdFx0aWYoY2hpbGQxU2NvcmUgPCBlbGVtU2NvcmUpXHJcblx0XHRcdFx0XHRzd2FwID0gY2hpbGQxTjtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBEbyB0aGUgc2FtZSBjaGVja3MgZm9yIHRoZSBvdGhlciBjaGlsZC5cclxuXHRcdFx0aWYoY2hpbGQyTiA8IGxlbmd0aClcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHZhciBjaGlsZDIgPSB0aGlzLmNvbnRlbnRbY2hpbGQyTl0sXHJcblx0XHRcdFx0Y2hpbGQyU2NvcmUgPSB0aGlzLnNjb3JlRnVuY3Rpb24oY2hpbGQyKTtcclxuXHRcdFx0XHRpZihjaGlsZDJTY29yZSA8IChzd2FwID09IG51bGwgPyBlbGVtU2NvcmUgOiBjaGlsZDFTY29yZSkpXHJcblx0XHRcdFx0XHRzd2FwID0gY2hpbGQyTjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gTm8gbmVlZCB0byBzd2FwIGZ1cnRoZXIsIHdlIGFyZSBkb25lLlxyXG5cdFx0XHRpZihzd2FwID09IG51bGwpIGJyZWFrO1xyXG5cclxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBzd2FwIGFuZCBjb250aW51ZS5cclxuXHRcdFx0dGhpcy5jb250ZW50W25dID0gdGhpcy5jb250ZW50W3N3YXBdO1xyXG5cdFx0XHR0aGlzLmNvbnRlbnRbc3dhcF0gPSBlbGVtZW50O1xyXG5cdFx0XHRuID0gc3dhcDtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQge0JpbmFyeUhlYXB9O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmltcG9ydCB7IEdyZXlob3VuZExvYWRlciB9IGZyb20gXCIuL2xvYWRlcnMvR3JleWhvdW5kTG9hZGVyLmpzXCI7XHJcbmltcG9ydCB7IFBPQ0xvYWRlciB9IGZyb20gXCIuL2xvYWRlcnMvUE9DTG9hZGVyLmpzXCI7XHJcbmltcG9ydCB7IEVwdExvYWRlciB9IGZyb20gXCIuL2xvYWRlcnMvRXB0TG9hZGVyLmpzXCI7XHJcbmltcG9ydCB7IFBvaW50Q2xvdWRPY3RyZWUgfSBmcm9tIFwiLi9wb2ludGNsb3VkL1BvaW50Q2xvdWRPY3RyZWUuanNcIjtcclxuaW1wb3J0IHsgUG9pbnRDbG91ZEFyZW5hNEQgfSBmcm9tIFwiLi9wb2ludGNsb3VkL1BvaW50Q2xvdWRBcmVuYTRELmpzXCI7XHJcbmltcG9ydCB7IFBvaW50Q2xvdWRBcmVuYTRER2VvbWV0cnkgfSBmcm9tIFwiLi9wb2ludGNsb3VkL2dlb21ldHJpZXMvUG9pbnRDbG91ZEFyZW5hNERHZW9tZXRyeS5qc1wiO1xyXG5pbXBvcnQgeyBCaW5hcnlIZWFwIH0gZnJvbSBcIi4vbGliL0JpbmFyeUhlYXAuanNcIjtcclxuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSBcIi4vR2xvYmFsLmpzXCI7XHJcblxyXG52YXIgQXR0cmlidXRlTG9jYXRpb25zID1cclxue1xyXG4gIHBvc2l0aW9uOiAwLFxyXG4gIGNvbG9yOiAxLFxyXG4gIGludGVuc2l0eTogMixcclxuICBjbGFzc2lmaWNhdGlvbjogMyxcclxuICByZXR1cm5OdW1iZXI6IDQsXHJcbiAgbnVtYmVyT2ZSZXR1cm5zOiA1LFxyXG4gIHBvaW50U291cmNlSUQ6IDYsXHJcbiAgaW5kaWNlczogNyxcclxuICBub3JtYWw6IDgsXHJcbiAgc3BhY2luZzogOSxcclxufTtcclxuXHJcbnZhciBDbGFzc2lmaWNhdGlvbiA9XHJcbntcclxuICBERUZBVUxUOlxyXG4gIHtcclxuICAgIDA6IG5ldyBUSFJFRS5WZWN0b3I0KDAuNSwgMC41LCAwLjUsIDEuMCksXHJcbiAgICAxOiBuZXcgVEhSRUUuVmVjdG9yNCgwLjUsIDAuNSwgMC41LCAxLjApLFxyXG4gICAgMjogbmV3IFRIUkVFLlZlY3RvcjQoMC42MywgMC4zMiwgMC4xOCwgMS4wKSxcclxuICAgIDM6IG5ldyBUSFJFRS5WZWN0b3I0KDAuMCwgMS4wLCAwLjAsIDEuMCksXHJcbiAgICA0OiBuZXcgVEhSRUUuVmVjdG9yNCgwLjAsIDAuOCwgMC4wLCAxLjApLFxyXG4gICAgNTogbmV3IFRIUkVFLlZlY3RvcjQoMC4wLCAwLjYsIDAuMCwgMS4wKSxcclxuICAgIDY6IG5ldyBUSFJFRS5WZWN0b3I0KDEuMCwgMC42NiwgMC4wLCAxLjApLFxyXG4gICAgNzogbmV3IFRIUkVFLlZlY3RvcjQoMS4wLCAwLCAxLjAsIDEuMCksXHJcbiAgICA4OiBuZXcgVEhSRUUuVmVjdG9yNCgxLjAsIDAsIDAuMCwgMS4wKSxcclxuICAgIDk6IG5ldyBUSFJFRS5WZWN0b3I0KDAuMCwgMC4wLCAxLjAsIDEuMCksXHJcbiAgICAxMjogbmV3IFRIUkVFLlZlY3RvcjQoMS4wLCAxLjAsIDAuMCwgMS4wKSxcclxuICAgIERFRkFVTFQ6IG5ldyBUSFJFRS5WZWN0b3I0KDAuMywgMC42LCAwLjYsIDAuNSlcclxuICB9XHJcbn07XHJcblxyXG52YXIgQ2xpcFRhc2sgPVxyXG57XHJcbiAgTk9ORTogMCxcclxuICBISUdITElHSFQ6IDEsXHJcbiAgU0hPV19JTlNJREU6IDIsXHJcbiAgU0hPV19PVVRTSURFOiAzXHJcbn07XHJcblxyXG52YXIgQ2xpcE1ldGhvZCA9XHJcbntcclxuICBJTlNJREVfQU5ZOiAwLFxyXG4gIElOU0lERV9BTEw6IDFcclxufTtcclxuXHJcbnZhciBQb2ludFNpemVUeXBlID1cclxue1xyXG4gIEZJWEVEOiAwLFxyXG4gIEFUVEVOVUFURUQ6IDEsXHJcbiAgQURBUFRJVkU6IDJcclxufTtcclxuXHJcbnZhciBQb2ludFNoYXBlID1cclxue1xyXG4gIFNRVUFSRTogMCxcclxuICBDSVJDTEU6IDEsXHJcbiAgUEFSQUJPTE9JRDogMlxyXG59O1xyXG5cclxudmFyIFBvaW50Q29sb3JUeXBlID1cclxue1xyXG4gIFJHQjogMCxcclxuICBDT0xPUjogMSxcclxuICBERVBUSDogMixcclxuICBIRUlHSFQ6IDMsXHJcbiAgRUxFVkFUSU9OOiAzLFxyXG4gIElOVEVOU0lUWTogNCxcclxuICBJTlRFTlNJVFlfR1JBRElFTlQ6IDUsXHJcbiAgTE9EOiA2LFxyXG4gIExFVkVMX09GX0RFVEFJTDogNixcclxuICBQT0lOVF9JTkRFWDogNyxcclxuICBDTEFTU0lGSUNBVElPTjogOCxcclxuICBSRVRVUk5fTlVNQkVSOiA5LFxyXG4gIFNPVVJDRTogMTAsXHJcbiAgTk9STUFMOiAxMSxcclxuICBQSE9ORzogMTIsXHJcbiAgUkdCX0hFSUdIVDogMTMsXHJcbiAgQ09NUE9TSVRFOiA1MFxyXG59O1xyXG5cclxudmFyIFRyZWVUeXBlID1cclxue1xyXG4gIE9DVFJFRTogMCxcclxuICBLRFRSRUU6IDFcclxufTtcclxuXHJcbnZhciBQb2ludFNlbGVjdGlvblR5cGUgPVxyXG57XHJcbiAgQlJJR0hUTkVTUzogMCxcclxuICBDT0xPUjogMVxyXG59O1xyXG5cclxuZnVuY3Rpb24gbG9hZFBvaW50Q2xvdWQocGF0aCwgbmFtZSwgY2FsbGJhY2spIHtcclxuICB2YXIgbG9hZGVkID0gZnVuY3Rpb24gKHBvaW50Y2xvdWQpIHtcclxuICAgIGlmIChuYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgcG9pbnRjbG91ZC5uYW1lID0gbmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBjYWxsYmFjayhcclxuICAgICAge1xyXG4gICAgICAgIHR5cGU6IFwicG9pbnRjbG91ZF9sb2FkZWRcIixcclxuICAgICAgICBwb2ludGNsb3VkOiBwb2ludGNsb3VkXHJcbiAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIC8vR3JleWhvdW5kIHBvaW50Y2xvdWQgc2VydmVyIFVSTC5cclxuICBpZiAocGF0aC5pbmRleE9mKFwiZ3JleWhvdW5kOi8vXCIpID09PSAwKSB7XHJcbiAgICBHcmV5aG91bmRMb2FkZXIubG9hZChwYXRoLCBmdW5jdGlvbiAoZ2VvbWV0cnkpIHtcclxuICAgICAgaWYgKGdlb21ldHJ5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBsb2FkZWQobmV3IFBvaW50Q2xvdWRPY3RyZWUoZ2VvbWV0cnkpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIC8vUG90cmVlIHBvaW50IGNsb3VkXHJcbiAgZWxzZSBpZiAocGF0aC5pbmRleE9mKFwiY2xvdWQuanNcIikgPiAwKSB7XHJcbiAgICBQT0NMb2FkZXIubG9hZChwYXRoLCBmdW5jdGlvbiAoZ2VvbWV0cnkpIHtcclxuICAgICAgaWYgKGdlb21ldHJ5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBsb2FkZWQobmV3IFBvaW50Q2xvdWRPY3RyZWUoZ2VvbWV0cnkpKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG4gIGVsc2UgaWYgKHBhdGguaW5kZXhPZignZXB0Lmpzb24nKSA+IDApIHtcclxuICAgIEVwdExvYWRlci5sb2FkKHBhdGgsIGZ1bmN0aW9uIChnZW9tZXRyeSkge1xyXG4gICAgICBpZiAoZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGxvYWRlZChuZXcgUG9pbnRDbG91ZE9jdHJlZShnZW9tZXRyeSkpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLy9BcmVuYSA0RCBwb2ludCBjbG91ZFxyXG4gIGVsc2UgaWYgKHBhdGguaW5kZXhPZihcIi52cGNcIikgPiAwKSB7XHJcbiAgICBQb2ludENsb3VkQXJlbmE0REdlb21ldHJ5LmxvYWQocGF0aCwgZnVuY3Rpb24gKGdlb21ldHJ5KSB7XHJcbiAgICAgIGlmIChnZW9tZXRyeSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgbG9hZGVkKG5ldyBQb2ludENsb3VkQXJlbmE0RChnZW9tZXRyeSkpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJQb3RyZWU6IEZhaWxlZCB0byBsb2FkIHBvaW50IGNsb3VkIGZyb20gVVJMIFwiICsgcGF0aCk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVWaXNpYmlsaXR5KHBvaW50Y2xvdWRzLCBjYW1lcmEsIHJlbmRlcmVyKSB7XHJcbiAgdmFyIG51bVZpc2libGVOb2RlcyA9IDA7XHJcbiAgdmFyIG51bVZpc2libGVQb2ludHMgPSAwO1xyXG4gIHZhciBudW1WaXNpYmxlUG9pbnRzSW5Qb2ludGNsb3VkcyA9IG5ldyBNYXAocG9pbnRjbG91ZHMubWFwKHBjID0+IFtwYywgMF0pKTtcclxuICB2YXIgdmlzaWJsZU5vZGVzID0gW107XHJcbiAgdmFyIHZpc2libGVHZW9tZXRyeSA9IFtdO1xyXG4gIHZhciB1bmxvYWRlZEdlb21ldHJ5ID0gW107XHJcbiAgdmFyIGxvd2VzdFNwYWNpbmcgPSBJbmZpbml0eTtcclxuXHJcbiAgLy9DYWxjdWxhdGUgb2JqZWN0IHNwYWNlIGZydXN0dW0gYW5kIGNhbSBwb3MgYW5kIHNldHVwIHByaW9yaXR5IHF1ZXVlXHJcbiAgdmFyIHN0cnVjdHVyZXMgPSB1cGRhdGVWaXNpYmlsaXR5U3RydWN0dXJlcyhwb2ludGNsb3VkcywgY2FtZXJhLCByZW5kZXJlcik7XHJcbiAgdmFyIGZydXN0dW1zID0gc3RydWN0dXJlcy5mcnVzdHVtcztcclxuICB2YXIgY2FtT2JqUG9zaXRpb25zID0gc3RydWN0dXJlcy5jYW1PYmpQb3NpdGlvbnM7XHJcbiAgdmFyIHByaW9yaXR5UXVldWUgPSBzdHJ1Y3R1cmVzLnByaW9yaXR5UXVldWU7XHJcblxyXG4gIHZhciBsb2FkZWRUb0dQVVRoaXNGcmFtZSA9IDA7XHJcbiAgdmFyIGRvbVdpZHRoID0gcmVuZGVyZXIuZG9tRWxlbWVudC5jbGllbnRXaWR0aDtcclxuICB2YXIgZG9tSGVpZ2h0ID0gcmVuZGVyZXIuZG9tRWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcblxyXG4gIC8vQ2hlY2sgaWYgcG9pbnRjbG91ZCBoYXMgYmVlbiB0cmFuc2Zvcm1lZCwgc29tZSBjb2RlIHdpbGwgb25seSBiZSBleGVjdXRlZCBpZiBjaGFuZ2VzIGhhdmUgYmVlbiBkZXRlY3RlZFxyXG4gIGlmICghR2xvYmFsLnBvaW50Y2xvdWRUcmFuc2Zvcm1WZXJzaW9uKSB7XHJcbiAgICBHbG9iYWwucG9pbnRjbG91ZFRyYW5zZm9ybVZlcnNpb24gPSBuZXcgTWFwKCk7XHJcbiAgfVxyXG5cclxuICB2YXIgcG9pbnRjbG91ZFRyYW5zZm9ybVZlcnNpb24gPSBHbG9iYWwucG9pbnRjbG91ZFRyYW5zZm9ybVZlcnNpb247XHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRjbG91ZHMubGVuZ3RoOyBpKyspIHtcclxuICAgIHZhciBwb2ludGNsb3VkID0gcG9pbnRjbG91ZHNbaV07XHJcblxyXG4gICAgaWYgKCFwb2ludGNsb3VkLnZpc2libGUpIHtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgcG9pbnRjbG91ZC51cGRhdGVNYXRyaXhXb3JsZCgpO1xyXG5cclxuICAgIGlmICghcG9pbnRjbG91ZFRyYW5zZm9ybVZlcnNpb24uaGFzKHBvaW50Y2xvdWQpKSB7XHJcbiAgICAgIHBvaW50Y2xvdWRUcmFuc2Zvcm1WZXJzaW9uLnNldChwb2ludGNsb3VkLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG51bWJlcjogMCxcclxuICAgICAgICAgIHRyYW5zZm9ybTogcG9pbnRjbG91ZC5tYXRyaXhXb3JsZC5jbG9uZSgpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdmFyIHZlcnNpb24gPSBwb2ludGNsb3VkVHJhbnNmb3JtVmVyc2lvbi5nZXQocG9pbnRjbG91ZCk7XHJcbiAgICAgIGlmICghdmVyc2lvbi50cmFuc2Zvcm0uZXF1YWxzKHBvaW50Y2xvdWQubWF0cml4V29ybGQpKSB7XHJcbiAgICAgICAgdmVyc2lvbi5udW1iZXIrKztcclxuICAgICAgICB2ZXJzaW9uLnRyYW5zZm9ybS5jb3B5KHBvaW50Y2xvdWQubWF0cml4V29ybGQpO1xyXG5cclxuICAgICAgICBwb2ludGNsb3VkLmRpc3BhdGNoRXZlbnQoXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwidHJhbnNmb3JtYXRpb25fY2hhbmdlZFwiLFxyXG4gICAgICAgICAgICB0YXJnZXQ6IHBvaW50Y2xvdWRcclxuICAgICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvL1Byb2Nlc3MgcHJpb3JpdHkgcXVldWVcclxuICB3aGlsZSAocHJpb3JpdHlRdWV1ZS5zaXplKCkgPiAwKSB7XHJcbiAgICB2YXIgZWxlbWVudCA9IHByaW9yaXR5UXVldWUucG9wKCk7XHJcbiAgICB2YXIgbm9kZSA9IGVsZW1lbnQubm9kZTtcclxuICAgIHZhciBwYXJlbnQgPSBlbGVtZW50LnBhcmVudDtcclxuICAgIHZhciBwb2ludGNsb3VkID0gcG9pbnRjbG91ZHNbZWxlbWVudC5wb2ludGNsb3VkXTtcclxuICAgIHZhciBib3ggPSBub2RlLmdldEJvdW5kaW5nQm94KCk7XHJcbiAgICB2YXIgZnJ1c3R1bSA9IGZydXN0dW1zW2VsZW1lbnQucG9pbnRjbG91ZF07XHJcbiAgICB2YXIgY2FtT2JqUG9zID0gY2FtT2JqUG9zaXRpb25zW2VsZW1lbnQucG9pbnRjbG91ZF07XHJcblxyXG4gICAgdmFyIGluc2lkZUZydXN0dW0gPSBmcnVzdHVtLmludGVyc2VjdHNCb3goYm94KTtcclxuICAgIHZhciBtYXhMZXZlbCA9IHBvaW50Y2xvdWQubWF4TGV2ZWwgfHwgSW5maW5pdHk7XHJcbiAgICB2YXIgbGV2ZWwgPSBub2RlLmdldExldmVsKCk7XHJcblxyXG4gICAgdmFyIHZpc2libGUgPSBpbnNpZGVGcnVzdHVtO1xyXG4gICAgdmlzaWJsZSA9IHZpc2libGUgJiYgIShudW1WaXNpYmxlUG9pbnRzSW5Qb2ludGNsb3Vkcy5nZXQocG9pbnRjbG91ZCkgKyBub2RlLmdldE51bVBvaW50cygpID4gcG9pbnRjbG91ZC5wb2ludEJ1ZGdldCk7XHJcbiAgICB2aXNpYmxlID0gdmlzaWJsZSAmJiBsZXZlbCA8IG1heExldmVsO1xyXG5cclxuICAgIC8vVE9ETyA8Q0xJUFBJTkcgVEFTS1M+XHJcbiAgICAvKlxyXG4gICAgaWYoZmFsc2UgJiYgcG9pbnRjbG91ZC5tYXRlcmlhbC5jbGlwQm94ZXMubGVuZ3RoID4gMClcclxuICAgIHtcclxuICAgICAgdmFyIG51bUludGVyc2VjdGluZyA9IDA7XHJcbiAgICAgIHZhciBudW1JbnRlcnNlY3Rpb25Wb2x1bWVzID0gMDtcclxuXHJcbiAgICAgIGZvcih2YXIgY2xpcEJveCBvZiBwb2ludGNsb3VkLm1hdGVyaWFsLmNsaXBCb3hlcylcclxuICAgICAge1xyXG4gICAgICAgIHZhciBwY1dvcmxkSW52ZXJzZSA9IG5ldyBUSFJFRS5NYXRyaXg0KCkuZ2V0SW52ZXJzZShwb2ludGNsb3VkLm1hdHJpeFdvcmxkKTtcclxuICAgICAgICB2YXIgdG9QQ09iamVjdCA9IHBjV29ybGRJbnZlcnNlLm11bHRpcGx5KGNsaXBCb3guYm94Lm1hdHJpeFdvcmxkKTtcclxuXHJcbiAgICAgICAgdmFyIHB4ID0gbmV3IFRIUkVFLlZlY3RvcjMoKzEsIDAsIDApLmFwcGx5TWF0cml4NCh0b1BDT2JqZWN0KTtcclxuICAgICAgICB2YXIgbnggPSBuZXcgVEhSRUUuVmVjdG9yMygtMSwgMCwgMCkuYXBwbHlNYXRyaXg0KHRvUENPYmplY3QpO1xyXG4gICAgICAgIHZhciBweSA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsICsxLCAwKS5hcHBseU1hdHJpeDQodG9QQ09iamVjdCk7XHJcbiAgICAgICAgdmFyIG55ID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgLTEsIDApLmFwcGx5TWF0cml4NCh0b1BDT2JqZWN0KTtcclxuICAgICAgICB2YXIgcHogPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCArMSkuYXBwbHlNYXRyaXg0KHRvUENPYmplY3QpO1xyXG4gICAgICAgIHZhciBueiA9IG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIC0xKS5hcHBseU1hdHJpeDQodG9QQ09iamVjdCk7XHJcblxyXG4gICAgICAgIHZhciBweE4gPSBuZXcgVEhSRUUuVmVjdG9yMygpLnN1YlZlY3RvcnMobngsIHB4KS5ub3JtYWxpemUoKTtcclxuICAgICAgICB2YXIgbnhOID0gcHhOLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoLTEpO1xyXG4gICAgICAgIHZhciBweU4gPSBuZXcgVEhSRUUuVmVjdG9yMygpLnN1YlZlY3RvcnMobnksIHB5KS5ub3JtYWxpemUoKTtcclxuICAgICAgICB2YXIgbnlOID0gcHlOLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoLTEpO1xyXG4gICAgICAgIHZhciBwek4gPSBuZXcgVEhSRUUuVmVjdG9yMygpLnN1YlZlY3RvcnMobnosIHB6KS5ub3JtYWxpemUoKTtcclxuICAgICAgICB2YXIgbnpOID0gcHpOLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoLTEpO1xyXG5cclxuICAgICAgICB2YXIgcHhQbGFuZSA9IG5ldyBUSFJFRS5QbGFuZSgpLnNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KHB4TiwgcHgpO1xyXG4gICAgICAgIHZhciBueFBsYW5lID0gbmV3IFRIUkVFLlBsYW5lKCkuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQobnhOLCBueCk7XHJcbiAgICAgICAgdmFyIHB5UGxhbmUgPSBuZXcgVEhSRUUuUGxhbmUoKS5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludChweU4sIHB5KTtcclxuICAgICAgICB2YXIgbnlQbGFuZSA9IG5ldyBUSFJFRS5QbGFuZSgpLnNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50KG55TiwgbnkpO1xyXG4gICAgICAgIHZhciBwelBsYW5lID0gbmV3IFRIUkVFLlBsYW5lKCkuc2V0RnJvbU5vcm1hbEFuZENvcGxhbmFyUG9pbnQocHpOLCBweik7XHJcbiAgICAgICAgdmFyIG56UGxhbmUgPSBuZXcgVEhSRUUuUGxhbmUoKS5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludChuek4sIG56KTtcclxuXHJcbiAgICAgICAgdmFyIGZydXN0dW0gPSBuZXcgVEhSRUUuRnJ1c3R1bShweFBsYW5lLCBueFBsYW5lLCBweVBsYW5lLCBueVBsYW5lLCBwelBsYW5lLCBuelBsYW5lKTtcclxuICAgICAgICB2YXIgaW50ZXJzZWN0cyA9IGZydXN0dW0uaW50ZXJzZWN0c0JveChib3gpO1xyXG5cclxuICAgICAgICBpZihpbnRlcnNlY3RzKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG51bUludGVyc2VjdGluZysrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBudW1JbnRlcnNlY3Rpb25Wb2x1bWVzKys7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBpbnNpZGVBbnkgPSBudW1JbnRlcnNlY3RpbmcgPiAwO1xyXG4gICAgICB2YXIgaW5zaWRlQWxsID0gbnVtSW50ZXJzZWN0aW5nID09PSBudW1JbnRlcnNlY3Rpb25Wb2x1bWVzO1xyXG5cclxuICAgICAgaWYocG9pbnRjbG91ZC5tYXRlcmlhbC5jbGlwVGFzayA9PT0gQ2xpcFRhc2suU0hPV19JTlNJREUpXHJcbiAgICAgIHtcclxuICAgICAgICBpZihwb2ludGNsb3VkLm1hdGVyaWFsLmNsaXBNZXRob2QgPT09IENsaXBNZXRob2QuSU5TSURFX0FOWSAmJiBpbnNpZGVBbnkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgLy9ub2RlLmRlYnVnID0gdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmKHBvaW50Y2xvdWQubWF0ZXJpYWwuY2xpcE1ldGhvZCA9PT0gQ2xpcE1ldGhvZC5JTlNJREVfQUxMICYmIGluc2lkZUFsbClcclxuICAgICAgICB7XHJcbiAgICAgICAgICAvL25vZGUuZGVidWcgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgdmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgKi9cclxuXHJcbiAgICBpZiAobm9kZS5zcGFjaW5nKSB7XHJcbiAgICAgIGxvd2VzdFNwYWNpbmcgPSBNYXRoLm1pbihsb3dlc3RTcGFjaW5nLCBub2RlLnNwYWNpbmcpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobm9kZS5nZW9tZXRyeU5vZGUgJiYgbm9kZS5nZW9tZXRyeU5vZGUuc3BhY2luZykge1xyXG4gICAgICBsb3dlc3RTcGFjaW5nID0gTWF0aC5taW4obG93ZXN0U3BhY2luZywgbm9kZS5nZW9tZXRyeU5vZGUuc3BhY2luZyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCF2aXNpYmxlKSB7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG5cclxuICAgIG51bVZpc2libGVOb2RlcysrO1xyXG4gICAgbnVtVmlzaWJsZVBvaW50cyArPSBub2RlLmdldE51bVBvaW50cygpO1xyXG5cclxuICAgIHZhciBudW1WaXNpYmxlUG9pbnRzSW5Qb2ludGNsb3VkID0gbnVtVmlzaWJsZVBvaW50c0luUG9pbnRjbG91ZHMuZ2V0KHBvaW50Y2xvdWQpO1xyXG4gICAgbnVtVmlzaWJsZVBvaW50c0luUG9pbnRjbG91ZHMuc2V0KHBvaW50Y2xvdWQsIG51bVZpc2libGVQb2ludHNJblBvaW50Y2xvdWQgKyBub2RlLmdldE51bVBvaW50cygpKTtcclxuXHJcbiAgICBwb2ludGNsb3VkLm51bVZpc2libGVOb2RlcysrO1xyXG4gICAgcG9pbnRjbG91ZC5udW1WaXNpYmxlUG9pbnRzICs9IG5vZGUuZ2V0TnVtUG9pbnRzKCk7XHJcblxyXG4gICAgaWYgKG5vZGUuaXNHZW9tZXRyeU5vZGUoKSAmJiAoIXBhcmVudCB8fCBwYXJlbnQuaXNUcmVlTm9kZSgpKSkge1xyXG4gICAgICBpZiAobm9kZS5pc0xvYWRlZCgpICYmIGxvYWRlZFRvR1BVVGhpc0ZyYW1lIDwgR2xvYmFsLm1heE5vZGVzTG9hZEdQVUZyYW1lKSB7XHJcbiAgICAgICAgbm9kZSA9IHBvaW50Y2xvdWQudG9UcmVlTm9kZShub2RlLCBwYXJlbnQpO1xyXG4gICAgICAgIGxvYWRlZFRvR1BVVGhpc0ZyYW1lKys7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdW5sb2FkZWRHZW9tZXRyeS5wdXNoKG5vZGUpO1xyXG4gICAgICAgIHZpc2libGVHZW9tZXRyeS5wdXNoKG5vZGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG5vZGUuaXNUcmVlTm9kZSgpKSB7XHJcbiAgICAgIEdsb2JhbC5scnUudG91Y2gobm9kZS5nZW9tZXRyeU5vZGUpO1xyXG5cclxuICAgICAgbm9kZS5zY2VuZU5vZGUudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgIG5vZGUuc2NlbmVOb2RlLm1hdGVyaWFsID0gcG9pbnRjbG91ZC5tYXRlcmlhbDtcclxuXHJcbiAgICAgIHZpc2libGVOb2Rlcy5wdXNoKG5vZGUpO1xyXG4gICAgICBwb2ludGNsb3VkLnZpc2libGVOb2Rlcy5wdXNoKG5vZGUpO1xyXG5cclxuICAgICAgaWYgKG5vZGUuX3RyYW5zZm9ybVZlcnNpb24gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIG5vZGUuX3RyYW5zZm9ybVZlcnNpb24gPSAtMTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHRyYW5zZm9ybVZlcnNpb24gPSBwb2ludGNsb3VkVHJhbnNmb3JtVmVyc2lvbi5nZXQocG9pbnRjbG91ZCk7XHJcbiAgICAgIGlmIChub2RlLl90cmFuc2Zvcm1WZXJzaW9uICE9PSB0cmFuc2Zvcm1WZXJzaW9uLm51bWJlcikge1xyXG4gICAgICAgIG5vZGUuc2NlbmVOb2RlLnVwZGF0ZU1hdHJpeCgpO1xyXG4gICAgICAgIG5vZGUuc2NlbmVOb2RlLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXMocG9pbnRjbG91ZC5tYXRyaXhXb3JsZCwgbm9kZS5zY2VuZU5vZGUubWF0cml4KTtcclxuICAgICAgICBub2RlLl90cmFuc2Zvcm1WZXJzaW9uID0gdHJhbnNmb3JtVmVyc2lvbi5udW1iZXI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChwb2ludGNsb3VkLnNob3dCb3VuZGluZ0JveCAmJiAhbm9kZS5ib3VuZGluZ0JveE5vZGUgJiYgbm9kZS5nZXRCb3VuZGluZ0JveCkge1xyXG4gICAgICAgIHZhciBib3hIZWxwZXIgPSBuZXcgVEhSRUUuQm94M0hlbHBlcihub2RlLmdldEJvdW5kaW5nQm94KCkpO1xyXG4gICAgICAgIGJveEhlbHBlci5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XHJcbiAgICAgICAgcG9pbnRjbG91ZC5ib3VuZGluZ0JveE5vZGVzLnB1c2goYm94SGVscGVyKTtcclxuICAgICAgICBub2RlLmJvdW5kaW5nQm94Tm9kZSA9IGJveEhlbHBlcjtcclxuICAgICAgICBub2RlLmJvdW5kaW5nQm94Tm9kZS5tYXRyaXguY29weShwb2ludGNsb3VkLm1hdHJpeFdvcmxkKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmIChwb2ludGNsb3VkLnNob3dCb3VuZGluZ0JveCkge1xyXG4gICAgICAgIG5vZGUuYm91bmRpbmdCb3hOb2RlLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIG5vZGUuYm91bmRpbmdCb3hOb2RlLm1hdHJpeC5jb3B5KHBvaW50Y2xvdWQubWF0cml4V29ybGQpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKCFwb2ludGNsb3VkLnNob3dCb3VuZGluZ0JveCAmJiBub2RlLmJvdW5kaW5nQm94Tm9kZSkge1xyXG4gICAgICAgIG5vZGUuYm91bmRpbmdCb3hOb2RlLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vQWRkIGNoaWxkIG5vZGVzIHRvIHByaW9yaXR5UXVldWVcclxuICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuZ2V0Q2hpbGRyZW4oKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XHJcbiAgICAgIHZhciB3ZWlnaHQgPSAwO1xyXG5cclxuICAgICAgLy9QZXJzcGVjdGl2ZSBjYW1lcmFcclxuICAgICAgaWYgKGNhbWVyYS5pc1BlcnNwZWN0aXZlQ2FtZXJhKSB7XHJcbiAgICAgICAgdmFyIHNwaGVyZSA9IGNoaWxkLmdldEJvdW5kaW5nU3BoZXJlKG5ldyBUSFJFRS5TcGhlcmUoKSk7XHJcbiAgICAgICAgdmFyIGNlbnRlciA9IHNwaGVyZS5jZW50ZXI7XHJcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gc3BoZXJlLmNlbnRlci5kaXN0YW5jZVRvKGNhbU9ialBvcyk7XHJcblxyXG4gICAgICAgIHZhciByYWRpdXMgPSBzcGhlcmUucmFkaXVzO1xyXG4gICAgICAgIHZhciBmb3YgPSAoY2FtZXJhLmZvdiAqIE1hdGguUEkpIC8gMTgwO1xyXG4gICAgICAgIHZhciBzbG9wZSA9IE1hdGgudGFuKGZvdiAvIDIpO1xyXG4gICAgICAgIHZhciBwcm9qRmFjdG9yID0gKDAuNSAqIGRvbUhlaWdodCkgLyAoc2xvcGUgKiBkaXN0YW5jZSk7XHJcbiAgICAgICAgdmFyIHNjcmVlblBpeGVsUmFkaXVzID0gcmFkaXVzICogcHJvakZhY3RvcjtcclxuXHJcbiAgICAgICAgLy9JZiBwaXhlbCByYWRpdXMgYmVsbG93IG1pbmltdW0gZGlzY2FyZFxyXG4gICAgICAgIGlmIChzY3JlZW5QaXhlbFJhZGl1cyA8IHBvaW50Y2xvdWQubWluaW11bU5vZGVQaXhlbFNpemUpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2VpZ2h0ID0gc2NyZWVuUGl4ZWxSYWRpdXM7XHJcblxyXG4gICAgICAgIC8vUmVhbGx5IGNsb3NlIHRvIHRoZSBjYW1lcmFcclxuICAgICAgICBpZiAoZGlzdGFuY2UgLSByYWRpdXMgPCAwKSB7XHJcbiAgICAgICAgICB3ZWlnaHQgPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAvL09ydGhvZ3JhcGhpYyBjYW1lcmFcclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgLy9UT0RPIDxJTVBST1ZFIFZJU0lCSUxJVFk+XHJcbiAgICAgICAgdmFyIGJiID0gY2hpbGQuZ2V0Qm91bmRpbmdCb3goKTtcclxuICAgICAgICB2YXIgZGlzdGFuY2UgPSBjaGlsZC5nZXRCb3VuZGluZ1NwaGVyZShuZXcgVEhSRUUuU3BoZXJlKCkpLmNlbnRlci5kaXN0YW5jZVRvKGNhbU9ialBvcyk7XHJcbiAgICAgICAgdmFyIGRpYWdvbmFsID0gYmIubWF4LmNsb25lKCkuc3ViKGJiLm1pbikubGVuZ3RoKCk7XHJcbiAgICAgICAgd2VpZ2h0ID0gZGlhZ29uYWwgLyBkaXN0YW5jZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcHJpb3JpdHlRdWV1ZS5wdXNoKFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHBvaW50Y2xvdWQ6IGVsZW1lbnQucG9pbnRjbG91ZCxcclxuICAgICAgICAgIG5vZGU6IGNoaWxkLFxyXG4gICAgICAgICAgcGFyZW50OiBub2RlLFxyXG4gICAgICAgICAgd2VpZ2h0OiB3ZWlnaHRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vVXBkYXRlIERFTVxyXG4gIHZhciBjYW5kaWRhdGVzID0gcG9pbnRjbG91ZHMuZmlsdGVyKHAgPT4gKHAuZ2VuZXJhdGVERU0gJiYgcC5kZW0gaW5zdGFuY2VvZiBERU0pKTtcclxuXHJcbiAgZm9yICh2YXIgcG9pbnRjbG91ZCBvZiBjYW5kaWRhdGVzKSB7XHJcbiAgICB2YXIgdXBkYXRpbmdOb2RlcyA9IHBvaW50Y2xvdWQudmlzaWJsZU5vZGVzLmZpbHRlcihuID0+IG4uZ2V0TGV2ZWwoKSA8PSBHbG9iYWwubWF4REVNTGV2ZWwpO1xyXG4gICAgcG9pbnRjbG91ZC5kZW0udXBkYXRlKHVwZGF0aW5nTm9kZXMpO1xyXG4gIH1cclxuXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBNYXRoLm1pbihHbG9iYWwubWF4Tm9kZXNMb2FkaW5nLCB1bmxvYWRlZEdlb21ldHJ5Lmxlbmd0aCk7IGkrKykge1xyXG4gICAgdW5sb2FkZWRHZW9tZXRyeVtpXS5sb2FkKCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgdmlzaWJsZU5vZGVzOiB2aXNpYmxlTm9kZXMsXHJcbiAgICBudW1WaXNpYmxlUG9pbnRzOiBudW1WaXNpYmxlUG9pbnRzLFxyXG4gICAgbG93ZXN0U3BhY2luZzogbG93ZXN0U3BhY2luZ1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVwZGF0ZVBvaW50Q2xvdWRzKHBvaW50Y2xvdWRzLCBjYW1lcmEsIHJlbmRlcmVyKSB7XHJcbiAgdmFyIHJlc3VsdCA9IHVwZGF0ZVZpc2liaWxpdHkocG9pbnRjbG91ZHMsIGNhbWVyYSwgcmVuZGVyZXIpO1xyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50Y2xvdWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBwb2ludGNsb3Vkc1tpXS51cGRhdGVNYXRlcmlhbChwb2ludGNsb3Vkc1tpXS5tYXRlcmlhbCwgcG9pbnRjbG91ZHNbaV0udmlzaWJsZU5vZGVzLCBjYW1lcmEsIHJlbmRlcmVyKTtcclxuICAgIHBvaW50Y2xvdWRzW2ldLnVwZGF0ZVZpc2libGVCb3VuZHMoKTtcclxuICB9XHJcblxyXG4gIEdsb2JhbC5scnUuZnJlZU1lbW9yeSgpO1xyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cGRhdGVWaXNpYmlsaXR5U3RydWN0dXJlcyhwb2ludGNsb3VkcywgY2FtZXJhLCByZW5kZXJlcikge1xyXG4gIHZhciBmcnVzdHVtcyA9IFtdO1xyXG4gIHZhciBjYW1PYmpQb3NpdGlvbnMgPSBbXTtcclxuICB2YXIgcHJpb3JpdHlRdWV1ZSA9IG5ldyBCaW5hcnlIZWFwKGZ1bmN0aW9uICh4KSB7XHJcbiAgICByZXR1cm4gMSAvIHgud2VpZ2h0O1xyXG4gIH0pO1xyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50Y2xvdWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgcG9pbnRjbG91ZCA9IHBvaW50Y2xvdWRzW2ldO1xyXG5cclxuICAgIGlmICghcG9pbnRjbG91ZC5pbml0aWFsaXplZCgpKSB7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHBvaW50Y2xvdWQubnVtVmlzaWJsZU5vZGVzID0gMDtcclxuICAgIHBvaW50Y2xvdWQubnVtVmlzaWJsZVBvaW50cyA9IDA7XHJcbiAgICBwb2ludGNsb3VkLmRlZXBlc3RWaXNpYmxlTGV2ZWwgPSAwO1xyXG4gICAgcG9pbnRjbG91ZC52aXNpYmxlTm9kZXMgPSBbXTtcclxuICAgIHBvaW50Y2xvdWQudmlzaWJsZUdlb21ldHJ5ID0gW107XHJcblxyXG4gICAgLy9GcnVzdHVtIGluIG9iamVjdCBzcGFjZVxyXG4gICAgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XHJcbiAgICB2YXIgZnJ1c3R1bSA9IG5ldyBUSFJFRS5GcnVzdHVtKCk7XHJcbiAgICB2YXIgdmlld0kgPSBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlO1xyXG4gICAgdmFyIHdvcmxkID0gcG9pbnRjbG91ZC5tYXRyaXhXb3JsZDtcclxuXHJcbiAgICAvL1VzZSBjbG9zZSBuZWFyIHBsYW5lIGZvciBmcnVzdHVtIGludGVyc2VjdGlvblxyXG4gICAgdmFyIGZydXN0dW1DYW0gPSBjYW1lcmEuY2xvbmUoKTtcclxuICAgIGZydXN0dW1DYW0ubmVhciA9IGNhbWVyYS5uZWFyOyAvL01hdGgubWluKGNhbWVyYS5uZWFyLCAwLjEpO1xyXG4gICAgZnJ1c3R1bUNhbS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XHJcbiAgICB2YXIgcHJvaiA9IGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4O1xyXG5cclxuICAgIHZhciBmbSA9IG5ldyBUSFJFRS5NYXRyaXg0KCkubXVsdGlwbHkocHJvaikubXVsdGlwbHkodmlld0kpLm11bHRpcGx5KHdvcmxkKTtcclxuICAgIGZydXN0dW0uc2V0RnJvbVByb2plY3Rpb25NYXRyaXgoZm0pO1xyXG4gICAgZnJ1c3R1bXMucHVzaChmcnVzdHVtKTtcclxuXHJcbiAgICAvL0NhbWVyYSBwb3NpdGlvbiBpbiBvYmplY3Qgc3BhY2VcclxuICAgIHZhciB2aWV3ID0gY2FtZXJhLm1hdHJpeFdvcmxkO1xyXG4gICAgLy92YXIgd29ybGRJID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5nZXRJbnZlcnNlKHdvcmxkKTtcclxuICAgIHZhciB3b3JsZEkgPSB3b3JsZC5jbG9uZSgpLmludmVydCgpO1xyXG4gICAgdmFyIGNhbU1hdHJpeE9iamVjdCA9IG5ldyBUSFJFRS5NYXRyaXg0KCkubXVsdGlwbHkod29ybGRJKS5tdWx0aXBseSh2aWV3KTtcclxuICAgIHZhciBjYW1PYmpQb3MgPSBuZXcgVEhSRUUuVmVjdG9yMygpLnNldEZyb21NYXRyaXhQb3NpdGlvbihjYW1NYXRyaXhPYmplY3QpO1xyXG4gICAgY2FtT2JqUG9zaXRpb25zLnB1c2goY2FtT2JqUG9zKTtcclxuXHJcbiAgICBpZiAocG9pbnRjbG91ZC52aXNpYmxlICYmIHBvaW50Y2xvdWQucm9vdCAhPT0gbnVsbCkge1xyXG4gICAgICBwcmlvcml0eVF1ZXVlLnB1c2goXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcG9pbnRjbG91ZDogaSxcclxuICAgICAgICAgIG5vZGU6IHBvaW50Y2xvdWQucm9vdCxcclxuICAgICAgICAgIHdlaWdodDogTnVtYmVyLk1BWF9WQUxVRVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vSGlkZSBhbGwgcHJldmlvdXNseSB2aXNpYmxlIG5vZGVzXHJcbiAgICBpZiAocG9pbnRjbG91ZC5yb290LmlzVHJlZU5vZGUoKSkge1xyXG4gICAgICBwb2ludGNsb3VkLmhpZGVEZXNjZW5kYW50cyhwb2ludGNsb3VkLnJvb3Quc2NlbmVOb2RlKTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBvaW50Y2xvdWQuYm91bmRpbmdCb3hOb2Rlcy5sZW5ndGg7IGorKykge1xyXG4gICAgICBwb2ludGNsb3VkLmJvdW5kaW5nQm94Tm9kZXNbal0udmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGZydXN0dW1zOiBmcnVzdHVtcyxcclxuICAgIGNhbU9ialBvc2l0aW9uczogY2FtT2JqUG9zaXRpb25zLFxyXG4gICAgcHJpb3JpdHlRdWV1ZTogcHJpb3JpdHlRdWV1ZVxyXG4gIH07XHJcbn1cclxuXHJcbmNvbnN0IFZFUlNJT04gPSBfX1ZFUlNJT05fXztcclxuXHJcbmV4cG9ydCB7XHJcbiAgQXR0cmlidXRlTG9jYXRpb25zLFxyXG4gIENsYXNzaWZpY2F0aW9uLFxyXG4gIENsaXBUYXNrLFxyXG4gIENsaXBNZXRob2QsXHJcbiAgUG9pbnRTaXplVHlwZSxcclxuICBQb2ludFNoYXBlLFxyXG4gIFBvaW50Q29sb3JUeXBlLFxyXG4gIFRyZWVUeXBlLFxyXG4gIFBvaW50U2VsZWN0aW9uVHlwZSxcclxuICBsb2FkUG9pbnRDbG91ZCxcclxuICB1cGRhdGVWaXNpYmlsaXR5LFxyXG4gIHVwZGF0ZVBvaW50Q2xvdWRzLFxyXG4gIHVwZGF0ZVZpc2liaWxpdHlTdHJ1Y3R1cmVzLFxyXG4gIFZFUlNJT05cclxufTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcbmNsYXNzIFBvaW50c1xyXG57XHJcblx0Y29uc3RydWN0b3IoKVxyXG5cdHtcclxuXHRcdHRoaXMuYm91bmRpbmdCb3ggPSBuZXcgVEhSRUUuQm94MygpO1xyXG5cdFx0dGhpcy5udW1Qb2ludHMgPSAwO1xyXG5cdFx0dGhpcy5kYXRhID0ge307XHJcblx0fVxyXG5cclxuXHRhZGQocG9pbnRzKVxyXG5cdHtcclxuXHRcdHZhciBjdXJyZW50U2l6ZSA9IHRoaXMubnVtUG9pbnRzO1xyXG5cdFx0dmFyIGFkZGl0aW9uYWxTaXplID0gcG9pbnRzLm51bVBvaW50cztcclxuXHRcdHZhciBuZXdTaXplID0gY3VycmVudFNpemUgKyBhZGRpdGlvbmFsU2l6ZTtcclxuXHJcblx0XHR2YXIgdGhpc0F0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyh0aGlzLmRhdGEpO1xyXG5cdFx0dmFyIG90aGVyQXR0cmlidXRlcyA9IE9iamVjdC5rZXlzKHBvaW50cy5kYXRhKTtcclxuXHRcdHZhciBhdHRyaWJ1dGVzID0gbmV3IFNldChbLi4udGhpc0F0dHJpYnV0ZXMsIC4uLm90aGVyQXR0cmlidXRlc10pO1xyXG5cclxuXHRcdGZvcih2YXIgYXR0cmlidXRlIG9mIGF0dHJpYnV0ZXMpXHJcblx0XHR7XHJcblx0XHRcdGlmKHRoaXNBdHRyaWJ1dGVzLmluY2x1ZGVzKGF0dHJpYnV0ZSkgJiYgb3RoZXJBdHRyaWJ1dGVzLmluY2x1ZGVzKGF0dHJpYnV0ZSkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvL2F0dHJpYnV0ZSBpbiBib3RoLCBtZXJnZVxyXG5cdFx0XHRcdHZhciBUeXBlID0gdGhpcy5kYXRhW2F0dHJpYnV0ZV0uY29uc3RydWN0b3I7XHJcblx0XHRcdFx0dmFyIG1lcmdlZCA9IG5ldyBUeXBlKHRoaXMuZGF0YVthdHRyaWJ1dGVdLmxlbmd0aCArIHBvaW50cy5kYXRhW2F0dHJpYnV0ZV0ubGVuZ3RoKTtcclxuXHRcdFx0XHRtZXJnZWQuc2V0KHRoaXMuZGF0YVthdHRyaWJ1dGVdLCAwKTtcclxuXHRcdFx0XHRtZXJnZWQuc2V0KHBvaW50cy5kYXRhW2F0dHJpYnV0ZV0sIHRoaXMuZGF0YVthdHRyaWJ1dGVdLmxlbmd0aCk7XHJcblx0XHRcdFx0dGhpcy5kYXRhW2F0dHJpYnV0ZV0gPSBtZXJnZWQ7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZih0aGlzQXR0cmlidXRlcy5pbmNsdWRlcyhhdHRyaWJ1dGUpICYmICFvdGhlckF0dHJpYnV0ZXMuaW5jbHVkZXMoYXR0cmlidXRlKSlcclxuXHRcdFx0e1xyXG5cdFx0XHRcdC8vYXR0cmlidXRlIG9ubHkgaW4gdGhpczsgdGFrZSBvdmVyIHRoaXMgYW5kIGV4cGFuZCB0byBuZXcgc2l6ZVxyXG5cdFx0XHRcdHZhciBlbGVtZW50c1BlclBvaW50ID0gdGhpcy5kYXRhW2F0dHJpYnV0ZV0ubGVuZ3RoIC8gdGhpcy5udW1Qb2ludHM7XHJcblx0XHRcdFx0dmFyIFR5cGUgPSB0aGlzLmRhdGFbYXR0cmlidXRlXS5jb25zdHJ1Y3RvcjtcclxuXHRcdFx0XHR2YXIgZXhwYW5kZWQgPSBuZXcgVHlwZShlbGVtZW50c1BlclBvaW50ICogbmV3U2l6ZSk7XHJcblx0XHRcdFx0ZXhwYW5kZWQuc2V0KHRoaXMuZGF0YVthdHRyaWJ1dGVdLCAwKTtcclxuXHRcdFx0XHR0aGlzLmRhdGFbYXR0cmlidXRlXSA9IGV4cGFuZGVkO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoIXRoaXNBdHRyaWJ1dGVzLmluY2x1ZGVzKGF0dHJpYnV0ZSkgJiYgb3RoZXJBdHRyaWJ1dGVzLmluY2x1ZGVzKGF0dHJpYnV0ZSkpXHJcblx0XHRcdHtcclxuXHRcdFx0XHQvL2F0dHJpYnV0ZSBvbmx5IGluIHBvaW50cyB0byBiZSBhZGRlZDsgdGFrZSBvdmVyIG5ldyBwb2ludHMgYW5kIGV4cGFuZCB0byBuZXcgc2l6ZVxyXG5cdFx0XHRcdHZhciBlbGVtZW50c1BlclBvaW50ID0gcG9pbnRzLmRhdGFbYXR0cmlidXRlXS5sZW5ndGggLyBwb2ludHMubnVtUG9pbnRzO1xyXG5cdFx0XHRcdHZhciBUeXBlID0gcG9pbnRzLmRhdGFbYXR0cmlidXRlXS5jb25zdHJ1Y3RvcjtcclxuXHRcdFx0XHR2YXIgZXhwYW5kZWQgPSBuZXcgVHlwZShlbGVtZW50c1BlclBvaW50ICogbmV3U2l6ZSk7XHJcblx0XHRcdFx0ZXhwYW5kZWQuc2V0KHBvaW50cy5kYXRhW2F0dHJpYnV0ZV0sIGVsZW1lbnRzUGVyUG9pbnQgKiBjdXJyZW50U2l6ZSk7XHJcblx0XHRcdFx0dGhpcy5kYXRhW2F0dHJpYnV0ZV0gPSBleHBhbmRlZDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMubnVtUG9pbnRzID0gbmV3U2l6ZTtcclxuXHJcblx0XHR0aGlzLmJvdW5kaW5nQm94LnVuaW9uKHBvaW50cy5ib3VuZGluZ0JveCk7XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IHtQb2ludHN9O1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcclxuXHJcbmZ1bmN0aW9uIHBhcmFtVGhyZWVUb0dMKGdsLCBwKVxyXG57XHJcblx0dmFyIGV4dGVuc2lvbjtcclxuXHJcblx0aWYocCA9PT0gVEhSRUUuUmVwZWF0V3JhcHBpbmcpIHJldHVybiBnbC5SRVBFQVQ7XHJcblx0aWYocCA9PT0gVEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZykgcmV0dXJuIGdsLkNMQU1QX1RPX0VER0U7XHJcblx0aWYocCA9PT0gVEhSRUUuTWlycm9yZWRSZXBlYXRXcmFwcGluZykgcmV0dXJuIGdsLk1JUlJPUkVEX1JFUEVBVDtcclxuXHJcblx0aWYocCA9PT0gVEhSRUUuTmVhcmVzdEZpbHRlcikgcmV0dXJuIGdsLk5FQVJFU1Q7XHJcblx0aWYocCA9PT0gVEhSRUUuTmVhcmVzdE1pcE1hcE5lYXJlc3RGaWx0ZXIpIHJldHVybiBnbC5ORUFSRVNUX01JUE1BUF9ORUFSRVNUO1xyXG5cdGlmKHAgPT09IFRIUkVFLk5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXIpIHJldHVybiBnbC5ORUFSRVNUX01JUE1BUF9MSU5FQVI7XHJcblxyXG5cdGlmKHAgPT09IFRIUkVFLkxpbmVhckZpbHRlcikgcmV0dXJuIGdsLkxJTkVBUjtcclxuXHRpZihwID09PSBUSFJFRS5MaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyKSByZXR1cm4gZ2wuTElORUFSX01JUE1BUF9ORUFSRVNUO1xyXG5cdGlmKHAgPT09IFRIUkVFLkxpbmVhck1pcE1hcExpbmVhckZpbHRlcikgcmV0dXJuIGdsLkxJTkVBUl9NSVBNQVBfTElORUFSO1xyXG5cclxuXHRpZihwID09PSBUSFJFRS5VbnNpZ25lZEJ5dGVUeXBlKSByZXR1cm4gZ2wuVU5TSUdORURfQllURTtcclxuXHRpZihwID09PSBUSFJFRS5VbnNpZ25lZFNob3J0NDQ0NFR5cGUpIHJldHVybiBnbC5VTlNJR05FRF9TSE9SVF80XzRfNF80O1xyXG5cdGlmKHAgPT09IFRIUkVFLlVuc2lnbmVkU2hvcnQ1NTUxVHlwZSkgcmV0dXJuIGdsLlVOU0lHTkVEX1NIT1JUXzVfNV81XzE7XHJcblx0aWYocCA9PT0gVEhSRUUuVW5zaWduZWRTaG9ydDU2NVR5cGUpIHJldHVybiBnbC5VTlNJR05FRF9TSE9SVF81XzZfNTtcclxuXHJcblx0aWYocCA9PT0gVEhSRUUuQnl0ZVR5cGUpIHJldHVybiBnbC5CWVRFO1xyXG5cdGlmKHAgPT09IFRIUkVFLlNob3J0VHlwZSkgcmV0dXJuIGdsLlNIT1JUO1xyXG5cdGlmKHAgPT09IFRIUkVFLlVuc2lnbmVkU2hvcnRUeXBlKSByZXR1cm4gZ2wuVU5TSUdORURfU0hPUlQ7XHJcblx0aWYocCA9PT0gVEhSRUUuSW50VHlwZSkgcmV0dXJuIGdsLklOVDtcclxuXHRpZihwID09PSBUSFJFRS5VbnNpZ25lZEludFR5cGUpIHJldHVybiBnbC5VTlNJR05FRF9JTlQ7XHJcblx0aWYocCA9PT0gVEhSRUUuRmxvYXRUeXBlKSByZXR1cm4gZ2wuRkxPQVQ7XHJcblxyXG5cdGlmKHAgPT09IFRIUkVFLkhhbGZGbG9hdFR5cGUpXHJcblx0e1xyXG5cdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoXCJPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0XCIpO1xyXG5cdFx0aWYoZXh0ZW5zaW9uICE9PSBudWxsKSByZXR1cm4gZXh0ZW5zaW9uLkhBTEZfRkxPQVRfT0VTO1xyXG5cdH1cclxuXHJcblx0aWYocCA9PT0gVEhSRUUuQWxwaGFGb3JtYXQpIHJldHVybiBnbC5BTFBIQTtcclxuXHRpZihwID09PSBUSFJFRS5SR0JGb3JtYXQpIHJldHVybiBnbC5SR0I7XHJcblx0aWYocCA9PT0gVEhSRUUuUkdCQUZvcm1hdCkgcmV0dXJuIGdsLlJHQkE7XHJcblx0aWYocCA9PT0gVEhSRUUuTHVtaW5hbmNlRm9ybWF0KSByZXR1cm4gZ2wuTFVNSU5BTkNFO1xyXG5cdGlmKHAgPT09IFRIUkVFLkx1bWluYW5jZUFscGhhRm9ybWF0KSByZXR1cm4gZ2wuTFVNSU5BTkNFX0FMUEhBO1xyXG5cdGlmKHAgPT09IFRIUkVFLkRlcHRoRm9ybWF0KSByZXR1cm4gZ2wuREVQVEhfQ09NUE9ORU5UO1xyXG5cdGlmKHAgPT09IFRIUkVFLkRlcHRoU3RlbmNpbEZvcm1hdCkgcmV0dXJuIGdsLkRFUFRIX1NURU5DSUw7XHJcblxyXG5cdGlmKHAgPT09IFRIUkVFLkFkZEVxdWF0aW9uKSByZXR1cm4gZ2wuRlVOQ19BREQ7XHJcblx0aWYocCA9PT0gVEhSRUUuU3VidHJhY3RFcXVhdGlvbikgcmV0dXJuIGdsLkZVTkNfU1VCVFJBQ1Q7XHJcblx0aWYocCA9PT0gVEhSRUUuUmV2ZXJzZVN1YnRyYWN0RXF1YXRpb24pIHJldHVybiBnbC5GVU5DX1JFVkVSU0VfU1VCVFJBQ1Q7XHJcblxyXG5cdGlmKHAgPT09IFRIUkVFLlplcm9GYWN0b3IpIHJldHVybiBnbC5aRVJPO1xyXG5cdGlmKHAgPT09IFRIUkVFLk9uZUZhY3RvcikgcmV0dXJuIGdsLk9ORTtcclxuXHRpZihwID09PSBUSFJFRS5TcmNDb2xvckZhY3RvcikgcmV0dXJuIGdsLlNSQ19DT0xPUjtcclxuXHRpZihwID09PSBUSFJFRS5PbmVNaW51c1NyY0NvbG9yRmFjdG9yKSByZXR1cm4gZ2wuT05FX01JTlVTX1NSQ19DT0xPUjtcclxuXHRpZihwID09PSBUSFJFRS5TcmNBbHBoYUZhY3RvcikgcmV0dXJuIGdsLlNSQ19BTFBIQTtcclxuXHRpZihwID09PSBUSFJFRS5PbmVNaW51c1NyY0FscGhhRmFjdG9yKSByZXR1cm4gZ2wuT05FX01JTlVTX1NSQ19BTFBIQTtcclxuXHRpZihwID09PSBUSFJFRS5Ec3RBbHBoYUZhY3RvcikgcmV0dXJuIGdsLkRTVF9BTFBIQTtcclxuXHRpZihwID09PSBUSFJFRS5PbmVNaW51c0RzdEFscGhhRmFjdG9yKSByZXR1cm4gZ2wuT05FX01JTlVTX0RTVF9BTFBIQTtcclxuXHJcblx0aWYocCA9PT0gVEhSRUUuRHN0Q29sb3JGYWN0b3IpIHJldHVybiBnbC5EU1RfQ09MT1I7XHJcblx0aWYocCA9PT0gVEhSRUUuT25lTWludXNEc3RDb2xvckZhY3RvcikgcmV0dXJuIGdsLk9ORV9NSU5VU19EU1RfQ09MT1I7XHJcblx0aWYocCA9PT0gVEhSRUUuU3JjQWxwaGFTYXR1cmF0ZUZhY3RvcikgcmV0dXJuIGdsLlNSQ19BTFBIQV9TQVRVUkFURTtcclxuXHJcblx0aWYocCA9PT0gVEhSRUUuUkdCX1MzVENfRFhUMV9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9TM1RDX0RYVDFfRm9ybWF0IHx8IHAgPT09IFRIUkVFLlJHQkFfUzNUQ19EWFQzX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQpXHJcblx0e1xyXG5cdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1wiKTtcclxuXHJcblx0XHRpZihleHRlbnNpb24gIT09IG51bGwpXHJcblx0XHR7XHJcblx0XHRcdGlmKHAgPT09IFRIUkVFLlJHQl9TM1RDX0RYVDFfRm9ybWF0KSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQ7XHJcblx0XHRcdGlmKHAgPT09IFRIUkVFLlJHQkFfUzNUQ19EWFQxX0Zvcm1hdCkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVDtcclxuXHRcdFx0aWYocCA9PT0gVEhSRUUuUkdCQV9TM1RDX0RYVDNfRm9ybWF0KSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUO1xyXG5cdFx0XHRpZihwID09PSBUSFJFRS5SR0JBX1MzVENfRFhUNV9Gb3JtYXQpIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQ7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZihwID09PSBUSFJFRS5SR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCB8fCBwID09PSBUSFJFRS5SR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCB8fCBwID09PSBUSFJFRS5SR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQgfHwgcCA9PT0gVEhSRUUuUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0KVxyXG5cdHtcclxuXHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KFwiV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXCIpO1xyXG5cclxuXHRcdGlmKGV4dGVuc2lvbiAhPT0gbnVsbClcclxuXHRcdHtcclxuXHRcdFx0aWYocCA9PT0gVEhSRUUuUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQpIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRztcclxuXHRcdFx0aWYocCA9PT0gVEhSRUUuUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQpIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRztcclxuXHRcdFx0aWYocCA9PT0gVEhSRUUuUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0KSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HO1xyXG5cdFx0XHRpZihwID09PSBUSFJFRS5SR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQpIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUc7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRpZihwID09PSBUSFJFRS5SR0JfRVRDMV9Gb3JtYXQpXHJcblx0e1xyXG5cdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoXCJXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfZXRjMVwiKTtcclxuXHRcdGlmKGV4dGVuc2lvbiAhPT0gbnVsbCkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMO1xyXG5cdH1cclxuXHJcblx0aWYocCA9PT0gVEhSRUUuTWluRXF1YXRpb24gfHwgcCA9PT0gVEhSRUUuTWF4RXF1YXRpb24pXHJcblx0e1xyXG5cdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoXCJFWFRfYmxlbmRfbWlubWF4XCIpO1xyXG5cclxuXHRcdGlmKGV4dGVuc2lvbiAhPT0gbnVsbClcclxuXHRcdHtcclxuXHRcdFx0aWYocCA9PT0gVEhSRUUuTWluRXF1YXRpb24pIHJldHVybiBleHRlbnNpb24uTUlOX0VYVDtcclxuXHRcdFx0aWYocCA9PT0gVEhSRUUuTWF4RXF1YXRpb24pIHJldHVybiBleHRlbnNpb24uTUFYX0VYVDtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGlmKHAgPT09IFVuc2lnbmVkSW50MjQ4VHlwZSlcclxuXHR7XHJcblx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldChcIldFQkdMX2RlcHRoX3RleHR1cmVcIik7XHJcblx0XHRpZihleHRlbnNpb24gIT09IG51bGwpIHJldHVybiBleHRlbnNpb24uVU5TSUdORURfSU5UXzI0XzhfV0VCR0w7XHJcblx0fVxyXG5cclxuXHRyZXR1cm4gMDtcclxufVxyXG5cclxuY2xhc3MgV2ViR0xUZXh0dXJlXHJcbntcclxuXHRjb25zdHJ1Y3RvcihnbCwgdGV4dHVyZSlcclxuXHR7XHJcblx0XHR0aGlzLmdsID0gZ2w7XHJcblxyXG5cdFx0dGhpcy50ZXh0dXJlID0gdGV4dHVyZTtcclxuXHRcdHRoaXMuaWQgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XHJcblxyXG5cdFx0dGhpcy50YXJnZXQgPSBnbC5URVhUVVJFXzJEO1xyXG5cdFx0dGhpcy52ZXJzaW9uID0gLTE7XHJcblxyXG5cdFx0dGhpcy51cGRhdGUodGV4dHVyZSk7XHJcblx0fVxyXG5cclxuXHR1cGRhdGUoKVxyXG5cdHtcclxuXHRcdGlmKCF0aGlzLnRleHR1cmUuaW1hZ2UpXHJcblx0XHR7XHJcblx0XHRcdHRoaXMudmVyc2lvbiA9IHRoaXMudGV4dHVyZS52ZXJzaW9uO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIGdsID0gdGhpcy5nbDtcclxuXHRcdHZhciB0ZXh0dXJlID0gdGhpcy50ZXh0dXJlO1xyXG5cclxuXHRcdGlmKHRoaXMudmVyc2lvbiA9PT0gdGV4dHVyZS52ZXJzaW9uKVxyXG5cdFx0e1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy50YXJnZXQgPSBnbC5URVhUVVJFXzJEO1xyXG5cclxuXHRcdGdsLmJpbmRUZXh0dXJlKHRoaXMudGFyZ2V0LCB0aGlzLmlkKTtcclxuXHJcblx0XHR2YXIgbGV2ZWwgPSAwO1xyXG5cdFx0dmFyIGludGVybmFsRm9ybWF0ID0gcGFyYW1UaHJlZVRvR0woZ2wsIHRleHR1cmUuZm9ybWF0KTtcclxuXHRcdHZhciB3aWR0aCA9IHRleHR1cmUuaW1hZ2Uud2lkdGg7XHJcblx0XHR2YXIgaGVpZ2h0ID0gdGV4dHVyZS5pbWFnZS5oZWlnaHQ7XHJcblx0XHR2YXIgYm9yZGVyID0gMDtcclxuXHRcdHZhciBzcmNGb3JtYXQgPSBpbnRlcm5hbEZvcm1hdDtcclxuXHRcdHZhciBzcmNUeXBlID0gcGFyYW1UaHJlZVRvR0woZ2wsIHRleHR1cmUudHlwZSk7XHJcblx0XHR2YXIgZGF0YTtcclxuXHJcblx0XHRnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCB0ZXh0dXJlLmZsaXBZKTtcclxuXHRcdGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgdGV4dHVyZS5wcmVtdWx0aXBseUFscGhhKTtcclxuXHRcdGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19BTElHTk1FTlQsIHRleHR1cmUudW5wYWNrQWxpZ25tZW50KTtcclxuXHJcblx0XHRpZih0ZXh0dXJlIGluc3RhbmNlb2YgVEhSRUUuRGF0YVRleHR1cmUpXHJcblx0XHR7XHJcblx0XHRcdGRhdGEgPSB0ZXh0dXJlLmltYWdlLmRhdGE7XHJcblxyXG5cdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKHRoaXMudGFyZ2V0LCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XHJcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkodGhpcy50YXJnZXQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcclxuXHJcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkodGhpcy50YXJnZXQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgcGFyYW1UaHJlZVRvR0woZ2wsIHRleHR1cmUubWFnRmlsdGVyKSk7XHJcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkodGhpcy50YXJnZXQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgcGFyYW1UaHJlZVRvR0woZ2wsIHRleHR1cmUubWluRmlsdGVyKSk7XHJcblxyXG5cdFx0XHRnbC50ZXhJbWFnZTJEKHRoaXMudGFyZ2V0LCBsZXZlbCwgaW50ZXJuYWxGb3JtYXQsIHdpZHRoLCBoZWlnaHQsIGJvcmRlciwgc3JjRm9ybWF0LCBzcmNUeXBlLCBkYXRhKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYodGV4dHVyZSBpbnN0YW5jZW9mIFRIUkVFLkNhbnZhc1RleHR1cmUpXHJcblx0XHR7XHJcblx0XHRcdGRhdGEgPSB0ZXh0dXJlLmltYWdlO1xyXG5cclxuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaSh0aGlzLnRhcmdldCwgZ2wuVEVYVFVSRV9XUkFQX1MsIHBhcmFtVGhyZWVUb0dMKGdsLCB0ZXh0dXJlLndyYXBTKSk7XHJcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkodGhpcy50YXJnZXQsIGdsLlRFWFRVUkVfV1JBUF9ULCBwYXJhbVRocmVlVG9HTChnbCwgdGV4dHVyZS53cmFwVCkpO1xyXG5cclxuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaSh0aGlzLnRhcmdldCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBwYXJhbVRocmVlVG9HTChnbCwgdGV4dHVyZS5tYWdGaWx0ZXIpKTtcclxuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaSh0aGlzLnRhcmdldCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBwYXJhbVRocmVlVG9HTChnbCwgdGV4dHVyZS5taW5GaWx0ZXIpKTtcclxuXHJcblx0XHRcdGdsLnRleEltYWdlMkQodGhpcy50YXJnZXQsIGxldmVsLCBpbnRlcm5hbEZvcm1hdCwgaW50ZXJuYWxGb3JtYXQsIHNyY1R5cGUsIGRhdGEpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGdsLmJpbmRUZXh0dXJlKHRoaXMudGFyZ2V0LCBudWxsKTtcclxuXHJcblx0XHR0aGlzLnZlcnNpb24gPSB0ZXh0dXJlLnZlcnNpb247XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IHtXZWJHTFRleHR1cmV9OyIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xyXG5cclxuaW1wb3J0IHsgV2ViR0xUZXh0dXJlIH0gZnJvbSBcIi4vV2ViR0xUZXh0dXJlLmpzXCI7XHJcbmltcG9ydCB7IEF0dHJpYnV0ZUxvY2F0aW9ucyB9IGZyb20gXCIuL1BvdHJlZS5qc1wiO1xyXG5cclxuY2xhc3MgU2hhZGVyIHtcclxuXHRjb25zdHJ1Y3RvcihnbCwgbmFtZSwgdnNTb3VyY2UsIGZzU291cmNlKSB7XHJcblx0XHR0aGlzLmdsID0gZ2w7XHJcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdFx0dGhpcy52c1NvdXJjZSA9IHZzU291cmNlO1xyXG5cdFx0dGhpcy5mc1NvdXJjZSA9IGZzU291cmNlO1xyXG5cclxuXHRcdHRoaXMuY2FjaGUgPSBuZXcgTWFwKCk7XHJcblxyXG5cdFx0dGhpcy52cyA9IG51bGw7XHJcblx0XHR0aGlzLmZzID0gbnVsbDtcclxuXHRcdHRoaXMucHJvZ3JhbSA9IG51bGw7XHJcblxyXG5cdFx0dGhpcy51bmlmb3JtTG9jYXRpb25zID0ge307XHJcblx0XHR0aGlzLmF0dHJpYnV0ZUxvY2F0aW9ucyA9IHt9O1xyXG5cclxuXHRcdHRoaXMudXBkYXRlKHZzU291cmNlLCBmc1NvdXJjZSk7XHJcblx0fVxyXG5cclxuXHR1cGRhdGUodnNTb3VyY2UsIGZzU291cmNlKSB7XHJcblx0XHR0aGlzLnZzU291cmNlID0gdnNTb3VyY2U7XHJcblx0XHR0aGlzLmZzU291cmNlID0gZnNTb3VyY2U7XHJcblxyXG5cdFx0dGhpcy5saW5rUHJvZ3JhbSgpO1xyXG5cdH1cclxuXHJcblx0Y29tcGlsZVNoYWRlcihzaGFkZXIsIHNvdXJjZSkge1xyXG5cdFx0dmFyIGdsID0gdGhpcy5nbDtcclxuXHJcblx0XHRnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzb3VyY2UpO1xyXG5cclxuXHRcdGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcclxuXHJcblx0XHR2YXIgc3VjY2VzcyA9IGdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKTtcclxuXHRcdGlmICghc3VjY2Vzcykge1xyXG5cdFx0XHR2YXIgaW5mbyA9IGdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKTtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiUG90cmVlOiBDb3VsZCBub3QgY29tcGlsZSBzaGFkZXIgXCIgKyB0aGlzLm5hbWUgKyBcIiwgXCIgKyBpbmZvKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGxpbmtQcm9ncmFtKCkge1xyXG5cclxuXHRcdHZhciBnbCA9IHRoaXMuZ2w7XHJcblxyXG5cdFx0dGhpcy51bmlmb3JtTG9jYXRpb25zID0ge307XHJcblx0XHR0aGlzLmF0dHJpYnV0ZUxvY2F0aW9ucyA9IHt9O1xyXG5cclxuXHRcdGdsLnVzZVByb2dyYW0obnVsbCk7XHJcblxyXG5cdFx0dmFyIGNhY2hlZCA9IHRoaXMuY2FjaGUuZ2V0KGAke3RoaXMudnNTb3VyY2V9LCAke3RoaXMuZnNTb3VyY2V9YCk7XHJcblx0XHRpZiAoY2FjaGVkKSB7XHJcblx0XHRcdHRoaXMucHJvZ3JhbSA9IGNhY2hlZC5wcm9ncmFtO1xyXG5cdFx0XHR0aGlzLnZzID0gY2FjaGVkLnZzO1xyXG5cdFx0XHR0aGlzLmZzID0gY2FjaGVkLmZzO1xyXG5cdFx0XHR0aGlzLmF0dHJpYnV0ZUxvY2F0aW9ucyA9IGNhY2hlZC5hdHRyaWJ1dGVMb2NhdGlvbnM7XHJcblx0XHRcdHRoaXMudW5pZm9ybUxvY2F0aW9ucyA9IGNhY2hlZC51bmlmb3JtTG9jYXRpb25zO1xyXG5cclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdHRoaXMudnMgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuVkVSVEVYX1NIQURFUik7XHJcblx0XHRcdHRoaXMuZnMgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKTtcclxuXHRcdFx0dGhpcy5wcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgbmFtZSBvZiBPYmplY3Qua2V5cyhBdHRyaWJ1dGVMb2NhdGlvbnMpKSB7XHJcblx0XHRcdFx0dmFyIGxvY2F0aW9uID0gQXR0cmlidXRlTG9jYXRpb25zW25hbWVdO1xyXG5cdFx0XHRcdGdsLmJpbmRBdHRyaWJMb2NhdGlvbih0aGlzLnByb2dyYW0sIGxvY2F0aW9uLCBuYW1lKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5jb21waWxlU2hhZGVyKHRoaXMudnMsIHRoaXMudnNTb3VyY2UpO1xyXG5cdFx0XHR0aGlzLmNvbXBpbGVTaGFkZXIodGhpcy5mcywgdGhpcy5mc1NvdXJjZSk7XHJcblxyXG5cdFx0XHR2YXIgcHJvZ3JhbSA9IHRoaXMucHJvZ3JhbTtcclxuXHJcblx0XHRcdGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCB0aGlzLnZzKTtcclxuXHRcdFx0Z2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHRoaXMuZnMpO1xyXG5cclxuXHRcdFx0Z2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7XHJcblxyXG5cdFx0XHRnbC5kZXRhY2hTaGFkZXIocHJvZ3JhbSwgdGhpcy52cyk7XHJcblx0XHRcdGdsLmRldGFjaFNoYWRlcihwcm9ncmFtLCB0aGlzLmZzKTtcclxuXHJcblx0XHRcdHZhciBzdWNjZXNzID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUyk7XHJcblx0XHRcdGlmICghc3VjY2Vzcykge1xyXG5cdFx0XHRcdHZhciBpbmZvID0gZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSk7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiUG90cmVlOiBDb3VsZCBub3QgbGluayBwcm9ncmFtIFwiICsgdGhpcy5uYW1lICsgXCIsIFwiICsgaW5mbyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vYXR0cmlidXRlIGxvY2F0aW9uc1xyXG5cdFx0XHR2YXIgbnVtQXR0cmlidXRlcyA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuQUNUSVZFX0FUVFJJQlVURVMpO1xyXG5cclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBudW1BdHRyaWJ1dGVzOyBpKyspIHtcclxuXHRcdFx0XHR2YXIgYXR0cmlidXRlID0gZ2wuZ2V0QWN0aXZlQXR0cmliKHByb2dyYW0sIGkpO1xyXG5cclxuXHRcdFx0XHR2YXIgbG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBhdHRyaWJ1dGUubmFtZSk7XHJcblxyXG5cdFx0XHRcdHRoaXMuYXR0cmlidXRlTG9jYXRpb25zW2F0dHJpYnV0ZS5uYW1lXSA9IGxvY2F0aW9uO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvL3VuaWZvcm0gbG9jYXRpb25zXHJcblx0XHRcdHZhciBudW1Vbmlmb3JtcyA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuQUNUSVZFX1VOSUZPUk1TKTtcclxuXHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbnVtVW5pZm9ybXM7IGkrKykge1xyXG5cdFx0XHRcdHZhciB1bmlmb3JtID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybShwcm9ncmFtLCBpKTtcclxuXHJcblx0XHRcdFx0dmFyIGxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIHVuaWZvcm0ubmFtZSk7XHJcblxyXG5cdFx0XHRcdHRoaXMudW5pZm9ybUxvY2F0aW9uc1t1bmlmb3JtLm5hbWVdID0gbG9jYXRpb247XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHZhciBjYWNoZWQgPSB7XHJcblx0XHRcdFx0cHJvZ3JhbTogdGhpcy5wcm9ncmFtLFxyXG5cdFx0XHRcdHZzOiB0aGlzLnZzLFxyXG5cdFx0XHRcdGZzOiB0aGlzLmZzLFxyXG5cdFx0XHRcdGF0dHJpYnV0ZUxvY2F0aW9uczogdGhpcy5hdHRyaWJ1dGVMb2NhdGlvbnMsXHJcblx0XHRcdFx0dW5pZm9ybUxvY2F0aW9uczogdGhpcy51bmlmb3JtTG9jYXRpb25zXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHR0aGlzLmNhY2hlLnNldChgJHt0aGlzLnZzU291cmNlfSwgJHt0aGlzLmZzU291cmNlfWAsIGNhY2hlZCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzZXRVbmlmb3JtTWF0cml4NChuYW1lLCB2YWx1ZSkge1xyXG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xyXG5cdFx0Y29uc3QgbG9jYXRpb24gPSB0aGlzLnVuaWZvcm1Mb2NhdGlvbnNbbmFtZV07XHJcblxyXG5cdFx0aWYgKGxvY2F0aW9uID09IG51bGwpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGxldCB0bXAgPSBuZXcgRmxvYXQzMkFycmF5KHZhbHVlLmVsZW1lbnRzKTtcclxuXHRcdGdsLnVuaWZvcm1NYXRyaXg0ZnYobG9jYXRpb24sIGZhbHNlLCB0bXApO1xyXG5cdH1cclxuXHJcblx0c2V0VW5pZm9ybU1hdHJpeDR2KG5hbWUsIHZhbHVlcykge1xyXG5cdFx0Y29uc3QgZ2wgPSB0aGlzLmdsO1xyXG5cdFx0Y29uc3QgbG9jYXRpb24gPSB0aGlzLnVuaWZvcm1Mb2NhdGlvbnNbYCR7bmFtZX1bMF1gXTtcclxuXHJcblx0XHRpZiAobG9jYXRpb24gPT0gbnVsbCkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3QgZWxlbWVudHMgPSB2YWx1ZXMuZm9yRWFjaChtYXRyaXg0ID0+IGVsZW1lbnRzLnB1c2goLi4ubWF0cml4NC5lbGVtZW50cykpO1xyXG5cdFx0Y29uc3QgdG1wID0gbmV3IEZsb2F0MzJBcnJheShlbGVtZW50cyk7XHJcblxyXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDRmdihsb2NhdGlvbiwgZmFsc2UsIHRtcCk7XHJcblx0fVxyXG5cclxuXHRzZXRVbmlmb3JtMWYobmFtZSwgdmFsdWUpIHtcclxuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcclxuXHRcdGNvbnN0IGxvY2F0aW9uID0gdGhpcy51bmlmb3JtTG9jYXRpb25zW25hbWVdO1xyXG5cclxuXHRcdGlmIChsb2NhdGlvbiA9PSBudWxsKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRnbC51bmlmb3JtMWYobG9jYXRpb24sIHZhbHVlKTtcclxuXHR9XHJcblxyXG5cdHNldFVuaWZvcm0xZnYobmFtZSwgdmFsdWVzKSB7XHJcblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XHJcblx0XHRjb25zdCBsb2NhdGlvbiA9IHRoaXMudW5pZm9ybUxvY2F0aW9uc1tgJHtuYW1lfVswXWBdO1xyXG5cclxuXHRcdGlmIChsb2NhdGlvbiA9PSBudWxsKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRnbC51bmlmb3JtMWZ2KGxvY2F0aW9uLCB2YWx1ZXMpO1xyXG5cdH1cclxuXHJcblx0c2V0VW5pZm9ybUJvb2xlYW4obmFtZSwgdmFsdWUpIHtcclxuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcclxuXHRcdGNvbnN0IGxvY2F0aW9uID0gdGhpcy51bmlmb3JtTG9jYXRpb25zW25hbWVdO1xyXG5cclxuXHRcdGlmIChsb2NhdGlvbiA9PSBudWxsKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRnbC51bmlmb3JtMWkobG9jYXRpb24sIHZhbHVlKTtcclxuXHR9XHJcblxyXG5cdHNldFVuaWZvcm1UZXh0dXJlKG5hbWUsIHZhbHVlKSB7XHJcblx0XHRjb25zdCBnbCA9IHRoaXMuZ2w7XHJcblx0XHRjb25zdCBsb2NhdGlvbiA9IHRoaXMudW5pZm9ybUxvY2F0aW9uc1tuYW1lXTtcclxuXHJcblx0XHRpZiAobG9jYXRpb24gPT0gbnVsbCkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Z2wudW5pZm9ybTFpKGxvY2F0aW9uLCB2YWx1ZSk7XHJcblx0fVxyXG5cclxuXHRzZXRVbmlmb3JtMmYobmFtZSwgdmFsdWUpIHtcclxuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcclxuXHRcdGNvbnN0IGxvY2F0aW9uID0gdGhpcy51bmlmb3JtTG9jYXRpb25zW25hbWVdO1xyXG5cclxuXHRcdGlmIChsb2NhdGlvbiA9PSBudWxsKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRnbC51bmlmb3JtMmYobG9jYXRpb24sIHZhbHVlWzBdLCB2YWx1ZVsxXSk7XHJcblx0fVxyXG5cclxuXHRzZXRVbmlmb3JtM2YobmFtZSwgdmFsdWUpIHtcclxuXHRcdGNvbnN0IGdsID0gdGhpcy5nbDtcclxuXHRcdGNvbnN0IGxvY2F0aW9uID0gdGhpcy51bmlmb3JtTG9jYXRpb25zW25hbWVdO1xyXG5cclxuXHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRIUkVFLkNvbG9yKSB7XHJcblx0XHRcdHZhbHVlID0gdmFsdWUudG9BcnJheSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChsb2NhdGlvbiA9PSBudWxsKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRnbC51bmlmb3JtM2YobG9jYXRpb24sIHZhbHVlWzBdLCB2YWx1ZVsxXSwgdmFsdWVbMl0pO1xyXG5cdH1cclxuXHJcblx0c2V0VW5pZm9ybShuYW1lLCB2YWx1ZSkge1xyXG5cclxuXHRcdGlmICh2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gVEhSRUUuTWF0cml4NCkge1xyXG5cdFx0XHR0aGlzLnNldFVuaWZvcm1NYXRyaXg0KG5hbWUsIHZhbHVlKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHZhbHVlLmNvbnN0cnVjdG9yID09PSBUSFJFRS5Db2xvcikge1xyXG5cdFx0XHR0aGlzLnNldFVuaWZvcm0zZihuYW1lLCB2YWx1ZSk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuXHRcdFx0dGhpcy5zZXRVbmlmb3JtMWYobmFtZSwgdmFsdWUpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcImJvb2xlYW5cIikge1xyXG5cdFx0XHR0aGlzLnNldFVuaWZvcm1Cb29sZWFuKG5hbWUsIHZhbHVlKTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgV2ViR0xUZXh0dXJlKSB7XHJcblx0XHRcdHRoaXMuc2V0VW5pZm9ybVRleHR1cmUobmFtZSwgdmFsdWUpO1xyXG5cdFx0fVxyXG5cdFx0ZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xyXG5cdFx0XHRpZiAodmFsdWUubGVuZ3RoID09PSAyKSB7XHJcblx0XHRcdFx0dGhpcy5zZXRVbmlmb3JtMmYobmFtZSwgdmFsdWUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMykge1xyXG5cdFx0XHRcdHRoaXMuc2V0VW5pZm9ybTNmKG5hbWUsIHZhbHVlKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0ZWxzZSB7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoXCJQb3RyZWU6IFVuaGFuZGxlZCB1bmlmb3JtIHR5cGU6IFwiLCBuYW1lLCB2YWx1ZSk7XHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHJcblx0c2V0VW5pZm9ybTFpKG5hbWUsIHZhbHVlKSB7XHJcblx0XHR2YXIgZ2wgPSB0aGlzLmdsO1xyXG5cdFx0dmFyIGxvY2F0aW9uID0gdGhpcy51bmlmb3JtTG9jYXRpb25zW25hbWVdO1xyXG5cclxuXHRcdGlmIChsb2NhdGlvbiA9PSBudWxsKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRnbC51bmlmb3JtMWkobG9jYXRpb24sIHZhbHVlKTtcclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQgeyBTaGFkZXIgfTsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmNsYXNzIFdlYkdMQnVmZmVyXHJcbntcclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdFx0dGhpcy5udW1FbGVtZW50cyA9IDA7XHJcblx0XHR0aGlzLnZhbyA9IG51bGw7XHJcblx0XHR0aGlzLnZib3MgPSBuZXcgTWFwKCk7XHJcblx0fVxyXG59O1xyXG5cclxuZXhwb3J0IHtXZWJHTEJ1ZmZlcn07IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5pbXBvcnQgeyBIZWxwZXJVdGlscyB9IGZyb20gXCIuLi91dGlscy9IZWxwZXJVdGlscy5qc1wiO1xyXG5pbXBvcnQgeyB1cGRhdGVQb2ludENsb3VkcyB9IGZyb20gXCIuLi9Qb3RyZWUuanNcIjtcclxuaW1wb3J0IHsgUG9pbnRDbG91ZFRyZWUgfSBmcm9tIFwiLi4vcG9pbnRjbG91ZC9Qb2ludENsb3VkVHJlZS5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIFBvdHJlZSBvYmplY3QgaXMgYSB3cmFwcGVyIHRvIHVzZSBQb3RyZWUgYWxvbmdzaWRlIG90aGVyIFRIUkVFIGJhc2VkIGZyYW1ld29ya3MuXHJcbiAqXHJcbiAqIFRoZSBvYmplY3QgY2FuIGJlIHVzZWQgYSBub3JtYWwgT2JqZWN0M0QuXHJcbiAqXHJcbiAqIEl0IGlzIGJhc2VkIG9uIFRIUkVFLk1lc2ggYW5kIGF1dG9tYXRpY2FsbHkgdXBkYXRlcyB0aGUgcG9pbnQgY2xvdWQgYmFzZWQgb24gdmlzaWJpbGl0eS5cclxuICpcclxuICogQWxzbyB0YWtlcyBjYXJlIG9mIGdlb21ldHJ5IGFqdXN0bWVudHMgdG8gYWxsb3cgdGhlIHBvaW50IGNsb3VkcyB0byBiZSBmcnVzdHVtIGN1bGxlZC5cclxuICovXHJcbmNsYXNzIEJhc2ljR3JvdXAgZXh0ZW5kcyBUSFJFRS5NZXNoIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpLCBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoeyBvcGFjaXR5OiAwLjAsIHdpcmVmcmFtZTogZmFsc2UsIHRyYW5zcGFyZW50OiB0cnVlIH0pKTtcclxuXHJcbiAgICB0aGlzLnJvdGF0aW9uLnNldCgtTWF0aC5QSSAvIDIsIDAsIDApO1xyXG5cclxuICAgIHRoaXMuZnJ1c3R1bUN1bGxlZCA9IHRydWU7XHJcbiAgICB0aGlzLnBvaW50Y2xvdWRzID0gW107XHJcblxyXG4gICAgdGhpcy5ub2RlU2l6ZSA9IDMwO1xyXG4gICAgdGhpcy5wb2ludEJ1ZGdldCA9IDFlMTA7IC8vVE9ETyA8Tk9UIFVTRUQ+XHJcbiAgICB0aGlzLm5vZGVMb2FkUmF0ZSA9IDI7IC8vVE9ETyA8Tk9UIFVTRUQ+XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFbXB0eSByYXljYXN0IG1ldGhvZCB0byBhdm9pZCBnZXR0aW5nIHZhbGlkIGNvbGxpc2lvbiBkZXRlY3Rpb24gd2l0aCB0aGUgYm94IGdlb21ldHJ5IGF0dGFjaGVkLlxyXG4gICAqL1xyXG4gIHJheWNhc3QocmF5Y2FzdGVyLCBpbnRlcnNlY3RzKSB7IH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hhbmdlcyB0aGUgcG9pbnQgYnVkZ2V0IHRvIGJlIHVzZWQgYnkgcG90cmVlLlxyXG4gICAqL1xyXG4gIHNldFBvaW50QnVkZ2V0KGJ1ZGdldCkge1xyXG4gICAgdGhpcy5wb2ludEJ1ZGdldCA9IGJ1ZGdldDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVzZWQgdG8gdXBkYXRlIHRoZSBwb2ludCBjbG91ZCB2aXNpYmlsaXR5IHJlbGF0aXZlIHRvIGEgY2FtZXJhLlxyXG4gICAqXHJcbiAgICogQ2FsbGVkIGF1dG9tYXRpY2FsbHkgYmVmb3JlIHJlbmRlcmluZy5cclxuICAgKi9cclxuICBvbkJlZm9yZVJlbmRlcihyZW5kZXJlciwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBvaW50Y2xvdWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHRoaXMucG9pbnRjbG91ZHNbaV0ubWluaW11bU5vZGVQaXhlbFNpemUgPSB0aGlzLm5vZGVTaXplO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVBvaW50Q2xvdWRzKHRoaXMucG9pbnRjbG91ZHMsIGNhbWVyYSwgcmVuZGVyZXIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVjYWxjdWxhdGUgdGhlIGJveCBnZW9tZXRyeSBhdHRhY2hlZCB0byB0aGlzIGdyb3VwLlxyXG4gICAqXHJcbiAgICogVGhlIGdlb21ldHJ5IGl0cyBub3QgdmlzaWJsZSBhbmQgaXRzIG9ubHkgdXNlZCBmb3IgZnJ1c3R1bSBjdWxsaW5nLlxyXG4gICAqL1xyXG4gIHJlY2FsY3VsYXRlQm94R2VvbWV0cnkoKSB7XHJcbiAgICB2YXIgYm94ID0gdGhpcy5nZXRCb3VuZGluZ0JveCgpO1xyXG5cclxuICAgIHZhciBzaXplID0gYm94LmdldFNpemUobmV3IFRIUkVFLlZlY3RvcjMoKSk7XHJcbiAgICB2YXIgY2VudGVyID0gYm94LmdldENlbnRlcihuZXcgVEhSRUUuVmVjdG9yMygpKTtcclxuXHJcbiAgICB2YXIgbWF0cml4ID0gbmV3IFRIUkVFLk1hdHJpeDQoKTtcclxuICAgIG1hdHJpeC5tYWtlVHJhbnNsYXRpb24oY2VudGVyLngsIC1jZW50ZXIueiwgY2VudGVyLnkpO1xyXG5cclxuICAgIHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5Cb3hCdWZmZXJHZW9tZXRyeShzaXplLngsIHNpemUueiwgc2l6ZS55KTtcclxuICAgIGdlb21ldHJ5LmFwcGx5TWF0cml4NChtYXRyaXgpO1xyXG5cclxuICAgIHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZCBhbiBvYmplY3QgYXMgY2hpbGRyZW4gb2YgdGhpcyBzY2VuZS5cclxuICAgKlxyXG4gICAqIFBvaW50IGNsb3VkIG9iamVjdHMgYXJlIGRldGVjdGVkIGFuZCB1c2VkIHRvIHJlY2FsY3VsYXRlIHRoZSBnZW9tZXRyeSBib3ggdXNlZCBmb3IgZnJ1c3R1bSBjdWxsaW5nLlxyXG4gICAqL1xyXG4gIGFkZChvYmplY3QpIHtcclxuICAgIFRIUkVFLk9iamVjdDNELnByb3RvdHlwZS5hZGQuY2FsbCh0aGlzLCBvYmplY3QpO1xyXG5cclxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBQb2ludENsb3VkVHJlZSkge1xyXG4gICAgICBvYmplY3Quc2hvd0JvdW5kaW5nQm94ID0gZmFsc2U7XHJcbiAgICAgIG9iamVjdC5nZW5lcmF0ZURFTSA9IGZhbHNlO1xyXG4gICAgICB0aGlzLnBvaW50Y2xvdWRzLnB1c2gob2JqZWN0KTtcclxuICAgICAgdGhpcy5yZWNhbGN1bGF0ZUJveEdlb21ldHJ5KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgb2JqZWN0IGZyb20gZ3JvdXAuXHJcbiAgICpcclxuICAgKiBQb2ludCBjbG91ZCBvYmplY3RzIGFyZSBkZXRlY3RlZCBhbmQgdXNlZCB0byByZWNhbGN1bGF0ZSB0aGUgZ2VvbWV0cnkgYm94IHVzZWQgZm9yIGZydXN0dW0gY3VsbGluZ1xyXG4gICAqL1xyXG4gIHJlbW92ZShvYmplY3QpIHtcclxuICAgIFRIUkVFLk9iamVjdDNELnByb3RvdHlwZS5yZW1vdmUuY2FsbCh0aGlzLCBvYmplY3QpO1xyXG5cclxuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBQb2ludENsb3VkVHJlZSkge1xyXG4gICAgICB2YXIgaW5kZXggPSB0aGlzLnBvaW50Y2xvdWRzLmluZGV4T2Yob2JqZWN0KTtcclxuICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgIHRoaXMucG9pbnRjbG91ZHMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB0aGlzLnJlY2FsY3VsYXRlQm94R2VvbWV0cnkoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBwb2ludCBjbG91ZCBib3VkaW5nIGJveC5cclxuICAgKi9cclxuICBnZXRCb3VuZGluZ0JveCgpIHtcclxuICAgIHZhciBib3ggPSBuZXcgVEhSRUUuQm94MygpO1xyXG5cclxuICAgIHRoaXMudXBkYXRlTWF0cml4V29ybGQodHJ1ZSk7XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnBvaW50Y2xvdWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciBwb2ludGNsb3VkID0gdGhpcy5wb2ludGNsb3Vkc1tpXTtcclxuICAgICAgcG9pbnRjbG91ZC51cGRhdGVNYXRyaXhXb3JsZCh0cnVlKTtcclxuICAgICAgdmFyIHBvaW50Y2xvdWRCb3ggPSBwb2ludGNsb3VkLnBjb0dlb21ldHJ5LnRpZ2h0Qm91bmRpbmdCb3ggPyBwb2ludGNsb3VkLnBjb0dlb21ldHJ5LnRpZ2h0Qm91bmRpbmdCb3ggOiBwb2ludGNsb3VkLmJvdW5kaW5nQm94O1xyXG4gICAgICB2YXIgYm94V29ybGQgPSBIZWxwZXJVdGlscy5jb21wdXRlVHJhbnNmb3JtZWRCb3VuZGluZ0JveChwb2ludGNsb3VkQm94LCBwb2ludGNsb3VkLm1hdHJpeFdvcmxkKTtcclxuICAgICAgYm94LnVuaW9uKGJveFdvcmxkKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYm94O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRXN0aW1hdGUgdGhlIHBvaW50IGNsb3VkIGhlaWdodCBhdCBhIGdpdmVuIHBvc2l0aW9uLlxyXG4gICAqL1xyXG4gIGVzdGltYXRlSGVpZ2h0QXQocG9zaXRpb24pIHtcclxuICAgIHZhciBoZWlnaHQgPSBudWxsO1xyXG4gICAgdmFyIGZyb21TcGFjaW5nID0gSW5maW5pdHk7XHJcblxyXG4gICAgZm9yICh2YXIgcG9pbnRjbG91ZCBvZiB0aGlzLnBvaW50Y2xvdWRzKSB7XHJcbiAgICAgIGlmIChwb2ludGNsb3VkLnJvb3QuZ2VvbWV0cnlOb2RlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHBIZWlnaHQgPSBudWxsO1xyXG4gICAgICB2YXIgcEZyb21TcGFjaW5nID0gSW5maW5pdHk7XHJcblxyXG4gICAgICB2YXIgbHBvcyA9IHBvc2l0aW9uLmNsb25lKCkuc3ViKHBvaW50Y2xvdWQucG9zaXRpb24pO1xyXG4gICAgICBscG9zLnogPSAwO1xyXG4gICAgICB2YXIgcmF5ID0gbmV3IFRIUkVFLlJheShscG9zLCBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAxKSk7XHJcblxyXG4gICAgICB2YXIgc3RhY2sgPSBbcG9pbnRjbG91ZC5yb290XTtcclxuICAgICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcclxuICAgICAgICB2YXIgbm9kZSA9IHN0YWNrLnBvcCgpO1xyXG4gICAgICAgIHZhciBib3ggPSBub2RlLmdldEJvdW5kaW5nQm94KCk7XHJcbiAgICAgICAgdmFyIGluc2lkZSA9IHJheS5pbnRlcnNlY3RCb3goYm94KTtcclxuXHJcbiAgICAgICAgaWYgKCFpbnNpZGUpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGggPSBub2RlLmdlb21ldHJ5Tm9kZS5tZWFuLnogKyBwb2ludGNsb3VkLnBvc2l0aW9uLnogKyBub2RlLmdlb21ldHJ5Tm9kZS5ib3VuZGluZ0JveC5taW4uejtcclxuXHJcbiAgICAgICAgaWYgKG5vZGUuZ2VvbWV0cnlOb2RlLnNwYWNpbmcgPD0gcEZyb21TcGFjaW5nKSB7XHJcbiAgICAgICAgICBwSGVpZ2h0ID0gaDtcclxuICAgICAgICAgIHBGcm9tU3BhY2luZyA9IG5vZGUuZ2VvbWV0cnlOb2RlLnNwYWNpbmc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBpbmRleCBvZiBPYmplY3Qua2V5cyhub2RlLmNoaWxkcmVuKSkge1xyXG4gICAgICAgICAgdmFyIGNoaWxkID0gbm9kZS5jaGlsZHJlbltpbmRleF07XHJcbiAgICAgICAgICBpZiAoY2hpbGQuZ2VvbWV0cnlOb2RlKSB7XHJcbiAgICAgICAgICAgIHN0YWNrLnB1c2gobm9kZS5jaGlsZHJlbltpbmRleF0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGhlaWdodCA9PT0gbnVsbCB8fCBwRnJvbVNwYWNpbmcgPCBmcm9tU3BhY2luZykge1xyXG4gICAgICAgIGhlaWdodCA9IHBIZWlnaHQ7XHJcbiAgICAgICAgZnJvbVNwYWNpbmcgPSBwRnJvbVNwYWNpbmc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaGVpZ2h0O1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCB7IEJhc2ljR3JvdXAgfTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBUSFJFRSBmcm9tICd0aHJlZSc7XHJcblxyXG5pbXBvcnQgeyBXZWJHTEJ1ZmZlciB9IGZyb20gXCIuLi9XZWJHTEJ1ZmZlci5qc1wiO1xyXG5pbXBvcnQgeyBCYXNpY0dyb3VwIH0gZnJvbSBcIi4vQmFzaWNHcm91cC5qc1wiO1xyXG5pbXBvcnQgeyBQb2ludENsb3VkVHJlZSB9IGZyb20gXCIuLi9wb2ludGNsb3VkL1BvaW50Q2xvdWRUcmVlLmpzXCI7XHJcbmltcG9ydCB7IFBvaW50Q2xvdWRPY3RyZWVOb2RlIH0gZnJvbSBcIi4uL3BvaW50Y2xvdWQvUG9pbnRDbG91ZE9jdHJlZS5qc1wiO1xyXG5pbXBvcnQgeyBQb2ludENsb3VkQXJlbmE0RE5vZGUgfSBmcm9tIFwiLi4vcG9pbnRjbG91ZC9Qb2ludENsb3VkQXJlbmE0RC5qc1wiO1xyXG5pbXBvcnQgeyBBdHRyaWJ1dGVMb2NhdGlvbnMsIFBvaW50U2l6ZVR5cGUsIFBvaW50Q29sb3JUeXBlLCBDbGlwVGFzayB9IGZyb20gXCIuLi9Qb3RyZWUuanNcIjtcclxuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSBcIi4uL0dsb2JhbC5qc1wiO1xyXG5pbXBvcnQgeyBTaGFkZXIgfSBmcm9tIFwiLi4vU2hhZGVyLmpzXCI7XHJcbmltcG9ydCB7IFdlYkdMVGV4dHVyZSB9IGZyb20gXCIuLi9XZWJHTFRleHR1cmUuanNcIjtcclxuXHJcbmNsYXNzIEdyb3VwIGV4dGVuZHMgQmFzaWNHcm91cCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIHRoaXMuYnVmZmVycyA9IG5ldyBNYXAoKTtcclxuICAgIHRoaXMuc2hhZGVycyA9IG5ldyBNYXAoKTtcclxuICAgIHRoaXMudGV4dHVyZXMgPSBuZXcgTWFwKCk7XHJcbiAgICB0aGlzLnR5cGVzID0gbmV3IE1hcCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IFdlYkdMIGV4dGVuc2lvbnMgcmVxdWlyZWQgZm9yIHRoZSBtb3JlIGFkdmFuY2VkIGZlYXR1cmVzLlxyXG4gICAqL1xyXG4gIGdldEV4dGVuc2lvbnMoZ2wpIHtcclxuICAgIHRoaXMudHlwZXMuc2V0KEZsb2F0MzJBcnJheSwgZ2wuRkxPQVQpO1xyXG4gICAgdGhpcy50eXBlcy5zZXQoVWludDhBcnJheSwgZ2wuVU5TSUdORURfQllURSk7XHJcbiAgICB0aGlzLnR5cGVzLnNldChVaW50MTZBcnJheSwgZ2wuVU5TSUdORURfU0hPUlQpO1xyXG5cclxuICAgIGxldCBleHRWQU8gPSBnbC5nZXRFeHRlbnNpb24oXCJPRVNfdmVydGV4X2FycmF5X29iamVjdFwiKTtcclxuICAgIGdsLmNyZWF0ZVZlcnRleEFycmF5ID0gZXh0VkFPLmNyZWF0ZVZlcnRleEFycmF5T0VTLmJpbmQoZXh0VkFPKTtcclxuICAgIGdsLmJpbmRWZXJ0ZXhBcnJheSA9IGV4dFZBTy5iaW5kVmVydGV4QXJyYXlPRVMuYmluZChleHRWQU8pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlIHRoZSBwb3RyZWUgZ3JvdXAgYmVmb3JlIHJlbmRlcmluZy5cclxuICAgKi9cclxuICBvbkJlZm9yZVJlbmRlcihyZW5kZXJlciwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCkge1xyXG4gICAgc3VwZXIub25CZWZvcmVSZW5kZXIocmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXApO1xyXG5cclxuICAgIGxldCBnbCA9IHJlbmRlcmVyLmdldENvbnRleHQoKTtcclxuICAgIGlmIChnbC5iaW5kVmVydGV4QXJyYXkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLmdldEV4dGVuc2lvbnMoZ2wpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCByZXN1bHQgPSB0aGlzLmZldGNoT2N0cmVlcygpO1xyXG5cclxuICAgIGZvciAobGV0IG9jdHJlZSBvZiByZXN1bHQub2N0cmVlcykge1xyXG4gICAgICBsZXQgbm9kZXMgPSBvY3RyZWUudmlzaWJsZU5vZGVzO1xyXG4gICAgICB0aGlzLnJlbmRlck9jdHJlZShyZW5kZXJlciwgb2N0cmVlLCBub2RlcywgY2FtZXJhKTtcclxuICAgIH1cclxuXHJcbiAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUxKTtcclxuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xyXG5cclxuICAgIHJlbmRlcmVyLnN0YXRlLnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVCdWZmZXIoZ2wsIGdlb21ldHJ5KSB7XHJcbiAgICBsZXQgd2ViZ2xCdWZmZXIgPSBuZXcgV2ViR0xCdWZmZXIoKTtcclxuICAgIHdlYmdsQnVmZmVyLnZhbyA9IGdsLmNyZWF0ZVZlcnRleEFycmF5KCk7XHJcbiAgICB3ZWJnbEJ1ZmZlci5udW1FbGVtZW50cyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMucG9zaXRpb24uY291bnQ7XHJcblxyXG4gICAgZ2wuYmluZFZlcnRleEFycmF5KHdlYmdsQnVmZmVyLnZhbyk7XHJcblxyXG4gICAgZm9yIChsZXQgYXR0cmlidXRlTmFtZSBpbiBnZW9tZXRyeS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgIGxldCBidWZmZXJBdHRyaWJ1dGUgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdO1xyXG5cclxuICAgICAgbGV0IHZibyA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdmJvKTtcclxuICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlckF0dHJpYnV0ZS5hcnJheSwgZ2wuU1RBVElDX0RSQVcpO1xyXG5cclxuICAgICAgbGV0IGF0dHJpYnV0ZUxvY2F0aW9uID0gQXR0cmlidXRlTG9jYXRpb25zW2F0dHJpYnV0ZU5hbWVdO1xyXG4gICAgICBsZXQgbm9ybWFsaXplZCA9IGJ1ZmZlckF0dHJpYnV0ZS5ub3JtYWxpemVkO1xyXG4gICAgICBsZXQgdHlwZSA9IHRoaXMudHlwZXMuZ2V0KGJ1ZmZlckF0dHJpYnV0ZS5hcnJheS5jb25zdHJ1Y3Rvcik7XHJcblxyXG4gICAgICBpZiAodHlwZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihhdHRyaWJ1dGVMb2NhdGlvbiwgYnVmZmVyQXR0cmlidXRlLml0ZW1TaXplLCB0eXBlLCBub3JtYWxpemVkLCAwLCAwKTtcclxuICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhdHRyaWJ1dGVMb2NhdGlvbik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHdlYmdsQnVmZmVyLnZib3Muc2V0KGF0dHJpYnV0ZU5hbWUsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgaGFuZGxlOiB2Ym8sXHJcbiAgICAgICAgICBuYW1lOiBhdHRyaWJ1dGVOYW1lLFxyXG4gICAgICAgICAgY291bnQ6IGJ1ZmZlckF0dHJpYnV0ZS5jb3VudCxcclxuICAgICAgICAgIGl0ZW1TaXplOiBidWZmZXJBdHRyaWJ1dGUuaXRlbVNpemUsXHJcbiAgICAgICAgICB0eXBlOiBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5LmNvbnN0cnVjdG9yLFxyXG4gICAgICAgICAgdmVyc2lvbjogMFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgIGdsLmJpbmRWZXJ0ZXhBcnJheShudWxsKTtcclxuXHJcbiAgICByZXR1cm4gd2ViZ2xCdWZmZXI7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVCdWZmZXIoZ2wsIGdlb21ldHJ5KSB7XHJcbiAgICBsZXQgd2ViZ2xCdWZmZXIgPSB0aGlzLmJ1ZmZlcnMuZ2V0KGdlb21ldHJ5KTtcclxuXHJcbiAgICBnbC5iaW5kVmVydGV4QXJyYXkod2ViZ2xCdWZmZXIudmFvKTtcclxuXHJcbiAgICBmb3IgKGxldCBhdHRyaWJ1dGVOYW1lIGluIGdlb21ldHJ5LmF0dHJpYnV0ZXMpIHtcclxuICAgICAgbGV0IGJ1ZmZlckF0dHJpYnV0ZSA9IGdlb21ldHJ5LmF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV07XHJcblxyXG4gICAgICBsZXQgYXR0cmlidXRlTG9jYXRpb24gPSBBdHRyaWJ1dGVMb2NhdGlvbnNbYXR0cmlidXRlTmFtZV07XHJcbiAgICAgIGxldCBub3JtYWxpemVkID0gYnVmZmVyQXR0cmlidXRlLm5vcm1hbGl6ZWQ7XHJcbiAgICAgIGxldCB0eXBlID0gdGhpcy50eXBlcy5nZXQoYnVmZmVyQXR0cmlidXRlLmFycmF5LmNvbnN0cnVjdG9yKTtcclxuXHJcbiAgICAgIGxldCB2Ym8gPSBudWxsO1xyXG4gICAgICBpZiAoIXdlYmdsQnVmZmVyLnZib3MuaGFzKGF0dHJpYnV0ZU5hbWUpKSB7XHJcbiAgICAgICAgdmJvID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcblxyXG4gICAgICAgIHdlYmdsQnVmZmVyLnZib3Muc2V0KGF0dHJpYnV0ZU5hbWUsXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGhhbmRsZTogdmJvLFxyXG4gICAgICAgICAgICBuYW1lOiBhdHRyaWJ1dGVOYW1lLFxyXG4gICAgICAgICAgICBjb3VudDogYnVmZmVyQXR0cmlidXRlLmNvdW50LFxyXG4gICAgICAgICAgICBpdGVtU2l6ZTogYnVmZmVyQXR0cmlidXRlLml0ZW1TaXplLFxyXG4gICAgICAgICAgICB0eXBlOiBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5LmNvbnN0cnVjdG9yLFxyXG4gICAgICAgICAgICB2ZXJzaW9uOiBidWZmZXJBdHRyaWJ1dGUudmVyc2lvblxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgdmJvID0gd2ViZ2xCdWZmZXIudmJvcy5nZXQoYXR0cmlidXRlTmFtZSkuaGFuZGxlO1xyXG4gICAgICAgIHdlYmdsQnVmZmVyLnZib3MuZ2V0KGF0dHJpYnV0ZU5hbWUpLnZlcnNpb24gPSBidWZmZXJBdHRyaWJ1dGUudmVyc2lvbjtcclxuICAgICAgfVxyXG5cclxuICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZibyk7XHJcbiAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXJBdHRyaWJ1dGUuYXJyYXksIGdsLlNUQVRJQ19EUkFXKTtcclxuICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihhdHRyaWJ1dGVMb2NhdGlvbiwgYnVmZmVyQXR0cmlidXRlLml0ZW1TaXplLCB0eXBlLCBub3JtYWxpemVkLCAwLCAwKTtcclxuICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYXR0cmlidXRlTG9jYXRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgIGdsLmJpbmRWZXJ0ZXhBcnJheShudWxsKTtcclxuICB9XHJcblxyXG4gIGZldGNoT2N0cmVlcygpIHtcclxuICAgIGxldCBvY3RyZWVzID0gW107XHJcbiAgICBsZXQgc3RhY2sgPSBbdGhpc107XHJcblxyXG4gICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcclxuICAgICAgbGV0IG5vZGUgPSBzdGFjay5wb3AoKTtcclxuXHJcbiAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgUG9pbnRDbG91ZFRyZWUpIHtcclxuICAgICAgICBvY3RyZWVzLnB1c2gobm9kZSk7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCB2aXNpYmxlQ2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLmZpbHRlcihjID0+IGMudmlzaWJsZSk7XHJcbiAgICAgIHN0YWNrLnB1c2goLi4udmlzaWJsZUNoaWxkcmVuKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcmVzdWx0ID1cclxuICAgIHtcclxuICAgICAgb2N0cmVlczogb2N0cmVlc1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyTm9kZXMocmVuZGVyZXIsIG9jdHJlZSwgbm9kZXMsIHZpc2liaWxpdHlUZXh0dXJlRGF0YSwgY2FtZXJhLCBzaGFkZXIpIHtcclxuICAgIGxldCBnbCA9IHJlbmRlcmVyLmdldENvbnRleHQoKTtcclxuICAgIGxldCBtYXRlcmlhbCA9IG9jdHJlZS5tYXRlcmlhbDtcclxuICAgIGxldCBzaGFkb3dNYXBzID0gW107XHJcbiAgICBsZXQgdmlldyA9IGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2U7XHJcblxyXG4gICAgbGV0IHdvcmxkVmlldyA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XHJcbiAgICBsZXQgbWF0NGhvbGRlciA9IG5ldyBGbG9hdDMyQXJyYXkoMTYpO1xyXG5cclxuICAgIGZvciAobGV0IG5vZGUgb2Ygbm9kZXMpIHtcclxuICAgICAgaWYgKEdsb2JhbC5kZWJ1Zy5hbGxvd2VkTm9kZXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmICghR2xvYmFsLmRlYnVnLmFsbG93ZWROb2Rlcy5pbmNsdWRlcyhub2RlLm5hbWUpKSB7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCB3b3JsZCA9IG5vZGUuc2NlbmVOb2RlLm1hdHJpeFdvcmxkO1xyXG4gICAgICB3b3JsZFZpZXcubXVsdGlwbHlNYXRyaWNlcyh2aWV3LCB3b3JsZCk7XHJcblxyXG4gICAgICBpZiAodmlzaWJpbGl0eVRleHR1cmVEYXRhKSB7XHJcbiAgICAgICAgbGV0IHZuU3RhcnQgPSB2aXNpYmlsaXR5VGV4dHVyZURhdGEub2Zmc2V0cy5nZXQobm9kZSk7XHJcbiAgICAgICAgc2hhZGVyLnNldFVuaWZvcm0xZihcInVWTlN0YXJ0XCIsIHZuU3RhcnQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgbGV2ZWwgPSBub2RlLmdldExldmVsKCk7XHJcbiAgICAgIHNoYWRlci5zZXRVbmlmb3JtKFwidURlYnVnXCIsIG5vZGUuZGVidWcgPT09IHRydWUpO1xyXG5cclxuICAgICAgbGV0IGlzTGVhZjtcclxuICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBQb2ludENsb3VkT2N0cmVlTm9kZSkge1xyXG4gICAgICAgIGlzTGVhZiA9IE9iamVjdC5rZXlzKG5vZGUuY2hpbGRyZW4pLmxlbmd0aCA9PT0gMDtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgUG9pbnRDbG91ZEFyZW5hNEROb2RlKSB7XHJcbiAgICAgICAgaXNMZWFmID0gbm9kZS5nZW9tZXRyeU5vZGUuaXNMZWFmO1xyXG4gICAgICB9XHJcbiAgICAgIHNoYWRlci5zZXRVbmlmb3JtKFwidUlzTGVhZk5vZGVcIiwgaXNMZWFmKTtcclxuXHJcbiAgICAgIC8vVE9ETyA8Y29uc2lkZXIgcGFzc2luZyBtYXRyaWNlcyBpbiBhbiBhcnJheSB0byBhdm9pZCB1bmlmb3JtTWF0cml4NGZ2IG92ZXJoZWFkPlxyXG4gICAgICBsZXQgbE1vZGVsID0gc2hhZGVyLnVuaWZvcm1Mb2NhdGlvbnNbXCJtb2RlbE1hdHJpeFwiXTtcclxuICAgICAgaWYgKGxNb2RlbCkge1xyXG4gICAgICAgIG1hdDRob2xkZXIuc2V0KHdvcmxkLmVsZW1lbnRzKTtcclxuICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KGxNb2RlbCwgZmFsc2UsIG1hdDRob2xkZXIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgbE1vZGVsVmlldyA9IHNoYWRlci51bmlmb3JtTG9jYXRpb25zW1wibW9kZWxWaWV3TWF0cml4XCJdO1xyXG4gICAgICBtYXQ0aG9sZGVyLnNldCh3b3JsZFZpZXcuZWxlbWVudHMpO1xyXG4gICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KGxNb2RlbFZpZXcsIGZhbHNlLCBtYXQ0aG9sZGVyKTtcclxuXHJcbiAgICAgIC8vIENsaXAgcGxhbmVzXHJcbiAgICAgIGlmIChtYXRlcmlhbC5jbGlwcGluZyAmJiBtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcyAmJiBtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgdmFyIHBsYW5lcyA9IG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzO1xyXG4gICAgICAgIHZhciBmbGF0dGVuZWRQbGFuZXMgPSBuZXcgQXJyYXkoNCAqIG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzLmxlbmd0aCk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFuZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGZsYXR0ZW5lZFBsYW5lc1s0ICogaSArIDBdID0gcGxhbmVzW2ldLm5vcm1hbC54O1xyXG4gICAgICAgICAgZmxhdHRlbmVkUGxhbmVzWzQgKiBpICsgMV0gPSBwbGFuZXNbaV0ubm9ybWFsLnk7XHJcbiAgICAgICAgICBmbGF0dGVuZWRQbGFuZXNbNCAqIGkgKyAyXSA9IHBsYW5lc1tpXS5ub3JtYWwuejtcclxuICAgICAgICAgIGZsYXR0ZW5lZFBsYW5lc1s0ICogaSArIDNdID0gcGxhbmVzW2ldLmNvbnN0YW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGNsaXBQbGFuZXNMb2MgPSBzaGFkZXIudW5pZm9ybUxvY2F0aW9uc1snY2xpcFBsYW5lc1swXSddO1xyXG4gICAgICAgIGlmIChjbGlwUGxhbmVzTG9jID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgdW5pZm9ybSBjbGlwUGxhbmVzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdsLnVuaWZvcm00ZnYoY2xpcFBsYW5lc0xvYywgZmxhdHRlbmVkUGxhbmVzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy9DbGlwIFBvbHlnb25zXHJcbiAgICAgIGlmIChtYXRlcmlhbC5jbGlwUG9seWdvbnMgJiYgbWF0ZXJpYWwuY2xpcFBvbHlnb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICBsZXQgY2xpcFBvbHlnb25WQ291bnQgPSBbXTtcclxuICAgICAgICBsZXQgd29ybGRWaWV3UHJvak1hdHJpY2VzID0gW107XHJcblxyXG4gICAgICAgIGZvciAobGV0IGNsaXBQb2x5Z29uIG9mIG1hdGVyaWFsLmNsaXBQb2x5Z29ucykge1xyXG4gICAgICAgICAgbGV0IHZpZXcgPSBjbGlwUG9seWdvbi52aWV3TWF0cml4O1xyXG4gICAgICAgICAgbGV0IHByb2ogPSBjbGlwUG9seWdvbi5wcm9qTWF0cml4O1xyXG5cclxuICAgICAgICAgIGxldCB3b3JsZFZpZXdQcm9qID0gcHJvai5jbG9uZSgpLm11bHRpcGx5KHZpZXcpLm11bHRpcGx5KHdvcmxkKTtcclxuXHJcbiAgICAgICAgICBjbGlwUG9seWdvblZDb3VudC5wdXNoKGNsaXBQb2x5Z29uLm1hcmtlcnMubGVuZ3RoKTtcclxuICAgICAgICAgIHdvcmxkVmlld1Byb2pNYXRyaWNlcy5wdXNoKHdvcmxkVmlld1Byb2opO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGZsYXR0ZW5lZE1hdHJpY2VzID0gW10uY29uY2F0KC4uLndvcmxkVmlld1Byb2pNYXRyaWNlcy5tYXAobSA9PiBtLmVsZW1lbnRzKSk7XHJcbiAgICAgICAgbGV0IGZsYXR0ZW5lZFZlcnRpY2VzID0gbmV3IEFycmF5KDggKiAzICogbWF0ZXJpYWwuY2xpcFBvbHlnb25zLmxlbmd0aCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0ZXJpYWwuY2xpcFBvbHlnb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICBsZXQgY2xpcFBvbHlnb24gPSBtYXRlcmlhbC5jbGlwUG9seWdvbnNbaV07XHJcblxyXG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjbGlwUG9seWdvbi5tYXJrZXJzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgIGZsYXR0ZW5lZFZlcnRpY2VzW2kgKiAyNCArIChqICogMyArIDApXSA9IGNsaXBQb2x5Z29uLm1hcmtlcnNbal0ucG9zaXRpb24ueDtcclxuICAgICAgICAgICAgZmxhdHRlbmVkVmVydGljZXNbaSAqIDI0ICsgKGogKiAzICsgMSldID0gY2xpcFBvbHlnb24ubWFya2Vyc1tqXS5wb3NpdGlvbi55O1xyXG4gICAgICAgICAgICBmbGF0dGVuZWRWZXJ0aWNlc1tpICogMjQgKyAoaiAqIDMgKyAyKV0gPSBjbGlwUG9seWdvbi5tYXJrZXJzW2pdLnBvc2l0aW9uLno7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgbENsaXBQb2x5Z29uVkNvdW50ID0gc2hhZGVyLnVuaWZvcm1Mb2NhdGlvbnNbXCJ1Q2xpcFBvbHlnb25WQ291bnRbMF1cIl07XHJcbiAgICAgICAgZ2wudW5pZm9ybTFpdihsQ2xpcFBvbHlnb25WQ291bnQsIGNsaXBQb2x5Z29uVkNvdW50KTtcclxuXHJcbiAgICAgICAgbGV0IGxDbGlwUG9seWdvblZQID0gc2hhZGVyLnVuaWZvcm1Mb2NhdGlvbnNbXCJ1Q2xpcFBvbHlnb25XVlBbMF1cIl07XHJcbiAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihsQ2xpcFBvbHlnb25WUCwgZmFsc2UsIGZsYXR0ZW5lZE1hdHJpY2VzKTtcclxuXHJcbiAgICAgICAgbGV0IGxDbGlwUG9seWdvbnMgPSBzaGFkZXIudW5pZm9ybUxvY2F0aW9uc1tcInVDbGlwUG9seWdvblZlcnRpY2VzWzBdXCJdO1xyXG4gICAgICAgIGdsLnVuaWZvcm0zZnYobENsaXBQb2x5Z29ucywgZmxhdHRlbmVkVmVydGljZXMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwidUxldmVsXCIsIGxldmVsKTtcclxuICAgICAgc2hhZGVyLnNldFVuaWZvcm0xZihcInVOb2RlU3BhY2luZ1wiLCBub2RlLmdlb21ldHJ5Tm9kZS5lc3RpbWF0ZWRTcGFjaW5nKTtcclxuICAgICAgc2hhZGVyLnNldFVuaWZvcm0xZihcInVQQ0luZGV4XCIsIG1hdGVyaWFsLmNsaXBQb2x5Z29ucy5sZW5ndGgpO1xyXG5cclxuICAgICAgLypcclxuICAgICAgaWYoc2hhZG93TWFwcy5sZW5ndGggPiAwKVxyXG4gICAgICB7XHJcbiAgICAgICAgbGV0IGxTaGFkb3dNYXAgPSBzaGFkZXIudW5pZm9ybUxvY2F0aW9uc1tcInVTaGFkb3dNYXBbMF1cIl07XHJcblxyXG4gICAgICAgIHNoYWRlci5zZXRVbmlmb3JtM2YoXCJ1U2hhZG93Q29sb3JcIiwgbWF0ZXJpYWwudW5pZm9ybXMudVNoYWRvd0NvbG9yLnZhbHVlKTtcclxuXHJcbiAgICAgICAgbGV0IGJpbmRpbmdTdGFydCA9IDU7XHJcbiAgICAgICAgbGV0IGJpbmRpbmdQb2ludHMgPSBuZXcgQXJyYXkoc2hhZG93TWFwcy5sZW5ndGgpLmZpbGwoYmluZGluZ1N0YXJ0KS5tYXAoKGEsIGkpID0+IChhICsgaSkpO1xyXG4gICAgICAgIGdsLnVuaWZvcm0xaXYobFNoYWRvd01hcCwgYmluZGluZ1BvaW50cyk7XHJcblxyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaGFkb3dNYXBzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGxldCBzaGFkb3dNYXAgPSBzaGFkb3dNYXBzW2ldO1xyXG4gICAgICAgICAgbGV0IGJpbmRpbmdQb2ludCA9IGJpbmRpbmdQb2ludHNbaV07XHJcbiAgICAgICAgICBsZXQgZ2xUZXh0dXJlID0gcmVuZGVyZXIucHJvcGVydGllcy5nZXQoc2hhZG93TWFwLnRhcmdldC50ZXh0dXJlKS5fX3dlYmdsVGV4dHVyZTtcclxuXHJcbiAgICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsW2BURVhUVVJFJHtiaW5kaW5nUG9pbnR9YF0pO1xyXG4gICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgZ2xUZXh0dXJlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB3b3JsZFZpZXdNYXRyaWNlcyA9IHNoYWRvd01hcHMubWFwKHNtID0+IHNtLmNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UpLm1hcCh2aWV3ID0+IG5ldyBUSFJFRS5NYXRyaXg0KCkubXVsdGlwbHlNYXRyaWNlcyh2aWV3LCB3b3JsZCkpXHJcblxyXG4gICAgICAgIGxldCBmbGF0dGVuZWRNYXRyaWNlcyA9IFtdLmNvbmNhdCguLi53b3JsZFZpZXdNYXRyaWNlcy5tYXAoYyA9PiBjLmVsZW1lbnRzKSk7XHJcbiAgICAgICAgbGV0IGxXb3JsZFZpZXcgPSBzaGFkZXIudW5pZm9ybUxvY2F0aW9uc1tcInVTaGFkb3dXb3JsZFZpZXdbMF1cIl07XHJcbiAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihsV29ybGRWaWV3LCBmYWxzZSwgZmxhdHRlbmVkTWF0cmljZXMpO1xyXG5cclxuICAgICAgICBmbGF0dGVuZWRNYXRyaWNlcyA9IFtdLmNvbmNhdCguLi5zaGFkb3dNYXBzLm1hcChzbSA9PiBzbS5jYW1lcmEucHJvamVjdGlvbk1hdHJpeC5lbGVtZW50cykpO1xyXG4gICAgICAgIGxldCBsUHJvaiA9IHNoYWRlci51bmlmb3JtTG9jYXRpb25zW1widVNoYWRvd1Byb2pbMF1cIl07XHJcbiAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihsUHJvaiwgZmFsc2UsIGZsYXR0ZW5lZE1hdHJpY2VzKTtcclxuICAgICAgfVxyXG4gICAgICAqL1xyXG5cclxuICAgICAgbGV0IGdlb21ldHJ5ID0gbm9kZS5nZW9tZXRyeU5vZGUuZ2VvbWV0cnk7XHJcbiAgICAgIGxldCB3ZWJnbEJ1ZmZlciA9IG51bGw7XHJcbiAgICAgIGlmICghdGhpcy5idWZmZXJzLmhhcyhnZW9tZXRyeSkpIHtcclxuICAgICAgICB3ZWJnbEJ1ZmZlciA9IHRoaXMuY3JlYXRlQnVmZmVyKGdsLCBnZW9tZXRyeSk7XHJcbiAgICAgICAgdGhpcy5idWZmZXJzLnNldChnZW9tZXRyeSwgd2ViZ2xCdWZmZXIpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHdlYmdsQnVmZmVyID0gdGhpcy5idWZmZXJzLmdldChnZW9tZXRyeSk7XHJcbiAgICAgICAgZm9yIChsZXQgYXR0cmlidXRlTmFtZSBpbiBnZW9tZXRyeS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICBsZXQgYXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXTtcclxuICAgICAgICAgIGlmIChhdHRyaWJ1dGUudmVyc2lvbiA+IHdlYmdsQnVmZmVyLnZib3MuZ2V0KGF0dHJpYnV0ZU5hbWUpLnZlcnNpb24pIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVCdWZmZXIoZ2wsIGdlb21ldHJ5KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGdsLmJpbmRWZXJ0ZXhBcnJheSh3ZWJnbEJ1ZmZlci52YW8pO1xyXG4gICAgICBnbC5kcmF3QXJyYXlzKGdsLlBPSU5UUywgMCwgd2ViZ2xCdWZmZXIubnVtRWxlbWVudHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGdsLmJpbmRWZXJ0ZXhBcnJheShudWxsKTtcclxuICB9XHJcblxyXG4gIHJlbmRlck9jdHJlZShyZW5kZXJlciwgb2N0cmVlLCBub2RlcywgY2FtZXJhLCB0YXJnZXQgPSBudWxsLCBwYXJhbXMgPSB7fSkge1xyXG4gICAgbGV0IGdsID0gcmVuZGVyZXIuZ2V0Q29udGV4dCgpO1xyXG4gICAgbGV0IG1hdGVyaWFsID0gcGFyYW1zLm1hdGVyaWFsIHx8IG9jdHJlZS5tYXRlcmlhbDtcclxuICAgIGxldCBzaGFkb3dNYXBzID0gcGFyYW1zLnNoYWRvd01hcHMgfHwgW107XHJcbiAgICBsZXQgdmlldyA9IGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2U7XHJcbiAgICBsZXQgdmlld0ludiA9IGNhbWVyYS5tYXRyaXhXb3JsZDtcclxuICAgIGxldCBwcm9qID0gY2FtZXJhLnByb2plY3Rpb25NYXRyaXg7XHJcbiAgICBsZXQgcHJvakludiA9IGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZTtcclxuICAgIGxldCB3b3JsZFZpZXcgPSBuZXcgVEhSRUUuTWF0cml4NCgpO1xyXG5cclxuICAgIGxldCB2aXNpYmlsaXR5VGV4dHVyZURhdGEgPSBudWxsO1xyXG4gICAgbGV0IGN1cnJlbnRUZXh0dXJlQmluZGluZ1BvaW50ID0gMDtcclxuXHJcbiAgICBpZiAobWF0ZXJpYWwucG9pbnRTaXplVHlwZSA9PT0gUG9pbnRTaXplVHlwZS5BREFQVElWRSB8fCBtYXRlcmlhbC5wb2ludENvbG9yVHlwZSA9PT0gUG9pbnRDb2xvclR5cGUuTE9EKSB7XHJcbiAgICAgIHZpc2liaWxpdHlUZXh0dXJlRGF0YSA9IG9jdHJlZS5jb21wdXRlVmlzaWJpbGl0eVRleHR1cmVEYXRhKG5vZGVzLCBjYW1lcmEpO1xyXG5cclxuICAgICAgbGV0IHZudCA9IG1hdGVyaWFsLnZpc2libGVOb2Rlc1RleHR1cmU7XHJcbiAgICAgIHZudC5pbWFnZS5kYXRhLnNldCh2aXNpYmlsaXR5VGV4dHVyZURhdGEuZGF0YSk7XHJcbiAgICAgIHZudC5uZWVkc1VwZGF0ZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHNoYWRlciA9IG51bGw7XHJcblxyXG4gICAgaWYgKCF0aGlzLnNoYWRlcnMuaGFzKG1hdGVyaWFsKSkge1xyXG4gICAgICBzaGFkZXIgPSBuZXcgU2hhZGVyKGdsLCBcInBvaW50Y2xvdWRcIiwgbWF0ZXJpYWwudmVydGV4U2hhZGVyLCBtYXRlcmlhbC5mcmFnbWVudFNoYWRlcik7XHJcbiAgICAgIHRoaXMuc2hhZGVycy5zZXQobWF0ZXJpYWwsIHNoYWRlcik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc2hhZGVyID0gdGhpcy5zaGFkZXJzLmdldChtYXRlcmlhbCk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG51bVNuYXBzaG90cyA9IG1hdGVyaWFsLnNuYXBFbmFibGVkID8gbWF0ZXJpYWwubnVtU25hcHNob3RzIDogMDtcclxuICAgIGxldCBudW1DbGlwQm94ZXMgPSAobWF0ZXJpYWwuY2xpcEJveGVzICYmIG1hdGVyaWFsLmNsaXBCb3hlcy5sZW5ndGgpID8gbWF0ZXJpYWwuY2xpcEJveGVzLmxlbmd0aCA6IDA7XHJcbiAgICBsZXQgbnVtQ2xpcFBvbHlnb25zID0gKG1hdGVyaWFsLmNsaXBQb2x5Z29ucyAmJiBtYXRlcmlhbC5jbGlwUG9seWdvbnMubGVuZ3RoKSA/IG1hdGVyaWFsLmNsaXBQb2x5Z29ucy5sZW5ndGggOiAwO1xyXG4gICAgbGV0IG51bUNsaXBTcGhlcmVzID0gMDtcclxuICAgIHZhciBudW1DbGlwcGluZ1BsYW5lcyA9IChtYXRlcmlhbC5jbGlwcGluZyAmJiBtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcyAmJiBtYXRlcmlhbC5jbGlwcGluZ1BsYW5lcy5sZW5ndGgpID8gbWF0ZXJpYWwuY2xpcHBpbmdQbGFuZXMubGVuZ3RoIDogMDtcclxuXHJcbiAgICBsZXQgZGVmaW5lcyA9IFtcclxuICAgICAgXCIjZGVmaW5lIG51bV9zaGFkb3dtYXBzIFwiICsgc2hhZG93TWFwcy5sZW5ndGgsXHJcbiAgICAgIFwiI2RlZmluZSBudW1fc25hcHNob3RzIFwiICsgbnVtU25hcHNob3RzLFxyXG4gICAgICBcIiNkZWZpbmUgbnVtX2NsaXBib3hlcyBcIiArIG51bUNsaXBCb3hlcyxcclxuICAgICAgXCIjZGVmaW5lIG51bV9jbGlwc3BoZXJlcyBcIiArIG51bUNsaXBTcGhlcmVzLFxyXG4gICAgICBcIiNkZWZpbmUgbnVtX2NsaXBwb2x5Z29ucyBcIiArIG51bUNsaXBQb2x5Z29ucyxcclxuICAgICAgXCIjZGVmaW5lIG51bV9jbGlwcGxhbmVzIFwiICsgbnVtQ2xpcHBpbmdQbGFuZXMsXHJcbiAgICBdO1xyXG5cclxuICAgIGxldCBkZWZpbmVzU3RyaW5nID0gZGVmaW5lcy5qb2luKFwiXFxuXCIpO1xyXG4gICAgbGV0IHZzID0gZGVmaW5lc1N0cmluZyArIFwiXFxuXCIgKyBtYXRlcmlhbC52ZXJ0ZXhTaGFkZXI7XHJcbiAgICBsZXQgZnMgPSBkZWZpbmVzU3RyaW5nICsgXCJcXG5cIiArIG1hdGVyaWFsLmZyYWdtZW50U2hhZGVyO1xyXG5cclxuICAgIHNoYWRlci51cGRhdGUodnMsIGZzKTtcclxuXHJcbiAgICBtYXRlcmlhbC5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xyXG5cclxuICAgIGZvciAobGV0IHVuaWZvcm1OYW1lIG9mIE9iamVjdC5rZXlzKG1hdGVyaWFsLnVuaWZvcm1zKSkge1xyXG4gICAgICBsZXQgdW5pZm9ybSA9IG1hdGVyaWFsLnVuaWZvcm1zW3VuaWZvcm1OYW1lXTtcclxuXHJcbiAgICAgIGlmICh1bmlmb3JtLnR5cGUgPT0gXCJ0XCIpIHtcclxuICAgICAgICBsZXQgdGV4dHVyZSA9IHVuaWZvcm0udmFsdWU7XHJcblxyXG4gICAgICAgIGlmICghdGV4dHVyZSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMudGV4dHVyZXMuaGFzKHRleHR1cmUpKSB7XHJcbiAgICAgICAgICBsZXQgd2ViZ2xUZXh0dXJlID0gbmV3IFdlYkdMVGV4dHVyZShnbCwgdGV4dHVyZSk7XHJcbiAgICAgICAgICB0aGlzLnRleHR1cmVzLnNldCh0ZXh0dXJlLCB3ZWJnbFRleHR1cmUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHdlYkdMVGV4dHVyZSA9IHRoaXMudGV4dHVyZXMuZ2V0KHRleHR1cmUpO1xyXG4gICAgICAgIHdlYkdMVGV4dHVyZS51cGRhdGUoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdsLnVzZVByb2dyYW0oc2hhZGVyLnByb2dyYW0pO1xyXG5cclxuICAgIGlmIChtYXRlcmlhbC5vcGFjaXR5IDwgMS4wKSB7XHJcbiAgICAgIGdsLmVuYWJsZShnbC5CTEVORCk7XHJcbiAgICAgIGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORSk7XHJcbiAgICAgIGdsLmRlcHRoTWFzayhmYWxzZSk7XHJcbiAgICAgIGdsLmRpc2FibGUoZ2wuREVQVEhfVEVTVCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgZ2wuZGlzYWJsZShnbC5CTEVORCk7XHJcbiAgICAgIGdsLmRlcHRoTWFzayh0cnVlKTtcclxuICAgICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vVXBkYXRlIHNoYWRlciB1bmlmb3Jtc1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm1NYXRyaXg0KFwicHJvamVjdGlvbk1hdHJpeFwiLCBwcm9qKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtTWF0cml4NChcInZpZXdNYXRyaXhcIiwgdmlldyk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybU1hdHJpeDQoXCJ1Vmlld0ludlwiLCB2aWV3SW52KTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtTWF0cml4NChcInVQcm9qSW52XCIsIHByb2pJbnYpO1xyXG5cclxuICAgIGxldCBzY3JlZW5XaWR0aCA9IHRhcmdldCA/IHRhcmdldC53aWR0aCA6IG1hdGVyaWFsLnNjcmVlbldpZHRoO1xyXG4gICAgbGV0IHNjcmVlbkhlaWdodCA9IHRhcmdldCA/IHRhcmdldC5oZWlnaHQgOiBtYXRlcmlhbC5zY3JlZW5IZWlnaHQ7XHJcblxyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcInVTY3JlZW5XaWR0aFwiLCBzY3JlZW5XaWR0aCk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwidVNjcmVlbkhlaWdodFwiLCBzY3JlZW5IZWlnaHQpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcImZvdlwiLCBNYXRoLlBJICogY2FtZXJhLmZvdiAvIDE4MCk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwibmVhclwiLCBjYW1lcmEubmVhcik7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwiZmFyXCIsIGNhbWVyYS5mYXIpO1xyXG5cclxuICAgIC8vU2V0IGxvZ1xyXG4gICAgaWYgKHJlbmRlcmVyLmNhcGFiaWxpdGllcy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyKSB7XHJcbiAgICAgIHNoYWRlci5zZXRVbmlmb3JtKFwibG9nRGVwdGhCdWZGQ1wiLCAyLjAgLyAoTWF0aC5sb2coY2FtZXJhLmZhciArIDEuMCkgLyBNYXRoLkxOMikpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vQ2FtZXJhIGNvbmZpZ3VyYXRpb25cclxuICAgIGlmIChjYW1lcmEgaW5zdGFuY2VvZiBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEpIHtcclxuICAgICAgc2hhZGVyLnNldFVuaWZvcm0oXCJ1VXNlT3J0aG9ncmFwaGljQ2FtZXJhXCIsIHRydWUpO1xyXG4gICAgICBzaGFkZXIuc2V0VW5pZm9ybShcInVPcnRob1dpZHRoXCIsIGNhbWVyYS5yaWdodCAtIGNhbWVyYS5sZWZ0KTtcclxuICAgICAgc2hhZGVyLnNldFVuaWZvcm0oXCJ1T3J0aG9IZWlnaHRcIiwgY2FtZXJhLnRvcCAtIGNhbWVyYS5ib3R0b20pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHNoYWRlci5zZXRVbmlmb3JtKFwidVVzZU9ydGhvZ3JhcGhpY0NhbWVyYVwiLCBmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy9DbGlwIHRhc2tcclxuICAgIGlmIChtYXRlcmlhbC5jbGlwQm94ZXMubGVuZ3RoICsgbWF0ZXJpYWwuY2xpcFBvbHlnb25zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBzaGFkZXIuc2V0VW5pZm9ybTFpKFwiY2xpcFRhc2tcIiwgQ2xpcFRhc2suTk9ORSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgc2hhZGVyLnNldFVuaWZvcm0xaShcImNsaXBUYXNrXCIsIG1hdGVyaWFsLmNsaXBUYXNrKTtcclxuICAgIH1cclxuXHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFpKFwiY2xpcE1ldGhvZFwiLCBtYXRlcmlhbC5jbGlwTWV0aG9kKTtcclxuXHJcbiAgICAvL0NsaXBib3hlc1xyXG4gICAgaWYgKG1hdGVyaWFsLmNsaXBCb3hlcyAmJiBtYXRlcmlhbC5jbGlwQm94ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICBsZXQgbENsaXBCb3hlcyA9IHNoYWRlci51bmlmb3JtTG9jYXRpb25zW1wiY2xpcEJveGVzWzBdXCJdO1xyXG4gICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KGxDbGlwQm94ZXMsIGZhbHNlLCBtYXRlcmlhbC51bmlmb3Jtcy5jbGlwQm94ZXMudmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vQ2xpc3BoZXJlc1xyXG4gICAgLyppZihtYXRlcmlhbC5jbGlwU3BoZXJlcyAmJiBtYXRlcmlhbC5jbGlwU3BoZXJlcy5sZW5ndGggPiAwKVxyXG4gICAge1xyXG4gICAgICBsZXQgY2xpcFNwaGVyZXMgPSBtYXRlcmlhbC5jbGlwU3BoZXJlcztcclxuICAgICAgbGV0IG1hdHJpY2VzID0gW107XHJcbiAgICAgIGZvcihsZXQgY2xpcFNwaGVyZSBvZiBjbGlwU3BoZXJlcylcclxuICAgICAge1xyXG4gICAgICAgIGxldCBjbGlwVG9Xb3JsZCA9IGNsaXBTcGhlcmUubWF0cml4V29ybGQ7XHJcbiAgICAgICAgbGV0IHZpZXdUb1dvcmxkID0gY2FtZXJhLm1hdHJpeFdvcmxkXHJcbiAgICAgICAgbGV0IHdvcmxkVG9DbGlwID0gbmV3IFRIUkVFLk1hdHJpeDQoKS5nZXRJbnZlcnNlKGNsaXBUb1dvcmxkKTtcclxuXHJcbiAgICAgICAgbGV0IHZpZXdUb0NsaXAgPSBuZXcgVEhSRUUuTWF0cml4NCgpLm11bHRpcGx5TWF0cmljZXMod29ybGRUb0NsaXAsIHZpZXdUb1dvcmxkKTtcclxuXHJcbiAgICAgICAgbWF0cmljZXMucHVzaCh2aWV3VG9DbGlwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGZsYXR0ZW5lZE1hdHJpY2VzID0gW10uY29uY2F0KC4uLm1hdHJpY2VzLm1hcChtYXRyaXggPT4gbWF0cml4LmVsZW1lbnRzKSk7XHJcblxyXG4gICAgICBsZXQgbENsaXBTcGhlcmVzID0gc2hhZGVyLnVuaWZvcm1Mb2NhdGlvbnNbXCJ1Q2xpcFNwaGVyZXNbMF1cIl07XHJcbiAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYobENsaXBTcGhlcmVzLCBmYWxzZSwgZmxhdHRlbmVkTWF0cmljZXMpO1xyXG4gICAgfSovXHJcblxyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcInNpemVcIiwgbWF0ZXJpYWwuc2l6ZSk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwibWF4U2l6ZVwiLCBtYXRlcmlhbC51bmlmb3Jtcy5tYXhTaXplLnZhbHVlKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWYoXCJtaW5TaXplXCIsIG1hdGVyaWFsLnVuaWZvcm1zLm1pblNpemUudmFsdWUpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcInVPY3RyZWVTcGFjaW5nXCIsIG1hdGVyaWFsLnNwYWNpbmcpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0oXCJ1T2N0cmVlU2l6ZVwiLCBtYXRlcmlhbC51bmlmb3Jtcy5vY3RyZWVTaXplLnZhbHVlKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtM2YoXCJ1Q29sb3JcIiwgbWF0ZXJpYWwuY29sb3IudG9BcnJheSgpKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWYoXCJ1T3BhY2l0eVwiLCBtYXRlcmlhbC5vcGFjaXR5KTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMmYoXCJlbGV2YXRpb25SYW5nZVwiLCBtYXRlcmlhbC5lbGV2YXRpb25SYW5nZSk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTJmKFwiaW50ZW5zaXR5UmFuZ2VcIiwgbWF0ZXJpYWwuaW50ZW5zaXR5UmFuZ2UpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcImludGVuc2l0eUdhbW1hXCIsIG1hdGVyaWFsLmludGVuc2l0eUdhbW1hKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWYoXCJpbnRlbnNpdHlDb250cmFzdFwiLCBtYXRlcmlhbC5pbnRlbnNpdHlDb250cmFzdCk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwiaW50ZW5zaXR5QnJpZ2h0bmVzc1wiLCBtYXRlcmlhbC5pbnRlbnNpdHlCcmlnaHRuZXNzKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWYoXCJyZ2JHYW1tYVwiLCBtYXRlcmlhbC5yZ2JHYW1tYSk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwicmdiQ29udHJhc3RcIiwgbWF0ZXJpYWwucmdiQ29udHJhc3QpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcInJnYkJyaWdodG5lc3NcIiwgbWF0ZXJpYWwucmdiQnJpZ2h0bmVzcyk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwidVRyYW5zaXRpb25cIiwgbWF0ZXJpYWwudHJhbnNpdGlvbik7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwid1JHQlwiLCBtYXRlcmlhbC53ZWlnaHRSR0IpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcIndJbnRlbnNpdHlcIiwgbWF0ZXJpYWwud2VpZ2h0SW50ZW5zaXR5KTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWYoXCJ3RWxldmF0aW9uXCIsIG1hdGVyaWFsLndlaWdodEVsZXZhdGlvbik7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwid0NsYXNzaWZpY2F0aW9uXCIsIG1hdGVyaWFsLndlaWdodENsYXNzaWZpY2F0aW9uKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWYoXCJ3UmV0dXJuTnVtYmVyXCIsIG1hdGVyaWFsLndlaWdodFJldHVybk51bWJlcik7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmKFwid1NvdXJjZUlEXCIsIG1hdGVyaWFsLndlaWdodFNvdXJjZUlEKTtcclxuXHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFmdihcImhpZGRlbkNsYXNzaWZpY2F0aW9uc1wiLCBtYXRlcmlhbC5oaWRkZW5DbGFzc2lmaWNhdGlvbnMpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xZihcInNlbGVjdGVkUG9pbnRTb3VyY2VJRFwiLCBtYXRlcmlhbC5zZWxlY3RlZFBvaW50U291cmNlSUQpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0zZihcInNlbGVjdGVkUG9pbnRTb3VyY2VJRENvbG9yXCIsIG1hdGVyaWFsLnNlbGVjdGVkUG9pbnRTb3VyY2VJRENvbG9yKTtcclxuXHJcbiAgICBsZXQgdm5XZWJHTFRleHR1cmUgPSB0aGlzLnRleHR1cmVzLmdldChtYXRlcmlhbC52aXNpYmxlTm9kZXNUZXh0dXJlKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWkoXCJ2aXNpYmxlTm9kZXNUZXh0dXJlXCIsIGN1cnJlbnRUZXh0dXJlQmluZGluZ1BvaW50KTtcclxuICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyBjdXJyZW50VGV4dHVyZUJpbmRpbmdQb2ludCk7XHJcbiAgICBnbC5iaW5kVGV4dHVyZSh2bldlYkdMVGV4dHVyZS50YXJnZXQsIHZuV2ViR0xUZXh0dXJlLmlkKTtcclxuICAgIGN1cnJlbnRUZXh0dXJlQmluZGluZ1BvaW50Kys7XHJcblxyXG4gICAgbGV0IGdyYWRpZW50VGV4dHVyZSA9IHRoaXMudGV4dHVyZXMuZ2V0KG1hdGVyaWFsLmdyYWRpZW50VGV4dHVyZSk7XHJcbiAgICBzaGFkZXIuc2V0VW5pZm9ybTFpKFwiZ3JhZGllbnRcIiwgY3VycmVudFRleHR1cmVCaW5kaW5nUG9pbnQpO1xyXG4gICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCArIGN1cnJlbnRUZXh0dXJlQmluZGluZ1BvaW50KTtcclxuICAgIGdsLmJpbmRUZXh0dXJlKGdyYWRpZW50VGV4dHVyZS50YXJnZXQsIGdyYWRpZW50VGV4dHVyZS5pZCk7XHJcbiAgICBjdXJyZW50VGV4dHVyZUJpbmRpbmdQb2ludCsrO1xyXG5cclxuICAgIGxldCBjbGFzc2lmaWNhdGlvblRleHR1cmUgPSB0aGlzLnRleHR1cmVzLmdldChtYXRlcmlhbC5jbGFzc2lmaWNhdGlvblRleHR1cmUpO1xyXG4gICAgc2hhZGVyLnNldFVuaWZvcm0xaShcImNsYXNzaWZpY2F0aW9uTFVUXCIsIGN1cnJlbnRUZXh0dXJlQmluZGluZ1BvaW50KTtcclxuICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyBjdXJyZW50VGV4dHVyZUJpbmRpbmdQb2ludCk7XHJcbiAgICBnbC5iaW5kVGV4dHVyZShjbGFzc2lmaWNhdGlvblRleHR1cmUudGFyZ2V0LCBjbGFzc2lmaWNhdGlvblRleHR1cmUuaWQpO1xyXG4gICAgY3VycmVudFRleHR1cmVCaW5kaW5nUG9pbnQrKztcclxuXHJcbiAgICBsZXQgaGlkZGVuUG9pbnRTb3VyY2VJRHNUZXh0dXJlID0gdGhpcy50ZXh0dXJlcy5nZXQobWF0ZXJpYWwuaGlkZGVuUG9pbnRTb3VyY2VJRHNUZXh0dXJlKTtcclxuICAgIHNoYWRlci5zZXRVbmlmb3JtMWkoXCJoaWRkZW5Qb2ludFNvdXJjZUlEc1wiLCBjdXJyZW50VGV4dHVyZUJpbmRpbmdQb2ludCk7XHJcbiAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgY3VycmVudFRleHR1cmVCaW5kaW5nUG9pbnQpO1xyXG4gICAgZ2wuYmluZFRleHR1cmUoaGlkZGVuUG9pbnRTb3VyY2VJRHNUZXh0dXJlLnRhcmdldCwgaGlkZGVuUG9pbnRTb3VyY2VJRHNUZXh0dXJlLmlkKTtcclxuICAgIGN1cnJlbnRUZXh0dXJlQmluZGluZ1BvaW50Kys7XHJcblxyXG4gICAgaWYgKG1hdGVyaWFsLnNuYXBFbmFibGVkID09PSB0cnVlKSB7XHJcbiAgICAgIGxldCBsU25hcHNob3QgPSBzaGFkZXIudW5pZm9ybUxvY2F0aW9uc1tcInVTbmFwc2hvdFswXVwiXTtcclxuICAgICAgbGV0IGxTbmFwc2hvdERlcHRoID0gc2hhZGVyLnVuaWZvcm1Mb2NhdGlvbnNbXCJ1U25hcHNob3REZXB0aFswXVwiXTtcclxuXHJcbiAgICAgIGxldCBiaW5kaW5nU3RhcnQgPSBjdXJyZW50VGV4dHVyZUJpbmRpbmdQb2ludDtcclxuICAgICAgbGV0IGxTbmFwc2hvdEJpbmRpbmdQb2ludHMgPSBuZXcgQXJyYXkoNSkuZmlsbChiaW5kaW5nU3RhcnQpLm1hcCgoYSwgaSkgPT4gKGEgKyBpKSk7XHJcbiAgICAgIGxldCBsU25hcHNob3REZXB0aEJpbmRpbmdQb2ludHMgPSBuZXcgQXJyYXkoNSkuZmlsbCgxICsgTWF0aC5tYXgoLi4ubFNuYXBzaG90QmluZGluZ1BvaW50cykpLm1hcCgoYSwgaSkgPT4gKGEgKyBpKSk7XHJcbiAgICAgIGN1cnJlbnRUZXh0dXJlQmluZGluZ1BvaW50ID0gMSArIE1hdGgubWF4KC4uLmxTbmFwc2hvdERlcHRoQmluZGluZ1BvaW50cyk7XHJcblxyXG4gICAgICBnbC51bmlmb3JtMWl2KGxTbmFwc2hvdCwgbFNuYXBzaG90QmluZGluZ1BvaW50cyk7XHJcbiAgICAgIGdsLnVuaWZvcm0xaXYobFNuYXBzaG90RGVwdGgsIGxTbmFwc2hvdERlcHRoQmluZGluZ1BvaW50cyk7XHJcblxyXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDU7IGkrKykge1xyXG4gICAgICAgIGxldCB0ZXh0dXJlID0gbWF0ZXJpYWwudW5pZm9ybXNbXCJ1U25hcHNob3RcIl0udmFsdWVbaV07XHJcbiAgICAgICAgbGV0IHRleHR1cmVEZXB0aCA9IG1hdGVyaWFsLnVuaWZvcm1zW1widVNuYXBzaG90RGVwdGhcIl0udmFsdWVbaV07XHJcblxyXG4gICAgICAgIGlmICghdGV4dHVyZSkge1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc25hcFRleHR1cmUgPSByZW5kZXJlci5wcm9wZXJ0aWVzLmdldCh0ZXh0dXJlKS5fX3dlYmdsVGV4dHVyZTtcclxuICAgICAgICBsZXQgc25hcFRleHR1cmVEZXB0aCA9IHJlbmRlcmVyLnByb3BlcnRpZXMuZ2V0KHRleHR1cmVEZXB0aCkuX193ZWJnbFRleHR1cmU7XHJcblxyXG4gICAgICAgIGxldCBiaW5kaW5nUG9pbnQgPSBsU25hcHNob3RCaW5kaW5nUG9pbnRzW2ldO1xyXG4gICAgICAgIGxldCBkZXB0aEJpbmRpbmdQb2ludCA9IGxTbmFwc2hvdERlcHRoQmluZGluZ1BvaW50c1tpXTtcclxuXHJcbiAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZShnbFtgVEVYVFVSRSR7YmluZGluZ1BvaW50fWBdKTtcclxuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBzbmFwVGV4dHVyZSk7XHJcblxyXG4gICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2xbYFRFWFRVUkUke2RlcHRoQmluZGluZ1BvaW50fWBdKTtcclxuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBzbmFwVGV4dHVyZURlcHRoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGZsYXR0ZW5lZE1hdHJpY2VzID0gW10uY29uY2F0KC4uLm1hdGVyaWFsLnVuaWZvcm1zLnVTbmFwVmlldy52YWx1ZS5tYXAoYyA9PiBjLmVsZW1lbnRzKSk7XHJcbiAgICAgIGxldCBsU25hcFZpZXcgPSBzaGFkZXIudW5pZm9ybUxvY2F0aW9uc1tcInVTbmFwVmlld1swXVwiXTtcclxuICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihsU25hcFZpZXcsIGZhbHNlLCBmbGF0dGVuZWRNYXRyaWNlcyk7XHJcblxyXG4gICAgICBmbGF0dGVuZWRNYXRyaWNlcyA9IFtdLmNvbmNhdCguLi5tYXRlcmlhbC51bmlmb3Jtcy51U25hcFByb2oudmFsdWUubWFwKGMgPT4gYy5lbGVtZW50cykpO1xyXG4gICAgICBsZXQgbFNuYXBQcm9qID0gc2hhZGVyLnVuaWZvcm1Mb2NhdGlvbnNbXCJ1U25hcFByb2pbMF1cIl07XHJcbiAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYobFNuYXBQcm9qLCBmYWxzZSwgZmxhdHRlbmVkTWF0cmljZXMpO1xyXG5cclxuICAgICAgZmxhdHRlbmVkTWF0cmljZXMgPSBbXS5jb25jYXQoLi4ubWF0ZXJpYWwudW5pZm9ybXMudVNuYXBQcm9qSW52LnZhbHVlLm1hcChjID0+IGMuZWxlbWVudHMpKTtcclxuICAgICAgbGV0IGxTbmFwUHJvakludiA9IHNoYWRlci51bmlmb3JtTG9jYXRpb25zW1widVNuYXBQcm9qSW52WzBdXCJdO1xyXG4gICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KGxTbmFwUHJvakludiwgZmFsc2UsIGZsYXR0ZW5lZE1hdHJpY2VzKTtcclxuXHJcbiAgICAgIGZsYXR0ZW5lZE1hdHJpY2VzID0gW10uY29uY2F0KC4uLm1hdGVyaWFsLnVuaWZvcm1zLnVTbmFwVmlld0ludi52YWx1ZS5tYXAoYyA9PiBjLmVsZW1lbnRzKSk7XHJcbiAgICAgIGxldCBsU25hcFZpZXdJbnYgPSBzaGFkZXIudW5pZm9ybUxvY2F0aW9uc1tcInVTbmFwVmlld0ludlswXVwiXTtcclxuICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihsU25hcFZpZXdJbnYsIGZhbHNlLCBmbGF0dGVuZWRNYXRyaWNlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yZW5kZXJOb2RlcyhyZW5kZXJlciwgb2N0cmVlLCBub2RlcywgdmlzaWJpbGl0eVRleHR1cmVEYXRhLCBjYW1lcmEsIHNoYWRlcik7XHJcblxyXG4gICAgZ2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMik7XHJcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcclxuICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTApO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCB7IEdyb3VwIH07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=