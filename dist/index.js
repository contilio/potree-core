(()=>{"use strict";var e={477:e=>{e.exports=function(e,t,i,r){var n=self||window;try{try{var o;try{o=new n.Blob([e])}catch(t){(o=new(n.BlobBuilder||n.WebKitBlobBuilder||n.MozBlobBuilder||n.MSBlobBuilder)).append(e),o=o.getBlob()}var s=n.URL||n.webkitURL,a=s.createObjectURL(o),u=new n[t](a,i);return s.revokeObjectURL(a),u}catch(r){return new n[t]("data:application/javascript,".concat(encodeURIComponent(e)),i)}}catch(e){if(!r)throw Error("Inline worker is not supported");return new n[t](r,i)}}}},t={};function i(r){var n=t[r];if(void 0!==n)return n.exports;var o=t[r]={exports:{}};return e[r](o,o.exports,i),o.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var r in t)i.o(t,r)&&!i.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{i.r(r),i.d(r,{AttributeLocations:()=>le,BasicGroup:()=>Ne,BinaryHeap:()=>ue,BinaryLoader:()=>P,Classification:()=>he,ClipMethod:()=>pe,ClipTask:()=>de,DEM:()=>w,DEMNode:()=>b,EptBinaryLoader:()=>k,EptLaszipLoader:()=>W,EptLoader:()=>Z,Global:()=>p,Gradients:()=>J,GreyhoundBinaryLoader:()=>N,GreyhoundLoader:()=>C,GreyhoundUtils:()=>I,Group:()=>Ie,HelperUtils:()=>$,LASLAZLoader:()=>U,LASLoader:()=>L,LRU:()=>t,POCLoader:()=>H,PointAttribute:()=>y,PointAttributeNames:()=>f,PointAttributeTypes:()=>m,PointAttributes:()=>x,PointCloudArena4D:()=>oe,PointCloudArena4DGeometry:()=>ae,PointCloudEptGeometry:()=>X,PointCloudEptGeometryNode:()=>K,PointCloudGreyhoundGeometry:()=>_,PointCloudMaterial:()=>te,PointCloudOctree:()=>re,PointCloudOctreeGeometry:()=>V,PointCloudOctreeGeometryNode:()=>G,PointCloudTree:()=>T,PointColorType:()=>me,PointShape:()=>fe,PointSizeType:()=>ce,Points:()=>Te,Shader:()=>Ee,Shaders:()=>ee,TreeType:()=>ge,VERSION:()=>Se,VersionUtils:()=>E,WebGLBuffer:()=>Be,WebGLTexture:()=>Ae,WorkerManager:()=>d,XHRFactory:()=>B,loadPointCloud:()=>ye,updatePointClouds:()=>be,updateVisibility:()=>xe,updateVisibilityStructures:()=>we});class e{constructor(e){this.previous=null,this.next=null,this.node=e}}class t{constructor(){this.first=null,this.last=null,this.items={},this.elements=0,this.numPoints=0}size(){return this.elements}contains(e){return null==this.items[e.id]}touch(t){var i;t.loaded&&(null==this.items[t.id]?((i=new e(t)).previous=this.last,this.last=i,null!==i.previous&&(i.previous.next=i),this.items[t.id]=i,this.elements++,null===this.first&&(this.first=i),this.numPoints+=t.numPoints):null===(i=this.items[t.id]).previous?null!==i.next&&(this.first=i.next,this.first.previous=null,i.previous=this.last,i.next=null,this.last=i,i.previous.next=i):null!==i.next&&(i.previous.next=i.next,i.next.previous=i.previous,i.previous=this.last,i.next=null,this.last=i,i.previous.next=i))}remove(e){var t=this.items[e.id];t&&(1===this.elements?(this.first=null,this.last=null):(t.previous||(this.first=t.next,this.first.previous=null),t.next||(this.last=t.previous,this.last.next=null),t.previous&&t.next&&(t.previous.next=t.next,t.next.previous=t.previous)),delete this.items[e.id],this.elements--,this.numPoints-=e.numPoints)}getLRUItem(){return null===this.first?null:this.first.node}toString(){for(var e="{ ",t=this.first;null!==t;)e+=t.node.id,null!==t.next&&(e+=", "),t=t.next;return(e+="}")+"("+this.size()+")"}freeMemory(){if(!(this.elements<=1))for(;this.numPoints>p.pointLoadLimit;){var e=this.first.node;this.disposeDescendants(e)}}disposeDescendants(e){var t=[];for(t.push(e);t.length>0;){var i=t.pop();for(var r in i.dispose(),this.remove(i),i.children)i.children.hasOwnProperty(r)&&i.children[r].loaded&&t.push(i.children[r])}}}var n=i(477),o=i.n(n);function s(){return o()('(()=>{"use strict";function e(e){this.buffer=e,this.u8=new Uint8Array(e);var t=new ArrayBuffer(4),r=new Float32Array(t),i=new Uint8Array(t);this.getUint32=function(e){return this.u8[e+3]<<24|this.u8[e+2]<<16|this.u8[e+1]<<8|this.u8[e]},this.getUint16=function(e){return this.u8[e+1]<<8|this.u8[e]},this.getFloat32=function(e){return i[0]=this.u8[e+0],i[1]=this.u8[e+1],i[2]=this.u8[e+2],i[3]=this.u8[e+3],r[0]},this.getUint8=function(e){return this.u8[e]}}function t(e){this.version=e;var t=-1===e.indexOf(".")?e.length:e.indexOf(".");this.versionMajor=parseInt(e.substr(0,t)),this.versionMinor=parseInt(e.substr(t+1)),0===this.versionMinor.length&&(this.versionMinor=0)}onmessage=function(r){if(r.data&&r.data.buffer)try{var i=r.data.buffer,n=r.data.pointAttributes,s=i.byteLength/n.byteSize,A=new e(i),T=new t(r.data.version),u=r.data.offset,o=r.data.scale,f=(r.data.spacing,r.data.hasChildren,r.data.name,[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY]),h=[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY],_=[0,0,0],I={},b=0;for(var N of n.attributes){if(N.name===a.POSITION_CARTESIAN.name){for(var E=new ArrayBuffer(4*s*3),y=new Float32Array(E),S=0;S<s;S++)T.newerThan("1.3")?(L=A.getUint32(b+S*n.byteSize+0,!0)*o,C=A.getUint32(b+S*n.byteSize+4,!0)*o,d=A.getUint32(b+S*n.byteSize+8,!0)*o):(L=A.getFloat32(S*n.byteSize+0,!0)+u[0],C=A.getFloat32(S*n.byteSize+4,!0)+u[1],d=A.getFloat32(S*n.byteSize+8,!0)+u[2]),y[3*S+0]=L,y[3*S+1]=C,y[3*S+2]=d,_[0]+=L/s,_[1]+=C/s,_[2]+=d/s,f[0]=Math.min(f[0],L),f[1]=Math.min(f[1],C),f[2]=Math.min(f[2],d),h[0]=Math.max(h[0],L),h[1]=Math.max(h[1],C),h[2]=Math.max(h[2],d);I[N.name]={buffer:E,attribute:N}}else if(N.name===a.COLOR_PACKED.name){E=new ArrayBuffer(4*s);var m=new Uint8Array(E);for(S=0;S<s;S++)m[4*S+0]=A.getUint8(b+S*n.byteSize+0),m[4*S+1]=A.getUint8(b+S*n.byteSize+1),m[4*S+2]=A.getUint8(b+S*n.byteSize+2);I[N.name]={buffer:E,attribute:N}}else if(N.name===a.INTENSITY.name){E=new ArrayBuffer(4*s);var P=new Float32Array(E);for(S=0;S<s;S++){var M=A.getUint16(b+S*n.byteSize,!0);P[S]=M}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.CLASSIFICATION.name){E=new ArrayBuffer(s);var w=new Uint8Array(E);for(S=0;S<s;S++){var l=A.getUint8(b+S*n.byteSize);w[S]=l}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.NORMAL_SPHEREMAPPED.name){E=new ArrayBuffer(4*s*3);var z=new Float32Array(E);for(S=0;S<s;S++){var O=A.getUint8(b+S*n.byteSize+0),U=A.getUint8(b+S*n.byteSize+1),D=O/255*2-1,g=U/255*2-1,v=1,Y=D*-D+g*-g+1*v;v=Y,D*=Math.sqrt(Y),g*=Math.sqrt(Y),D*=2,g*=2,v=2*v-1,z[3*S+0]=D,z[3*S+1]=g,z[3*S+2]=v}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.NORMAL_OCT16.name){for(E=new ArrayBuffer(4*s*3),z=new Float32Array(E),S=0;S<s;S++){O=A.getUint8(b+S*n.byteSize+0),U=A.getUint8(b+S*n.byteSize+1);var F=O/255*2-1,R=U/255*2-1,d=1-Math.abs(F)-Math.abs(R),L=0,C=0;d>=0?(L=F,C=R):(L=-(R/Math.sign(R)-1)/Math.sign(F),C=-(F/Math.sign(F)-1)/Math.sign(R));var p=Math.sqrt(L*L+C*C+d*d);L/=p,C/=p,d/=p,z[3*S+0]=L,z[3*S+1]=C,z[3*S+2]=d}I[N.name]={buffer:E,attribute:N}}else if(N.name===a.NORMAL.name){for(E=new ArrayBuffer(4*s*3),z=new Float32Array(E),S=0;S<s;S++)L=A.getFloat32(b+S*n.byteSize+0,!0),C=A.getFloat32(b+S*n.byteSize+4,!0),d=A.getFloat32(b+S*n.byteSize+8,!0),z[3*S+0]=L,z[3*S+1]=C,z[3*S+2]=d;I[N.name]={buffer:E,attribute:N}}b+=N.byteSize}E=new ArrayBuffer(4*s);for(var B=new Uint32Array(E),c=0;c<s;c++)B[c]=c;I[a.INDICES.name]={buffer:E,attribute:a.INDICES};var x={buffer:i,mean:_,attributeBuffers:I,tightBoundingBox:{min:f,max:h}},G=[];for(var V in x.attributeBuffers)G.push(x.attributeBuffers[V].buffer);G.push(i),postMessage(x,G)}catch(e){postMessage({error:"Exeption thrown during execution."})}},t.prototype.newerThan=function(e){var r=new t(e);return this.versionMajor>r.versionMajor||this.versionMajor===r.versionMajor&&this.versionMinor>r.versionMinor};var r={DATA_TYPE_DOUBLE:{ordinal:0,size:8},DATA_TYPE_FLOAT:{ordinal:1,size:4},DATA_TYPE_INT8:{ordinal:2,size:1},DATA_TYPE_UINT8:{ordinal:3,size:1},DATA_TYPE_INT16:{ordinal:4,size:2},DATA_TYPE_UINT16:{ordinal:5,size:2},DATA_TYPE_INT32:{ordinal:6,size:4},DATA_TYPE_UINT32:{ordinal:7,size:4},DATA_TYPE_INT64:{ordinal:8,size:8},DATA_TYPE_UINT64:{ordinal:9,size:8}},i=0;for(var n in r)r[i]=r[n],i++;function a(e,t,r){this.name=e,this.type=t,this.numElements=r,this.byteSize=this.numElements*this.type.size}function s(e){if(this.attributes=[],this.byteSize=0,this.size=0,null!=e)for(var t=0;t<e.length;t++){var r=a[e[t]];this.attributes.push(r),this.byteSize+=r.byteSize,this.size++}}a.POSITION_CARTESIAN=new a(0,r.DATA_TYPE_FLOAT,3),a.RGBA_PACKED=new a(1,r.DATA_TYPE_INT8,4),a.COLOR_PACKED=a.RGBA_PACKED,a.RGB_PACKED=new a(1,r.DATA_TYPE_INT8,3),a.NORMAL_FLOATS=new a(4,r.DATA_TYPE_FLOAT,3),a.FILLER_1B=new a(5,r.DATA_TYPE_UINT8,1),a.INTENSITY=new a(6,r.DATA_TYPE_UINT16,1),a.CLASSIFICATION=new a(7,r.DATA_TYPE_UINT8,1),a.NORMAL_SPHEREMAPPED=new a(8,r.DATA_TYPE_UINT8,2),a.NORMAL_OCT16=new a(9,r.DATA_TYPE_UINT8,2),a.NORMAL=new a(10,r.DATA_TYPE_FLOAT,3),a.RETURN_NUMBER=new a(11,r.DATA_TYPE_UINT8,1),a.NUMBER_OF_RETURNS=new a(12,r.DATA_TYPE_UINT8,1),a.SOURCE_ID=new a(13,r.DATA_TYPE_UINT8,1),a.INDICES=new a(14,r.DATA_TYPE_UINT32,1),a.SPACING=new a(15,r.DATA_TYPE_FLOAT,1),s.prototype.add=function(e){this.attributes.push(e),this.byteSize+=e.byteSize,this.size++},s.prototype.hasColors=function(){for(var e in this.attributes)if(1===this.attributes[e].name)return!0;return!1},s.prototype.hasNormals=function(){for(var e in this.attributes){var t=this.attributes[e];if(t===a.NORMAL_SPHEREMAPPED||t===a.NORMAL_FLOATS||t===a.NORMAL||t===a.NORMAL_OCT16)return!0}return!1}})();\n',"Worker",void 0,void 0)}function a(){return o()('(()=>{"use strict";onmessage=function(a){if(a.data&&a.data.buffer){for(var r=a.data.buffer,n=a.data.numPoints,t=a.data.pointSize,e=a.data.pointFormatID,i=a.data.scale,m=a.data.offset,f=(new Uint8Array(r),new DataView(r)),I=new ArrayBuffer(40*n),u=(new DataView(I),{min:[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY],max:[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY]}),o=[0,0,0],s=new ArrayBuffer(3*n*4),N=new ArrayBuffer(4*n),w=new ArrayBuffer(4*n),A=new ArrayBuffer(n),y=new ArrayBuffer(n),d=new ArrayBuffer(n),g=new ArrayBuffer(2*n),U=new Float32Array(s),c=new Uint8Array(N),b=new Float32Array(w),T=new Uint8Array(A),x=new Uint8Array(y),B=new Uint8Array(d),v=new Uint16Array(g),E=0;E<n;E++){var F=f.getInt32(E*t+0,!0),V=f.getInt32(E*t+4,!0),h=f.getInt32(E*t+8,!0),l=F*i[0]+m[0]-a.data.mins[0],p=V*i[1]+m[1]-a.data.mins[1],M=h*i[2]+m[2]-a.data.mins[2];U[3*E+0]=l,U[3*E+1]=p,U[3*E+2]=M,o[0]+=l/n,o[1]+=p/n,o[2]+=M/n,u.min[0]=Math.min(u.min[0],l),u.min[1]=Math.min(u.min[1],p),u.min[2]=Math.min(u.min[2],M),u.max[0]=Math.max(u.max[0],l),u.max[1]=Math.max(u.max[1],p),u.max[2]=Math.max(u.max[2],M);var S=f.getUint16(E*t+12,!0);b[E]=S;var Y=f.getUint8(E*t+14,!0),_=7&Y,D=(56&Y)>>3;x[E]=_,B[E]=D;var O=f.getUint8(E*t+15,!0);T[E]=O;var P=f.getUint16(E*t+18,!0);if(v[E]=P,2===e){var G=f.getUint16(E*t+20,!0)/256,R=f.getUint16(E*t+22,!0)/256,z=f.getUint16(E*t+24,!0)/256;c[4*E+0]=G,c[4*E+1]=R,c[4*E+2]=z,c[4*E+3]=255}}var j=new ArrayBuffer(4*n),k=new Uint32Array(j);for(E=0;E<n;E++)k[E]=E;var q={mean:o,position:s,color:N,intensity:w,classification:A,returnNumber:y,numberOfReturns:d,pointSourceID:g,tightBoundingBox:u,indices:j};postMessage(q,[q.position,q.color,q.intensity,q.classification,q.returnNumber,q.numberOfReturns,q.pointSourceID,q.indices])}}})();\n',"Worker",void 0,void 0)}function u(){return o()('(()=>{"use strict";onmessage=function(a){var t=a.data.boundingBox,n=new Float32Array(a.data.position),e=n.length/3,i=t.max[0]-t.min[0],r=t.max[1]-t.min[1],m=(t.max[2],t.min[2],new Float32Array(4096));m.fill(-1/0);for(var o=0;o<e;o++){var s=n[3*o+0],d=n[3*o+1],h=n[3*o+2],f=s/i,g=d/r;m[parseInt(Math.min(64*f,63))+64*parseInt(Math.min(64*g,63))]=h}var l={dem:{width:64,height:64,data:m.buffer}};postMessage(l,[l.dem.data])}})();\n',"Worker",void 0,void 0)}function l(){return o()('onmessage=function(e){if(performance.mark("laslaz-start"),!e.data||!e.data.buffer)return;let t=e.data.buffer,n=e.data.numPoints,r=e.data.pointSize,a=e.data.pointFormatID,i=e.data.scale,m=e.data.offset,f=(new Uint8Array(t),new DataView(t)),o={min:[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY],max:[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY]},I=[0,0,0],u=new ArrayBuffer(3*n*4),s=new ArrayBuffer(4*n),l=new ArrayBuffer(4*n),N=new ArrayBuffer(n),A=new ArrayBuffer(n),w=new ArrayBuffer(n),c=new ArrayBuffer(2*n),g=new Float32Array(u),U=new Uint8Array(s),d=new Float32Array(l),b=new Uint8Array(N),T=new Uint8Array(A),p=new Uint8Array(w),B=new Uint16Array(c),E=2==a||3==a,F=2==a?20:28,M=!1;if(E){let e,t,a,i;for(let m=0;m<n&&!M;++m)i=m*r,e=f.getUint16(i+F,!0),t=f.getUint16(i+F+2,!0),a=f.getUint16(i+F+4,!0),(e>255||t>255||a>255)&&(M=!0)}for(let t=0;t<n;t++){let a=f.getInt32(t*r+0,!0),u=f.getInt32(t*r+4,!0),s=f.getInt32(t*r+8,!0);x=a*i[0]+m[0]-e.data.mins[0],y=u*i[1]+m[1]-e.data.mins[1],z=s*i[2]+m[2]-e.data.mins[2],g[3*t+0]=x,g[3*t+1]=y,g[3*t+2]=z,I[0]+=x/n,I[1]+=y/n,I[2]+=z/n,o.min[0]=Math.min(o.min[0],x),o.min[1]=Math.min(o.min[1],y),o.min[2]=Math.min(o.min[2],z),o.max[0]=Math.max(o.max[0],x),o.max[1]=Math.max(o.max[1],y),o.max[2]=Math.max(o.max[2],z);let l=f.getUint16(t*r+12,!0);d[t]=l;let N=f.getUint8(t*r+14,!0),A=7&N,w=(56&N)>>3;T[t]=A,p[t]=w;let c=f.getUint8(t*r+15,!0);b[t]=c;let h=f.getUint16(t*r+18,!0);if(B[t]=h,E){let e=f.getUint16(t*r+F,!0),n=f.getUint16(t*r+F+2,!0),a=f.getUint16(t*r+F+4,!0);M&&(e/=256,n/=256,a/=256),U[4*t+0]=e,U[4*t+1]=n,U[4*t+2]=a,U[4*t+3]=255}}let h=new ArrayBuffer(4*n),V=new Uint32Array(h);for(let e=0;e<n;e++)V[e]=e;performance.mark("laslaz-end"),performance.clearMarks(),performance.clearMeasures();let S={mean:I,position:u,color:s,intensity:l,classification:N,returnNumber:A,numberOfReturns:w,pointSourceID:c,tightBoundingBox:o,indices:h};postMessage(S,[S.position,S.color,S.intensity,S.classification,S.returnNumber,S.numberOfReturns,S.pointSourceID,S.indices])};\n',"Worker",void 0,void 0)}function h(){return o()('Potree={},onmessage=function(e){if(!e.data||!e.data.buffer)return;let r,t,n,a,i,u,s,f,m,o,c,l,A,y,w,d,g,b,U,h,x,M=e.data.buffer,N=new DataView(M),B=e.data.schema,I=e.data.scale,R=e.data.offset,X=e.data.mins,p=B.reduce(((e,r)=>(e[r.name]=r,e)),{}),E=e=>{let r=(e=>{let r=0;for(var t=0;t<B.length;++t){if(B[t].name==e)return r;r+=B[t].size}})(e),t=p[e].type,n=p[e].size;if("signed"==t)switch(n){case 1:return e=>N.getInt8(e+r);case 2:return e=>N.getInt16(e+r,!0);case 4:return e=>N.getInt32(e+r,!0);case 8:return e=>N.getInt64(e+r,!0)}if("unsigned"==t)switch(n){case 1:return e=>N.getUint8(e+r);case 2:return e=>N.getUint16(e+r,!0);case 4:return e=>N.getUint32(e+r,!0);case 8:return e=>N.getUint64(e+r,!0)}if("float"==t)switch(n){case 4:return e=>N.getFloat32(e+r,!0);case 8:return e=>N.getFloat64(e+r,!0)}let a=JSON.stringify(p[e]);throw new Error(`Invalid dimension specification for ${e}: ${a}`)},L=B.reduce(((e,r)=>e+r.size),0),V=M.byteLength/L,_=!1;if(p.X&&p.Y&&p.Z&&(r=new ArrayBuffer(4*V*3),f=new Float32Array(r),w=[E("X"),E("Y"),E("Z")]),p.Red&&p.Green&&p.Blue){let e,r,n,a;t=new ArrayBuffer(4*V),m=new Uint8Array(t),d=[E("Red"),E("Green"),E("Blue")];for(let t=0;t<V&&!_;++t)a=t*L,e=d[0](a),r=d[1](a),n=d[2](a),(e>255||r>255||n>255)&&(_=!0)}p.Intensity&&(n=new ArrayBuffer(4*V),o=new Float32Array(n),g=E("Intensity")),p.Classification&&(a=new ArrayBuffer(V),c=new Uint8Array(a),b=E("Classification")),p.ReturnNumber&&(i=new ArrayBuffer(V),l=new Uint8Array(i),U=E("ReturnNumber")),p.NumberOfReturns&&(u=new ArrayBuffer(V),A=new Uint8Array(u),h=E("NumberOfReturns")),p.PointSourceId&&(s=new ArrayBuffer(2*V),y=new Uint16Array(s),x=E("PointSourceId"));let z,O,S,F,P,v,C=[0,0,0],G={min:[Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE],max:[-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE]};for(let e=0;e<V;++e){let r=e*L;f&&(z=w[0](r)*I.x+R.x-X[0],O=w[1](r)*I.y+R.y-X[1],S=w[2](r)*I.z+R.z-X[2],C[0]+=z/V,C[1]+=O/V,C[2]+=S/V,G.min[0]=Math.min(G.min[0],z),G.min[1]=Math.min(G.min[1],O),G.min[2]=Math.min(G.min[2],S),G.max[0]=Math.max(G.max[0],z),G.max[1]=Math.max(G.max[1],O),G.max[2]=Math.max(G.max[2],S),f[3*e+0]=z,f[3*e+1]=O,f[3*e+2]=S),m&&(F=d[0](r),P=d[1](r),v=d[2](r),_&&(F/=256,P/=256,v/=256),m[4*e+0]=F,m[4*e+1]=P,m[4*e+2]=v),o&&(o[e]=g(r)),c&&(c[e]=b(r)),l&&(l[e]=U(r)),A&&(A[e]=h(r)),y&&(y[e]=x(r))}let Y=new ArrayBuffer(4*V),Z=new Uint32Array(Y);for(let e=0;e<V;++e)Z[e]=e;let $={numPoints:V,tightBoundingBox:G,mean:C,position:r,color:t,intensity:n,classification:a,returnNumber:i,numberOfReturns:u,pointSourceId:s,indices:Y},D=[$.position,$.color,$.intensity,$.classification,$.returnNumber,$.numberOfReturns,$.pointSourceId,$.indices].filter((e=>e));postMessage($,D)};\n',"Worker",void 0,void 0)}class d{constructor(){this.workers=[];for(var e=0;e<7;e++)this.workers.push([])}getWorker(e){if(this.workers[e].length>0)return this.workers[e].pop();switch(e){case 0:return new s;case 1:throw new Error("LASLAZWorker not implemented");case 2:return new a;case 3:throw new Error("GreyhoundBinaryDecoderWorker not implemented");case 4:return new u;case 5:return new l;case 6:return new h;default:throw"Unknown worker requested"}}returnWorker(e,t){this.workers[e].push(t)}runTask(e,t,i,r){var n=this,o=this.getWorker(e);o.onmessage=function(i){t(i),n.returnWorker(e,o)},void 0!==r?o.postMessage(i,r):o.postMessage(i)}}d.BINARY_DECODER=0,d.LAS_LAZ=1,d.LAS_DECODER=2,d.GREYHOUND=3,d.DEM=4,d.EPT_LAS_ZIP_DECODER=5,d.EPT_BINARY_DECODER=6;var p={debug:{},workerPath:function(){var e,t=document&&document.currentScript?document.currentScript:(e=document.getElementsByTagName("script"))[e.length-1].getAttribute("src");if(t&&t.src){var i=new URL(t.src+"/..").href;return"/"===i.slice(-1)&&(i=i.slice(0,-1)),i}return console.error("Potree: Was unable to find its script path using document.currentScript."),""}(),maxNodesLoadGPUFrame:20,maxDEMLevel:0,maxNodesLoading:void 0!==navigator.hardwareConcurrency?navigator.hardwareConcurrency:4,pointLoadLimit:1e10,numNodesLoading:0,measureTimings:!1,workerPool:new d,lru:new t,pointcloudTransformVersion:void 0};const c=require("three");var f={POSITION_CARTESIAN:0,COLOR_PACKED:1,COLOR_FLOATS_1:2,COLOR_FLOATS_255:3,NORMAL_FLOATS:4,FILLER:5,INTENSITY:6,CLASSIFICATION:7,NORMAL_SPHEREMAPPED:8,NORMAL_OCT16:9,NORMAL:10,RETURN_NUMBER:11,NUMBER_OF_RETURNS:12,SOURCE_ID:13,INDICES:14,SPACING:15},m={DATA_TYPE_DOUBLE:{ordinal:0,size:8},DATA_TYPE_FLOAT:{ordinal:1,size:4},DATA_TYPE_INT8:{ordinal:2,size:1},DATA_TYPE_UINT8:{ordinal:3,size:1},DATA_TYPE_INT16:{ordinal:4,size:2},DATA_TYPE_UINT16:{ordinal:5,size:2},DATA_TYPE_INT32:{ordinal:6,size:4},DATA_TYPE_UINT32:{ordinal:7,size:4},DATA_TYPE_INT64:{ordinal:8,size:8},DATA_TYPE_UINT64:{ordinal:9,size:8}},g=0;for(var v in m)m[g]=m[v],g++;function y(e,t,i){this.name=e,this.type=t,this.numElements=i,this.byteSize=this.numElements*this.type.size}function x(e){if(this.attributes=[],this.byteSize=0,this.size=0,null!=e)for(var t=0;t<e.length;t++){var i=y[e[t]];this.attributes.push(i),this.byteSize+=i.byteSize,this.size++}}y.POSITION_CARTESIAN=new y(f.POSITION_CARTESIAN,m.DATA_TYPE_FLOAT,3),y.RGBA_PACKED=new y(f.COLOR_PACKED,m.DATA_TYPE_INT8,4),y.COLOR_PACKED=y.RGBA_PACKED,y.RGB_PACKED=new y(f.COLOR_PACKED,m.DATA_TYPE_INT8,3),y.NORMAL_FLOATS=new y(f.NORMAL_FLOATS,m.DATA_TYPE_FLOAT,3),y.FILLER_1B=new y(f.FILLER,m.DATA_TYPE_UINT8,1),y.INTENSITY=new y(f.INTENSITY,m.DATA_TYPE_UINT16,1),y.CLASSIFICATION=new y(f.CLASSIFICATION,m.DATA_TYPE_UINT8,1),y.NORMAL_SPHEREMAPPED=new y(f.NORMAL_SPHEREMAPPED,m.DATA_TYPE_UINT8,2),y.NORMAL_OCT16=new y(f.NORMAL_OCT16,m.DATA_TYPE_UINT8,2),y.NORMAL=new y(f.NORMAL,m.DATA_TYPE_FLOAT,3),y.RETURN_NUMBER=new y(f.RETURN_NUMBER,m.DATA_TYPE_UINT8,1),y.NUMBER_OF_RETURNS=new y(f.NUMBER_OF_RETURNS,m.DATA_TYPE_UINT8,1),y.SOURCE_ID=new y(f.SOURCE_ID,m.DATA_TYPE_UINT8,1),y.INDICES=new y(f.INDICES,m.DATA_TYPE_UINT32,1),y.SPACING=new y(f.SPACING,m.DATA_TYPE_FLOAT,1),x.prototype.add=function(e){this.attributes.push(e),this.byteSize+=e.byteSize,this.size++},x.prototype.hasColors=function(){for(var e in this.attributes)if(this.attributes[e].name===f.COLOR_PACKED)return!0;return!1},x.prototype.hasNormals=function(){for(var e in this.attributes){var t=this.attributes[e];if(t===y.NORMAL_SPHEREMAPPED||t===y.NORMAL_FLOATS||t===y.NORMAL||t===y.NORMAL_OCT16)return!0}return!1};class b{constructor(e,t,i){this.name=e,this.box=t,this.tileSize=i,this.level=this.name.length-1,this.data=new Float32Array(i*i),this.data.fill(-1/0),this.children=[],this.mipMap=[this.data],this.mipMapNeedsUpdate=!0}createMipMap(){this.mipMap=[this.data];for(var e=this.tileSize,t=parseInt(e/2),i=this.data;t>1;){for(var r=new Float32Array(t*t),n=0;n<t;n++)for(var o=0;o<t;o++){var s=i[2*n+0+2*o*e],a=i[2*n+0+2*o*e+e],u=i[2*n+1+2*o*e],l=i[2*n+1+2*o*e+e],[h,d]=[0,0];isFinite(s)&&(h+=s,d+=1),isFinite(a)&&(h+=a,d+=1),isFinite(u)&&(h+=u,d+=1),isFinite(l)&&(h+=l,d+=1),h/=d,r[n+o*t]=h}this.mipMap.push(r),i=r,e=t,t=parseInt(t/2)}this.mipMapNeedsUpdate=!1}uv(e){var t=this.box.getSize(new c.Vector3);return[(e.x-this.box.min.x)/t.x,(e.y-this.box.min.y)/t.y]}heightAtMipMapLevel(e,t){var i=this.uv(e),r=parseInt(this.tileSize/parseInt(2**t)),n=this.mipMap[t],o=Math.min(i[0]*r,r-1),s=Math.min(i[1]*r,r-1),a=o%1,u=s%1,[l,h]=[Math.floor(o),Math.ceil(o)],[d,p]=[Math.floor(s),Math.ceil(s)],c=n[l+r*d],f=n[l+r*p],m=n[h+r*d],g=n[h+r*p],v=isFinite(c)?(1-a)*(1-u):0,y=isFinite(f)?(1-a)*u:0,x=isFinite(m)?a*(1-u):0,b=isFinite(g)?a*u:0,w=v+y+x+b;if(v/=w,y/=w,x/=w,b/=w,0===w)return null;var S=0;return isFinite(c)&&(S+=c*v),isFinite(f)&&(S+=f*y),isFinite(m)&&(S+=m*x),isFinite(g)&&(S+=g*b),S}height(e){for(var t=null,i=0;i<this.mipMap.length;i++)if(null!==(t=this.heightAtMipMapLevel(e,i)))return t;return t}traverse(e,t=0){for(var i of(e(this,t),this.children.filter((e=>void 0!==e))))i.traverse(e,t+1)}}class w{constructor(e){this.pointcloud=e,this.matrix=null,this.boundingBox=null,this.tileSize=64,this.root=null,this.version=0}expandAndFindByBox(e,t){if(0===t)return[this.root];for(var i=[],r=[this.root];r.length>0;){var n=r.pop(),o=n.box.getSize(new c.Vector3),s={x:(e.min.x-n.box.min.x)/o.x,y:(e.min.y-n.box.min.y)/o.y},a={x:(e.max.x-n.box.max.x)/o.x,y:(e.max.y-n.box.max.y)/o.y};for(var u of(s.x=s.x<.5?0:1,s.y=s.y<.5?0:1,a.x=a.x<.5?0:1,a.y=a.y<.5?0:1,0===s.x&&0===s.y&&1===a.x&&1===a.y?[0,1,2,3]:s.x===a.x&&s.y===a.y?[s.x<<1|s.y]:[s.x<<1|s.y,a.x<<1|a.y])){if(void 0===n.children[u]){var l=n.box.clone();(2&u)>0?l.min.x+=o.x/2:l.max.x-=o.x/2,(1&u)>0?l.min.y+=o.y/2:l.max.y-=o.y/2;var h=new b(n.name+u,l,this.tileSize);n.children[u]=h}(h=n.children[u]).level<t?r.push(h):i.push(h)}}return i}childIndex(e){var[t,i]=e.map((e=>e<.5?0:1));return t<<1|i}height(e){if(!this.root)return 0;for(var t=null,i=[this.root];;){var r=i[i.length-1],n=r.height(e);null!==n&&(t=n);var o=r.uv(e),s=this.childIndex(o);if(!r.children[s])break;i.push(r.children[s])}return t+this.pointcloud.position.z}update(e){null!==this.matrix&&this.matrix.equals(this.pointcloud.matrixWorld)||(this.matrix=this.pointcloud.matrixWorld.clone(),this.boundingBox=this.pointcloud.boundingBox.clone().applyMatrix4(this.matrix),this.root=new b("r",this.boundingBox,this.tileSize),this.version++);var t=null;for(var i of e)if(void 0===i.demVersion||i.demVersion<this.version){t=i;break}if(null!==t){var r=t.getBoundingBox().clone().applyMatrix4(this.matrix),n=r.getSize(new c.Vector3),o=this.expandAndFindByBox(r,t.getLevel());t.demVersion=this.version;var s=t.geometryNode.geometry.attributes.position.array,a={boundingBox:{min:t.getBoundingBox().min.toArray(),max:t.getBoundingBox().max.toArray()},position:new Float32Array(s).buffer},u=[a.position],l=this;p.workerPool.runTask(d.DEM,(function(e){var t=new Float32Array(e.data.dem.data);for(var i of o){for(var s=i.box.getSize(new c.Vector3),a=0;a<l.tileSize;a++)for(var u=0;u<l.tileSize;u++){var h=a/(l.tileSize-1),d=u/(l.tileSize-1),p=i.box.min.x+h*s.x,f=i.box.min.y+d*s.y,m=l.tileSize*(p-r.min.x)/n.x,g=l.tileSize*(f-r.min.y)/n.y;m<0||m>l.tileSize||g<0||g>l.tileSize||(m=Math.min(Math.floor(m),l.tileSize-1),g=Math.min(Math.floor(g),l.tileSize-1),i.data[a+l.tileSize*u]=t[m+l.tileSize*g])}i.createMipMap(),i.mipMapNeedsUpdate=!0}}),a,u)}}}class S{constructor(){this.needsTransformUpdate=!0}getChildren(){}getBoundingBox(){}isLoaded(){}isGeometryNode(){}isTreeNode(){}getLevel(){}getBoundingSphere(){}}class T extends c.Object3D{constructor(){super(),this.dem=new w(this)}initialized(){return null!==this.root}}class _{constructor(){this.spacing=0,this.boundingBox=null,this.root=null,this.nodes=null,this.pointAttributes={},this.hierarchyStepSize=-1,this.loader=null,this.schema=null,this.baseDepth=null,this.offset=null,this.projection=null,this.boundingSphere=null,this.serverURL=null,this.normalize={color:!1,intensity:!1}}}function A(e,t,i,r,n){this.id=A.IDCount++,this.name=e,this.index=parseInt(e.charAt(e.length-1)),this.pcoGeometry=t,this.geometry=null,this.boundingBox=i,this.boundingSphere=i.getBoundingSphere(new c.Sphere),this.scale=r,this.offset=n,this.children={},this.numPoints=0,this.level=null,this.loaded=!1,this.oneTimeDisposeHandlers=[],this.baseLoaded=!1;var o=new c.Vector3,s=this.boundingBox.clone();s.min.sub(this.pcoGeometry.boundingBox.getCenter(o)),s.max.sub(this.pcoGeometry.boundingBox.getCenter(o)),this.scale&&(s.min.multiplyScalar(1/this.scale),s.max.multiplyScalar(1/this.scale)),this.greyhoundBounds=s,this.greyhoundOffset=this.pcoGeometry.offset.clone().add(this.pcoGeometry.boundingBox.getSize(new c.Vector3).multiplyScalar(.5))}function E(e){this.version=e;var t=-1===e.indexOf(".")?e.length:e.indexOf(".");this.versionMajor=parseInt(e.substr(0,t)),this.versionMinor=parseInt(e.substr(t+1)),0===this.versionMinor.length&&(this.versionMinor=0)}A.IDCount=0,A.prototype=Object.create(S.prototype),A.prototype.isGeometryNode=function(){return!0},A.prototype.isTreeNode=function(){return!1},A.prototype.isLoaded=function(){return this.loaded},A.prototype.getBoundingSphere=function(){return this.boundingSphere},A.prototype.getBoundingBox=function(){return this.boundingBox},A.prototype.getLevel=function(){return this.level},A.prototype.getChildren=function(){for(var e=[],t=0;t<8;++t)this.children[t]&&e.push(this.children[t]);return e},A.prototype.getURL=function(){var e=this.pcoGeometry.schema,t=this.greyhoundBounds,i=t.min.x+","+t.min.y+","+t.min.z+","+t.max.x+","+t.max.y+","+t.max.z,r=this.pcoGeometry.serverURL+"read?depthBegin="+(this.baseLoaded?this.level+this.pcoGeometry.baseDepth:0)+"&depthEnd="+(this.level+this.pcoGeometry.baseDepth+1)+"&bounds=["+i+"]&schema="+JSON.stringify(e)+"&compress=true";if(this.scale&&(r+="&scale="+this.scale),this.greyhoundOffset){var n=this.greyhoundOffset;r+="&offset=["+n.x+","+n.y+","+n.z+"]"}return this.baseLoaded||(this.baseLoaded=!0),r},A.prototype.addChild=function(e){this.children[e.index]=e,e.parent=this},A.prototype.load=function(){!0===this.loading||!0===this.loaded||p.numNodesLoading>=p.maxNodesLoading||(this.loading=!0,p.numNodesLoading++,this.level%this.pcoGeometry.hierarchyStepSize==0&&this.hasChildren?this.loadHierarchyThenPoints():this.loadPoints())},A.prototype.loadPoints=function(){this.pcoGeometry.loader.load(this)},A.prototype.loadHierarchyThenPoints=function(){var e=[0,2,1,3,4,6,5,7],t=function(i,r,n){var o,s;Object.keys(i).forEach((function(a){if("n"!==a){switch(a){case"swd":o=i.swd,s=r+e[0];break;case"nwd":o=i.nwd,s=r+e[1];break;case"swu":o=i.swu,s=r+e[2];break;case"nwu":o=i.nwu,s=r+e[3];break;case"sed":o=i.sed,s=r+e[4];break;case"ned":o=i.ned,s=r+e[5];break;case"seu":o=i.seu,s=r+e[6];break;case"neu":o=i.neu,s=r+e[7]}var u,l;n.push({children:(u=o,l=0,Object.keys(u).forEach((function(t){"swd"===t?l+=1<<e[0]:"nwd"===t?l+=1<<e[1]:"swu"===t?l+=1<<e[2]:"nwu"===t?l+=1<<e[3]:"sed"===t?l+=1<<e[4]:"ned"===t?l+=1<<e[5]:"seu"===t?l+=1<<e[6]:"neu"===t&&(l+=1<<e[7])})),l),numPoints:o.n,name:s}),t(o,s,n)}}))};if(this.level%this.pcoGeometry.hierarchyStepSize==0){var i=this.level+this.pcoGeometry.baseDepth,r=i+this.pcoGeometry.hierarchyStepSize+2,n=this.greyhoundBounds,o=n.min.x+","+n.min.y+","+n.min.z+","+n.max.x+","+n.max.y+","+n.max.z,s=this.pcoGeometry.serverURL+"hierarchy?bounds=["+o+"]&depthBegin="+i+"&depthEnd="+r;if(this.scale&&(s+="&scale="+this.scale),this.greyhoundOffset){var a=this.greyhoundOffset;s+="&offset=["+a.x+","+a.y+","+a.z+"]"}var u=this,l=XHRFactory.createXMLHttpRequest();l.overrideMimeType("text/plain"),l.open("GET",s,!0),l.onload=function(e){try{!function(e,i){var r=[];e.numPoints=i.n,t(i,e.name,r);var n={};n[e.name]=e;for(var o=e.pcoGeometry,s=0;s<r.length;s++){var a=r[s].name,u=r[s].numPoints,l=parseInt(a.charAt(a.length-1)),h=n[a.substring(0,a.length-1)],d=a.length-1,p=new A(a,o,C.createChildAABB(h.boundingBox,l),e.scale,e.offset);p.level=d,p.numPoints=u,p.hasChildren=r[s].children>0,p.spacing=o.spacing/Math.pow(2,d),h.addChild(p),n[a]=p}e.loadPoints()}(u,JSON.parse(l.responseText)||{})}catch(e){p.numNodesLoading--,console.error("Potree: Exception thrown parsing points.",e)}},l.onerror=function(e){console.log("Potree: Failed to load file! HTTP status "+l.status+", file:"+s,e)},l.send(null)}},A.prototype.getNumPoints=function(){return this.numPoints},A.prototype.dispose=function(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(var e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}},Object.assign(A.prototype,c.EventDispatcher.prototype),E.prototype.newerThan=function(e){var t=new E(e);return this.versionMajor>t.versionMajor||this.versionMajor===t.versionMajor&&this.versionMinor>t.versionMinor},E.prototype.equalOrHigher=function(e){var t=new E(e);return this.versionMajor>t.versionMajor||this.versionMajor===t.versionMajor&&this.versionMinor>=t.versionMinor},E.prototype.upTo=function(e){return!this.newerThan(e)};const B={config:{withCredentials:!1,customHeaders:[{header:null,value:null}]},createXMLHttpRequest:function(){let e=new XMLHttpRequest;if(this.config.customHeaders&&Array.isArray(this.config.customHeaders)&&this.config.customHeaders.length>0){let t=e.open,i=this.config.customHeaders;e.open=function(){t.apply(this,[].slice.call(arguments)),i.forEach((function(t){t.header&&t.value&&e.setRequestHeader(t.header,t.value)}))}}return e},fetch:async function(e){const t=new Headers;this.config.customHeaders&&this.config.customHeaders.forEach((function(e){e.header&&e.value&&t.append(e.header,e.value)}));const i={headers:t,credentials:B.config.withCredentials?"include":"same-origin"};return fetch(e,i)}};class N{constructor(e,t,i){this.version="string"==typeof e?new E(e):e,this.boundingBox=t,this.scale=i}load(e){if(!e.loaded){var t=this,i=e.getURL(),r=B.createXMLHttpRequest();r.overrideMimeType("text/plain"),r.open("GET",i,!0),r.responseType="arraybuffer",r.overrideMimeType("text/plain; charset=x-user-defined"),r.onload=function(){try{t.parse(e,r.response)}catch(e){console.error("Potree: Exception thrown parsing points.",e),p.numNodesLoading--}},r.onerror=function(e){p.numNodesLoading--,console.error("Potree: Failed to load file.",r,i)},r.send(null)}}parse(e,t){var i=new DataView(t,t.byteLength-4,4).getUint32(0,!0),r=e.pcoGeometry.pointAttributes;e.numPoints=i;var n=e.boundingBox,o=new THREE.Vector3,s=e.pcoGeometry.boundingBox.getCenter(o).sub(e.boundingBox.min),a={buffer:t,pointAttributes:r,version:this.version.version,schema:e.pcoGeometry.schema,min:[n.min.x,n.min.y,n.min.z],max:[n.max.x,n.max.y,n.max.z],offset:s.toArray(),scale:this.scale,normalize:e.pcoGeometry.normalize};p.workerPool.runTask(d.GREYHOUND,(function(t){var i=t.data,r=i.attributeBuffers,n=new THREE.Box3((new THREE.Vector3).fromArray(i.tightBoundingBox.min),(new THREE.Vector3).fromArray(i.tightBoundingBox.max)),o=new THREE.BufferGeometry;for(var s in r){var a=r[s].buffer;if(parseInt(s)===f.POSITION_CARTESIAN)o.setAttribute("position",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===f.COLOR_PACKED)o.setAttribute("color",new THREE.BufferAttribute(new Uint8Array(a),4,!0));else if(parseInt(s)===f.INTENSITY)o.setAttribute("intensity",new THREE.BufferAttribute(new Float32Array(a),1));else if(parseInt(s)===f.CLASSIFICATION)o.setAttribute("classification",new THREE.BufferAttribute(new Uint8Array(a),1));else if(parseInt(s)===f.NORMAL_SPHEREMAPPED)o.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===f.NORMAL_OCT16)o.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===f.NORMAL)o.setAttribute("normal",new THREE.BufferAttribute(new Float32Array(a),3));else if(parseInt(s)===f.INDICES)(u=new THREE.BufferAttribute(new Uint8Array(a),4)).normalized=!0,o.setAttribute("indices",u);else if(parseInt(s)===f.SPACING){var u=new THREE.BufferAttribute(new Float32Array(a),1);o.setAttribute("spacing",u)}}n.max.sub(n.min),n.min.set(0,0,0),e.numPoints=i.numPoints,e.geometry=o,e.mean=new THREE.Vector3(...i.mean),e.tightBoundingBox=n,e.loaded=!0,e.loading=!1,p.numNodesLoading--}),a,[a.buffer])}}class I{static getQueryParam(e){e=e.replace(/[[\]]/g,"\\$&");var t=new RegExp("[?&]"+e+"(=([^&#]*)|&|#|$)").exec(window.location.href);return t?t[2]?decodeURIComponent(t[2].replace(/\+/g," ")):"":null}static createSchema(e){var t=[{name:"X",size:4,type:"signed"},{name:"Y",size:4,type:"signed"},{name:"Z",size:4,type:"signed"}];return e.forEach((function(e){"COLOR_PACKED"===e?(t.push({name:"Red",size:2,type:"unsigned"}),t.push({name:"Green",size:2,type:"unsigned"}),t.push({name:"Blue",size:2,type:"unsigned"})):"INTENSITY"===e?t.push({name:"Intensity",size:2,type:"unsigned"}):"CLASSIFICATION"===e&&t.push({name:"Classification",size:1,type:"unsigned"})})),t}static fetch(e,t){var i=B.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",e,!0),i.onreadystatechange=function(){4===i.readyState&&(200===i.status||0===i.status?t(null,i.responseText):t(i.responseText))},i.send(null)}static fetchBinary(e,t){var i=B.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",e,!0),i.responseType="arraybuffer",i.onreadystatechange=function(){4===i.readyState&&(200===i.status||0===i.status?t(null,i.response):t(i.responseText))},i.send(null)}static pointSizeFrom(e){return e.reduce(((e,t)=>e+t.size),0)}static getNormalization(e,t,i){var r=[{name:"X",size:4,type:"floating"},{name:"Y",size:4,type:"floating"},{name:"Z",size:4,type:"floating"},{name:"Red",size:2,type:"unsigned"},{name:"Green",size:2,type:"unsigned"},{name:"Blue",size:2,type:"unsigned"},{name:"Intensity",size:2,type:"unsigned"}],n=e+"read?depth="+t+"&schema="+JSON.stringify(r);I.fetchBinary(n,(function(e,t){if(e)throw new Error(e);for(var n=new DataView(t),o=t.byteLength-4,s=I.pointSizeFrom(r),a=!1,u=!1,l=0;l<o&&((n.getUint16(l+12,!0)>255||n.getUint16(l+14,!0)>255||n.getUint16(l+16,!0)>255)&&(a=!0),n.getUint16(l+18,!0)>255&&(u=!0),!a||!u);l+=s);i(null,{color:a,intensity:u})}))}}function C(){}C.loadInfoJSON=function(e,t){},C.load=function(e,t){try{var i=e.split("greyhound://")[1];1===i.split("http://").length&&1===i.split("https://").length&&(i="http://"+i),I.fetch(i+"info",(function(e,r){if(e)throw new Error(e);var n=JSON.parse(r),o=new E("1.4"),s=n.bounds,a=n.scale||.01;Array.isArray(a)&&(a=Math.min(a[0],a[1],a[2])),I.getQueryParam("scale")&&(a=parseFloat(I.getQueryParam("scale")));var u=Math.max(8,n.baseDepth),l=["POSITION_CARTESIAN"],h=!1,d=!1,p=!1;n.schema.forEach((function(e){"Intensity"===e.name&&l.push("INTENSITY"),"Classification"===e.name&&l.push("CLASSIFICATION"),"Red"===e.name?h=!0:"Green"===e.name?d=!0:"Blue"===e.name&&(p=!0)})),h&&d&&p&&l.push("COLOR_PACKED");var c=new _;c.serverURL=i,c.spacing=(s[3]-s[0])/Math.pow(2,u),c.baseDepth=u,c.hierarchyStepSize=5,c.schema=I.createSchema(l);var f=I.pointSizeFrom(c.schema);c.pointAttributes=new x(l),c.pointAttributes.byteSize=f;var m=new THREE.Box3((new THREE.Vector3).fromArray(s,0),(new THREE.Vector3).fromArray(s,3)),g=m.min.clone();m.max.sub(m.min),m.min.set(0,0,0),c.projection=n.srs,c.boundingBox=m,c.boundingSphere=m.getBoundingSphere(new THREE.Sphere),c.scale=a,c.offset=g,c.loader=new N(o,m,c.scale);var v={},y=new A("r",c,m,a,g);y.level=0,y.hasChildren=!0,y.numPoints=n.numPoints,y.spacing=c.spacing,c.root=y,c.root.load(),v.r=y,c.nodes=v,I.getNormalization(i,n.baseDepth,(function(e,i){i.color&&(c.normalize.color=!0),i.intensity&&(c.normalize.intensity=!0),t(c)}))}))}catch(i){console.log("Potree: Loading failed.",e,i),t()}},C.loadPointAttributes=function(e){for(var t=e.pointAttributes,i=new x,r=0;r<t.length;r++){var n=y[t[r]];i.add(n)}return i},C.createChildAABB=function(e,t){var i=e.min,r=e.max,n=(new THREE.Vector3).copy(r).sub(i).multiplyScalar(.5),o=new THREE.Vector3(n.x,0,0),s=new THREE.Vector3(0,n.y,0),a=new THREE.Vector3(0,0,n.z),u=i,l=(new THREE.Vector3).add(i).add(n);return 1===t?(i=(new THREE.Vector3).copy(u).add(a),r=(new THREE.Vector3).copy(l).add(a)):3===t?(i=(new THREE.Vector3).copy(u).add(a).add(s),r=(new THREE.Vector3).copy(l).add(a).add(s)):0===t?(i=u,r=l):2===t?(i=(new THREE.Vector3).copy(u).add(s),r=(new THREE.Vector3).copy(l).add(s)):5===t?(i=(new THREE.Vector3).copy(u).add(a).add(o),r=(new THREE.Vector3).copy(l).add(a).add(o)):7===t?(i=(new THREE.Vector3).copy(u).add(n),r=(new THREE.Vector3).copy(l).add(n)):4===t?(i=(new THREE.Vector3).copy(u).add(o),r=(new THREE.Vector3).copy(l).add(o)):6===t&&(i=(new THREE.Vector3).copy(u).add(o).add(s),r=(new THREE.Vector3).copy(l).add(o).add(s)),new THREE.Box3(i,r)};class P{constructor(e,t,i){this.version="string"==typeof e?new E(e):e,this.boundingBox=t,this.scale=i}load(e){if(!e.loaded){var t=e.getURL();this.version.equalOrHigher("1.4")&&(t+=".bin");var i=this,r=B.createXMLHttpRequest();r.open("GET",t,!0),r.responseType="arraybuffer",r.overrideMimeType("text/plain; charset=x-user-defined"),r.onload=function(){try{i.parse(e,r.response)}catch(e){p.numNodesLoading--,console.error("Potree: Exception thrown parsing points.",e)}},r.onerror=function(e){p.numNodesLoading--,console.error("Potree: Failed to load file.",r,t)},r.send(null)}}parse(e,t){var i=e.pcoGeometry.pointAttributes,r=t.byteLength/e.pcoGeometry.pointAttributes.byteSize;this.version.upTo("1.5")&&(e.numPoints=r);var n={buffer:t,pointAttributes:i,version:this.version.version,min:[e.boundingBox.min.x,e.boundingBox.min.y,e.boundingBox.min.z],offset:[e.pcoGeometry.offset.x,e.pcoGeometry.offset.y,e.pcoGeometry.offset.z],scale:this.scale,spacing:e.spacing,hasChildren:e.hasChildren,name:e.name};p.workerPool.runTask(d.BINARY_DECODER,(function(t){var r=t.data;if(void 0!==r.error)return p.numNodesLoading--,void console.error("Potree: Binary worker error.",r);var n=r.attributeBuffers,o=new c.Box3((new c.Vector3).fromArray(r.tightBoundingBox.min),(new c.Vector3).fromArray(r.tightBoundingBox.max)),s=new c.BufferGeometry;for(var a in n){var u=n[a].buffer;if(parseInt(a)===f.POSITION_CARTESIAN)s.setAttribute("position",new c.BufferAttribute(new Float32Array(u),3));else if(parseInt(a)===f.COLOR_PACKED)s.setAttribute("color",new c.BufferAttribute(new Uint8Array(u),4,!0));else if(parseInt(a)===f.INTENSITY)s.setAttribute("intensity",new c.BufferAttribute(new Float32Array(u),1));else if(parseInt(a)===f.CLASSIFICATION)s.setAttribute("classification",new c.BufferAttribute(new Uint8Array(u),1));else if(parseInt(a)===f.NORMAL_SPHEREMAPPED)s.setAttribute("normal",new c.BufferAttribute(new Float32Array(u),3));else if(parseInt(a)===f.NORMAL_OCT16)s.setAttribute("normal",new c.BufferAttribute(new Float32Array(u),3));else if(parseInt(a)===f.NORMAL)s.setAttribute("normal",new c.BufferAttribute(new Float32Array(u),3));else if(parseInt(a)===f.INDICES)(l=new c.BufferAttribute(new Uint8Array(u),4)).normalized=!0,s.setAttribute("indices",l);else if(parseInt(a)===f.SPACING){var l=new c.BufferAttribute(new Float32Array(u),1);s.setAttribute("spacing",l)}}o.max.sub(o.min),o.min.set(0,0,0);var h=t.data.buffer.byteLength/i.byteSize;e.numPoints=h,e.geometry=s,e.mean=new c.Vector3(...r.mean),e.tightBoundingBox=o,e.loaded=!0,e.loading=!1,e.estimatedSpacing=r.estimatedSpacing,p.numNodesLoading--}),n,[n.buffer])}}var R=[function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0)}},function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0)}},function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0),color:[e.getUint16(20,!0),e.getUint16(22,!0),e.getUint16(24,!0)]}},function(e){return{position:[e.getInt32(0,!0),e.getInt32(4,!0),e.getInt32(8,!0)],intensity:e.getUint16(12,!0),classification:e.getUint8(16,!0),color:[e.getUint16(28,!0),e.getUint16(30,!0),e.getUint16(32,!0)]}}];function M(e,t,i,r){r=void 0===r||0===r?1:r;var n=new t(e.slice(i,i+t.BYTES_PER_ELEMENT*r));if(void 0===r||1===r)return n[0];for(var o=[],s=0;s<r;s++)o.push(n[s]);return o}function L(e){this.arraybuffer=e}function D(e){var t=this;this.arraybuffer=e,this.nextCB=null,this.dorr=function(e,i){t.nextCB=i,p.workerPool.runTask(d.LAS_LAZ,(function(e){null!==t.nextCB&&(t.nextCB(e.data),t.nextCB=null)}),e)}}function O(e){if(this.arraybuffer=e,this.determineVersion(),this.version>12)throw new Error("Only file versions <= 1.2 are supported at this time");if(this.determineFormat(),void 0===R[this.formatId])throw new Error("The point format ID is not supported");this.loader=this.isCompressed?new D(this.arraybuffer):new L(this.arraybuffer)}function z(e,t,i,r,n,o,s,a){this.arrayb=e,this.decoder=R[t],this.pointsCount=r,this.pointSize=i,this.scale=n,this.offset=o,this.mins=s,this.maxs=a}L.prototype.open=function(){return this.readOffset=0,new Promise((function(e,t){setTimeout(e,0)}))},L.prototype.getHeader=function(){var e=this;return new Promise((function(t,i){setTimeout((function(){e.header=function(e){var t={};t.pointsOffset=M(e,Uint32Array,96),t.pointsFormatId=M(e,Uint8Array,104),t.pointsStructSize=M(e,Uint16Array,105),t.pointsCount=M(e,Uint32Array,107);var i=131;t.scale=M(e,Float64Array,i,3),i+=24,t.offset=M(e,Float64Array,i,3),i+=24;var r=M(e,Float64Array,i,6);return i+=48,t.maxs=[r[0],r[2],r[4]],t.mins=[r[1],r[3],r[5]],t}(e.arraybuffer),t(e.header)}),0)}))},L.prototype.readData=function(e,t,i){var r=this;return new Promise((function(t,n){setTimeout((function(){if(!r.header)return n(new Error("Cannot start reading data till a header request is issued"));var o;if(i<=1){e=Math.min(e,r.header.pointsCount-r.readOffset);var s=(o=r.header.pointsOffset+r.readOffset*r.header.pointsStructSize)+e*r.header.pointsStructSize;t({buffer:r.arraybuffer.slice(o,s),count:e,hasMoreData:r.readOffset+e<r.header.pointsCount}),r.readOffset+=e}else{for(var a=Math.min(e*i,r.header.pointsCount-r.readOffset),u=Math.ceil(a/i),l=0,h=new Uint8Array(u*r.header.pointsStructSize),d=0;d<a;d++){if(d%i==0){o=r.header.pointsOffset+r.readOffset*r.header.pointsStructSize;var p=new Uint8Array(r.arraybuffer,o,r.header.pointsStructSize);h.set(p,l*r.header.pointsStructSize),l++}r.readOffset++}t({buffer:h.buffer,count:l,hasMoreData:r.readOffset<r.header.pointsCount})}}),0)}))},L.prototype.close=function(){var e=this;return new Promise((function(t,i){e.arraybuffer=null,setTimeout(t,0)}))},D.prototype.open=function(){var e=this;return new Promise((function(t,i){e.dorr({type:"open",arraybuffer:e.arraybuffer},(function(e){if(1!==e.status)return i(new Error("Failed to open file"));t(!0)}))}))},D.prototype.getHeader=function(){var e=this;return new Promise((function(t,i){e.dorr({type:"header"},(function(e){if(1!==e.status)return i(new Error("Failed to get header"));t(e.header)}))}))},D.prototype.readData=function(e,t,i){var r=this;return new Promise((function(n,o){r.dorr({type:"read",count:e,offset:t,skip:i},(function(e){if(1!==e.status)return o(new Error("Failed to read data"));n({buffer:e.buffer,count:e.count,hasMoreData:e.hasMoreData})}))}))},D.prototype.close=function(){var e=this;return new Promise((function(t,i){e.dorr({type:"close"},(function(e){if(1!==e.status)return i(new Error("Failed to close file"));t(!0)}))}))},O.prototype.determineFormat=function(){var e=M(this.arraybuffer,Uint8Array,104),t=(128&e)>>7,i=(64&e)>>6;if(1===t&&1===i)throw new Error("Old style compression not supported");this.formatId=63&e,this.isCompressed=1===t||1===i},O.prototype.determineVersion=function(){var e=new Int8Array(this.arraybuffer,24,2);this.version=10*e[0]+e[1],this.versionAsString=e[0]+"."+e[1]},O.prototype.open=function(){return this.loader.open()},O.prototype.getHeader=function(){return this.loader.getHeader()},O.prototype.readData=function(e,t,i){return this.loader.readData(e,t,i)},O.prototype.close=function(){return this.loader.close()},z.prototype.getPoint=function(e){if(e<0||e>=this.pointsCount)throw new Error("Point index out of range");return this.decoder(new DataView(this.arrayb,e*this.pointSize,this.pointSize))};class U{constructor(e){this.version="string"==typeof e?new E(e):e}load(e){if(!e.loaded){var t=e.pcoGeometry.pointAttributes,i=e.getURL();this.version.equalOrHigher("1.4")&&(i+="."+t.toLowerCase());var r=this,n=B.createXMLHttpRequest();n.open("GET",i,!0),n.responseType="arraybuffer",n.overrideMimeType("text/plain; charset=x-user-defined"),n.onload=function(){if(n.response instanceof ArrayBuffer)try{r.parse(e,n.response)}catch(e){console.error("Potree: Exception thrown parsing points.",e),p.numNodesLoading--}else p.numNodesLoading--,console.log("Potree: LASLAZLoader xhr response is not a ArrayBuffer.")},n.onerror=function(){p.numNodesLoading--,console.log("Potree: LASLAZLoader failed to load file, "+n.status+", file: "+i)},n.send(null)}}parse(e,t){var i=new O(t),r=new F(e);i.open().then((e=>(i.isOpen=!0,i))).then((e=>e.getHeader().then((function(t){return[e,t]})))).then((e=>{let t=e[0],i=e[1],n=0;i.pointsCount;var o=function(){return t.readData(1e6,0,1).then((function(e){return r.push(new z(e.buffer,i.pointsFormatId,i.pointsStructSize,e.count,i.scale,i.offset,i.mins,i.maxs)),n+=e.count,e.hasMoreData?o():(i.totalRead=n,i.versionAsString=t.versionAsString,i.isCompressed=t.isCompressed,[t,i,r])}))};return o()})).then((e=>{let t=e[0];return t.close().then((function(){return t.isOpen=!1,e.slice(1)})).catch((e=>{if(t.isOpen)return t.close().then((function(){throw t.isOpen=!1,e}));throw e}))})).catch((e=>{console.error("Potree: Failed to open file:",e)}))}handle(e,t){}}class F{constructor(e){this.node=e}push(e){var t=this,i={buffer:e.arrayb,numPoints:e.pointsCount,pointSize:e.pointSize,pointFormatID:2,scale:e.scale,offset:e.offset,mins:e.mins,maxs:e.maxs},r=p.workerPool.getWorker(d.LAS_DECODER);r.onmessage=function(i){var n=new c.BufferGeometry,o=e.pointsCount,s=new Float32Array(i.data.position),a=new Uint8Array(i.data.color),u=new Float32Array(i.data.intensity),l=new Uint8Array(i.data.classification),h=new Uint8Array(i.data.returnNumber),f=new Uint8Array(i.data.numberOfReturns),m=new Uint16Array(i.data.pointSourceID),g=new Uint8Array(i.data.indices);n.setAttribute("position",new c.BufferAttribute(s,3)),n.setAttribute("color",new c.BufferAttribute(a,4,!0)),n.setAttribute("intensity",new c.BufferAttribute(u,1)),n.setAttribute("classification",new c.BufferAttribute(l,1)),n.setAttribute("returnNumber",new c.BufferAttribute(h,1)),n.setAttribute("numberOfReturns",new c.BufferAttribute(f,1)),n.setAttribute("pointSourceID",new c.BufferAttribute(m,1)),n.setAttribute("indices",new c.BufferAttribute(g,4)),n.attributes.indices.normalized=!0;var v=new c.Box3((new c.Vector3).fromArray(i.data.tightBoundingBox.min),(new c.Vector3).fromArray(i.data.tightBoundingBox.max));n.boundingBox=t.node.boundingBox,t.node.tightBoundingBox=v,t.node.geometry=n,t.node.numPoints=o,t.node.loaded=!0,t.node.loading=!1,p.numNodesLoading--,t.node.mean=new c.Vector3(...i.data.mean),p.workerPool.returnWorker(d.LAS_DECODER,r)},r.postMessage(i,[i.buffer])}}class V{constructor(){this.url=null,this.octreeDir=null,this.spacing=0,this.boundingBox=null,this.root=null,this.nodes=null,this.pointAttributes=null,this.hierarchyStepSize=-1,this.loader=null}}class G extends S{constructor(e,t,i){super(),this.id=G.IDCount++,this.name=e,this.index=parseInt(e.charAt(e.length-1)),this.pcoGeometry=t,this.geometry=null,this.boundingBox=i,this.boundingSphere=i.getBoundingSphere(new c.Sphere),this.children={},this.numPoints=0,this.level=null,this.loaded=!1,this.oneTimeDisposeHandlers=[]}isGeometryNode(){return!0}getLevel(){return this.level}isTreeNode(){return!1}isLoaded(){return this.loaded}getBoundingSphere(){return this.boundingSphere}getBoundingBox(){return this.boundingBox}getChildren(){for(var e=[],t=0;t<8;t++)this.children[t]&&e.push(this.children[t]);return e}getURL(){var e="",t=this.pcoGeometry.loader.version;return t.equalOrHigher("1.5")?e=this.pcoGeometry.octreeDir+"/"+this.getHierarchyPath()+"/"+this.name:(t.equalOrHigher("1.4")||t.upTo("1.3"))&&(e=this.pcoGeometry.octreeDir+"/"+this.name),e}getHierarchyPath(){for(var e="r/",t=this.pcoGeometry.hierarchyStepSize,i=this.name.substr(1),r=Math.floor(i.length/t),n=0;n<r;n++)e+=i.substr(n*t,t)+"/";return e.slice(0,-1)}addChild(e){this.children[e.index]=e,e.parent=this}load(){if(!(!0===this.loading||!0===this.loaded||p.numNodesLoading>=p.maxNodesLoading)){this.loading=!0,p.numNodesLoading++;try{this.pcoGeometry.loader.version.equalOrHigher("1.5")&&this.level%this.pcoGeometry.hierarchyStepSize==0&&this.hasChildren?this.loadHierachyThenPoints():this.loadPoints()}catch(e){p.numNodesLoading--,console.error("Potree: Exception thrown loading points file.",e)}}}loadPoints(){this.pcoGeometry.loader.load(this)}loadHierachyThenPoints(){var e=this;if(e.level%e.pcoGeometry.hierarchyStepSize==0){var t=e.pcoGeometry.octreeDir+"/"+e.getHierarchyPath()+"/"+e.name+".hrc",i=B.createXMLHttpRequest();i.open("GET",t,!0),i.responseType="arraybuffer",i.overrideMimeType("text/plain; charset=x-user-defined"),i.onload=function(t){try{!function(e,t){var i=new DataView(t),r=[],n=i.getUint8(0),o=i.getUint32(1,!0);e.numPoints=o,r.push({children:n,numPoints:o,name:e.name});for(var s=[],a=5;r.length>0;){for(var u=r.shift(),l=1,h=0;h<8;h++){if(0!=(u.children&l)){var d=u.name+h,p=i.getUint8(a),c=i.getUint32(a+1,!0);r.push({children:p,numPoints:c,name:d}),s.push({children:p,numPoints:c,name:d}),a+=5}l*=2}if(a===t.byteLength)break}var f={};f[e.name]=e;var m=e.pcoGeometry;for(h=0;h<s.length;h++){var g=s[h].name,v=s[h].numPoints,y=parseInt(g.charAt(g.length-1)),x=f[g.substring(0,g.length-1)],b=g.length-1,w=H.createChildAABB(x.boundingBox,y),S=new G(g,m,w);S.level=b,S.numPoints=v,S.hasChildren=s[h].children>0,S.spacing=m.spacing/Math.pow(2,b),x.addChild(S),f[g]=S}e.loadPoints()}(e,i.response)}catch(e){p.numNodesLoading--,console.error("Potree: Exception thrown parsing points.",e)}},i.onerror=function(e){p.numNodesLoading--,console.error("Potree: Failed to load file.",i.status,t,e)},i.send(null)}}getNumPoints(){return this.numPoints}dispose(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(var e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}}}G.IDCount=0,Object.assign(G.prototype,c.EventDispatcher.prototype);class H{static load(e,t){var i=new V;i.url=e;var r=B.createXMLHttpRequest();r.overrideMimeType("text/plain"),r.open("GET",e,!0),r.onload=function(){var n=JSON.parse(r.responseText),o=new E(n.version);0===n.octreeDir.indexOf("http")?i.octreeDir=n.octreeDir:i.octreeDir=e+"/../"+n.octreeDir,i.spacing=n.spacing,i.hierarchyStepSize=n.hierarchyStepSize,i.pointAttributes=n.pointAttributes;var s=new c.Vector3(n.boundingBox.lx,n.boundingBox.ly,n.boundingBox.lz),a=new c.Vector3(n.boundingBox.ux,n.boundingBox.uy,n.boundingBox.uz),u=(b=new c.Box3(s,a)).clone();n.tightBoundingBox&&(u.min.copy(new c.Vector3(n.tightBoundingBox.lx,n.tightBoundingBox.ly,n.tightBoundingBox.lz)),u.max.copy(new c.Vector3(n.tightBoundingBox.ux,n.tightBoundingBox.uy,n.tightBoundingBox.uz)));var l=s.clone();b.min.sub(l),b.max.sub(l),u.min.sub(l),u.max.sub(l),i.projection=n.projection,i.boundingBox=b,i.tightBoundingBox=u,i.boundingSphere=b.getBoundingSphere(new c.Sphere),i.tightBoundingSphere=u.getBoundingSphere(new c.Sphere),i.offset=l,"LAS"===n.pointAttributes||"LAZ"===n.pointAttributes?i.loader=new U(n.version):(i.loader=new P(n.version,b,n.scale),i.pointAttributes=new x(i.pointAttributes));var h={},d=new G(f="r",i,b);if(d.level=0,d.hasChildren=!0,d.spacing=i.spacing,d.numPoints=o.upTo("1.5")?n.hierarchy[0][1]:0,i.root=d,i.root.load(),h[f]=d,o.upTo("1.4"))for(var p=1;p<n.hierarchy.length;p++){var f=n.hierarchy[p][0],m=n.hierarchy[p][1],g=parseInt(f.charAt(f.length-1)),v=h[f.substring(0,f.length-1)],y=f.length-1,b=H.createChildAABB(v.boundingBox,g),w=new G(f,i,b);w.level=y,w.numPoints=m,w.spacing=i.spacing/Math.pow(2,y),v.addChild(w),h[f]=w}i.nodes=h,t(i)},r.onerror=function(i){p.numNodesLoading--,console.log("Potree: loading file failed.",e,i),t()},r.send(null)}static loadPointAttributes(e){for(var t=e.pointAttributes,i=new x,r=0;r<t.length;r++)i.add(y[t[r]]);return i}static createChildAABB(e,t){var i=e.min.clone(),r=e.max.clone(),n=(new c.Vector3).subVectors(r,i);return(1&t)>0?i.z+=n.z/2:r.z-=n.z/2,(2&t)>0?i.y+=n.y/2:r.y-=n.y/2,(4&t)>0?i.x+=n.x/2:r.x-=n.x/2,new c.Box3(i,r)}}class k{load(e){if(!e.loaded){var t=e.url()+".bin",i=B.createXMLHttpRequest();i.open("GET",t,!0),i.responseType="arraybuffer",i.overrideMimeType("text/plain; charset=x-user-defined"),i.onreadystatechange=()=>{if(4===i.readyState)if(200===i.status){var r=i.response;this.parse(e,r)}else console.log("Failed "+t+": "+i.status)};try{i.send(null)}catch(e){console.log("Failed request: "+e)}}}parse(e,t){var i=p.workerPool.getWorker(d.EPT_BINARY_DECODER);i.onmessage=function(t){var r=new c.BufferGeometry,n=t.data.numPoints,o=new Float32Array(t.data.position);r.setAttribute("position",new c.BufferAttribute(o,3));var s=new Uint8Array(t.data.indices);if(r.setAttribute("indices",new c.BufferAttribute(s,4)),t.data.color){var a=new Uint8Array(t.data.color);r.setAttribute("color",new c.BufferAttribute(a,4,!0))}if(t.data.intensity){var u=new Float32Array(t.data.intensity);r.setAttribute("intensity",new c.BufferAttribute(u,1))}if(t.data.classification){var l=new Uint8Array(t.data.classification);r.setAttribute("classification",new c.BufferAttribute(l,1))}if(t.data.returnNumber){var h=new Uint8Array(t.data.returnNumber);r.setAttribute("returnNumber",new c.BufferAttribute(h,1))}if(t.data.numberOfReturns){var f=new Uint8Array(t.data.numberOfReturns);r.setAttribute("numberOfReturns",new c.BufferAttribute(f,1))}if(t.data.pointSourceId){var m=new Uint16Array(t.data.pointSourceId);r.setAttribute("pointSourceID",new c.BufferAttribute(m,1))}r.attributes.indices.normalized=!0;var g=new c.Box3((new c.Vector3).fromArray(t.data.tightBoundingBox.min),(new c.Vector3).fromArray(t.data.tightBoundingBox.max));e.doneLoading(r,g,n,new c.Vector3(...t.data.mean)),p.workerPool.returnWorker(d.EPT_BINARY_DECODER,i)};var r,n={buffer:t,schema:e.ept.schema,scale:e.ept.eptScale,offset:e.ept.eptOffset,mins:(r=e.key.b.min,[r.x,r.y,r.z])};i.postMessage(n,[n.buffer])}}class W{load(e){if(!e.loaded){var t=e.url()+".laz",i=B.createXMLHttpRequest();i.open("GET",t,!0),i.responseType="arraybuffer",i.overrideMimeType("text/plain; charset=x-user-defined"),i.onreadystatechange=()=>{if(4===i.readyState)if(200===i.status){var r=i.response;this.parse(e,r)}else console.log("Failed "+t+": "+i.status)},i.send(null)}}parse(e,t){var i=new O(t),r=new Y(e);i.open().then((()=>(i.isOpen=!0,i.getHeader()))).then((t=>{var n=0,o=(t.pointsCount,e=>[e.x,e.y,e.z]),s=o(e.key.b.min),a=o(e.key.b.max),u=()=>i.readData(1e6,0,1).then((function(e){var o=new z(e.buffer,t.pointsFormatId,t.pointsStructSize,e.count,t.scale,t.offset,s,a);return o.extraBytes=t.extraBytes,o.pointsFormatId=t.pointsFormatId,r.push(o),n+=e.count,e.hasMoreData?u():(t.totalRead=n,t.versionAsString=i.versionAsString,t.isCompressed=i.isCompressed,null)}));return u()})).then((()=>i.close())).then((()=>i.isOpen=!1)).catch((e=>{if(console.log("Error reading LAZ:",e),!i.isOpen)throw e;i.close().then((()=>{throw i.isOpen=!1,e}))}))}}class Y{constructor(e){this.node=e}push(e){var t=p.workerPool.getWorker(d.EPT_LAS_ZIP_DECODER);t.onmessage=i=>{var r=new c.BufferGeometry,n=e.pointsCount,o=new Float32Array(i.data.position),s=new Uint8Array(i.data.color),a=new Float32Array(i.data.intensity),u=new Uint8Array(i.data.classification),l=new Uint8Array(i.data.returnNumber),h=new Uint8Array(i.data.numberOfReturns),f=new Uint16Array(i.data.pointSourceID),m=new Uint8Array(i.data.indices);r.setAttribute("position",new c.BufferAttribute(o,3)),r.setAttribute("color",new c.BufferAttribute(s,4,!0)),r.setAttribute("intensity",new c.BufferAttribute(a,1)),r.setAttribute("classification",new c.BufferAttribute(u,1)),r.setAttribute("returnNumber",new c.BufferAttribute(l,1)),r.setAttribute("numberOfReturns",new c.BufferAttribute(h,1)),r.setAttribute("pointSourceID",new c.BufferAttribute(f,1)),r.setAttribute("indices",new c.BufferAttribute(m,4)),r.attributes.indices.normalized=!0;var g=new c.Box3((new c.Vector3).fromArray(i.data.tightBoundingBox.min),(new c.Vector3).fromArray(i.data.tightBoundingBox.max));this.node.doneLoading(r,g,n,new c.Vector3(...i.data.mean)),p.workerPool.returnWorker(d.EPT_LAS_ZIP_DECODER,t)};var i={buffer:e.arrayb,numPoints:e.pointsCount,pointSize:e.pointSize,pointFormatID:e.pointsFormatId,scale:e.scale,offset:e.offset,mins:e.mins,maxs:e.maxs};t.postMessage(i,[i.buffer])}}class j{static toVector3(e,t){return(new c.Vector3).fromArray(e,t||0)}static toBox3(e){return new c.Box3(j.toVector3(e),j.toVector3(e,3))}static findDim(e,t){var i=e.find((e=>e.name==t));if(!i)throw new Error("Failed to find "+t+" in schema");return i}static sphereFrom(e){return e.getBoundingSphere(new c.Sphere)}}class X{constructor(e,t){t.version;let i=t.schema,r=t.bounds,n=t.boundsConforming,o=[j.findDim(i,"X"),j.findDim(i,"Y"),j.findDim(i,"Z")],s=o.map((e=>e.scale||1)),a=o.map((e=>e.offset||0));this.eptScale=j.toVector3(s),this.eptOffset=j.toVector3(a),this.url=e,this.info=t,this.type="ept",this.schema=i,this.span=t.span||t.ticks,this.boundingBox=j.toBox3(r),this.tightBoundingBox=j.toBox3(n),this.offset=j.toVector3([0,0,0]),this.boundingSphere=j.sphereFrom(this.boundingBox),this.tightBoundingSphere=j.sphereFrom(this.tightBoundingBox),this.version=new E("1.6"),this.projection=null,this.fallbackProjection=null,t.srs&&t.srs.horizontal&&(this.projection=t.srs.authority+":"+t.srs.horizontal),t.srs.wkt&&(this.projection?this.fallbackProjection=t.srs.wkt:this.projection=t.srs.wkt),this.pointAttributes="LAZ",this.spacing=(this.boundingBox.max.x-this.boundingBox.min.x)/this.span,t.hierarchyType;let u=t.dataType||"laszip";this.loader="binary"==u?new k:new W}}class q{constructor(e,t,i,r,n,o){this.ept=e,this.b=t,this.d=i,this.x=r||0,this.y=n||0,this.z=o||0}name(){return this.d+"-"+this.x+"-"+this.y+"-"+this.z}step(e,t,i){let r=this.b.min.clone(),n=this.b.max.clone(),o=(new c.Vector3).subVectors(n,r);return e?r.x+=o.x/2:n.x-=o.x/2,t?r.y+=o.y/2:n.y-=o.y/2,i?r.z+=o.z/2:n.z-=o.z/2,new q(this.ept,new c.Box3(r,n),this.d+1,2*this.x+e,2*this.y+t,2*this.z+i)}children(){for(var e=[],t=0;t<2;++t)for(var i=0;i<2;++i)for(var r=0;r<2;++r){var n=this.step(t,i,r).name();e.includes(n)||(e=e.concat(n))}return e}}class K extends S{constructor(e,t,i,r,n,o){super(),this.ept=e,this.key=new q(this.ept,t||this.ept.boundingBox,i||0,r,n,o),this.id=K.IDCount++,this.geometry=null,this.boundingBox=this.key.b,this.tightBoundingBox=this.boundingBox,this.spacing=this.ept.spacing/Math.pow(2,this.key.d),this.boundingSphere=j.sphereFrom(this.boundingBox),this.hasChildren=!1,this.children={},this.numPoints=-1,this.level=this.key.d,this.loaded=!1,this.loading=!1,this.oneTimeDisposeHandlers=[];let s=this.key;this.name=this.toPotreeName(s.d,s.x,s.y,s.z),this.index=parseInt(this.name.charAt(this.name.length-1))}isGeometryNode(){return!0}getLevel(){return this.level}isTreeNode(){return!1}isLoaded(){return this.loaded}getBoundingSphere(){return this.boundingSphere}getBoundingBox(){return this.boundingBox}url(){return this.ept.url+"ept-data/"+this.filename()}getNumPoints(){return this.numPoints}filename(){return this.key.name()}getChildren(){let e=[];for(let t=0;t<8;t++)this.children[t]&&e.push(this.children[t]);return e}addChild(e){this.children[e.index]=e,e.parent=this}load(){this.loaded||this.loading||p.numNodesLoading>=p.maxNodesLoading||(this.loading=!0,p.numNodesLoading++,-1===this.numPoints&&this.loadHierarchy(),this.loadPoints())}loadPoints(){this.ept.loader.load(this)}async loadHierarchy(){let e={};e[this.filename()]=this,this.hasChildren=!1;let t=`${this.ept.url}ept-hierarchy/${this.filename()}.json`,i=await B.fetch(t),r=await i.json();Object.keys(r).sort(((e,t)=>{let[i,r,n,o]=e.split("-").map((e=>parseInt(e,10))),[s,a,u,l]=t.split("-").map((e=>parseInt(e,10)));return i<s?-1:i>s?1:r<a?-1:r>a?1:n<u?-1:n>u?1:o<l?-1:o>l?1:0})).forEach((t=>{let[i,n,o,s]=t.split("-").map((e=>parseInt(e,10))),a=1&n,u=1&o,l=1&s,h=e[i-1+"-"+(n>>1)+"-"+(o>>1)+"-"+(s>>1)];if(!h)return;h.hasChildren=!0;let d=h.key.step(a,u,l),p=new K(this.ept,d.b,d.d,d.x,d.y,d.z);p.level=i,p.numPoints=r[t],h.addChild(p),e[d.name()]=p}))}doneLoading(e,t,i,r){e.boundingBox=this.boundingBox,this.geometry=e,this.tightBoundingBox=t,this.numPoints=i,this.mean=r,this.loaded=!0,this.loading=!1,p.numNodesLoading--}toPotreeName(e,t,i,r){for(var n="r",o=0;o<e;++o){var s=1<<e-o-1,a=0;t&s&&(a+=4),i&s&&(a+=2),r&s&&(a+=1),n+=a}return n}dispose(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(let e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}}}K.IDCount=0;class Z{static async load(e,t){var i=await B.fetch(e),r=await i.json(),n=e.substr(0,e.lastIndexOf("ept.json")),o=new X(n,r),s=new K(o);o.root=s,o.root.load(),t(o)}}class ${static generateDataTexture(e,t,i){for(var r=e*t,n=new Uint8Array(4*e*t),o=Math.floor(255*i.r),s=Math.floor(255*i.g),a=Math.floor(255*i.b),u=0;u<r;u++)n[3*u]=o,n[3*u+1]=s,n[3*u+2]=a;var l=new c.DataTexture(n,e,t,c.RGBAFormat);return l.needsUpdate=!0,l.magFilter=c.NearestFilter,l}static computeTransformedBoundingBox(e,t){var i=[new c.Vector3(e.min.x,e.min.y,e.min.z).applyMatrix4(t),new c.Vector3(e.min.x,e.min.y,e.min.z).applyMatrix4(t),new c.Vector3(e.max.x,e.min.y,e.min.z).applyMatrix4(t),new c.Vector3(e.min.x,e.max.y,e.min.z).applyMatrix4(t),new c.Vector3(e.min.x,e.min.y,e.max.z).applyMatrix4(t),new c.Vector3(e.min.x,e.max.y,e.max.z).applyMatrix4(t),new c.Vector3(e.max.x,e.max.y,e.min.z).applyMatrix4(t),new c.Vector3(e.max.x,e.min.y,e.max.z).applyMatrix4(t),new c.Vector3(e.max.x,e.max.y,e.max.z).applyMatrix4(t)],r=new c.Box3;return r.setFromPoints(i),r}}var J={RAINBOW:[[0,new c.Color(.278,0,.714)],[1/6,new c.Color(0,0,1)],[2/6,new c.Color(0,1,1)],[.5,new c.Color(0,1,0)],[4/6,new c.Color(1,1,0)],[5/6,new c.Color(1,.64,0)],[1,new c.Color(1,0,0)]],SPECTRAL:[[0,new c.Color(.3686,.3098,.6353)],[.1,new c.Color(.1961,.5333,.7412)],[.2,new c.Color(.4,.7608,.6471)],[.3,new c.Color(.6706,.8667,.6431)],[.4,new c.Color(.902,.9608,.5961)],[.5,new c.Color(1,1,.749)],[.6,new c.Color(.9961,.8784,.5451)],[.7,new c.Color(.9922,.6824,.3804)],[.8,new c.Color(.9569,.4275,.2627)],[.9,new c.Color(.8353,.2431,.3098)],[1,new c.Color(.6196,.0039,.2588)]],PLASMA:[[0,new c.Color(.241,.015,.61)],[.1,new c.Color(.387,.001,.654)],[.2,new c.Color(.524,.025,.653)],[.3,new c.Color(.651,.125,.596)],[.4,new c.Color(.752,.227,.513)],[.5,new c.Color(.837,.329,.431)],[.6,new c.Color(.907,.435,.353)],[.7,new c.Color(.963,.554,.272)],[.8,new c.Color(.992,.681,.195)],[.9,new c.Color(.987,.822,.144)],[1,new c.Color(.94,.975,.131)]],YELLOW_GREEN:[[0,new c.Color(.1647,.2824,.3451)],[.1,new c.Color(.1338,.3555,.4227)],[.2,new c.Color(.061,.4319,.4864)],[.3,new c.Color(0,.5099,.5319)],[.4,new c.Color(0,.5881,.5569)],[.5,new c.Color(.137,.665,.5614)],[.6,new c.Color(.2906,.7395,.5477)],[.7,new c.Color(.4453,.8099,.5201)],[.8,new c.Color(.6102,.8748,.485)],[.9,new c.Color(.7883,.9323,.4514)],[1,new c.Color(.9804,.9804,.4314)]],VIRIDIS:[[0,new c.Color(.267,.005,.329)],[.1,new c.Color(.283,.141,.458)],[.2,new c.Color(.254,.265,.53)],[.3,new c.Color(.207,.372,.553)],[.4,new c.Color(.164,.471,.558)],[.5,new c.Color(.128,.567,.551)],[.6,new c.Color(.135,.659,.518)],[.7,new c.Color(.267,.749,.441)],[.8,new c.Color(.478,.821,.318)],[.9,new c.Color(.741,.873,.15)],[1,new c.Color(.993,.906,.144)]],INFERNO:[[0,new c.Color(.077,.042,.206)],[.1,new c.Color(.225,.036,.388)],[.2,new c.Color(.373,.074,.432)],[.3,new c.Color(.522,.128,.42)],[.4,new c.Color(.665,.182,.37)],[.5,new c.Color(.797,.255,.287)],[.6,new c.Color(.902,.364,.184)],[.7,new c.Color(.969,.516,.063)],[.8,new c.Color(.988,.683,.072)],[.9,new c.Color(.961,.859,.298)],[1,new c.Color(.988,.998,.645)]],GRAYSCALE:[[0,new c.Color(0,0,0)],[1,new c.Color(1,1,1)]]};const Q=e=>e;var ee={};ee.vertex=Q`
precision highp float;
precision highp int;

#define MAX_CLIP_POLYGONS 8

`+c.ShaderChunk.common+"\n"+c.ShaderChunk.logdepthbuf_pars_vertex+Q`

attribute vec3 position;
attribute vec3 color;
attribute float intensity;
attribute float classification;
attribute float returnNumber;
attribute float numberOfReturns;
attribute float pointSourceID;
attribute vec4 indices;
attribute float spacing;

uniform mat4 modelMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 uViewInv;

uniform float uScreenWidth;
uniform float uScreenHeight;
uniform float fov;
uniform float near;
uniform float far;

uniform bool uDebug;

uniform bool uUseOrthographicCamera;
uniform float uOrthoWidth;
uniform float uOrthoHeight;

#define CLIPTASK_NONE 0
#define CLIPTASK_HIGHLIGHT 1
#define CLIPTASK_SHOW_INSIDE 2
#define CLIPTASK_SHOW_OUTSIDE 3

#define CLIPMETHOD_INSIDE_ANY 0
#define CLIPMETHOD_INSIDE_ALL 1

uniform int clipTask;
uniform int clipMethod;

#if defined(num_clipboxes) && num_clipboxes > 0
	uniform mat4 clipBoxes[num_clipboxes];
#endif

#if defined(num_clipspheres) && num_clipspheres > 0
	uniform mat4 uClipSpheres[num_clipspheres];
#endif

#if defined(num_clippolygons) && num_clippolygons > 0
	uniform int uClipPolygonVCount[num_clippolygons];
	uniform vec3 uClipPolygonVertices[num_clippolygons * 8];
	uniform mat4 uClipPolygonWVP[num_clippolygons];
#endif

uniform float size;
uniform float minSize;
uniform float maxSize;

uniform float uPCIndex;
uniform float uOctreeSpacing;
uniform float uNodeSpacing;
uniform float uOctreeSize;
uniform vec3 uBBSize;
uniform float uLevel;
uniform float uVNStart;
uniform bool uIsLeafNode;

uniform vec3 uColor;
uniform float uOpacity;

uniform vec2 elevationRange;
uniform vec2 intensityRange;
uniform float intensityGamma;
uniform float intensityContrast;
uniform float intensityBrightness;
uniform float rgbGamma;
uniform float rgbContrast;
uniform float rgbBrightness;
uniform float uTransition;
uniform float wRGB;
uniform float wIntensity;
uniform float wElevation;
uniform float wClassification;
uniform float wReturnNumber;
uniform float wSourceID;

uniform vec3 uShadowColor;

uniform sampler2D visibleNodes;
uniform sampler2D gradient;
uniform sampler2D classificationLUT;

#if defined(num_shadowmaps) && num_shadowmaps > 0
	uniform sampler2D uShadowMap[num_shadowmaps];
	uniform mat4 uShadowWorldView[num_shadowmaps];
	uniform mat4 uShadowProj[num_shadowmaps];
#endif

#if defined num_hiddenclassifications && num_hiddenclassifications > 0
	uniform float hiddenClassifications[num_hiddenclassifications];
#endif

#if defined num_hiddenpointsourceids && num_hiddenpointsourceids > 0
  uniform float hiddenPointSourceIDs[num_hiddenpointsourceids];
#endif

uniform float selectedPointSourceID;
uniform vec3 selectedPointSourceIDColor;

varying vec3 vColor;
varying float vLogDepth;
varying vec3 vViewPosition;
varying float vRadius;
varying float vPointSize;

float round(float number)
{
	return floor(number + 0.5);
}

//---------------------
//OCTREE
//---------------------

#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_octree)

	/**
	 * number of 1-bits up to inclusive index position
	 * number is treated as if it were an integer in the range 0-255
	 */
	int numberOfOnes(int number, int index)
	{
		int numOnes = 0;
		int tmp = 128;

		for(int i = 7; i >= 0; i--)
		{
			if(number >= tmp)
			{
				number = number - tmp;

				if(i <= index)
				{
					numOnes++;
				}
			}
			
			tmp = tmp / 2;
		}

		return numOnes;
	}

	/**
	 * checks whether the bit at index is 1
	 * number is treated as if it were an integer in the range 0-255
	 */
	bool isBitSet(int number, int index)
	{
		//weird multi else if due to lack of proper array, int and bitwise support in WebGL 1.0
		int powi = 1;

		if(index == 0)
		{
			powi = 1;
		}
		else if(index == 1)
		{
			powi = 2;
		}
		else if(index == 2)
		{
			powi = 4;
		}
		else if(index == 3)
		{
			powi = 8;
		}
		else if(index == 4)
		{
			powi = 16;
		}
		else if(index == 5)
		{
			powi = 32;
		}
		else if(index == 6)
		{
			powi = 64;
		}
		else if(index == 7)
		{
			powi = 128;
		}
		else
		{
			return false;
		}

		int ndp = number / powi;

		return mod(float(ndp), 2.0) != 0.0;
	}

	/**
	 * find the LOD at the point position
	 */
	float getLOD()
	{
		vec3 offset = vec3(0.0, 0.0, 0.0);
		int iOffset = int(uVNStart);
		float depth = uLevel;

		for(float i = 0.0; i <= 30.0; i++)
		{
			float nodeSizeAtLevel = uOctreeSize / pow(2.0, i + uLevel + 0.0);
			
			vec3 index3d = (position-offset) / nodeSizeAtLevel;
			index3d = floor(index3d + 0.5);
			int index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));
			
			vec4 value = texture2D(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));
			int mask = int(round(value.r * 255.0));

			if(isBitSet(mask, index))
			{
				//there are more visible child nodes at this position
				int advanceG = int(round(value.g * 255.0)) * 256;
				int advanceB = int(round(value.b * 255.0));
				int advanceChild = numberOfOnes(mask, index - 1);
				int advance = advanceG + advanceB + advanceChild;

				iOffset = iOffset + advance;
				
				depth++;
			}
			else
			{
				//no more visible child nodes at this position
				return value.a * 255.0;
				//return depth;
			}
			
			offset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;
		}
			
		return depth;
	}

	float getSpacing()
	{
		vec3 offset = vec3(0.0, 0.0, 0.0);
		int iOffset = int(uVNStart);
		float depth = uLevel;
		float spacing = uNodeSpacing;

		for(float i = 0.0; i <= 30.0; i++)
		{
			float nodeSizeAtLevel = uOctreeSize / pow(2.0, i + uLevel + 0.0);
			
			vec3 index3d = (position-offset) / nodeSizeAtLevel;
			index3d = floor(index3d + 0.5);
			int index = int(round(4.0 * index3d.x + 2.0 * index3d.y + index3d.z));
			
			vec4 value = texture2D(visibleNodes, vec2(float(iOffset) / 2048.0, 0.0));
			int mask = int(round(value.r * 255.0));
			float spacingFactor = value.a;

			if(i > 0.0)
			{
				spacing = spacing / (255.0 * spacingFactor);
			}
			
			if(isBitSet(mask, index))
			{
				//there are more visible child nodes at this position
				int advanceG = int(round(value.g * 255.0)) * 256;
				int advanceB = int(round(value.b * 255.0));
				int advanceChild = numberOfOnes(mask, index - 1);
				int advance = advanceG + advanceB + advanceChild;

				iOffset = iOffset + advance;

				depth++;
			}
			else
			{
				//no more visible child nodes at this position
				return spacing;
			}
			
			offset = offset + (vec3(1.0, 1.0, 1.0) * nodeSizeAtLevel * 0.5) * index3d;
		}
			
		return spacing;
	}

	float getPointSizeAttenuation()
	{
		return pow(2.0, getLOD());
	}
#endif

//---------------------
//KD-TREE
//---------------------
#if (defined(adaptive_point_size) || defined(color_type_lod)) && defined(tree_type_kdtree)
	float getLOD()
	{
		vec3 offset = vec3(0.0, 0.0, 0.0);
		float iOffset = 0.0;
		float depth = 0.0;
			
		vec3 size = uBBSize;	
		vec3 pos = position;
			
		for(float i = 0.0; i <= 1000.0; i++)
		{
			vec4 value = texture2D(visibleNodes, vec2(iOffset / 2048.0, 0.0));
			
			int children = int(value.r * 255.0);
			float next = value.g * 255.0;
			int split = int(value.b * 255.0);
			
			if(next == 0.0)
			{
			 	return depth;
			}
			
			vec3 splitv = vec3(0.0, 0.0, 0.0);
			if(split == 1)
			{
				splitv.x = 1.0;
			}
			else if(split == 2)
			{
			 	splitv.y = 1.0;
			}
			else if(split == 4)
			{
			 	splitv.z = 1.0;
			}
			
			iOffset = iOffset + next;
			
			float factor = length(pos * splitv / size);

			//Left
			if(factor < 0.5)
			{
				if(children == 0 || children == 2)
				{
					return depth;
				}
			}
			//Right
			else
			{
				pos = pos - size * splitv * 0.5;
				if(children == 0 || children == 1)
				{
					return depth;
				}
				if(children == 3)
				{
					iOffset = iOffset + 1.0;
				}
			}

			size = size * ((1.0 - (splitv + 1.0) / 2.0) + 0.5);
			depth++;
		}
			
		return depth;	
	}

	float getPointSizeAttenuation()
	{
		return 0.5 * pow(1.3, getLOD());
	}
#endif

//formula adapted from: http://www.dfstudios.co.uk/articles/programming/image-programming-algorithms/image-processing-algorithms-part-5-contrast-adjustment/
float getContrastFactor(float contrast)
{
	return (1.0158730158730156 * (contrast + 1.0)) / (1.0158730158730156 - contrast);
}

vec3 getRGB()
{
	vec3 rgb = color;
	
	rgb = pow(rgb, vec3(rgbGamma));
	rgb = rgb + rgbBrightness;
	rgb = clamp(rgb, 0.0, 1.0);
	
	return rgb;
}

float getIntensity()
{
	float w = (intensity - intensityRange.x) / (intensityRange.y - intensityRange.x);
	w = pow(w, intensityGamma);
	w = w + intensityBrightness;
	w = (w - 0.5) * getContrastFactor(intensityContrast) + 0.5;
	w = clamp(w, 0.0, 1.0);

	return w;
}

vec3 getElevation()
{
	vec4 world = modelMatrix * vec4( position, 1.0 );
	float w = (world.z - elevationRange.x) / (elevationRange.y - elevationRange.x);
	return texture2D(gradient, vec2(w,1.0-w)).rgb;
}

vec4 getClassification()
{
	vec2 uv = vec2(classification / 255.0, 0.5);
	return texture2D(classificationLUT, uv);
}

vec3 getReturnNumber()
{
	if(numberOfReturns == 1.0)
	{
		return vec3(1.0, 1.0, 0.0);
	}
	else
	{
		if(returnNumber == 1.0)
		{
			return vec3(1.0, 0.0, 0.0);
		}
		else if(returnNumber == numberOfReturns)
		{
			return vec3(0.0, 0.0, 1.0);
		}
		else
		{
			return vec3(0.0, 1.0, 0.0);
		}
	}
}

vec3 getSourceID()
{
	float w = mod(pointSourceID, 10.0) / 10.0;
	return texture2D(gradient, vec2(w,1.0 - w)).rgb;
}

vec3 getCompositeColor()
{
	vec3 c;
	float w;

	c += wRGB * getRGB();
	w += wRGB;
	
	c += wIntensity * getIntensity() * vec3(1.0, 1.0, 1.0);
	w += wIntensity;
	
	c += wElevation * getElevation();
	w += wElevation;
	
	c += wReturnNumber * getReturnNumber();
	w += wReturnNumber;
	
	c += wSourceID * getSourceID();
	w += wSourceID;
	
	vec4 cl = wClassification * getClassification();
  c += cl.a * cl.rgb;
	w += wClassification * cl.a;

	c = c / w;
	
	if(w == 0.0)
	{
		gl_Position = vec4(100.0, 100.0, 100.0, 0.0);
	}
	
	return c;
}

vec3 getColor()
{
	vec3 color;
	
	#ifdef selection_type_color
	if (pointSourceID == selectedPointSourceID) 
	{
		return selectedPointSourceIDColor;
	}
	#endif

	#ifdef color_type_rgb
		color = getRGB();
	#elif defined color_type_height
		color = getElevation();
	#elif defined color_type_rgb_height
		vec3 cHeight = getElevation();
		color = (1.0 - uTransition) * getRGB() + uTransition * cHeight;
	#elif defined color_type_depth
		float linearDepth = gl_Position.w;
		float expDepth = (gl_Position.z / gl_Position.w) * 0.5 + 0.5;
		color = vec3(linearDepth, expDepth, 0.0);
	#elif defined color_type_intensity
		float w = getIntensity();
		color = vec3(w, w, w);
	#elif defined color_type_intensity_gradient
		float w = getIntensity();
		color = texture2D(gradient, vec2(w,1.0-w)).rgb;
	#elif defined color_type_color
		color = uColor;
	#elif defined color_type_lod
		float depth = getLOD();
		float w = depth / 10.0;
		color = texture2D(gradient, vec2(w,1.0-w)).rgb;
	#elif defined color_type_point_index
		color = indices.rgb;
	#elif defined color_type_classification
		vec4 cl = getClassification(); 
		color = cl.rgb;
	#elif defined color_type_return_number
		color = getReturnNumber();
	#elif defined color_type_source
		color = getSourceID();
	#elif defined color_type_normal
		color = (modelMatrix * vec4(normal, 0.0)).xyz;
	#elif defined color_type_phong
		color = color;
	#elif defined color_type_composite
		color = getCompositeColor();
	#endif

	if (pointSourceID == selectedPointSourceID) 
	{
		color[0] = min(color[0] + 0.2, 1.0);
		color[1] = min(color[1] + 0.2, 1.0);
		color[2] = min(color[2] + 0.2, 1.0);
	}

	return color;
}

float getPointSize()
{
	float pointSize = 1.0;
	
	float slope = tan(fov / 2.0);
	float projFactor = -0.5 * uScreenHeight / (slope * vViewPosition.z);
	
	float r = uOctreeSpacing * 1.7;
	vRadius = r;

	#if defined fixed_point_size
		pointSize = size;
	#elif defined attenuated_point_size
		if(uUseOrthographicCamera)
		{
			pointSize = size;
		}
		else
		{
			pointSize = size * spacing * projFactor;
		}
	#elif defined adaptive_point_size
		if(uUseOrthographicCamera)
		{
			float worldSpaceSize = 1.0 * size * r / getPointSizeAttenuation();
			pointSize = (worldSpaceSize / uOrthoWidth) * uScreenWidth;
		}
		else
		{
			if(uIsLeafNode && false)
			{
				pointSize = size * spacing * projFactor;
			}
			else
			{
				float worldSpaceSize = 1.0 * size * r / getPointSizeAttenuation();
				pointSize = worldSpaceSize * projFactor;
			}
		}
	#endif

	pointSize = max(minSize, pointSize);
	pointSize = min(maxSize, pointSize);
	
	vRadius = pointSize / projFactor;

	return pointSize;
}

#if defined num_clippolygons && num_clippolygons > 0
	bool pointInClipPolygon(vec3 point, int polyIdx)
	{
		mat4 wvp = uClipPolygonWVP[polyIdx];

		vec4 pointNDC = wvp * vec4(point, 1.0);
		pointNDC.xy = pointNDC.xy / pointNDC.w;

		int j = uClipPolygonVCount[polyIdx] - 1;
		bool c = false;
		for(int i = 0; i < 8; i++)
		{
			if(i == uClipPolygonVCount[polyIdx])
			{
				break;
			}

			vec3 verti = uClipPolygonVertices[polyIdx * 8 + i];
			vec3 vertj = uClipPolygonVertices[polyIdx * 8 + j];

			if(((verti.y > pointNDC.y) != (vertj.y > pointNDC.y)) && (pointNDC.x < (vertj.x-verti.x) * (pointNDC.y-verti.y) / (vertj.y-verti.y) + verti.x))
			{
				c = !c;
			}

			j = i;
		}

		return c;
	}
#endif

void doClipping()
{
	#if !defined color_type_composite
		vec4 cl = getClassification(); 
		if(cl.a == 0.0)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 0.0);
			
			return;
		}
	#endif

	int clipVolumesCount = 0;
	int insideCount = 0;

	#if defined(num_clipboxes) && num_clipboxes > 0
		for(int i = 0; i < num_clipboxes; i++)
		{
			vec4 clipPosition = clipBoxes[i] * modelMatrix * vec4( position, 1.0 );
			bool inside = -0.5 <= clipPosition.x && clipPosition.x <= 0.5;
			inside = inside && -0.5 <= clipPosition.y && clipPosition.y <= 0.5;
			inside = inside && -0.5 <= clipPosition.z && clipPosition.z <= 0.5;

			insideCount = insideCount + (inside ? 1 : 0);
			clipVolumesCount++;
		}	
	#endif

	#if defined(num_clippolygons) && num_clippolygons > 0
		for(int i = 0; i < num_clippolygons; i++)
		{
			bool inside = pointInClipPolygon(position, i);

			insideCount = insideCount + (inside ? 1 : 0);
			clipVolumesCount++;
		}
	#endif

	bool insideAny = insideCount > 0;
	bool insideAll = (clipVolumesCount > 0) && (clipVolumesCount == insideCount);

	if(clipMethod == CLIPMETHOD_INSIDE_ANY)
	{
		if(insideAny && clipTask == CLIPTASK_HIGHLIGHT)
		{
			vColor.r += 0.5;
		}
		else if(!insideAny && clipTask == CLIPTASK_SHOW_INSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
		else if(insideAny && clipTask == CLIPTASK_SHOW_OUTSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
	}
	else if(clipMethod == CLIPMETHOD_INSIDE_ALL)
	{
		if(insideAll && clipTask == CLIPTASK_HIGHLIGHT)
		{
			vColor.r += 0.5;
		}
		else if(!insideAll && clipTask == CLIPTASK_SHOW_INSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
		else if(insideAll && clipTask == CLIPTASK_SHOW_OUTSIDE)
		{
			gl_Position = vec4(100.0, 100.0, 100.0, 1.0);
		}
	}
}

bool isHiddenClassification()
{
	#if defined num_hiddenclassifications && num_hiddenclassifications > 0
	for (int i = 0; i < num_hiddenclassifications; i++)
	{
		if (classification == hiddenClassifications[i])
		{
			return true;
		}
	}
	#endif

	return false;
}

bool isHiddenPointSourceID()
{
	#if defined num_hiddenpointsourceids && num_hiddenpointsourceids > 0
	for (int i = 0; i < num_hiddenpointsourceids; i++)
	{
		if (pointSourceID == hiddenPointSourceIDs[i])
		{
			return true;
		}
	}
	#endif

	return false;
}

void main()
{
	if (isHiddenClassification())
	{
		return;
	}

	if (isHiddenPointSourceID())
	{
		return;
	}

	vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
	vViewPosition = mvPosition.xyz;
	gl_Position = projectionMatrix * mvPosition;

	vLogDepth = log2(-mvPosition.z);

	//POINT SIZE
	float pointSize = getPointSize();
	gl_PointSize = pointSize;
	vPointSize = pointSize;

	`+c.ShaderChunk.logdepthbuf_vertex+Q`

	//COLOR
	vColor = getColor();

	#if defined hq_depth_pass
		float originalDepth = gl_Position.w;
		float adjustedDepth = originalDepth + 2.0 * vRadius;
		float adjust = adjustedDepth / originalDepth;

		mvPosition.xyz = mvPosition.xyz * adjust;
		gl_Position = projectionMatrix * mvPosition;
	#endif

	//CLIPPING
	doClipping();

	#if defined num_clipspheres && num_clipspheres > 0
		for(int i = 0; i < num_clipspheres; i++)
		{
			vec4 sphereLocal = uClipSpheres[i] * mvPosition;

			float distance = length(sphereLocal.xyz);

			if(distance < 1.0)
			{
				float w = distance;
				vec3 cGradient = texture2D(gradient, vec2(w, 1.0 - w)).rgb;
				
				vColor = cGradient;
			}
		}
	#endif

	#if defined num_shadowmaps && num_shadowmaps > 0

		const float sm_near = 0.1;
		const float sm_far = 10000.0;

		for(int i = 0; i < num_shadowmaps; i++)
		{
			vec3 viewPos = (uShadowWorldView[i] * vec4(position, 1.0)).xyz;
			float distanceToLight = abs(viewPos.z);
			
			vec4 projPos = uShadowProj[i] * uShadowWorldView[i] * vec4(position, 1);
			vec3 nc = projPos.xyz / projPos.w;
			
			float u = nc.x * 0.5 + 0.5;
			float v = nc.y * 0.5 + 0.5;

			vec2 sampleStep = vec2(1.0 / (2.0*1024.0), 1.0 / (2.0*1024.0)) * 1.5;
			vec2 sampleLocations[9];

			sampleLocations[0] = vec2(0.0, 0.0);
			sampleLocations[1] = sampleStep;
			sampleLocations[2] = -sampleStep;
			sampleLocations[3] = vec2(sampleStep.x, -sampleStep.y);
			sampleLocations[4] = vec2(-sampleStep.x, sampleStep.y);
			sampleLocations[5] = vec2(0.0, sampleStep.y);
			sampleLocations[6] = vec2(0.0, -sampleStep.y);
			sampleLocations[7] = vec2(sampleStep.x, 0.0);
			sampleLocations[8] = vec2(-sampleStep.x, 0.0);

			float visibleSamples = 0.0;
			float numSamples = 0.0;

			float bias = vRadius * 2.0;

			for(int j = 0; j < 9; j++)
			{
				vec4 depthMapValue = texture2D(uShadowMap[i], vec2(u, v) + sampleLocations[j]);

				float linearDepthFromSM = depthMapValue.x + bias;
				float linearDepthFromViewer = distanceToLight;

				if(linearDepthFromSM > linearDepthFromViewer)
				{
					visibleSamples += 1.0;
				}

				numSamples += 1.0;
			}

			float visibility = visibleSamples / numSamples;

			if(u < 0.0 || u > 1.0 || v < 0.0 || v > 1.0 || nc.x < -1.0 || nc.x > 1.0 || nc.y < -1.0 || nc.y > 1.0 || nc.z < -1.0 || nc.z > 1.0)
			{
				//vColor = vec3(0.0, 0.0, 0.2);
			}
			else
			{
				vColor = vColor * visibility + vColor * uShadowColor * (1.0 - visibility);
			}
		}

	#endif
}`,ee.fragment=Q`

#if defined USE_LOGDEPTHBUF_EXT || defined paraboloid_point_shape
	#extension GL_EXT_frag_depth : enable
#endif

precision highp float;
precision highp int;

`+c.ShaderChunk.common+"\n"+c.ShaderChunk.logdepthbuf_pars_fragment+Q`

uniform mat4 viewMatrix;
uniform mat4 uViewInv;
uniform mat4 uProjInv;
uniform vec3 cameraPosition;

uniform mat4 projectionMatrix;
uniform float uOpacity;

uniform float blendHardness;
uniform float blendDepthSupplement;
uniform float fov;
uniform float uSpacing;
uniform float near;
uniform float far;
uniform float uPCIndex;
uniform float uScreenWidth;
uniform float uScreenHeight;

varying vec3 vColor;
varying float vLogDepth;
varying vec3 vViewPosition;
varying float vRadius;
varying float vPointSize;
varying vec3 vPosition;

void main()
{
	vec3 color = vColor;
	float depth = gl_FragCoord.z;

	#if defined circle_point_shape || defined paraboloid_point_shape
		float u = (2.0 * gl_PointCoord.x) - 1.0;
		float v = (2.0 * gl_PointCoord.y) - 1.0;
	#endif
	
	#if defined circle_point_shape
		float cc = (u*u) + (v*v);
		if(cc > 1.0)
		{
			discard;
		}
	#endif

	#if defined color_type_point_index
		gl_FragColor = vec4(color, uPCIndex / 255.0);
	#else
		gl_FragColor = vec4(color, uOpacity);
	#endif

	#if defined paraboloid_point_shape
		float wi = -( u*u + v*v);
		vec4 pos = vec4(vViewPosition, 1.0);
		pos.z += wi * vRadius;
		float linearDepth = -pos.z;
		pos = projectionMatrix * pos;
		pos = pos / pos.w;
		float expDepth = pos.z;
		depth = (pos.z + 1.0) / 2.0;

		gl_FragDepthEXT = depth;
		
		#if defined color_type_depth
			color.r = linearDepth;
			color.g = expDepth;
		#endif
	#endif
	
	`+c.ShaderChunk.logdepthbuf_fragment+Q`

	#if defined weighted_splats
		float distance = 2.0 * length(gl_PointCoord.xy - 0.5);
		float weight = max(0.0, 1.0 - distance);
		weight = pow(weight, 1.5);

		gl_FragColor.a = weight;
		gl_FragColor.xyz = gl_FragColor.xyz * weight;
	#endif
}`;class te extends c.RawShaderMaterial{constructor(e={}){super(),this.visibleNodesTexture=$.generateDataTexture(2048,1,new c.Color(16777215)),this.visibleNodesTexture.minFilter=c.NearestFilter,this.visibleNodesTexture.magFilter=c.NearestFilter;var t=function(e,t){return void 0!==e?e:t},i=t(e.size,1),r=t(e.minSize,2),n=t(e.maxSize,50),o=t(e.treeType,ge.OCTREE);this._pointSizeType=ce.FIXED,this._shape=fe.SQUARE,this._pointColorType=me.RGB,this._useClipBox=!1,this._weighted=!1,this._gradient=J.SPECTRAL,this._treeType=o,this._useEDL=!1,this._snapEnabled=!1,this._numSnapshots=0,this._defaultIntensityRangeChanged=!1,this._defaultElevationRangeChanged=!1,this._pointSelectionType=ve.BRIGHTNESS,this.clipBoxes=[],this.clipPolygons=[],this.gradientTexture=te.generateGradientTexture(this._gradient),this.lights=!1,this.fog=!1,this.defines=new Map,this.attributes={position:{type:"fv",value:[]},color:{type:"fv",value:[]},normal:{type:"fv",value:[]},intensity:{type:"f",value:[]},classification:{type:"f",value:[]},returnNumber:{type:"f",value:[]},numberOfReturns:{type:"f",value:[]},pointSourceID:{type:"f",value:[]},indices:{type:"fv",value:[]}},this.uniforms={level:{type:"f",value:0},vnStart:{type:"f",value:0},spacing:{type:"f",value:1},blendHardness:{type:"f",value:2},blendDepthSupplement:{type:"f",value:0},fov:{type:"f",value:1},screenWidth:{type:"f",value:1},screenHeight:{type:"f",value:1},near:{type:"f",value:.1},far:{type:"f",value:1},uColor:{type:"c",value:new c.Color(16777215)},uOpacity:{type:"f",value:1},size:{type:"f",value:i},minSize:{type:"f",value:r},maxSize:{type:"f",value:n},octreeSize:{type:"f",value:0},bbSize:{type:"fv",value:[0,0,0]},elevationRange:{type:"2fv",value:[0,0]},clipBoxCount:{type:"f",value:0},clipPolygonCount:{type:"i",value:0},clipBoxes:{type:"Matrix4fv",value:[]},clipPolygons:{type:"3fv",value:[]},clipPolygonVCount:{type:"iv",value:[]},clipPolygonVP:{type:"Matrix4fv",value:[]},visibleNodes:{type:"t",value:this.visibleNodesTexture},pcIndex:{type:"f",value:0},gradient:{type:"t",value:this.gradientTexture},classificationLUT:{type:"t",value:this.classificationTexture},uHQDepthMap:{type:"t",value:null},toModel:{type:"Matrix4f",value:[]},diffuse:{type:"fv",value:[1,1,1]},transition:{type:"f",value:.5},intensityRange:{type:"fv",value:[0,65e3]},intensityGamma:{type:"f",value:1},intensityContrast:{type:"f",value:0},intensityBrightness:{type:"f",value:0},rgbGamma:{type:"f",value:1},rgbContrast:{type:"f",value:0},rgbBrightness:{type:"f",value:0},wRGB:{type:"f",value:.5},wIntensity:{type:"f",value:0},wElevation:{type:"f",value:0},wClassification:{type:"f",value:0},wReturnNumber:{type:"f",value:0},wSourceID:{type:"f",value:0},useOrthographicCamera:{type:"b",value:!1},clipTask:{type:"i",value:1},clipMethod:{type:"i",value:1},uSnapshot:{type:"tv",value:[]},uSnapshotDepth:{type:"tv",value:[]},uSnapView:{type:"Matrix4fv",value:[]},uSnapProj:{type:"Matrix4fv",value:[]},uSnapProjInv:{type:"Matrix4fv",value:[]},uSnapViewInv:{type:"Matrix4fv",value:[]},uShadowColor:{type:"3fv",value:[0,0,0]},uFilterReturnNumberRange:{type:"fv",value:[0,7]},uFilterNumberOfReturnsRange:{type:"fv",value:[0,7]},uFilterGPSTimeClipRange:{type:"fv",value:[0,7]},hiddenClassifications:{type:"fv",value:[]},hiddenPointSourceIDs:{type:"fv",value:[]},selectedPointSourceID:{type:"f",value:-1},selectedPointSourceIDColor:{type:"3fv",value:new c.Color(.1,.61,.78)}},this.classification=he.DEFAULT,this.defaultAttributeValues.normal=[0,0,0],this.defaultAttributeValues.classification=[0,0,0],this.defaultAttributeValues.indices=[0,0,0,0];var s=this.getDefines();this.vertexShader=s+ee.vertex,this.fragmentShader=s+ee.fragment,this.vertexColors=c.VertexColors}setDefine(e,t){null!=t?this.defines.get(e)!==t&&(this.defines.set(e,t),this.updateShaderSource()):this.removeDefine(e)}removeDefine(e){this.defines.delete(e)}updateShaderSource(){var e=this.getDefines();this.vertexShader=e+ee.vertex,this.fragmentShader=e+ee.fragment,1===this.opacity?(this.blending=c.NoBlending,this.transparent=!1,this.depthTest=!0,this.depthWrite=!0,this.depthFunc=c.LessEqualDepth):this.opacity<1&&!this.useEDL&&(this.blending=c.AdditiveBlending,this.transparent=!0,this.depthTest=!1,this.depthWrite=!0,this.depthFunc=c.AlwaysDepth),this.weighted&&(this.blending=c.AdditiveBlending,this.transparent=!0,this.depthTest=!0,this.depthWrite=!1),this.needsUpdate=!0}onBeforeCompile(e,t){if(t.capabilities.logarithmicDepthBuffer){var i="#define USE_LOGDEPTHBUF\n#define USE_LOGDEPTHBUF_EXT\n#define EPSILON 1e-6\n";e.fragmentShader=i+e.fragmentShader,e.vertexShader=i+e.vertexShader}}getDefines(){var e=[];for(var[t,i]of(this.pointSizeType===ce.FIXED?e.push("#define fixed_point_size"):this.pointSizeType===ce.ATTENUATED?e.push("#define attenuated_point_size"):this.pointSizeType===ce.ADAPTIVE&&e.push("#define adaptive_point_size"),this.shape===fe.SQUARE?e.push("#define square_point_shape"):this.shape===fe.CIRCLE?e.push("#define circle_point_shape"):this.shape===fe.PARABOLOID&&e.push("#define paraboloid_point_shape"),this._useEDL&&e.push("#define use_edl"),this._snapEnabled&&e.push("#define snap_enabled"),this._pointColorType===me.RGB?e.push("#define color_type_rgb"):this._pointColorType===me.COLOR?e.push("#define color_type_color"):this._pointColorType===me.DEPTH?e.push("#define color_type_depth"):this._pointColorType===me.HEIGHT?e.push("#define color_type_height"):this._pointColorType===me.INTENSITY?e.push("#define color_type_intensity"):this._pointColorType===me.INTENSITY_GRADIENT?e.push("#define color_type_intensity_gradient"):this._pointColorType===me.LOD?e.push("#define color_type_lod"):this._pointColorType===me.POINT_INDEX?e.push("#define color_type_point_index"):this._pointColorType===me.CLASSIFICATION?e.push("#define color_type_classification"):this._pointColorType===me.RETURN_NUMBER?e.push("#define color_type_return_number"):this._pointColorType===me.SOURCE?e.push("#define color_type_source"):this._pointColorType===me.NORMAL?e.push("#define color_type_normal"):this._pointColorType===me.PHONG?e.push("#define color_type_phong"):this._pointColorType===me.RGB_HEIGHT?e.push("#define color_type_rgb_height"):this._pointColorType===me.COMPOSITE&&e.push("#define color_type_composite"),this._treeType===ge.OCTREE?e.push("#define tree_type_octree"):this._treeType===ge.KDTREE&&e.push("#define tree_type_kdtree"),this.weighted&&e.push("#define weighted_splats"),this.hiddenClassifications.length&&e.push(`#define num_hiddenclassifications ${this.hiddenClassifications.length}`),this.hiddenPointSourceIDs.length&&e.push(`#define num_hiddenpointsourceids ${this.hiddenPointSourceIDs.length}`),this.pointSelectionType===ve.COLOR&&e.push("#define selection_type_color"),this.defines))e.push(i);return e.join("\n")}setClipBoxes(e){if(e){var t=this.clipBoxes.length!==e.length&&(0===e.length||0===this.clipBoxes.length);this.uniforms.clipBoxCount.value=this.clipBoxes.length,this.clipBoxes=e,t&&this.updateShaderSource(),this.uniforms.clipBoxes.value=new Float32Array(16*this.clipBoxes.length);for(var i=0;i<this.clipBoxes.length;i++){var r=e[i];this.uniforms.clipBoxes.value.set(r.inverse.elements,16*i)}for(i=0;i<this.uniforms.clipBoxes.value.length;i++)Number.isNaN(this.uniforms.clipBoxes.value[i])&&(this.uniforms.clipBoxes.value[i]=1/0)}}setClipPolygons(e,t){e&&(this.clipPolygons=e,this.clipPolygons.length!==e.length&&this.updateShaderSource())}get gradient(){return this._gradient}set gradient(e){this._gradient!==e&&(this._gradient=e,this.gradientTexture=te.generateGradientTexture(this._gradient),this.uniforms.gradient.value=this.gradientTexture)}get useOrthographicCamera(){return this.uniforms.useOrthographicCamera.value}set useOrthographicCamera(e){this.uniforms.useOrthographicCamera.value!==e&&(this.uniforms.useOrthographicCamera.value=e)}get classification(){return this._classification}set classification(e){var t={};for(var i of Object.keys(e))t[i]=e[i].clone();var r=!1;if(void 0===this._classification)r=!1;else for(var i of(r=Object.keys(t).length===Object.keys(this._classification).length,Object.keys(t)))r=(r=r&&void 0!==this._classification[i])&&t[i].equals(this._classification[i]);r||(this._classification=t,this.recomputeClassification())}recomputeClassification(){this.classificationTexture=te.generateClassificationTexture(this._classification),this.uniforms.classificationLUT.value=this.classificationTexture,this.dispatchEvent({type:"material_property_changed",target:this})}get hiddenClassifications(){return this.uniforms.hiddenClassifications.value}set hiddenClassifications(e){e=this.getDistinctFV(e),JSON.stringify(e)!==JSON.stringify(this.uniforms.hiddenClassifications.value)&&(this.uniforms.hiddenClassifications.value=e,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this}))}get hiddenPointSourceIDs(){return this.uniforms.hiddenPointSourceIDs.value}set hiddenPointSourceIDs(e){e=this.getDistinctFV(e),JSON.stringify(e)!==JSON.stringify(this.uniforms.hiddenPointSourceIDs.value)&&(this.uniforms.hiddenPointSourceIDs.value=e,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this}))}getDistinctFV(e){return[...new Set(e)].sort()}get selectedPointSourceID(){return this.uniforms.selectedPointSourceID.value}set selectedPointSourceID(e){e!==this.uniforms.selectedPointSourceID.value&&(this.uniforms.selectedPointSourceID.value=e||-1,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this}))}get selectedPointSourceIDColor(){return this.uniforms.selectedPointSourceIDColor.value}set selectedPointSourceIDColor(e){e!==this.uniforms.selectedPointSourceIDColor.value&&(this.uniforms.selectedPointSourceIDColor.value=e,this.updateShaderSource(),this.dispatchEvent({type:"material_property_changed",target:this}))}get numSnapshots(){return this._numSnapshots}set numSnapshots(e){this._numSnapshots=e}get snapEnabled(){return this._snapEnabled}set snapEnabled(e){this._snapEnabled!==e&&(this._snapEnabled=e,this.updateShaderSource())}get spacing(){return this.uniforms.spacing.value}set spacing(e){this.uniforms.spacing.value!==e&&(this.uniforms.spacing.value=e)}get useClipBox(){return this._useClipBox}set useClipBox(e){this._useClipBox!==e&&(this._useClipBox=e,this.updateShaderSource())}get clipTask(){return this.uniforms.clipTask.value}set clipTask(e){this.uniforms.clipTask.value=e}get clipMethod(){return this.uniforms.clipMethod.value}set clipMethod(e){this.uniforms.clipMethod.value=e}get weighted(){return this._weighted}set weighted(e){this._weighted!==e&&(this._weighted=e,this.updateShaderSource())}get fov(){return this.uniforms.fov.value}set fov(e){this.uniforms.fov.value!==e&&(this.uniforms.fov.value=e,this.updateShaderSource())}get screenWidth(){return this.uniforms.screenWidth.value}set screenWidth(e){this.uniforms.screenWidth.value!==e&&(this.uniforms.screenWidth.value=e,this.updateShaderSource())}get screenHeight(){return this.uniforms.screenHeight.value}set screenHeight(e){this.uniforms.screenHeight.value!==e&&(this.uniforms.screenHeight.value=e,this.updateShaderSource())}get near(){return this.uniforms.near.value}set near(e){this.uniforms.near.value!==e&&(this.uniforms.near.value=e)}get far(){return this.uniforms.far.value}set far(e){this.uniforms.far.value!==e&&(this.uniforms.far.value=e)}get opacity(){return this.uniforms.uOpacity.value}set opacity(e){this.uniforms&&this.uniforms.uOpacity&&this.uniforms.uOpacity.value!==e&&(this.uniforms.uOpacity.value=e,this.updateShaderSource(),this.dispatchEvent({type:"opacity_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get pointColorType(){return this._pointColorType}set pointColorType(e){this._pointColorType!==e&&(this._pointColorType=e,this.updateShaderSource(),this.dispatchEvent({type:"point_color_type_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get pointSizeType(){return this._pointSizeType}set pointSizeType(e){this._pointSizeType!==e&&(this._pointSizeType=e,this.updateShaderSource(),this.dispatchEvent({type:"point_size_type_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get useEDL(){return this._useEDL}set useEDL(e){this._useEDL!==e&&(this._useEDL=e,this.updateShaderSource())}get color(){return this.uniforms.uColor.value}set color(e){this.uniforms.uColor.value.equals(e)||(this.uniforms.uColor.value.copy(e),this.dispatchEvent({type:"color_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get shape(){return this._shape}set shape(e){this._shape!==e&&(this._shape=e,this.updateShaderSource(),this.dispatchEvent({type:"point_shape_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get treeType(){return this._treeType}set treeType(e){this._treeType!==e&&(this._treeType=e,this.updateShaderSource())}get bbSize(){return this.uniforms.bbSize.value}set bbSize(e){this.uniforms.bbSize.value=e}get size(){return this.uniforms.size.value}set size(e){this.uniforms.size.value!==e&&(this.uniforms.size.value=e,this.dispatchEvent({type:"point_size_changed",target:this}),this.dispatchEvent({type:"material_property_changed",target:this}))}get elevationRange(){return this.uniforms.elevationRange.value}set elevationRange(e){(this.uniforms.elevationRange.value[0]!==e[0]||this.uniforms.elevationRange.value[1]!==e[1])&&(this.uniforms.elevationRange.value=e,this._defaultElevationRangeChanged=!0,this.dispatchEvent({type:"material_property_changed",target:this}))}get heightMin(){return this.uniforms.elevationRange.value[0]}set heightMin(e){this.elevationRange=[e,this.elevationRange[1]]}get heightMax(){return this.uniforms.elevationRange.value[1]}set heightMax(e){this.elevationRange=[this.elevationRange[0],e]}get transition(){return this.uniforms.transition.value}set transition(e){this.uniforms.transition.value=e}get intensityRange(){return this.uniforms.intensityRange.value}set intensityRange(e){e instanceof Array&&2===e.length&&(e[0]===this.uniforms.intensityRange.value[0]&&e[1]===this.uniforms.intensityRange.value[1]||(this.uniforms.intensityRange.value=e,this._defaultIntensityRangeChanged=!0,this.dispatchEvent({type:"material_property_changed",target:this})))}get intensityGamma(){return this.uniforms.intensityGamma.value}set intensityGamma(e){this.uniforms.intensityGamma.value!==e&&(this.uniforms.intensityGamma.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get intensityContrast(){return this.uniforms.intensityContrast.value}set intensityContrast(e){this.uniforms.intensityContrast.value!==e&&(this.uniforms.intensityContrast.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get intensityBrightness(){return this.uniforms.intensityBrightness.value}set intensityBrightness(e){this.uniforms.intensityBrightness.value!==e&&(this.uniforms.intensityBrightness.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get rgbGamma(){return this.uniforms.rgbGamma.value}set rgbGamma(e){this.uniforms.rgbGamma.value!==e&&(this.uniforms.rgbGamma.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get rgbContrast(){return this.uniforms.rgbContrast.value}set rgbContrast(e){this.uniforms.rgbContrast.value!==e&&(this.uniforms.rgbContrast.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get rgbBrightness(){return this.uniforms.rgbBrightness.value}set rgbBrightness(e){this.uniforms.rgbBrightness.value!==e&&(this.uniforms.rgbBrightness.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightRGB(){return this.uniforms.wRGB.value}set weightRGB(e){this.uniforms.wRGB.value!==e&&(this.uniforms.wRGB.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightIntensity(){return this.uniforms.wIntensity.value}set weightIntensity(e){this.uniforms.wIntensity.value!==e&&(this.uniforms.wIntensity.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightElevation(){return this.uniforms.wElevation.value}set weightElevation(e){this.uniforms.wElevation.value!==e&&(this.uniforms.wElevation.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightClassification(){return this.uniforms.wClassification.value}set weightClassification(e){this.uniforms.wClassification.value!==e&&(this.uniforms.wClassification.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightReturnNumber(){return this.uniforms.wReturnNumber.value}set weightReturnNumber(e){this.uniforms.wReturnNumber.value!==e&&(this.uniforms.wReturnNumber.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}get weightSourceID(){return this.uniforms.wSourceID.value}set weightSourceID(e){this.uniforms.wSourceID.value!==e&&(this.uniforms.wSourceID.value=e,this.dispatchEvent({type:"material_property_changed",target:this}))}static generateGradientTexture(e){var t=64,i=document.createElement("canvas");i.width=t,i.height=t;var r=i.getContext("2d");r.rect(0,0,t,t);for(var n=r.createLinearGradient(0,0,t,t),o=0;o<e.length;o++){var s=e[o];n.addColorStop(s[0],"#"+s[1].getHexString())}r.fillStyle=n,r.fill();var a=new c.CanvasTexture(i);return a.needsUpdate=!0,a.minFilter=c.LinearFilter,a}static generateClassificationTexture(e){for(var t=new Uint8Array(262144),i=0;i<256;i++)for(var r=0;r<256;r++){var n,o=i+256*r;n=e[i]?e[i]:e[i%32]?e[i%32]:e.DEFAULT,t[4*o+0]=255*n.x,t[4*o+1]=255*n.y,t[4*o+2]=255*n.z,t[4*o+3]=255*n.w}var s=new c.DataTexture(t,256,256,c.RGBAFormat);return s.magFilter=c.NearestFilter,s.needsUpdate=!0,s}disableEvents(){void 0===this._hiddenListeners&&(this._hiddenListeners=this._listeners,this._listeners={})}enableEvents(){this._listeners=this._hiddenListeners,this._hiddenListeners=void 0}copyFrom(e){for(var t of this.uniforms)this.uniforms[t].value=e.uniforms[t].value}}class ie extends S{constructor(){super(),this.children={},this.sceneNode=null,this.octree=null}getNumPoints(){return this.geometryNode.numPoints}isLoaded(){return!0}isTreeNode(){return!0}isGeometryNode(){return!1}getLevel(){return this.geometryNode.level}getBoundingSphere(){return this.geometryNode.boundingSphere}getBoundingBox(){return this.geometryNode.boundingBox}getChildren(){for(var e=[],t=0;t<8;t++)this.children[t]&&e.push(this.children[t]);return e}getPointsInBox(e){if(!this.sceneNode)return null;for(var t=this.geometryNode.buffer,i=t.offset("position"),r=t.stride,n=new DataView(t.data),o=(new c.Matrix4).getInverse(e.matrixWorld),s=(new c.Matrix4).multiplyMatrices(o,this.sceneNode.matrixWorld),a=[],u=new c.Vector4,l=0;l<t.numElements;l++){var h=n.getFloat32(l*r+i+0,!0),d=n.getFloat32(l*r+i+4,!0),p=n.getFloat32(l*r+i+8,!0);u.set(h,d,p,1),u.applyMatrix4(s),-.5<u.x&&u.x<.5&&-.5<u.y&&u.y<.5&&-.5<u.z&&u.z<.5&&(u.set(h,d,p,1).applyMatrix4(this.sceneNode.matrixWorld),a.push(new c.Vector3(u.x,u.y,u.z)))}return a}get name(){return this.geometryNode.name}}class re extends T{constructor(e,t){super(),this.pointBudget=1/0,this.pcoGeometry=e,this.boundingBox=this.pcoGeometry.boundingBox,this.boundingSphere=this.boundingBox.getBoundingSphere(new c.Sphere),this.material=t||new te,this.visiblePointsTarget=2e6,this.minimumNodePixelSize=150,this.level=0,this.position.copy(e.offset),this.updateMatrix(),this.showBoundingBox=!1,this.boundingBoxNodes=[],this.loadQueue=[],this.visibleBounds=new c.Box3,this.visibleNodes=[],this.visibleGeometry=[],this.generateDEM=!1,this.profileRequests=[],this.name="",this.tempVector3=new c.Vector3;var i=[this.pcoGeometry.tightBoundingBox,this.getBoundingBoxWorld()].find((e=>void 0!==e));this.updateMatrixWorld(!0);var r=(i=$.computeTransformedBoundingBox(i,this.matrixWorld)).min.z,n=i.max.z;this.material.heightMin=r,this.material.heightMax=n,this.projection=e.projection,this.root=this.pcoGeometry.root}setName(e){this.name!==e&&(this.name=e,this.dispatchEvent({type:"name_changed",name:e,pointcloud:this}))}getName(){return this.name}toTreeNode(e,t){var i=new ie,r=new c.Points(e.geometry,this.material);for(var n in r.name=e.name,r.position.copy(e.boundingBox.min),r.frustumCulled=!0,r.onBeforeRender=(t,r,n,o,s,a)=>{if(s.program){if(t.getContext().useProgram(s.program.program),s.program.getUniforms().map.level){var u=e.getLevel();s.uniforms.level.value=u,s.program.getUniforms().map.level.setValue(t.getContext(),u)}if(this.visibleNodeTextureOffsets&&s.program.getUniforms().map.vnStart){var l=this.visibleNodeTextureOffsets.get(i);s.uniforms.vnStart.value=l,s.program.getUniforms().map.vnStart.setValue(t.getContext(),l)}if(s.program.getUniforms().map.pcIndex){var h=i.pcIndex?i.pcIndex:this.visibleNodes.indexOf(i);s.uniforms.pcIndex.value=h,s.program.getUniforms().map.pcIndex.setValue(t.getContext(),h)}}},i.geometryNode=e,i.sceneNode=r,i.pointcloud=this,i.children={},e.children)i.children[n]=e.children[n];if(t){var o=parseInt(e.name[e.name.length-1]);t.sceneNode.add(r),t.children[o]=i}else this.root=i,this.add(r);return e.oneTimeDisposeHandlers.push((function(){var r=parseInt(e.name[e.name.length-1]);t.sceneNode.remove(i.sceneNode),t.children[r]=e})),i}updateVisibleBounds(){for(var e=[],t=0;t<this.visibleNodes.length;t++){for(var i=this.visibleNodes[t],r=!0,n=0;n<i.children.length;n++){var o=i.children[n];o instanceof ie?r=r&&!o.sceneNode.visible:o instanceof G&&(r=!0)}r&&e.push(i)}for(this.visibleBounds.min=new c.Vector3(1/0,1/0,1/0),this.visibleBounds.max=new c.Vector3(-1/0,-1/0,-1/0),t=0;t<e.length;t++)i=e[t],this.visibleBounds.expandByPoint(i.getBoundingBox().min),this.visibleBounds.expandByPoint(i.getBoundingBox().max)}updateMaterial(e,t,i,r){e.fov=i.fov*(Math.PI/180),e.screenWidth=r.domElement.clientWidth,e.screenHeight=r.domElement.clientHeight,e.spacing=this.pcoGeometry.spacing*Math.max(this.scale.x,this.scale.y,this.scale.z),e.near=i.near,e.far=i.far,e.uniforms.octreeSize.value=this.pcoGeometry.boundingBox.getSize(new c.Vector3).x}computeVisibilityTextureData(e,t){p.measureTimings&&performance.mark("computeVisibilityTextureData-start");var i=new Uint8Array(4*e.length),r=new Map;(e=e.slice()).sort((function(e,t){var i=e.geometryNode.name,r=t.geometryNode.name;return i.length!==r.length?i.length-r.length:i<r?-1:i>r?1:0}));for(var n=new c.Vector3,o=(e,t)=>{n.subVectors(t.center,e.origin);var i=n.dot(e.direction),r=n.dot(n)-i*i,o=t.radius*t.radius;if(r>o)return null;var s=i+Math.sqrt(o-r);return s<0?null:s},s=new Map,a=new Map,u=0;u<e.length;u++){var l=e[u];r.set(l,u);for(var h=[],d=0;d<8;d++)(f=l.children[d])&&f.constructor===ie&&e.includes(f,u)&&h.push(f);for(l.geometryNode.estimatedSpacing,i[4*u+0]=0,i[4*u+1]=0,i[4*u+2]=0,i[4*u+3]=l.getLevel(),d=0;d<h.length;d++){var f=h[d],m=parseInt(f.geometryNode.name.substr(-1));if(i[4*u+0]+=Math.pow(2,m),0===d){var g=e.indexOf(f,u);i[4*u+1]=g-u>>8,i[4*u+2]=(g-u)%256}}var v=l.getBoundingBox().clone().getBoundingSphere(new c.Sphere);v.applyMatrix4(l.sceneNode.matrixWorld),v.applyMatrix4(t.matrixWorldInverse);var y=o(new c.Ray(t.position,t.getWorldDirection(this.tempVector3)),v),x=v.center.distanceTo(t.position)+v.radius;if(null===y&&(y=x),y=Math.max(y,x),s.has(l.getLevel())){var b=s.get(l.getLevel()),w=Math.max(b,y);s.set(l.getLevel(),w)}else s.set(l.getLevel(),y);if(!l.geometryNode.hasChildren){var S={distance:y,i:u};a.set(l,S)}}for(var[l,S]of a){var T=l.getLevel();if(y=S.distance,u=S.i,!(T<4))for(var[_,A]of s)y<1.2*A&&(i[4*u+3]=_)}return p.measureTimings&&(performance.mark("computeVisibilityTextureData-end"),performance.measure("render.computeVisibilityTextureData","computeVisibilityTextureData-start","computeVisibilityTextureData-end")),{data:i,offsets:r}}nodeIntersectsProfile(e,t){for(var i=e.boundingBox.clone().applyMatrix4(this.matrixWorld).getBoundingSphere(new c.Sphere),r=!1,n=0;n<t.points.length-1;n++){var o=new c.Vector3(t.points[n+0].x,t.points[n+0].y,i.center.z),s=new c.Vector3(t.points[n+1].x,t.points[n+1].y,i.center.z),a=new c.Line3(o,s).closestPointToPoint(i.center,!0).distanceTo(i.center);r=r||a<i.radius+t.width}return r}nodesOnRay(e,t){for(var i=[],r=t.clone(),n=0;n<e.length;n++){var o=e[n],s=o.getBoundingSphere(new c.Sphere).clone().applyMatrix4(this.matrixWorld);r.intersectsSphere(s)&&i.push(o)}return i}updateMatrixWorld(e){!0===this.matrixAutoUpdate&&this.updateMatrix(),!0!==this.matrixWorldNeedsUpdate&&!0!==e||(this.parent?this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0)}hideDescendants(e){for(var t=[],i=0;i<e.children.length;i++)(r=e.children[i]).visible&&t.push(r);for(;t.length>0;)for((e=t.shift()).visible=!1,i=0;i<e.children.length;i++){var r;(r=e.children[i]).visible&&t.push(r)}}moveToOrigin(){this.position.set(0,0,0),this.updateMatrixWorld(!0);var e=this.boundingBox,t=this.matrixWorld,i=$.computeTransformedBoundingBox(e,t);this.position.set(0,0,0).sub(i.getCenter(new c.Vector3))}moveToGroundPlane(){this.updateMatrixWorld(!0);var e=this.boundingBox,t=this.matrixWorld,i=$.computeTransformedBoundingBox(e,t);this.position.y+=-i.min.y}getBoundingBoxWorld(){this.updateMatrixWorld(!0);var e=this.boundingBox,t=this.matrixWorld;return $.computeTransformedBoundingBox(e,t)}getPointsInProfile(e,t,i){for(var r={segments:[],boundingBox:new c.Box3,projectedBoundingBox:new c.Box2},n=0;n<e.points.length-1;n++){var o=e.points[n],s=e.points[n+1],a=this.getProfile(o,s,e.width,t),u={start:o,end:s,points:a,project:null};r.segments.push(u),r.boundingBox.expandByPoint(a.boundingBox.min),r.boundingBox.expandByPoint(a.boundingBox.max)}var l=new c.Vector3;for(n=0;n<r.segments.length;n++){var h=function(e,t,i,r){var n=e,o=t,s=i,a=r,u=new c.Vector3(1,0,0),l=(new c.Vector3).subVectors(o,n);l.y=0,l.normalize();var h=Math.acos(u.dot(l));return l.z>0&&(h=-h),function(e){var t=(new c.Matrix4).makeTranslation(-n.x,-a.min.y,-n.z),i=(new c.Matrix4).makeRotationY(-h),r=(new c.Matrix4).makeTranslation(s.x,0,0),o=e.clone();return o.applyMatrix4(t),o.applyMatrix4(i),o.applyMatrix4(r),o}}(o=(u=r.segments[n]).start,s=u.end,l.clone(),r.boundingBox.clone());u.project=h,l.x+=new c.Vector3(o.x,0,o.z).distanceTo(new c.Vector3(s.x,0,s.z)),l.y+=s.y-o.y}return r.projectedBoundingBox.min.x=0,r.projectedBoundingBox.min.y=r.boundingBox.min.y,r.projectedBoundingBox.max.x=l.x,r.projectedBoundingBox.max.y=r.boundingBox.max.y,r}getProfile(e,t,i,r,n){}getVisibleExtent(){return this.visibleBounds.applyMatrix4(this.matrixWorld)}pick(e,t,i,r={}){var n=e.renderer,o=e.pRenderer;performance.mark("pick-start");var s=(e,t)=>void 0!==e?e:t,a=s(r.pickWindowSize,17),u=(s(r.pickOutsideClipRegion,!1),n.getSize(new c.Vector3)),l=Math.ceil(s(r.width,u.width)),h=Math.ceil(s(r.height,u.height)),d=s(r.pointSizeType,this.material.pointSizeType),p=s(r.pointSize,this.material.size),f=this.nodesOnRay(this.visibleNodes,i);if(0===f.length)return null;if(!this.pickState){var m=new c.Scene,g=new te;g.pointColorType=me.POINT_INDEX;var v=new c.WebGLRenderTarget(1,1,{minFilter:c.LinearFilter,magFilter:c.NearestFilter,format:c.RGBAFormat});this.pickState={renderTarget:v,material:g,scene:m}}var y=this.pickState,x=y.material;x.pointSizeType=d,x.shape=this.material.shape,x.size=p,x.uniforms.minSize.value=this.material.uniforms.minSize.value,x.uniforms.maxSize.value=this.material.uniforms.maxSize.value,x.classification=this.material.classification,r.pickClipped?(x.clipBoxes=this.material.clipBoxes,this.material.clipTask===de.HIGHLIGHT?x.clipTask=de.NONE:x.clipTask=this.material.clipTask):x.clipBoxes=[],this.updateMaterial(x,f,t,n),y.renderTarget.setSize(l,h);var b=new c.Vector2(r.x,r.y),w=n.getContext();w.enable(w.SCISSOR_TEST),w.scissor(parseInt(b.x-(a-1)/2),parseInt(b.y-(a-1)/2),parseInt(a),parseInt(a)),n.state.buffers.depth.setTest(x.depthTest),n.state.buffers.depth.setMask(x.depthWrite),n.state.setBlending(c.NoBlending),n.setRenderTarget(y.renderTarget),w.clearColor(0,0,0,0),n.clearTarget(y.renderTarget,!0,!0,!0);var S=this.material;this.material=x,o.renderOctree(this,f,t,y.renderTarget),this.material=S;var T=(e,t,i)=>Math.min(Math.max(t,e),i),_=parseInt(T(b.x-(a-1)/2,0,l)),A=parseInt(T(b.y-(a-1)/2,0,h)),E=parseInt(Math.min(_+a,l)-_),B=parseInt(Math.min(A+a,h)-A),N=new Uint8Array(E*B*4);w.readPixels(_,A,a,a,w.RGBA,w.UNSIGNED_BYTE,N),n.setRenderTarget(null),n.resetGLState(),n.setScissorTest(!1),w.disable(w.SCISSOR_TEST);for(var I=N,C=new Uint32Array(N.buffer),P=(Number.MAX_VALUE,[]),R=0;R<a;R++)for(var M=0;M<a;M++){var L=R+M*a,D=Math.pow(R-(a-1)/2,2)+Math.pow(M-(a-1)/2,2),O=I[4*L+3];I[4*L+3]=0;var z=C[L];if((0!==O||0!==z)&&void 0!==O&&void 0!==z){var U={pIndex:z,pcIndex:O,distanceToCenter:D};r.all?P.push(U):P.length>0?D<P[0].distanceToCenter&&(P[0]=U):P.push(U)}}for(var U of P){var F={};if(!f[U.pcIndex])return null;var V=f[U.pcIndex],G=V.sceneNode,H=V.geometryNode.geometry;for(var k in H.attributes){var W=H.attributes[k];if("position"===k){_=W.array[3*U.pIndex+0],A=W.array[3*U.pIndex+1];var Y=W.array[3*U.pIndex+2],j=new c.Vector3(_,A,Y);j.applyMatrix4(G.matrixWorld),F[k]=j}}U.point=F}return performance.mark("pick-end"),performance.measure("pick","pick-start","pick-end"),r.all?P.map((e=>e.point)):0===P.length?null:P[0].point}*getFittedBoxGen(e){var t=new c.Box3,i=(new c.Matrix4).getInverse(e.matrixWorld);for(var r of this.visibleNodes)if(r.sceneNode){for(var n=r.geometryNode.buffer,o=n.offset("position"),s=n.stride,a=new DataView(n.data),u=(new c.Matrix4).multiplyMatrices(i,r.sceneNode.matrixWorld),l=new c.Vector4,h=0;h<n.numElements;h++){var d=a.getFloat32(h*s+o+0,!0),p=a.getFloat32(h*s+o+4,!0),f=a.getFloat32(h*s+o+8,!0);l.set(d,p,f,1),l.applyMatrix4(u),-.5<l.x&&l.x<.5&&-.5<l.y&&l.y<.5&&-.5<l.z&&l.z<.5&&t.expandByPoint(l)}yield}var m=t.getCenter(new c.Vector3).applyMatrix4(e.matrixWorld),g=new c.Object3D;g.position.copy(m),g.scale.copy(e.scale),g.rotation.copy(e.rotation);var v=(new c.Vector3).subVectors(t.max,t.min);g.scale.multiply(v),yield g}getFittedBox(e,t=1/0){var i=new c.Box3,r=(new c.Matrix4).getInverse(e.matrixWorld);for(var n of this.visibleNodes)if(n.sceneNode&&!(n.getLevel()>t))for(var o=n.geometryNode.buffer,s=o.offset("position"),a=o.stride,u=new DataView(o.data),l=(new c.Matrix4).multiplyMatrices(r,n.sceneNode.matrixWorld),h=new c.Vector4,d=0;d<o.numElements;d++){var p=u.getFloat32(d*a+s+0,!0),f=u.getFloat32(d*a+s+4,!0),m=u.getFloat32(d*a+s+8,!0);h.set(p,f,m,1),h.applyMatrix4(l),-.5<h.x&&h.x<.5&&-.5<h.y&&h.y<.5&&-.5<h.z&&h.z<.5&&i.expandByPoint(h)}var g=i.getCenter(new c.Vector3).applyMatrix4(e.matrixWorld),v=new c.Object3D;v.position.copy(g),v.scale.copy(e.scale),v.rotation.copy(e.rotation);var y=(new c.Vector3).subVectors(i.max,i.min);return v.scale.multiply(y),v}get progress(){return this.visibleNodes.length/this.visibleGeometry.length}find(e){var t=null;for(var i of e)t="r"===i?this.root:t.children[i];return t}}class ne extends S{constructor(){super(),this.left=null,this.right=null,this.sceneNode=null,this.kdtree=null}getNumPoints(){return this.geometryNode.numPoints}isLoaded(){return!0}isTreeNode(){return!0}isGeometryNode(){return!1}getLevel(){return this.geometryNode.level}getBoundingSphere(){return this.geometryNode.boundingSphere}getBoundingBox(){return this.geometryNode.boundingBox}toTreeNode(e){var t=null;if(this.left===e?t=this.left:this.right===e&&(t=this.right),t.loaded){var i=new ne,r=c.PointCloud(t.geometry,this.kdtree.material);r.visible=!1,i.kdtree=this.kdtree,i.geometryNode=t,i.sceneNode=r,i.parent=this,i.left=this.geometryNode.left,i.right=this.geometryNode.right}}getChildren(){var e=[];return this.left&&e.push(this.left),this.right&&e.push(this.right),e}}class oe extends T{constructor(e){super(),this.root=null,e.root?this.root=e.root:e.addEventListener("hierarchy_loaded",(()=>{this.root=e.root})),this.visiblePointsTarget=2e6,this.minimumNodePixelSize=150,this.position.sub(e.offset),this.updateMatrix(),this.numVisibleNodes=0,this.numVisiblePoints=0,this.boundingBoxNodes=[],this.loadQueue=[],this.visibleNodes=[],this.pcoGeometry=e,this.boundingBox=this.pcoGeometry.boundingBox,this.boundingSphere=this.pcoGeometry.boundingSphere,this.material=new te({vertexColors:c.VertexColors,size:.05,treeType:ge.KDTREE}),this.material.sizeType=ce.ATTENUATED,this.material.size=.05,this.profileRequests=[],this.name=""}getBoundingBoxWorld(){this.updateMatrixWorld(!0);var e=this.boundingBox,t=this.matrixWorld;return $.computeTransformedBoundingBox(e,t)}setName(e){this.name!==e&&(this.name=e,this.dispatchEvent({type:"name_changed",name:e,pointcloud:this}))}getName(){return this.name}getLevel(){return this.level}toTreeNode(e,t){var i=new ne,r=new c.Points(e.geometry,this.material);return r.frustumCulled=!0,r.onBeforeRender=(t,r,n,o,s,a)=>{if(s.program){if(t.getContext().useProgram(s.program.program),s.program.getUniforms().map.level){var u=e.getLevel();s.uniforms.level.value=u,s.program.getUniforms().map.level.setValue(t.getContext(),u)}if(this.visibleNodeTextureOffsets&&s.program.getUniforms().map.vnStart){var l=this.visibleNodeTextureOffsets.get(i);s.uniforms.vnStart.value=l,s.program.getUniforms().map.vnStart.setValue(t.getContext(),l)}if(s.program.getUniforms().map.pcIndex){var h=i.pcIndex?i.pcIndex:this.visibleNodes.indexOf(i);s.uniforms.pcIndex.value=h,s.program.getUniforms().map.pcIndex.setValue(t.getContext(),h)}}},i.geometryNode=e,i.sceneNode=r,i.pointcloud=this,i.left=e.left,i.right=e.right,t?(t.sceneNode.add(r),t.left===e?t.left=i:t.right===e&&(t.right=i)):(this.root=i,this.add(r)),e.oneTimeDisposeHandlers.push((function(){t.sceneNode.remove(i.sceneNode),t.left===i?t.left=e:t.right===i&&(t.right=e)})),i}updateMaterial(e,t,i,r){e.fov=i.fov*(Math.PI/180),e.screenWidth=r.domElement.clientWidth,e.screenHeight=r.domElement.clientHeight,e.spacing=this.pcoGeometry.spacing,e.near=i.near,e.far=i.far,this.maxLevel>e.levels&&(e.levels=this.maxLevel+2);var n=this.boundingBox.getSize(new c.Vector3);e.bbSize=[n.x,n.y,n.z]}updateVisibleBounds(){}hideDescendants(e){for(var t=[],i=0;i<e.children.length;i++)(r=e.children[i]).visible&&t.push(r);for(;t.length>0;){var r;for((r=t.shift()).visible=!1,r.boundingBoxNode&&(r.boundingBoxNode.visible=!1),i=0;i<r.children.length;i++){var n=r.children[i];n.visible&&t.push(n)}}}updateMatrixWorld(e){!0===this.matrixAutoUpdate&&this.updateMatrix(),!0!==this.matrixWorldNeedsUpdate&&!0!==e||(void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0)}nodesOnRay(e,t){for(var i=[],r=t.clone(),n=0;n<e.length;n++){var o=e[n],s=o.getBoundingSphere(new c.Sphere).clone().applyMatrix4(o.sceneNode.matrixWorld);r.intersectsSphere(s)&&i.push(o)}return i}pick(e,t,i,r={}){var n=e.renderer,o=e.pRenderer;performance.mark("pick-start");var s=(e,t)=>void 0!==e?e:t,a=s(r.pickWindowSize,17),u=(s(r.pickOutsideClipRegion,!1),n.getSize(new c.Vector3)),l=Math.ceil(s(r.width,u.width)),h=Math.ceil(s(r.height,u.height)),d=s(r.pointSizeType,this.material.pointSizeType),p=s(r.pointSize,this.material.size),f=this.nodesOnRay(this.visibleNodes,i);if(0===f.length)return null;if(!this.pickState){var m=new c.Scene,g=new te;g.pointColorType=me.POINT_INDEX;var v=new c.WebGLRenderTarget(1,1,{minFilter:c.LinearFilter,magFilter:c.NearestFilter,format:c.RGBAFormat});this.pickState={renderTarget:v,material:g,scene:m}}var y=this.pickState,x=y.material;x.pointSizeType=d,x.shape=this.material.shape,x.size=p,x.uniforms.minSize.value=this.material.uniforms.minSize.value,x.uniforms.maxSize.value=this.material.uniforms.maxSize.value,x.classification=this.material.classification,r.pickClipped?(x.clipBoxes=this.material.clipBoxes,this.material.clipTask===de.HIGHLIGHT?x.clipTask=de.NONE:x.clipTask=this.material.clipTask):x.clipBoxes=[],this.updateMaterial(x,f,t,n),y.renderTarget.setSize(l,h);var b=new c.Vector2(r.x,r.y),w=n.getContext();w.enable(w.SCISSOR_TEST),w.scissor(parseInt(b.x-(a-1)/2),parseInt(b.y-(a-1)/2),parseInt(a),parseInt(a)),n.state.buffers.depth.setTest(x.depthTest),n.state.buffers.depth.setMask(x.depthWrite),n.state.setBlending(c.NoBlending),n.clearTarget(y.renderTarget,!0,!0,!0),n.setRenderTarget(y.renderTarget),w.clearColor(0,0,0,0),n.clearTarget(y.renderTarget,!0,!0,!0);var S=this.material;this.material=x,o.renderOctree(this,f,t,y.renderTarget),this.material=S;var T=(e,t,i)=>Math.min(Math.max(t,e),i),_=parseInt(T(b.x-(a-1)/2,0,l)),A=parseInt(T(b.y-(a-1)/2,0,h)),E=parseInt(Math.min(_+a,l)-_),B=parseInt(Math.min(A+a,h)-A),N=new Uint8Array(E*B*4);w.readPixels(_,A,a,a,w.RGBA,w.UNSIGNED_BYTE,N),n.setRenderTarget(null),n.resetGLState(),n.setScissorTest(!1),w.disable(w.SCISSOR_TEST);for(var I=N,C=new Uint32Array(N.buffer),P=(Number.MAX_VALUE,[]),R=0;R<a;R++)for(var M=0;M<a;M++){var L=R+M*a,D=Math.pow(R-(a-1)/2,2)+Math.pow(M-(a-1)/2,2),O=I[4*L+3];I[4*L+3]=0;var z=C[L];if((0!==O||0!==z)&&void 0!==O&&void 0!==z){var U={pIndex:z,pcIndex:O,distanceToCenter:D};r.all?P.push(U):P.length>0?D<P[0].distanceToCenter&&(P[0]=U):P.push(U)}}for(var U of P){var F={};if(!f[U.pcIndex])return null;var V=f[U.pcIndex],G=V.sceneNode,H=V.geometryNode.geometry;for(var k in H.attributes){var W=H.attributes[k];if("position"===k){_=W.array[3*U.pIndex+0],A=W.array[3*U.pIndex+1];var Y=W.array[3*U.pIndex+2],j=new c.Vector3(_,A,Y);j.applyMatrix4(G.matrixWorld),F[k]=j}}U.point=F}return performance.mark("pick-end"),performance.measure("pick","pick-start","pick-end"),r.all?P.map((e=>e.point)):0===P.length?null:P[0].point}computeVisibilityTextureData(e){p.measureTimings&&performance.mark("computeVisibilityTextureData-start");var t=new Uint8Array(3*e.length),i=new Map;(e=e.slice()).sort((function(e,t){var i=e.geometryNode.level,r=t.geometryNode.level,n=e.geometryNode.number,o=t.geometryNode.number;return i!==r?i-r:n<o?-1:n>o?1:0}));for(var r=[],n=0;n<e.length;n++)r.push(e[n].geometryNode.number);for(n=0;n<e.length;n++){var o=e[n];i.set(o,n);var s=0,a=0,u=0;o.geometryNode.left&&r.indexOf(o.geometryNode.left.number)>0&&(s+=1,a=r.indexOf(o.geometryNode.left.number)-n),o.geometryNode.right&&r.indexOf(o.geometryNode.right.number)>0&&(s+=2,a=0===a?r.indexOf(o.geometryNode.right.number)-n:a),"X"===o.geometryNode.split?u=1:"Y"===o.geometryNode.split?u=2:"Z"===o.geometryNode.split&&(u=4),t[3*n+0]=s,t[3*n+1]=a,t[3*n+2]=u}return p.measureTimings&&(performance.mark("computeVisibilityTextureData-end"),performance.measure("render.computeVisibilityTextureData","computeVisibilityTextureData-start","computeVisibilityTextureData-end")),{data:t,offsets:i}}get progress(){return this.pcoGeometry.root?p.numNodesLoading>0?0:1:0}}class se{constructor(){this.left=null,this.right=null,this.boundingBox=null,this.number=null,this.pcoGeometry=null,this.loaded=!1,this.numPoints=0,this.level=0,this.children=[],this.oneTimeDisposeHandlers=[]}isGeometryNode(){return!0}isTreeNode(){return!1}isLoaded(){return this.loaded}getBoundingSphere(){return this.boundingSphere}getBoundingBox(){return this.boundingBox}getChildren(){var e=[];return this.left&&e.push(this.left),this.right&&e.push(this.right),e}getLevel(){return this.level}load(){if(!(this.loaded||this.loading||p.numNodesLoading>=p.maxNodesLoading)){this.loading=!0,p.numNodesLoading++;var e=this,t=this.pcoGeometry.url+"?node="+this.number,i=B.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",t,!0),i.responseType="arraybuffer",i.onload=function(){try{for(var t=i.response,r=new DataView(t),n=t.byteLength/17,o=new ArrayBuffer(28*n),s=(new DataView(o),y.POSITION_CARTESIAN,y.RGBA_PACKED,y.INTENSITY,y.CLASSIFICATION,new Float32Array(3*n)),a=new Uint8Array(4*n),u=new Float32Array(n),l=new Uint8Array(n),h=new ArrayBuffer(4*n),d=new Uint32Array(h),f=new c.Box3,m=0;m<n;m++){var g=r.getFloat32(17*m+0,!0)+e.boundingBox.min.x,v=r.getFloat32(17*m+4,!0)+e.boundingBox.min.y,x=r.getFloat32(17*m+8,!0)+e.boundingBox.min.z,b=r.getUint8(17*m+12,!0),w=r.getUint8(17*m+13,!0),S=r.getUint8(17*m+14,!0),T=r.getUint8(17*m+15,!0),_=r.getUint8(17*m+16,!0);f.expandByPoint(new c.Vector3(g,v,x)),s[3*m+0]=g,s[3*m+1]=v,s[3*m+2]=x,a[4*m+0]=b,a[4*m+1]=w,a[4*m+2]=S,a[4*m+3]=255,u[m]=T,l[m]=_,d[m]=m}var A=new c.BufferGeometry;A.setAttribute("position",new c.BufferAttribute(s,3)),A.setAttribute("color",new c.BufferAttribute(a,4,!0)),A.setAttribute("intensity",new c.BufferAttribute(u,1)),A.setAttribute("classification",new c.BufferAttribute(l,1));var E=new c.BufferAttribute(new Uint8Array(h),4,!0);A.setAttribute("indices",E),e.geometry=A,e.numPoints=n,e.loaded=!0,e.loading=!1,p.numNodesLoading--}catch(e){console.error("Potree: Exception thrown parsing points.",e),p.numNodesLoading--}},i.onerror=function(){p.numNodesLoading--,console.log("Potree: Failed to load file, "+i.status+", file: "+t)},i.send(null)}}dispose(){if(this.geometry&&null!=this.parent){this.geometry.dispose(),this.geometry=null,this.loaded=!1;for(var e=0;e<this.oneTimeDisposeHandlers.length;e++)(0,this.oneTimeDisposeHandlers[e])();this.oneTimeDisposeHandlers=[]}}getNumPoints(){return this.numPoints}}class ae extends c.EventDispatcher{constructor(){super(),this.numPoints=0,this.version=0,this.boundingBox=null,this.numNodes=0,this.name=null,this.provider=null,this.url=null,this.root=null,this.levels=0,this._spacing=null,this.pointAttributes=new x(["POSITION_CARTESIAN","COLOR_PACKED"])}static load(e,t){var i=B.createXMLHttpRequest();i.overrideMimeType("text/plain"),i.open("GET",e+"?info",!0),i.onreadystatechange=function(){try{if(4===i.readyState&&200===i.status){var r=JSON.parse(i.responseText),n=new ae;n.url=e,n.name=r.Name,n.provider=r.Provider,n.numNodes=r.Nodes,n.numPoints=r.Points,n.version=r.Version,n.boundingBox=new c.Box3((new c.Vector3).fromArray(r.BoundingBox.slice(0,3)),(new c.Vector3).fromArray(r.BoundingBox.slice(3,6))),r.Spacing&&(n.spacing=r.Spacing);var o=n.boundingBox.min.clone().multiplyScalar(-1);n.boundingBox.min.add(o),n.boundingBox.max.add(o),n.offset=o;var s=new c.Vector3;n.boundingBox.getCenter(s);var a=n.boundingBox.getSize(new c.Vector3).length()/2;n.boundingSphere=new c.Sphere(s,a),n.loadHierarchy(),t(n)}else 4===i.readyState&&t(null)}catch(e){console.error(e.message),t(null)}},i.send(null)}loadHierarchy(){var e=this.url+"?tree",t=B.createXMLHttpRequest();t.overrideMimeType("text/plain"),t.open("GET",e,!0),t.responseType="arraybuffer",t.onreadystatechange=()=>{if(4===t.readyState&&200===t.status){for(var e=t.response,i=e.byteLength/3,r=new DataView(e),n=[],o=null,s=0,a=0;a<i;a++){var u=r.getUint8(3*a+0,!0),l=(1&u)>0,h=(2&u)>0,d=null;(4&u)>0?d="X":(8&u)>0&&(d="Y"),(16&u)>0&&(d="Z");var p=new se;if(p.hasLeft=l,p.hasRight=h,p.split=d,p.isLeaf=!l&&!h,p.number=a,p.left=null,p.right=null,p.pcoGeometry=this,p.level=n.length,s=Math.max(s,p.level),n.length>0){var f=n[n.length-1];p.boundingBox=f.boundingBox.clone();var m=f.boundingBox.getSize(new c.Vector3);if(f.hasLeft&&!f.left){f.left=p,f.children.push(p),"X"===f.split?p.boundingBox.max.x=p.boundingBox.min.x+m.x/2:"Y"===f.split?p.boundingBox.max.y=p.boundingBox.min.y+m.y/2:"Z"===f.split&&(p.boundingBox.max.z=p.boundingBox.min.z+m.z/2);var g=new c.Vector3;p.boundingBox.getCenter(g);var v=p.boundingBox.getSize(new c.Vector3).length()/2;p.boundingSphere=new c.Sphere(g,v)}else f.right=p,f.children.push(p),"X"===f.split?p.boundingBox.min.x=p.boundingBox.min.x+m.x/2:"Y"===f.split?p.boundingBox.min.y=p.boundingBox.min.y+m.y/2:"Z"===f.split&&(p.boundingBox.min.z=p.boundingBox.min.z+m.z/2),g=new c.Vector3,p.boundingBox.getCenter(g),v=p.boundingBox.getSize(new c.Vector3).length()/2,p.boundingSphere=new c.Sphere(g,v)}else(o=p).boundingBox=this.boundingBox.clone(),g=new c.Vector3,o.boundingBox.getCenter(g),v=o.boundingBox.getSize(new c.Vector3).length()/2,o.boundingSphere=new c.Sphere(g,v);var y=p.boundingBox.getSize(new c.Vector3);if(p.spacing=(y.x+y.y+y.z)/3/75,p.estimatedSpacing=p.spacing,n.push(p),p.isLeaf)for(var x=!1;!x&&n.length>0;){n.pop();var b=n[n.length-1];x=n.length>0&&b.hasRight&&null==b.right}}this.root=o,this.levels=s,this.dispatchEvent({type:"hierarchy_loaded"})}},t.send(null)}get spacing(){return this._spacing?this._spacing:this.root?this.root.spacing:void 0}set spacing(e){this._spacing=e}}function ue(e){this.content=[],this.scoreFunction=e}ue.prototype={push:function(e){this.content.push(e),this.bubbleUp(this.content.length-1)},pop:function(){var e=this.content[0],t=this.content.pop();return this.content.length>0&&(this.content[0]=t,this.sinkDown(0)),e},remove:function(e){for(var t=this.content.length,i=0;i<t;i++)if(this.content[i]==e){var r=this.content.pop();if(i==t-1)break;this.content[i]=r,this.bubbleUp(i),this.sinkDown(i);break}},size:function(){return this.content.length},bubbleUp:function(e){for(var t=this.content[e],i=this.scoreFunction(t);e>0;){var r=Math.floor((e+1)/2)-1,n=this.content[r];if(i>=this.scoreFunction(n))break;this.content[r]=t,this.content[e]=n,e=r}},sinkDown:function(e){for(var t=this.content.length,i=this.content[e],r=this.scoreFunction(i);;){var n=2*(e+1),o=n-1,s=null;if(o<t){var a=this.content[o],u=this.scoreFunction(a);u<r&&(s=o)}if(n<t){var l=this.content[n];this.scoreFunction(l)<(null==s?r:u)&&(s=n)}if(null==s)break;this.content[e]=this.content[s],this.content[s]=i,e=s}}};var le={position:0,color:1,intensity:2,classification:3,returnNumber:4,numberOfReturns:5,pointSourceID:6,indices:7,normal:8,spacing:9},he={DEFAULT:{0:new c.Vector4(.5,.5,.5,1),1:new c.Vector4(.5,.5,.5,1),2:new c.Vector4(.63,.32,.18,1),3:new c.Vector4(0,1,0,1),4:new c.Vector4(0,.8,0,1),5:new c.Vector4(0,.6,0,1),6:new c.Vector4(1,.66,0,1),7:new c.Vector4(1,0,1,1),8:new c.Vector4(1,0,0,1),9:new c.Vector4(0,0,1,1),12:new c.Vector4(1,1,0,1),DEFAULT:new c.Vector4(.3,.6,.6,.5)}},de={NONE:0,HIGHLIGHT:1,SHOW_INSIDE:2,SHOW_OUTSIDE:3},pe={INSIDE_ANY:0,INSIDE_ALL:1},ce={FIXED:0,ATTENUATED:1,ADAPTIVE:2},fe={SQUARE:0,CIRCLE:1,PARABOLOID:2},me={RGB:0,COLOR:1,DEPTH:2,HEIGHT:3,ELEVATION:3,INTENSITY:4,INTENSITY_GRADIENT:5,LOD:6,LEVEL_OF_DETAIL:6,POINT_INDEX:7,CLASSIFICATION:8,RETURN_NUMBER:9,SOURCE:10,NORMAL:11,PHONG:12,RGB_HEIGHT:13,COMPOSITE:50},ge={OCTREE:0,KDTREE:1},ve={BRIGHTNESS:0,COLOR:1};function ye(e,t,i){var r=function(e){void 0!==t&&(e.name=t),i({type:"pointcloud_loaded",pointcloud:e})};if(0===e.indexOf("greyhound://"))C.load(e,(function(e){void 0!==e&&r(new re(e))}));else if(e.indexOf("cloud.js")>0)H.load(e,(function(e){void 0!==e&&r(new re(e))}));else if(e.indexOf("ept.json")>0)Z.load(e,(function(e){void 0!==e&&r(new re(e))}));else{if(!(e.indexOf(".vpc")>0))throw new Error("Potree: Failed to load point cloud from URL "+e);ae.load(e,(function(e){void 0!==e&&r(new oe(e))}))}}function xe(e,t,i){var r=0,n=new Map(e.map((e=>[e,0]))),o=[],s=[],a=[],u=1/0,l=we(e,t),h=l.frustums,d=l.camObjPositions,f=l.priorityQueue,m=0,g=(i.domElement.clientWidth,i.domElement.clientHeight);p.pointcloudTransformVersion||(p.pointcloudTransformVersion=new Map);for(var v=p.pointcloudTransformVersion,y=0;y<e.length;y++)if((T=e[y]).visible)if(T.updateMatrixWorld(),v.has(T)){var x=v.get(T);x.transform.equals(T.matrixWorld)||(x.number++,x.transform.copy(T.matrixWorld),T.dispatchEvent({type:"transformation_changed",target:T}))}else v.set(T,{number:0,transform:T.matrixWorld.clone()});for(;f.size()>0;){var b=f.pop(),w=b.node,S=b.parent,T=e[b.pointcloud],_=w.getBoundingBox(),A=h[b.pointcloud],E=d[b.pointcloud],B=A.intersectsBox(_),N=T.maxLevel||1/0,I=w.getLevel(),C=B;if(C=(C=C&&!(n.get(T)+w.getNumPoints()>T.pointBudget))&&I<N,w.spacing?u=Math.min(u,w.spacing):w.geometryNode&&w.geometryNode.spacing&&(u=Math.min(u,w.geometryNode.spacing)),C){r+=w.getNumPoints();var P=n.get(T);if(n.set(T,P+w.getNumPoints()),T.numVisibleNodes++,T.numVisiblePoints+=w.getNumPoints(),!w.isGeometryNode()||S&&!S.isTreeNode()||(w.isLoaded()&&m<p.maxNodesLoadGPUFrame?(w=T.toTreeNode(w,S),m++):(a.push(w),s.push(w))),w.isTreeNode()){p.lru.touch(w.geometryNode),w.sceneNode.visible=!0,w.sceneNode.material=T.material,o.push(w),T.visibleNodes.push(w),void 0===w._transformVersion&&(w._transformVersion=-1);var R=v.get(T);if(w._transformVersion!==R.number&&(w.sceneNode.updateMatrix(),w.sceneNode.matrixWorld.multiplyMatrices(T.matrixWorld,w.sceneNode.matrix),w._transformVersion=R.number),T.showBoundingBox&&!w.boundingBoxNode&&w.getBoundingBox){var M=new c.Box3Helper(w.getBoundingBox());M.matrixAutoUpdate=!1,T.boundingBoxNodes.push(M),w.boundingBoxNode=M,w.boundingBoxNode.matrix.copy(T.matrixWorld)}else T.showBoundingBox?(w.boundingBoxNode.visible=!0,w.boundingBoxNode.matrix.copy(T.matrixWorld)):!T.showBoundingBox&&w.boundingBoxNode&&(w.boundingBoxNode.visible=!1)}var L=w.getChildren();for(y=0;y<L.length;y++){var D=L[y],O=0;if(t.isPerspectiveCamera){var z=D.getBoundingSphere(new c.Sphere),U=(z.center,z.center.distanceTo(E)),F=z.radius,V=t.fov*Math.PI/180,G=F*(.5*g/(Math.tan(V/2)*U));if(G<T.minimumNodePixelSize)continue;O=G,U-F<0&&(O=Number.MAX_VALUE)}else{var H=D.getBoundingBox();U=D.getBoundingSphere(new c.Sphere).center.distanceTo(E),O=H.max.clone().sub(H.min).length()/U}f.push({pointcloud:b.pointcloud,node:D,parent:w,weight:O})}}}var k=e.filter((e=>e.generateDEM&&e.dem instanceof DEM));for(var T of k){var W=T.visibleNodes.filter((e=>e.getLevel()<=p.maxDEMLevel));T.dem.update(W)}for(y=0;y<Math.min(p.maxNodesLoading,a.length);y++)a[y].load();return{visibleNodes:o,numVisiblePoints:r,lowestSpacing:u}}function be(e,t,i){for(var r=xe(e,t,i),n=0;n<e.length;n++)e[n].updateMaterial(e[n].material,e[n].visibleNodes,t,i),e[n].updateVisibleBounds();return p.lru.freeMemory(),r}function we(e,t,i){for(var r=[],n=[],o=new ue((function(e){return 1/e.weight})),s=0;s<e.length;s++){var a=e[s];if(a.initialized()){a.numVisibleNodes=0,a.numVisiblePoints=0,a.deepestVisibleLevel=0,a.visibleNodes=[],a.visibleGeometry=[],t.updateMatrixWorld();var u=new c.Frustum,l=t.matrixWorldInverse,h=a.matrixWorld,d=t.clone();d.near=t.near,d.updateProjectionMatrix();var p=t.projectionMatrix,f=(new c.Matrix4).multiply(p).multiply(l).multiply(h);u.setFromProjectionMatrix(f),r.push(u);var m=t.matrixWorld,g=h.clone().invert(),v=(new c.Matrix4).multiply(g).multiply(m),y=(new c.Vector3).setFromMatrixPosition(v);n.push(y),a.visible&&null!==a.root&&o.push({pointcloud:s,node:a.root,weight:Number.MAX_VALUE}),a.root.isTreeNode()&&a.hideDescendants(a.root.sceneNode);for(var x=0;x<a.boundingBoxNodes.length;x++)a.boundingBoxNodes[x].visible=!1}}return{frustums:r,camObjPositions:n,priorityQueue:o}}const Se="1.2.0";class Te{constructor(){this.boundingBox=new c.Box3,this.numPoints=0,this.data={}}add(e){var t=this.numPoints,i=t+e.numPoints,r=Object.keys(this.data),n=Object.keys(e.data),o=new Set([...r,...n]);for(var s of o)if(r.includes(s)&&n.includes(s)){var a=new(0,this.data[s].constructor)(this.data[s].length+e.data[s].length);a.set(this.data[s],0),a.set(e.data[s],this.data[s].length),this.data[s]=a}else if(r.includes(s)&&!n.includes(s)){var u=this.data[s].length/this.numPoints;(l=new(0,this.data[s].constructor)(u*i)).set(this.data[s],0),this.data[s]=l}else if(!r.includes(s)&&n.includes(s)){var l;u=e.data[s].length/e.numPoints,(l=new(0,e.data[s].constructor)(u*i)).set(e.data[s],u*t),this.data[s]=l}this.numPoints=i,this.boundingBox.union(e.boundingBox)}}function _e(e,t){var i;if(t===c.RepeatWrapping)return e.REPEAT;if(t===c.ClampToEdgeWrapping)return e.CLAMP_TO_EDGE;if(t===c.MirroredRepeatWrapping)return e.MIRRORED_REPEAT;if(t===c.NearestFilter)return e.NEAREST;if(t===c.NearestMipMapNearestFilter)return e.NEAREST_MIPMAP_NEAREST;if(t===c.NearestMipMapLinearFilter)return e.NEAREST_MIPMAP_LINEAR;if(t===c.LinearFilter)return e.LINEAR;if(t===c.LinearMipMapNearestFilter)return e.LINEAR_MIPMAP_NEAREST;if(t===c.LinearMipMapLinearFilter)return e.LINEAR_MIPMAP_LINEAR;if(t===c.UnsignedByteType)return e.UNSIGNED_BYTE;if(t===c.UnsignedShort4444Type)return e.UNSIGNED_SHORT_4_4_4_4;if(t===c.UnsignedShort5551Type)return e.UNSIGNED_SHORT_5_5_5_1;if(t===c.UnsignedShort565Type)return e.UNSIGNED_SHORT_5_6_5;if(t===c.ByteType)return e.BYTE;if(t===c.ShortType)return e.SHORT;if(t===c.UnsignedShortType)return e.UNSIGNED_SHORT;if(t===c.IntType)return e.INT;if(t===c.UnsignedIntType)return e.UNSIGNED_INT;if(t===c.FloatType)return e.FLOAT;if(t===c.HalfFloatType&&null!==(i=extensions.get("OES_texture_half_float")))return i.HALF_FLOAT_OES;if(t===c.AlphaFormat)return e.ALPHA;if(t===c.RGBFormat)return e.RGB;if(t===c.RGBAFormat)return e.RGBA;if(t===c.LuminanceFormat)return e.LUMINANCE;if(t===c.LuminanceAlphaFormat)return e.LUMINANCE_ALPHA;if(t===c.DepthFormat)return e.DEPTH_COMPONENT;if(t===c.DepthStencilFormat)return e.DEPTH_STENCIL;if(t===c.AddEquation)return e.FUNC_ADD;if(t===c.SubtractEquation)return e.FUNC_SUBTRACT;if(t===c.ReverseSubtractEquation)return e.FUNC_REVERSE_SUBTRACT;if(t===c.ZeroFactor)return e.ZERO;if(t===c.OneFactor)return e.ONE;if(t===c.SrcColorFactor)return e.SRC_COLOR;if(t===c.OneMinusSrcColorFactor)return e.ONE_MINUS_SRC_COLOR;if(t===c.SrcAlphaFactor)return e.SRC_ALPHA;if(t===c.OneMinusSrcAlphaFactor)return e.ONE_MINUS_SRC_ALPHA;if(t===c.DstAlphaFactor)return e.DST_ALPHA;if(t===c.OneMinusDstAlphaFactor)return e.ONE_MINUS_DST_ALPHA;if(t===c.DstColorFactor)return e.DST_COLOR;if(t===c.OneMinusDstColorFactor)return e.ONE_MINUS_DST_COLOR;if(t===c.SrcAlphaSaturateFactor)return e.SRC_ALPHA_SATURATE;if((t===c.RGB_S3TC_DXT1_Format||t===RGBA_S3TC_DXT1_Format||t===c.RGBA_S3TC_DXT3_Format||t===RGBA_S3TC_DXT5_Format)&&null!==(i=extensions.get("WEBGL_compressed_texture_s3tc"))){if(t===c.RGB_S3TC_DXT1_Format)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===c.RGBA_S3TC_DXT1_Format)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===c.RGBA_S3TC_DXT3_Format)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===c.RGBA_S3TC_DXT5_Format)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if((t===c.RGB_PVRTC_4BPPV1_Format||t===c.RGB_PVRTC_2BPPV1_Format||t===c.RGBA_PVRTC_4BPPV1_Format||t===c.RGBA_PVRTC_2BPPV1_Format)&&null!==(i=extensions.get("WEBGL_compressed_texture_pvrtc"))){if(t===c.RGB_PVRTC_4BPPV1_Format)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===c.RGB_PVRTC_2BPPV1_Format)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===c.RGBA_PVRTC_4BPPV1_Format)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===c.RGBA_PVRTC_2BPPV1_Format)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(t===c.RGB_ETC1_Format&&null!==(i=extensions.get("WEBGL_compressed_texture_etc1")))return i.COMPRESSED_RGB_ETC1_WEBGL;if((t===c.MinEquation||t===c.MaxEquation)&&null!==(i=extensions.get("EXT_blend_minmax"))){if(t===c.MinEquation)return i.MIN_EXT;if(t===c.MaxEquation)return i.MAX_EXT}return t===UnsignedInt248Type&&null!==(i=extensions.get("WEBGL_depth_texture"))?i.UNSIGNED_INT_24_8_WEBGL:0}class Ae{constructor(e,t){this.gl=e,this.texture=t,this.id=e.createTexture(),this.target=e.TEXTURE_2D,this.version=-1,this.update(t)}update(){if(this.texture.image){var e=this.gl,t=this.texture;if(this.version!==t.version){this.target=e.TEXTURE_2D,e.bindTexture(this.target,this.id);var i,r=_e(e,t.format),n=t.image.width,o=t.image.height,s=r,a=_e(e,t.type);e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,t.flipY),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),e.pixelStorei(e.UNPACK_ALIGNMENT,t.unpackAlignment),t instanceof c.DataTexture?(i=t.image.data,e.texParameteri(this.target,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(this.target,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(this.target,e.TEXTURE_MAG_FILTER,_e(e,t.magFilter)),e.texParameteri(this.target,e.TEXTURE_MIN_FILTER,_e(e,t.minFilter)),e.texImage2D(this.target,0,r,n,o,0,s,a,i)):t instanceof c.CanvasTexture&&(i=t.image,e.texParameteri(this.target,e.TEXTURE_WRAP_S,_e(e,t.wrapS)),e.texParameteri(this.target,e.TEXTURE_WRAP_T,_e(e,t.wrapT)),e.texParameteri(this.target,e.TEXTURE_MAG_FILTER,_e(e,t.magFilter)),e.texParameteri(this.target,e.TEXTURE_MIN_FILTER,_e(e,t.minFilter)),e.texImage2D(this.target,0,r,r,a,i)),e.bindTexture(this.target,null),this.version=t.version}}else this.version=this.texture.version}}class Ee{constructor(e,t,i,r){this.gl=e,this.name=t,this.vsSource=i,this.fsSource=r,this.cache=new Map,this.vs=null,this.fs=null,this.program=null,this.uniformLocations={},this.attributeLocations={},this.update(i,r)}update(e,t){this.vsSource=e,this.fsSource=t,this.linkProgram()}compileShader(e,t){var i=this.gl;if(i.shaderSource(e,t),i.compileShader(e),!i.getShaderParameter(e,i.COMPILE_STATUS)){var r=i.getShaderInfoLog(e);throw new Error("Potree: Could not compile shader "+this.name+", "+r)}}linkProgram(){var e=this.gl;if(this.uniformLocations={},this.attributeLocations={},e.useProgram(null),h=this.cache.get(`${this.vsSource}, ${this.fsSource}`))return this.program=h.program,this.vs=h.vs,this.fs=h.fs,this.attributeLocations=h.attributeLocations,void(this.uniformLocations=h.uniformLocations);for(var t of(this.vs=e.createShader(e.VERTEX_SHADER),this.fs=e.createShader(e.FRAGMENT_SHADER),this.program=e.createProgram(),Object.keys(le))){var i=le[t];e.bindAttribLocation(this.program,i,t)}this.compileShader(this.vs,this.vsSource),this.compileShader(this.fs,this.fsSource);var r=this.program;if(e.attachShader(r,this.vs),e.attachShader(r,this.fs),e.linkProgram(r),e.detachShader(r,this.vs),e.detachShader(r,this.fs),!e.getProgramParameter(r,e.LINK_STATUS)){var n=e.getProgramInfoLog(r);throw new Error("Potree: Could not link program "+this.name+", "+n)}for(var o=e.getProgramParameter(r,e.ACTIVE_ATTRIBUTES),s=0;s<o;s++){var a=e.getActiveAttrib(r,s);i=e.getAttribLocation(r,a.name),this.attributeLocations[a.name]=i}var u=e.getProgramParameter(r,e.ACTIVE_UNIFORMS);for(s=0;s<u;s++){var l=e.getActiveUniform(r,s);i=e.getUniformLocation(r,l.name),this.uniformLocations[l.name]=i}var h={program:this.program,vs:this.vs,fs:this.fs,attributeLocations:this.attributeLocations,uniformLocations:this.uniformLocations};this.cache.set(`${this.vsSource}, ${this.fsSource}`,h)}setUniformMatrix4(e,t){const i=this.gl,r=this.uniformLocations[e];if(null==r)return;let n=new Float32Array(t.elements);i.uniformMatrix4fv(r,!1,n)}setUniformMatrix4v(e,t){const i=this.gl,r=this.uniformLocations[`${e}[0]`];if(null==r)return;const n=t.forEach((e=>n.push(...e.elements))),o=new Float32Array(n);i.uniformMatrix4fv(r,!1,o)}setUniform1f(e,t){const i=this.gl,r=this.uniformLocations[e];null!=r&&i.uniform1f(r,t)}setUniform1fv(e,t){const i=this.gl,r=this.uniformLocations[`${e}[0]`];null!=r&&i.uniform1fv(r,t)}setUniformBoolean(e,t){const i=this.gl,r=this.uniformLocations[e];null!=r&&i.uniform1i(r,t)}setUniformTexture(e,t){const i=this.gl,r=this.uniformLocations[e];null!=r&&i.uniform1i(r,t)}setUniform2f(e,t){const i=this.gl,r=this.uniformLocations[e];null!=r&&i.uniform2f(r,t[0],t[1])}setUniform3f(e,t){const i=this.gl,r=this.uniformLocations[e];t instanceof c.Color&&(t=t.toArray()),null!=r&&i.uniform3f(r,t[0],t[1],t[2])}setUniform(e,t){t.constructor===c.Matrix4?this.setUniformMatrix4(e,t):t.constructor===c.Color?this.setUniform3f(e,t):"number"==typeof t?this.setUniform1f(e,t):"boolean"==typeof t?this.setUniformBoolean(e,t):t instanceof Ae?this.setUniformTexture(e,t):t instanceof Array?2===t.length?this.setUniform2f(e,t):3===t.length&&this.setUniform3f(e,t):console.error("Potree: Unhandled uniform type: ",e,t)}setUniform1i(e,t){var i=this.gl,r=this.uniformLocations[e];null!=r&&i.uniform1i(r,t)}}class Be{constructor(){this.numElements=0,this.vao=null,this.vbos=new Map}}class Ne extends c.Mesh{constructor(){super(new c.BufferGeometry,new c.MeshBasicMaterial({opacity:0,wireframe:!1,transparent:!0})),this.rotation.set(-Math.PI/2,0,0),this.frustumCulled=!0,this.pointclouds=[],this.nodeSize=30,this.pointBudget=1e10,this.nodeLoadRate=2}raycast(e,t){}setPointBudget(e){this.pointBudget=e}onBeforeRender(e,t,i,r,n,o){for(var s=0;s<this.pointclouds.length;s++)this.pointclouds[s].minimumNodePixelSize=this.nodeSize;be(this.pointclouds,i,e)}recalculateBoxGeometry(){var e=this.getBoundingBox(),t=e.getSize(new c.Vector3),i=e.getCenter(new c.Vector3),r=new c.Matrix4;r.makeTranslation(i.x,-i.z,i.y);var n=new c.BoxBufferGeometry(t.x,t.z,t.y);n.applyMatrix4(r),this.geometry=n}add(e){c.Object3D.prototype.add.call(this,e),e instanceof T&&(e.showBoundingBox=!1,e.generateDEM=!1,this.pointclouds.push(e),this.recalculateBoxGeometry())}remove(e){if(c.Object3D.prototype.remove.call(this,e),e instanceof T){var t=this.pointclouds.indexOf(e);-1!==t&&(this.pointclouds.splice(t,1),this.recalculateBoxGeometry())}}getBoundingBox(){var e=new c.Box3;this.updateMatrixWorld(!0);for(var t=0;t<this.pointclouds.length;t++){var i=this.pointclouds[t];i.updateMatrixWorld(!0);var r=i.pcoGeometry.tightBoundingBox?i.pcoGeometry.tightBoundingBox:i.boundingBox,n=$.computeTransformedBoundingBox(r,i.matrixWorld);e.union(n)}return e}estimateHeightAt(e){var t=null,i=1/0;for(var r of this.pointclouds)if(void 0!==r.root.geometryNode){var n=null,o=1/0,s=e.clone().sub(r.position);s.z=0;for(var a=new c.Ray(s,new c.Vector3(0,0,1)),u=[r.root];u.length>0;){var l=u.pop(),h=l.getBoundingBox();if(a.intersectBox(h)){var d=l.geometryNode.mean.z+r.position.z+l.geometryNode.boundingBox.min.z;for(var p of(l.geometryNode.spacing<=o&&(n=d,o=l.geometryNode.spacing),Object.keys(l.children)))l.children[p].geometryNode&&u.push(l.children[p])}}(null===t||o<i)&&(t=n,i=o)}return t}}class Ie extends Ne{constructor(){super(),this.buffers=new Map,this.shaders=new Map,this.textures=new Map,this.types=new Map}getExtensions(e){this.types.set(Float32Array,e.FLOAT),this.types.set(Uint8Array,e.UNSIGNED_BYTE),this.types.set(Uint16Array,e.UNSIGNED_SHORT);var t=e.getExtension("OES_vertex_array_object");e.createVertexArray=t.createVertexArrayOES.bind(t),e.bindVertexArray=t.bindVertexArrayOES.bind(t)}onBeforeRender(e,t,i,r,n,o){super.onBeforeRender(e,t,i,r,n,o);var s=e.getContext();void 0===s.bindVertexArray&&this.getExtensions(s);var a=this.fetchOctrees();for(var u of a.octrees){var l=u.visibleNodes;this.renderOctree(e,u,l,i)}s.activeTexture(s.TEXTURE1),s.bindTexture(s.TEXTURE_2D,null),e.state.reset()}createBuffer(e,t){var i=new Be;for(var r in i.vao=e.createVertexArray(),i.numElements=t.attributes.position.count,e.bindVertexArray(i.vao),t.attributes){var n=t.attributes[r],o=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,o),e.bufferData(e.ARRAY_BUFFER,n.array,e.STATIC_DRAW);var s=le[r],a=n.normalized,u=this.types.get(n.array.constructor);void 0!==u&&(e.vertexAttribPointer(s,n.itemSize,u,a,0,0),e.enableVertexAttribArray(s)),i.vbos.set(r,{handle:o,name:r,count:n.count,itemSize:n.itemSize,type:t.attributes.position.array.constructor,version:0})}return e.bindBuffer(e.ARRAY_BUFFER,null),e.bindVertexArray(null),i}updateBuffer(e,t){var i=this.buffers.get(t);for(var r in e.bindVertexArray(i.vao),t.attributes){var n=t.attributes[r],o=le[r],s=n.normalized,a=this.types.get(n.array.constructor),u=null;i.vbos.has(r)?(u=i.vbos.get(r).handle,i.vbos.get(r).version=n.version):(u=e.createBuffer(),i.vbos.set(r,{handle:u,name:r,count:n.count,itemSize:n.itemSize,type:t.attributes.position.array.constructor,version:n.version})),e.bindBuffer(e.ARRAY_BUFFER,u),e.bufferData(e.ARRAY_BUFFER,n.array,e.STATIC_DRAW),e.vertexAttribPointer(o,n.itemSize,a,s,0,0),e.enableVertexAttribArray(o)}e.bindBuffer(e.ARRAY_BUFFER,null),e.bindVertexArray(null)}fetchOctrees(){for(var e=[],t=[this];t.length>0;){var i=t.pop();if(i instanceof T)e.push(i);else{var r=i.children.filter((e=>e.visible));t.push(...r)}}return{octrees:e}}renderNodes(e,t,i,r,n,o){var s=e.getContext(),a=t.material,u=n.matrixWorldInverse,l=new c.Matrix4,h=new Float32Array(16);for(var d of i)if(void 0===p.debug.allowedNodes||p.debug.allowedNodes.includes(d.name)){var f=d.sceneNode.matrixWorld;if(l.multiplyMatrices(u,f),r){var m=r.offsets.get(d);o.setUniform1f("uVNStart",m)}var g,v=d.getLevel();o.setUniform("uDebug",!0===d.debug),d instanceof ie?g=0===Object.keys(d.children).length:d instanceof ne&&(g=d.geometryNode.isLeaf),o.setUniform("uIsLeafNode",g);var y=o.uniformLocations.modelMatrix;y&&(h.set(f.elements),s.uniformMatrix4fv(y,!1,h));var x=o.uniformLocations.modelViewMatrix;if(h.set(l.elements),s.uniformMatrix4fv(x,!1,h),a.clipPolygons&&a.clipPolygons.length>0){var b=[],w=[];for(var S of a.clipPolygons){u=S.viewMatrix;var T=S.projMatrix.clone().multiply(u).multiply(f);b.push(S.markers.length),w.push(T)}for(var _=[].concat(...w.map((e=>e.elements))),A=new Array(24*a.clipPolygons.length),E=0;E<a.clipPolygons.length;E++){S=a.clipPolygons[E];for(var B=0;B<S.markers.length;B++)A[24*E+(3*B+0)]=S.markers[B].position.x,A[24*E+(3*B+1)]=S.markers[B].position.y,A[24*E+(3*B+2)]=S.markers[B].position.z}var N=o.uniformLocations["uClipPolygonVCount[0]"];s.uniform1iv(N,b);var I=o.uniformLocations["uClipPolygonWVP[0]"];s.uniformMatrix4fv(I,!1,_);var C=o.uniformLocations["uClipPolygonVertices[0]"];s.uniform3fv(C,A)}o.setUniform1f("uLevel",v),o.setUniform1f("uNodeSpacing",d.geometryNode.estimatedSpacing),o.setUniform1f("uPCIndex",E);var P=d.geometryNode.geometry,R=null;if(this.buffers.has(P))for(var M in R=this.buffers.get(P),P.attributes)P.attributes[M].version>R.vbos.get(M).version&&this.updateBuffer(s,P);else R=this.createBuffer(s,P),this.buffers.set(P,R);s.bindVertexArray(R.vao),s.drawArrays(s.POINTS,0,R.numElements)}s.bindVertexArray(null)}renderOctree(e,t,i,r){var n=e.getContext(),o=t.material,s=r.matrixWorldInverse,a=r.matrixWorld,u=r.projectionMatrix,l=u.clone().invert(),h=(new c.Matrix4,null),d=0;if(o.pointSizeType===ce.ADAPTIVE||o.pointColorType===me.LOD){h=t.computeVisibilityTextureData(i,r);var p=o.visibleNodesTexture;p.image.data.set(h.data),p.needsUpdate=!0}var f=null;this.shaders.has(o)?f=this.shaders.get(o):(f=new Ee(n,"pointcloud",o.vertexShader,o.fragmentShader),this.shaders.set(o,f));var m=o.snapEnabled?o.numSnapshots:0,g=o.clipBoxes&&o.clipBoxes.length?o.clipBoxes.length:0,v=o.clipPolygons&&o.clipPolygons.length?o.clipPolygons.length:0,y=["#define num_shadowmaps"+[].length,"#define num_snapshots"+m,"#define num_clipboxes"+g,"#define num_clipspheres0","#define num_clippolygons"+v].join("\n"),x=y+"\n"+o.vertexShader,b=y+"\n"+o.fragmentShader;for(var w of(f.update(x,b),o.needsUpdate=!1,Object.keys(o.uniforms))){var S=o.uniforms[w];if("t"==S.type){if(!(O=S.value))continue;if(!this.textures.has(O)){var T=new Ae(n,O);this.textures.set(O,T)}this.textures.get(O).update()}}n.useProgram(f.program),o.opacity<1?(n.enable(n.BLEND),n.blendFunc(n.SRC_ALPHA,n.ONE),n.depthMask(!1),n.disable(n.DEPTH_TEST)):(n.disable(n.BLEND),n.depthMask(!0),n.enable(n.DEPTH_TEST)),f.setUniformMatrix4("projectionMatrix",u),f.setUniformMatrix4("viewMatrix",s),f.setUniformMatrix4("uViewInv",a),f.setUniformMatrix4("uProjInv",l);var _=o.screenWidth,A=o.screenHeight;if(f.setUniform1f("uScreenWidth",_),f.setUniform1f("uScreenHeight",A),f.setUniform1f("fov",Math.PI*r.fov/180),f.setUniform1f("near",r.near),f.setUniform1f("far",r.far),e.capabilities.logarithmicDepthBuffer&&f.setUniform("logDepthBufFC",2/(Math.log(r.far+1)/Math.LN2)),r instanceof c.OrthographicCamera?(f.setUniform("uUseOrthographicCamera",!0),f.setUniform("uOrthoWidth",r.right-r.left),f.setUniform("uOrthoHeight",r.top-r.bottom)):f.setUniform("uUseOrthographicCamera",!1),o.clipBoxes.length+o.clipPolygons.length===0?f.setUniform1i("clipTask",de.NONE):f.setUniform1i("clipTask",o.clipTask),f.setUniform1i("clipMethod",o.clipMethod),o.clipBoxes&&o.clipBoxes.length>0){var E=f.uniformLocations["clipBoxes[0]"];n.uniformMatrix4fv(E,!1,o.uniforms.clipBoxes.value)}f.setUniform1f("size",o.size),f.setUniform1f("maxSize",o.uniforms.maxSize.value),f.setUniform1f("minSize",o.uniforms.minSize.value),f.setUniform1f("uOctreeSpacing",o.spacing),f.setUniform("uOctreeSize",o.uniforms.octreeSize.value),f.setUniform3f("uColor",o.color.toArray()),f.setUniform1f("uOpacity",o.opacity),f.setUniform2f("elevationRange",o.elevationRange),f.setUniform2f("intensityRange",o.intensityRange),f.setUniform1f("intensityGamma",o.intensityGamma),f.setUniform1f("intensityContrast",o.intensityContrast),f.setUniform1f("intensityBrightness",o.intensityBrightness),f.setUniform1f("rgbGamma",o.rgbGamma),f.setUniform1f("rgbContrast",o.rgbContrast),f.setUniform1f("rgbBrightness",o.rgbBrightness),f.setUniform1f("uTransition",o.transition),f.setUniform1f("wRGB",o.weightRGB),f.setUniform1f("wIntensity",o.weightIntensity),f.setUniform1f("wElevation",o.weightElevation),f.setUniform1f("wClassification",o.weightClassification),f.setUniform1f("wReturnNumber",o.weightReturnNumber),f.setUniform1f("wSourceID",o.weightSourceID),f.setUniform1fv("hiddenClassifications",o.hiddenClassifications),f.setUniform1fv("hiddenPointSourceIDs",o.hiddenPointSourceIDs),f.setUniform1f("selectedPointSourceID",o.selectedPointSourceID),f.setUniform3f("selectedPointSourceIDColor",o.selectedPointSourceIDColor);var B=this.textures.get(o.visibleNodesTexture);f.setUniform1i("visibleNodesTexture",d),n.activeTexture(n.TEXTURE0+d),n.bindTexture(B.target,B.id),d++;var N=this.textures.get(o.gradientTexture);f.setUniform1i("gradient",d),n.activeTexture(n.TEXTURE0+d),n.bindTexture(N.target,N.id),d++;var I=this.textures.get(o.classificationTexture);if(f.setUniform1i("classificationLUT",d),n.activeTexture(n.TEXTURE0+d),n.bindTexture(I.target,I.id),d++,!0===o.snapEnabled){var C=f.uniformLocations["uSnapshot[0]"],P=f.uniformLocations["uSnapshotDepth[0]"],R=d,M=new Array(5).fill(R).map(((e,t)=>e+t)),L=new Array(5).fill(1+Math.max(...M)).map(((e,t)=>e+t));d=1+Math.max(...L),n.uniform1iv(C,M),n.uniform1iv(P,L);for(var D=0;D<5;D++){var O=o.uniforms.uSnapshot.value[D],z=o.uniforms.uSnapshotDepth.value[D];if(!O)break;var U=e.properties.get(O).__webglTexture,F=e.properties.get(z).__webglTexture,V=M[D],G=L[D];n.activeTexture(n[`TEXTURE${V}`]),n.bindTexture(n.TEXTURE_2D,U),n.activeTexture(n[`TEXTURE${G}`]),n.bindTexture(n.TEXTURE_2D,F)}var H=[].concat(...o.uniforms.uSnapView.value.map((e=>e.elements))),k=f.uniformLocations["uSnapView[0]"];n.uniformMatrix4fv(k,!1,H),H=[].concat(...o.uniforms.uSnapProj.value.map((e=>e.elements)));var W=f.uniformLocations["uSnapProj[0]"];n.uniformMatrix4fv(W,!1,H),H=[].concat(...o.uniforms.uSnapProjInv.value.map((e=>e.elements)));var Y=f.uniformLocations["uSnapProjInv[0]"];n.uniformMatrix4fv(Y,!1,H),H=[].concat(...o.uniforms.uSnapViewInv.value.map((e=>e.elements)));var j=f.uniformLocations["uSnapViewInv[0]"];n.uniformMatrix4fv(j,!1,H)}this.renderNodes(e,t,i,h,r,f),n.activeTexture(n.TEXTURE2),n.bindTexture(n.TEXTURE_2D,null),n.activeTexture(n.TEXTURE0)}}})(),module.exports=r})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,